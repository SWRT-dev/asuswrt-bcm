
	This patch brings over a few features from MirBSD:
	* -fhonour-copts
	  If this option is not given, it's warned (depending
	  on environment variables). This is to catch errors
	  of misbuilt packages which override CFLAGS themselves.
	* -Werror-maybe-reset
	  Has the effect of -Wno-error if GCC_NO_WERROR is
	  set and not '0', a no-operation otherwise. This is
	  to be able to use -Werror in "make" but prevent
	  GNU autoconf generated configure scripts from
	  freaking out.
	* Make -fno-strict-aliasing and -fno-delete-null-pointer-checks
	  the default for -O2/-Os, because they trigger gcc bugs
	  and can delete code with security implications.

	This patch was authored by Thorsten Glaser <tg@mirbsd.de>
	with copyright assignment to the FSF in effect.

--- a/gcc/c-opts.c
+++ b/gcc/c-opts.c
@@ -103,6 +103,9 @@ static size_t deferred_count;
 /* Number of deferred options scanned for -include.  */
 static size_t include_cursor;
 
+/* Check if a port honours COPTS.  */
+static int honour_copts = 0;
+
 static void set_Wimplicit (int);
 static void handle_OPT_d (const char *);
 static void set_std_cxx98 (int);
@@ -448,6 +451,14 @@ c_common_handle_option (size_t scode, co
       mesg_implicit_function_declaration = 2;
       break;
 
+    case OPT_Werror_maybe_reset:
+      {
+	char *ev = getenv ("GCC_NO_WERROR");
+	if ((ev != NULL) && (*ev != '0'))
+	  cpp_opts->warnings_are_errors = 0;
+      }
+      break;
+
     case OPT_Wformat:
       set_Wformat (value);
       break;
@@ -691,6 +702,12 @@ c_common_handle_option (size_t scode, co
       flag_exceptions = value;
       break;
 
+    case OPT_fhonour_copts:
+      if (c_language == clk_c) {
+	honour_copts++;
+      }
+      break;
+
     case OPT_fimplement_inlines:
       flag_implement_inlines = value;
       break;
@@ -1121,6 +1138,47 @@ c_common_init (void)
   /* Has to wait until now so that cpplib has its hash table.  */
   init_pragma ();
 
+  if (c_language == clk_c) {
+    char *ev = getenv ("GCC_HONOUR_COPTS");
+    int evv;
+    if (ev == NULL)
+      evv = -1;
+    else if ((*ev == '0') || (*ev == '\0'))
+      evv = 0;
+    else if (*ev == '1')
+      evv = 1;
+    else if (*ev == '2')
+      evv = 2;
+    else if (*ev == 's')
+      evv = -1;
+    else {
+      warning (0, "unknown GCC_HONOUR_COPTS value, assuming 1");
+      evv = 1; /* maybe depend this on something like MIRBSD_NATIVE?  */
+    }
+    if (evv == 1) {
+      if (honour_copts == 0) {
+	error ("someone does not honour COPTS at all in lenient mode");
+	return false;
+      } else if (honour_copts != 1) {
+	warning (0, "someone does not honour COPTS correctly, passed %d times",
+	 honour_copts);
+      }
+    } else if (evv == 2) {
+      if (honour_copts == 0) {
+	error ("someone does not honour COPTS at all in strict mode");
+	return false;
+      } else if (honour_copts != 1) {
+	error ("someone does not honour COPTS correctly, passed %d times",
+	 honour_copts);
+	return false;
+      }
+    } else if (evv == 0) {
+      if (honour_copts != 1)
+	inform ("someone does not honour COPTS correctly, passed %d times",
+	 honour_copts);
+    }
+  }
+
   return true;
 }
 
--- a/gcc/c.opt
+++ b/gcc/c.opt
@@ -185,6 +185,10 @@ Werror-implicit-function-declaration
 C ObjC RejectNegative
 Make implicit function declarations an error
 
+Werror-maybe-reset
+C ObjC C++ ObjC++
+; Documented in common.opt
+
 Wfloat-equal
 C ObjC C++ ObjC++ Var(warn_float_equal)
 Warn if testing floating point numbers for equality
@@ -541,6 +545,9 @@ C++ ObjC++
 fhonor-std
 C++ ObjC++
 
+fhonour-copts
+C ObjC C++ ObjC++ RejectNegative
+
 fhosted
 C ObjC
 Assume normal C execution environment
--- a/gcc/common.opt
+++ b/gcc/common.opt
@@ -77,6 +77,10 @@ Werror
 Common Var(warnings_are_errors)
 Treat all warnings as errors
 
+Werror-maybe-reset
+Common
+If environment variable GCC_NO_WERROR is set, act as -Wno-error
+
 Wextra
 Common
 Print extra (possibly unwanted) warnings
@@ -451,6 +455,9 @@ fguess-branch-probability
 Common Report Var(flag_guess_branch_prob)
 Enable guessing of branch probabilities
 
+fhonour-copts
+Common RejectNegative
+
 ; Nonzero means ignore `#ident' directives.  0 means handle them.
 ; Generate position-independent code for executables if possible
 ; On SVR4 targets, it also controls whether or not to emit a
--- a/gcc/opts.c
+++ b/gcc/opts.c
@@ -569,8 +569,6 @@ decode_options (unsigned int argc, const
       flag_schedule_insns_after_reload = 1;
 #endif
       flag_regmove = 1;
-      flag_strict_aliasing = 1;
-      flag_delete_null_pointer_checks = 1;
       flag_reorder_blocks = 1;
       flag_reorder_functions = 1;
       flag_tree_store_ccp = 1;
@@ -586,6 +584,9 @@ decode_options (unsigned int argc, const
 
   if (optimize >= 3)
     {
+      flag_strict_aliasing = 1;
+      flag_delete_null_pointer_checks = 1;
+
       flag_inline_functions = 1;
       flag_unswitch_loops = 1;
       flag_gcse_after_reload = 1;
@@ -759,6 +760,17 @@ common_handle_option (size_t scode, cons
       set_Wextra (value);
       break;
 
+    case OPT_Werror_maybe_reset:
+      {
+	char *ev = getenv ("GCC_NO_WERROR");
+	if ((ev != NULL) && (*ev != '0'))
+	  warnings_are_errors = 0;
+      }
+      break;
+
+    case OPT_fhonour_copts:
+      break;
+
     case OPT_Wextra:
       set_Wextra (value);
       break;
--- a/gcc/doc/cppopts.texi
+++ b/gcc/doc/cppopts.texi
@@ -166,6 +166,11 @@ in older programs.  This warning is on b
 Make all warnings into hard errors.  Source code which triggers warnings
 will be rejected.
 
+@item -Werror-maybe-reset
+@opindex Werror-maybe-reset
+Act like @samp{-Wno-error} if the @env{GCC_NO_WERROR} environment
+variable is set to anything other than 0 or empty.
+
 @item -Wsystem-headers
 @opindex Wsystem-headers
 Issue warnings for code in system headers.  These are normally unhelpful
--- a/gcc/doc/invoke.texi
+++ b/gcc/doc/invoke.texi
@@ -222,7 +222,7 @@ Objective-C and Objective-C++ Dialects}.
 -Wc++-compat -Wcast-align  -Wcast-qual  -Wchar-subscripts  -Wcomment @gol
 -Wconversion  -Wno-deprecated-declarations @gol
 -Wdisabled-optimization  -Wno-div-by-zero  -Wno-endif-labels @gol
--Werror  -Werror-implicit-function-declaration @gol
+-Werror -Werror-maybe-reset -Werror-implicit-function-declaration @gol
 -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 @gol
 -Wno-format-extra-args -Wformat-nonliteral @gol
 -Wformat-security  -Wformat-y2k @gol
@@ -3390,6 +3390,22 @@ This option is only supported for C and 
 @opindex Werror
 Make all warnings into errors.
 
+@item -Werror-maybe-reset
+@opindex Werror-maybe-reset
+Act like @samp{-Wno-error} if the @env{GCC_NO_WERROR} environment
+variable is set to anything other than 0 or empty.
+
+@item -fhonour-copts
+@opindex fhonour-copts
+If @env{GCC_HONOUR_COPTS} is set to 1, abort if this option is not
+given at least once, and warn if it is given more than once.
+If @env{GCC_HONOUR_COPTS} is set to 2, abort if this option is not
+given exactly once.
+If @env{GCC_HONOUR_COPTS} is set to 0 or unset, warn if this option
+is not given exactly once.
+The warning is quelled if @env{GCC_HONOUR_COPTS} is set to @samp{s}.
+This flag and environment variable only affect the C language.
+
 @item -Wstack-protector
 This option is only active when @option{-fstack-protector} is active.  It
 warns about functions that will not be protected against stack smashing.
@@ -4679,7 +4695,7 @@ erroneously read data to propagate withi
 Perform the optimizations of loop strength reduction and
 elimination of iteration variables.
 
-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.
+Enabled at levels @option{-O3}.
 
 @item -fthread-jumps
 @opindex fthread-jumps
@@ -4826,7 +4842,7 @@ safely dereference null pointers.  Use
 @option{-fno-delete-null-pointer-checks} to disable this optimization
 for programs which depend on that behavior.
 
-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.
+Enabled at levels @option{-O3}.
 
 @item -fexpensive-optimizations
 @opindex fexpensive-optimizations
@@ -5234,7 +5250,7 @@ node, an alias set for the node.  Nodes 
 allowed to alias.  For an example, see the C front-end function
 @code{c_get_alias_set}.
 
-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.
+Enabled at levels @option{-O3}.
 
 @item -falign-functions
 @itemx -falign-functions=@var{n}
--- a/gcc/java/jvspec.c
+++ b/gcc/java/jvspec.c
@@ -620,6 +620,7 @@ lang_specific_pre_link (void)
      class name.  Append dummy `.c' that can be stripped by set_input so %b
      is correct.  */ 
   set_input (concat (main_class_name, "main.c", NULL));
+  putenv ("GCC_HONOUR_COPTS=s"); /* XXX hack!  */
   err = do_spec (jvgenmain_spec);
   if (err == 0)
     {
