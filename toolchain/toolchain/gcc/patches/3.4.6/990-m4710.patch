diff -urbB gcc-3.4.6/gcc/config/mips/mips.h gcc/gcc/config/mips/mips.h
--- gcc-3.4.6/gcc/config/mips/mips.h	2008-06-14 20:37:27.000000000 +0400
+++ gcc/gcc/config/mips/mips.h	2008-06-14 20:51:19.000000000 +0400
@@ -171,6 +171,8 @@
 					   consts in rodata */
 #define MASK_FIX_SB1       0x01000000   /* Work around SB-1 errata.  */
 
+#define MASK_NO_4710A0     0x02000000   /* WA_BCM4710A0: Don't work-around BCM4710A0 CPU bugs */
+
 					/* Debug switches, not documented */
 #define MASK_DEBUG	0		/* unused */
 #define MASK_DEBUG_A	0		/* don't allow <label>($reg) addrs */
@@ -258,6 +260,13 @@
 
 #define TARGET_FIX_SB1		(target_flags & MASK_FIX_SB1)
 
+/* WA_BCM4710A0 */
+#if BCM4710A0
+ #define TARGET_4710A0		!(target_flags & MASK_NO_4710A0)
+#else
+ #define TARGET_4710A0 		0
+#endif
+
 /* True if we should use NewABI-style relocation operators for
    symbolic addresses.  This is never true for mips16 code,
    which has its own conventions.  */
@@ -604,6 +613,12 @@
      N_("Work around errata for early SB-1 revision 2 cores")},		\
   {"no-fix-sb1",         -MASK_FIX_SB1,					\
      N_("Don't work around errata for early SB-1 revision 2 cores")},	\
+  {"4710a0",             -MASK_NO_4710A0,                               \
+     N_("Work around BCM4710A0 hardware bugs")},                        \
+  {"no-4710a0",           MASK_NO_4710A0,                               \
+     N_("Don't work around BCM4710A0 hardware bugs")},                  \
+  {"4710a0kern",          MASK_NO_4710A0,                               \
+     N_("Don't work around BCM4710A0 hardware bugs")},                  \
   {"check-zero-division",-MASK_NO_CHECK_ZERO_DIV,			\
      N_("Trap on integer divide by zero")},				\
   {"no-check-zero-division", MASK_NO_CHECK_ZERO_DIV,			\
@@ -818,6 +833,7 @@
 /* Disable branchlikely for tx39 until compare rewrite.  They haven't
    been generated up to this point.  */
 #define ISA_HAS_BRANCHLIKELY	(!ISA_MIPS1                             \
+                                 && !TARGET_4710A0                      \
 				 && !TARGET_MIPS5500)
 
 /* ISA has the conditional move instructions introduced in mips4.  */
@@ -1109,6 +1125,7 @@
 %(subtarget_asm_optimizing_spec) \
 %(subtarget_asm_debugging_spec) \
 %{membedded-pic} \
+%{m4710a0} %{mno-4710a0:-no-m4710a0} %{m4710a0kern} \
 %{mabi=32:-32}%{mabi=n32:-n32}%{mabi=64:-64}%{mabi=n64:-64} \
 %{mabi=eabi} %{mabi=o64} %{!mabi*: %(asm_abi_default_spec)} \
 %{mgp32} %{mgp64} %{march=*} %{mxgot:-xgot} \
diff -urbB gcc-3.4.6/gcc/config.gcc gcc/gcc/config.gcc
--- gcc-3.4.6/gcc/config.gcc	2008-06-14 20:37:27.000000000 +0400
+++ gcc/gcc/config.gcc	2008-06-14 20:52:47.000000000 +0400
@@ -1684,7 +1684,7 @@
 mips-wrs-vxworks)
 	# We want vxworks.h after mips/elf.h, which unfortunately means we
 	# have to redo the tm_file list from scratch.
-	tm_file="elfos.h mips/mips.h svr4.h mips/elf.h vxworks.h mips/vxworks.h"
+	tm_file="elfos.h mips/mips.h svr4.h mips/elf.h vxworks.h mips/vxmips.h"
 	tmake_file="${tmake_file} mips/t-vxworks"
 	target_cpu_default="MASK_GAS"
 	;;
diff -urbB gcc-3.4.6/gcc/config.in gcc/gcc/config.in
--- gcc-3.4.6/gcc/config.in	2008-06-14 20:37:27.000000000 +0400
+++ gcc/gcc/config.in	2008-06-14 20:53:29.000000000 +0400
@@ -575,3 +575,6 @@
 
 /* Define as `fork' if `vfork' does not work. */
 #undef vfork
+
+/* Define to 1 for BCM4710A0 compiler workarounds */
+#undef BCM4710A0
diff -urbB gcc-3.4.6/gcc/configure.ac gcc/gcc/configure.ac
--- gcc-3.4.6/gcc/configure.ac	2005-06-01 20:32:31.000000000 +0400
+++ gcc/gcc/configure.ac	2008-06-14 20:40:38.000000000 +0400
@@ -101,6 +101,13 @@
 # Directories
 # -----------
 
+# With BCM4710A0 compiler workarounds
+AC_ARG_WITH(bcm4710a0,
+[  --with-bcm4710a0        enable BCM4710A0 compiler workarounds],
+[case "${withval}" in
+  yes) AC_DEFINE(BCM4710A0, 1, [BCM4710A0 support?]) ;;
+esac])
+
 # Specify the local prefix
 local_prefix=
 AC_ARG_WITH(local-prefix,
diff -BurbN gcc-3.2.3/gcc/config/mips/vxmips.h gcc/gcc/config/mips/vxmips.h
--- gcc-3.2.3/gcc/config/mips/vxmips.h	1970-01-01 03:00:00.000000000 +0300
+++ gcc/gcc/config/mips/vxmips.h	2004-04-01 00:46:50.000000000 +0400
@@ -0,0 +1,44 @@
+/* Definitions of target machine for GNU compiler.  VxWorks MIPS version.
+   Copyright (C) 1996,2001 Free Software Foundation, Inc.
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+
+#undef SUBTARGET_CPP_SPEC
+#define SUBTARGET_CPP_SPEC "%{!DCPU=*:			\
+  %{!mips1: %{!mips2: %{!mips3: %{!mips4:  -DCPU=MIPS32}}}}     \
+  %{mips1: -DCPU=MIPS32}                                        \
+  %{mips2: -DCPU=MIPS32}                                        \
+  %{mips3: -DCPU=MIPS64}                                        \
+  %{mips4: -DCPU=MIPS64}} -D__CPU__=CPU"
+
+#undef CPP_PREDEFINES
+#define CPP_PREDEFINES "-D__vxworks -D__mips__ -D__MIPSEB__ -Asystem(vxworks)"
+
+/* There is no OS support for this, yet.  */
+#undef MIPS_DEFAULT_GVALUE
+#define MIPS_DEFAULT_GVALUE	0
+
+/* VxWorks uses object files, not loadable images.  make linker just
+   combine objects. */
+#undef LINK_SPEC
+#define LINK_SPEC "-r"
+
+  /* Use GNU soft FP naming conventions */
+#undef INIT_SUBTARGET_OPTABS
+#define INIT_SUBTARGET_OPTABS
diff -urbB gcc-3.4.6/gcc/configure gcc/gcc/configure
--- gcc-3.4.6/gcc/configure	2005-06-01 20:32:31.000000000 +0400
+++ gcc/gcc/configure	2008-06-14 20:57:14.000000000 +0400
@@ -895,6 +895,7 @@
 Optional Packages:
   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
   --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
+  --with-bcm4710a0        enable BCM4710A0 compiler workarounds
   --with-local-prefix=DIR specifies directory to put local include
   --with-gxx-include-dir=DIR
                           specifies directory to put g++ header files
@@ -1583,6 +1584,20 @@
 # Directories
 # -----------
 
+# With BCM4710A0 compiler workarounds
+
+# Check whether --with-bcm4710a0 or --without-bcm4710a0 was given.
+if test "${with_bcm4710a0+set}" = set; then
+  withval="$with_bcm4710a0"
+  case "${withval}" in
+  yes)
+cat >>confdefs.h <<\_ACEOF
+#define BCM4710A0 1
+_ACEOF
+ ;;
+esac
+fi;
+
 # Specify the local prefix
 local_prefix=
 
