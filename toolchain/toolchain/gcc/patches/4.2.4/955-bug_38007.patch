http://gcc.gnu.org/bugzilla/show_bug.cgi?id=38007

2008-11-12  Jason Merrill  <jason@redhat.com>

	PR c++/38007
gcc/cp/
	* typeck.c (cp_build_modify_expr): Update bitfield handling.
gcc/
	* c-common.c (c_common_signed_or_unsigned_type): Remove C++
	special casing.
gcc/testsuite/
	* g++.dg/conversion/bitfield10.C: New test.
	* g++.old-deja/g++.mike/enum1.C: Expect warn about assignment.
	* g++.dg/expr/bitfield9.C: Pass -Wno-overflow.

--- gcc-4_2-branch/gcc/c-common.c	2008/11/12 22:08:01	141808
+++ gcc-4_2-branch/gcc/c-common.c	2008/11/12 22:13:26	141809
@@ -1843,7 +1843,7 @@
 
 #define TYPE_OK(node)							    \
   (TYPE_MODE (type) == TYPE_MODE (node)					    \
-   && (c_dialect_cxx () || TYPE_PRECISION (type) == TYPE_PRECISION (node)))
+   && TYPE_PRECISION (type) == TYPE_PRECISION (node))
   if (TYPE_OK (signed_char_type_node))
     return unsignedp ? unsigned_char_type_node : signed_char_type_node;
   if (TYPE_OK (integer_type_node))
@@ -1873,10 +1873,7 @@
     return unsignedp ? unsigned_intQI_type_node : intQI_type_node;
 #undef TYPE_OK
 
-  if (c_dialect_cxx ())
-    return type;
-  else
-    return build_nonstandard_integer_type (TYPE_PRECISION (type), unsignedp);
+  return build_nonstandard_integer_type (TYPE_PRECISION (type), unsignedp);
 }
 
 /* Build a bit-field integer type for the given WIDTH and UNSIGNEDP.  */
--- gcc-4_2-branch/gcc/cp/typeck.c	2008/11/12 22:08:01	141808
+++ gcc-4_2-branch/gcc/cp/typeck.c	2008/11/12 22:13:26	141809
@@ -5549,7 +5549,6 @@
   tree newrhs = rhs;
   tree lhstype = TREE_TYPE (lhs);
   tree olhstype = lhstype;
-  tree olhs = NULL_TREE;
   bool plain_assign = (modifycode == NOP_EXPR);
 
   /* Avoid duplicate error messages from operands that had errors.  */
@@ -5737,35 +5736,11 @@
 	      && C_TYPE_FIELDS_READONLY (lhstype))))
     readonly_error (lhs, "assignment", 0);
 
-  /* If storing into a structure or union member, it has probably been
-     given type `int'.  Compute the type that would go with the actual
-     amount of storage the member occupies.  */
+  /* If storing into a structure or union member, it may have been given a
+     lowered bitfield type.  We need to convert to the declared type first,
+     so retrieve it now.  */
 
-  if (TREE_CODE (lhs) == COMPONENT_REF
-      && (TREE_CODE (lhstype) == INTEGER_TYPE
-	  || TREE_CODE (lhstype) == REAL_TYPE
-	  || TREE_CODE (lhstype) == ENUMERAL_TYPE))
-    {
-      lhstype = TREE_TYPE (get_unwidened (lhs, 0));
-
-      /* If storing in a field that is in actuality a short or narrower
-	 than one, we must store in the field in its actual type.  */
-
-      if (lhstype != TREE_TYPE (lhs))
-	{
-	  /* Avoid warnings converting integral types back into enums for
-	     enum bit fields.  */
-	  if (TREE_CODE (lhstype) == INTEGER_TYPE
-	      && TREE_CODE (olhstype) == ENUMERAL_TYPE)
-	    {
-	      if (TREE_SIDE_EFFECTS (lhs))
-		lhs = stabilize_reference (lhs);
-	      olhs = lhs;
-	    }
-	  lhs = copy_node (lhs);
-	  TREE_TYPE (lhs) = lhstype;
-	}
-    }
+  olhstype = unlowered_expr_type (lhs);
 
   /* Convert new value to destination type.  */
 
@@ -5801,21 +5776,17 @@
     }
 
   if (modifycode == INIT_EXPR)
-    newrhs = convert_for_initialization (lhs, lhstype, newrhs, LOOKUP_NORMAL,
+    newrhs = convert_for_initialization (lhs, olhstype, newrhs, LOOKUP_NORMAL,
 					 "initialization", NULL_TREE, 0);
   else
+    newrhs = convert_for_assignment (olhstype, newrhs, "assignment",
+				     NULL_TREE, 0);
+
+  if (!same_type_p (lhstype, olhstype))
+    newrhs = convert_and_check (lhstype, newrhs);
+
+  if (modifycode != INIT_EXPR)
     {
-      /* Avoid warnings on enum bit fields.  */
-      if (TREE_CODE (olhstype) == ENUMERAL_TYPE
-	  && TREE_CODE (lhstype) == INTEGER_TYPE)
-	{
-	  newrhs = convert_for_assignment (olhstype, newrhs, "assignment",
-					   NULL_TREE, 0);
-	  newrhs = convert_force (lhstype, newrhs, 0);
-	}
-      else
-	newrhs = convert_for_assignment (lhstype, newrhs, "assignment",
-					 NULL_TREE, 0);
       if (TREE_CODE (newrhs) == CALL_EXPR
 	  && TYPE_NEEDS_CONSTRUCTING (lhstype))
 	newrhs = build_cplus_new (lhstype, newrhs);
@@ -5847,21 +5818,7 @@
   if (!plain_assign)
     TREE_NO_WARNING (result) = 1;
 
-  /* If we got the LHS in a different type for storing in,
-     convert the result back to the nominal type of LHS
-     so that the value we return always has the same type
-     as the LHS argument.  */
-
-  if (olhstype == TREE_TYPE (result))
-    return result;
-  if (olhs)
-    {
-      result = build2 (COMPOUND_EXPR, olhstype, result, olhs);
-      TREE_NO_WARNING (result) = 1;
-      return result;
-    }
-  return convert_for_assignment (olhstype, result, "assignment",
-				 NULL_TREE, 0);
+  return result;
 }
 
 tree
--- gcc-4_2-branch/gcc/testsuite/g++.dg/conversion/bitfield10.C	1970-01-01 03:00:00.000000000 +0300
+++ gcc-4_2-branch/gcc/testsuite/g++.dg/conversion/bitfield10.C	2009-12-05 14:46:04.000000000 +0300
@@ -0,0 +1,24 @@
+// PR c++/38007
+// We need to use the conversion function to the declared type of a bitfield,
+// not the lowered bitfield type.
+// { dg-do link }
+
+struct A
+{
+  operator unsigned int() { return 42; }
+  operator unsigned char();
+};
+
+struct B
+{
+  unsigned int b : 8;
+};
+
+int
+main ()
+{
+  A u;
+  unsigned int v = u;
+  B w;
+  w.b = u;
+}
--- gcc-4_2-branch/gcc/testsuite/g++.dg/expr/bitfield9.C	2008/11/12 22:08:01	141808
+++ gcc-4_2-branch/gcc/testsuite/g++.dg/expr/bitfield9.C	2008/11/12 22:13:26	141809
@@ -1,5 +1,6 @@
 // PR c++/32346
 // { dg-do run }
+// { dg-options "-Wno-overflow" }
 
 extern "C" void abort();
 
--- gcc-4_2-branch/gcc/testsuite/g++.old-deja/g++.mike/enum1.C	2008/11/12 22:08:01	141808
+++ gcc-4_2-branch/gcc/testsuite/g++.old-deja/g++.mike/enum1.C	2008/11/12 22:13:26	141809
@@ -8,4 +8,4 @@
   void setBTK();
 };
 
-void Type::setBTK() { kind = DTK; }
+void Type::setBTK() { kind = DTK; } // { dg-warning "truncate" }
