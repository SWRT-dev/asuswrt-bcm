EXE  = bcmmcastctl
LN   = bmc

all dynamic install: conditional_build

clean: generic_clean
	rm -f $(INSTALL_DIR)/bin$(BCM_INSTALL_SUFFIX_DIR)/$(EXE)
	rm -f $(INSTALL_DIR)/bin$(BCM_INSTALL_SUFFIX_DIR)/$(LN)

binaryonly_dist_clean: clean generic_binaryonly_dist_clean
	rm -f Makefile.fullsrc


#
# Set our CommEngine directory (by splitting the pwd into two words
# at /userspace and taking the first word only).
# Then include the common defines under CommEngine.
#
CURR_DIR := $(shell pwd)
BUILD_DIR:=$(HND_SRC)

SRCS := $(shell find . -name "bcm_mcast*.c")
OBJS := $(sort $(SRCS:.c=.o))

include $(BUILD_DIR)/make.common

ifneq ($(strip $(BUILD_MCAST_SNOOP)),)
conditional_build: generic_exe_install
	$(STRIP) $(INSTALL_DIR)/bin$(BCM_INSTALL_SUFFIX_DIR)/$(EXE)
	ln -sf $(EXE) $(INSTALL_DIR)/bin$(BCM_INSTALL_SUFFIX_DIR)/$(LN)
else
conditional_build:
	@echo "Skipping IEEE1905 (not configured)"
endif

#
# Private apps and libs are allowed to include header files from the
# private and public directories.
#
# WARNING: Do not modify this section unless you understand the
# license implications of what you are doing.
#
ALLOWED_INCLUDE_PATHS += -I$(BUILD_DIR)/userspace/public/include  \
                         -I$(BUILD_DIR)/userspace/public/include/$(OALDIR) \
                         -I$(BUILD_DIR)/userspace/private/include  \
                         -I$(BUILD_DIR)/userspace/private/include/$(OALDIR)

ALLOWED_INCLUDE_PATHS += -I$(INC_BRCMDRIVER_PUB_PATH)/$(BRCM_BOARD)  \
                         -I$(INC_BRCMDRIVER_PRIV_PATH)/$(BRCM_BOARD) \
                         -I$(INC_BRCMSHARED_PUB_PATH)/$(BRCM_BOARD)  \
                         -I$(INC_BRCMSHARED_PRIV_PATH)/$(BRCM_BOARD)

#
# Private apps and libs are allowed to link with libraries from the
# private and public directories.
#
# WARNING: Do not modify this section unless you understand the
# license implications of what you are doing.
#
ALLOWED_LIB_DIRS := /lib:/lib/private:/lib/public

# treat all warnings as errors
CUSTOM_CFLAGS += -Werror -Wfatal-errors $(CMS_COMPILE_FLAGS)

LIBS = -lbcmmcast

#
# Implicit rule will make the .c into a .o
# Implicit rule is $(CC) -c $(CPPFLAGS) $(CFLAGS)
# See Section 10.2 of Gnu Make manual
# 
ifeq ($(wildcard $(SRCBASE)/router/$(EXE)/*.c),)
$(EXE):
	-cp -f $(SRCBASE)/router/$(EXE)/prebuilt/$(EXE) $(EXE)
else
$(EXE): $(OBJS)
	$(CC) -o $@ $(OBJS) -Wl,-rpath,$(CMS_LIB_RPATH) $(CMS_LIB_PATH) $(LIBS)
endif


#
# Include the rule for making dependency files.
# The '-' in front of the second include suppresses
# error messages when make cannot find the .d files.
# It will just regenerate them.
# See Section 4.14 of Gnu Make.
#

include $(BUILD_DIR)/make.deprules

-include $(OBJS:.o=.d)
