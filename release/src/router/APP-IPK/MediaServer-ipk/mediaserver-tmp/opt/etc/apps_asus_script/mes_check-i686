#! /bin/sh
APPS_DEV=`nvram get apps_dev`
APPS_MOUNTED_PATH=`nvram get apps_mounted_path`
APPS_INSTALL_FOLDER=`nvram get apps_install_folder`
APPS_INSTALL_PATH=$APPS_MOUNTED_PATH/$APPS_INSTALL_FOLDER
APPS_PATH=${APPS_MOUNTED_PATH:9}
APPS_SERVER=`nvram get apps_ipkg_server`
is_arm_machine=`uname -m |grep arm`
is_i686_machine=`uname -m |grep i686`
IPKG_ERROR=""

#S50asuslighttpd check
if [ ! -f "$APPS_INSTALL_PATH/etc/init.d/S50asuslighttpd" ]; then
	cp -f $APPS_INSTALL_PATH/etc/asus_script/mes_* $APPS_INSTALL_PATH/tmp/
	echo "asuslighttpd_ipk is error,we must reinstall it"
	LIGHTTPD_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/asuslighttpd.control" | grep Version`
	LIGHTTPD_VER=${LIGHTTPD_VER:9}
	LIGHTTPD_VERTGZ=${LIGHTTPD_VER//./-}
	ipkg remove asuslighttpd -force-depends
		IPKG_ERROR="asuslighttpd"
	 if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/asuslighttpd_"$LIGHTTPD_VER"_i686.ipk -O /opt/tmp/asuslighttpd_"$LIGHTTPD_VER"_i686.ipk
		ipkg install /opt/tmp/asuslighttpd_"$LIGHTTPD_VER"_i686.ipk
		rm -f /opt/tmp/asuslighttpd_"$LIGHTTPD_VER"_i686.ipk
		mv -f $APPS_INSTALL_PATH/tmp/mes_* $APPS_INSTALL_PATH/etc/asus_script/
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			wget -c -q -t 2 -T 30 http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT/asuslighttpd_"$LIGHTTPD_VERTGZ"_mipsel.tgz -O /opt/tmp/asuslighttpd_"$LIGHTTPD_VER"_mipsel.ipk
		else
			wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/mipsel/stable/asuslighttpd_"$LIGHTTPD_VER"_mipsel.ipk -O /opt/tmp/asuslighttpd_"$LIGHTTPD_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/asuslighttpd_"$LIGHTTPD_VER"_mipsel.ipk
		rm -f /opt/tmp/asuslighttpd_"$LIGHTTPD_VER"_mipsel.ipk
		mv -f $APPS_INSTALL_PATH/tmp/mes_* $APPS_INSTALL_PATH/etc/asus_script/
	fi
fi
#echo "check MS start"
#if [ -f "$APPS_INSTALL_PATH/bin/mt-daapd" ] && [ -f "$APPS_INSTALL_PATH/bin/minidlna" ] && [ -f "$APPS_INSTALL_PATH/bin/avahi-daemon" ] && [ -f "$APPS_INSTALL_PATH/lib/libid3tag_ms.so.0.3.0" ] && [ -f "$APPS_INSTALL_PATH/etc/apps_asus_script/mes_check_general" ]; then
#	echo "MS_ipk is OK"
#else
#	echo "MS_ipk is error,we must reinstall it"
#	MS_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/mediaserver.control" | grep Version`
#	MS_VER=${MS_VER:9}
#	MS_VERTGZ=${MS_VER//./-}
#	ipkg remove mediaserver
#	if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
#		wget -c -q -t 2 -T 30 http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT/mediaserver_"$MS_VERTGZ"_mipsel.tgz -O /opt/tmp/mediaserver_"$MS_VER"_mipsel.ipk
#	else
#		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/mipsel/stable/mediaserver_"$MS_VER"_mipsel.ipk -O /opt/tmp/mediaserver_"$MS_VER"_mipsel.ipk
#	fi
#	IPKG_ERROR="mediaserver"
#	ipkg install /opt/tmp/mediaserver_"$MS_VER"_mipsel.ipk
#	rm -f /opt/tmp/mediaserver_"$MS_VER"_mipsel.ipk
#fi
#echo "check MS end"
##############check libs
#avahi check
AVAHI_COMMON=`ls $APPS_INSTALL_PATH/lib/ |grep libavahi-common.so`
AVAHI_COMMON_EXIST=0
if [ -n "$AVAHI_COMMON" ]; then
	AVAHI_COMMON_EXIST=1
fi
AVAHI_CORE=`ls $APPS_INSTALL_PATH/lib/ |grep libavahi-core.so`
AVAHI_CORE_EXIST=0
if [ -n "$AVAHI_CORE" ]; then
	AVAHI_CORE_EXIST=1
fi
DAEMON=`ls $APPS_INSTALL_PATH/lib/ |grep libdaemon.so`
DAEMON_EXIST=0
if [ -n "$DAEMON" ]; then
	DAEMON_EXIST=1
fi
if [ $AVAHI_COMMON_EXIST -eq 0 ] || [ $AVAHI_CORE_EXIST -eq 0 ] || [ $DAEMON_EXIST -eq 0 ]; then
	echo "avahi_IPKG is error,we must reinstall it"
	AVAHI_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/asusavahi.control" | grep Version`
	AVAHI_VER=${AVAHI_VER:9}
	AVAHI_VERTGZ=${AVAHI_VER//./-}
	IPKG_ERROR="asusavahi"
	if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/asusavahi_"$AVAHI_VERTGZ"_i686.ipk -O /opt/tmp/asusavahi_"$AVAHI_VERTGZ"_i686.ipk
		ipkg install /opt/tmp/asusavahi_"$AVAHI_VER"_i686.ipk
		rm -f /opt/tmp/asusavahi_"$AVAHI_VER"_i686.ipk
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			wget -c -q -t 2 -T 30 http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT/asusavahi_"$AVAHI_VERTGZ"_mipsel.tgz -O /opt/tmp/asusavahi_"$AVAHI_VER"_mipsel.ipk
		else
			wget -q -P /opt/tmp http://nw-dlcdnet.asus.com/asusware/mipsel/stable/asusavahi_"$AVAHI_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/asusavahi_"$AVAHI_VER"_mipsel.ipk
		rm -f /opt/tmp/asusavahi_"$AVAHI_VER"_mipsel.ipk
	fi
fi
if [ -n "$IPKG_ERROR" ]; then
	app_base_link.sh
	app_base_library.sh
	app_move_to_pool.sh $APPS_DEV
fi

#echo "check mt-daapd_libs start"
#zlib check
ZLIB=`ls $APPS_INSTALL_PATH/lib/ |grep libz.so`
ZLIB_EXIST=0
for zlibobj in $ZLIB; do
	if [ -L "$APPS_INSTALL_PATH/lib/$zlibobj" ]; then
		continue;
	elif [ -f "$APPS_INSTALL_PATH/lib/$zlibobj" ]; then
		ZLIB_EXIST=1;
		break;
	fi
done
if [ $ZLIB_EXIST -eq 0 ]; then
	echo "ZLIB_IPKG is error,we must reinstall it"
	ZLIB_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/zlib.control" | grep Version`
	ZLIB_VER=${ZLIB_VER:9}
	IPKG_ERROR="zlib"
	if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/zlib_"$ZLIB_VER"_i686.ipk -O /opt/tmp/zlib_"$ZLIB_VER"_i686.ipk
		ipkg install /opt/tmp/zlib_"$ZLIB_VER"_i686.ipk
		rm -f /opt/tmp/zlib_"$ZLIB_VER"_i686.ipk
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			wget -q -P /opt/tmp http://ipkg.nslu2-linux.org/feeds/optware/oleg/cross/stable/zlib_"$ZLIB_VER"_mipsel.ipk
		else
			wget -q -P /opt/tmp http://nw-dlcdnet.asus.com/asusware/mipsel/stable/zlib_"$ZLIB_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/zlib_"$ZLIB_VER"_mipsel.ipk
		rm -f /opt/tmp/zlib_"$ZLIB_VER"_mipsel.ipk
	fi
fi
#gdbm
GDBM=`ls $APPS_INSTALL_PATH/lib/ |grep libgdbm.so`
GDBM_EXIST=0
for gdbmobj in $GDBM; do
	if [ -L "$APPS_INSTALL_PATH/lib/$gdbmobj" ]; then
		continue;
	elif [ -f "$APPS_INSTALL_PATH/lib/$gdbmobj" ]; then
		GDBM_EXIST=1;
		break;
	fi
done
if [ $GDBM_EXIST -eq 0 ]; then
	echo "GDBM_IPKG is error,we must reinstall it"
	GDBM_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/gdbm.control" | grep Version`
	GDBM_VER=${GDBM_VER:9}
	IPKG_ERROR="gdbm"
	if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/gdbm_"$GDBM_VER"_i686.ipk -O /opt/tmp/gdbm_"$GDBM_VER"_i686.ipk
		ipkg install /opt/tmp/gdbm_"$GDBM_VER"_i686.ipk
		rm -f /opt/tmp/gdbm_"$GDBM_VER"_i686.ipk
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			wget -q -P /opt/tmp http://ipkg.nslu2-linux.org/feeds/optware/oleg/cross/stable/gdbm_"$GDBM_VER"_mipsel.ipk
		else
			wget -q -P /opt/tmp http://nw-dlcdnet.asus.com/asusware/mipsel/stable/gdbm_"$GDBM_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/gdbm_"$GDBM_VER"_mipsel.ipk
		rm -f /opt/tmp/gdbm_"$GDBM_VER"_mipsel.ipk
	fi
fi
#echo "check mt-daapd_libs end"
#echo "check minidlna_libs start"
#sqlite
SQLITE=`ls $APPS_INSTALL_PATH/lib/ |grep libsqlite3.so`
SQLITE_EXIST=0
for sqliteobj in $SQLITE; do
	if [ -L "$APPS_INSTALL_PATH/lib/$sqliteobj" ]; then
		continue;
	elif [ -f "$APPS_INSTALL_PATH/lib/$sqliteobj" ]; then
		SQLITE_EXIST=1;
		break;
	fi
done
if [ $SQLITE_EXIST -eq 0 ]; then
	echo "SQLITE_IPKG is error,we must reinstall it"
	SQLITE_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/sqlite.control" | grep Version`
	SQLITE_VER=${SQLITE_VER:9}
		IPKG_ERROR="sqlite"
	if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/sqlite_"$SQLITE_VER"_i686.ipk -O /opt/tmp/sqlite_"$SQLITE_VER"_i686.ipk
		ipkg install /opt/tmp/sqlite_"$SQLITE_VER"_i686.ipk
		rm -f /opt/tmp/sqlite_"$SQLITE_VER"_i686.ipk
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			wget -q -P /opt/tmp http://ipkg.nslu2-linux.org/feeds/optware/oleg/cross/stable/sqlite_"$SQLITE_VER"_mipsel.ipk
		else
			wget -q -P /opt/tmp http://nw-dlcdnet.asus.com/asusware/mipsel/stable/sqlite_"$SQLITE_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/sqlite_"$SQLITE_VER"_mipsel.ipk
		rm -f /opt/tmp/sqlite_"$SQLITE_VER"_mipsel.ipk
	fi
fi
#jpeg
JPEG=`ls $APPS_INSTALL_PATH/lib/ |grep libjpeg.so`
JPEG_EXIST=0
for jpegobj in $JPEG; do
	if [ -L "$APPS_INSTALL_PATH/lib/$jpegobj" ]; then
		continue;
	elif [ -f "$APPS_INSTALL_PATH/lib/$jpegobj" ]; then
		JPEG_EXIST=1;
		break;
	fi
done
if [ $JPEG_EXIST -eq 0 ]; then
	echo "JPEG_IPKG is error,we must reinstall it"
	JPEG_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/libjpeg.control" | grep Version`
	JPEG_VER=${JPEG_VER:9}
		IPKG_ERROR="jpeg"
	if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/libjpeg_"$JPEG_VER"_i686.ipk -O /opt/tmp/libjpeg_"$JPEG_VER"_i686.ipk
		ipkg install /opt/tmp/libjpeg_"$JPEG_VER"_i686.ipk
		rm -f /opt/tmp/libjpeg_"$JPEG_VER"_i686.ipk
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			wget -q -P /opt/tmp http://ipkg.nslu2-linux.org/feeds/optware/oleg/cross/stable/libjpeg_"$JPEG_VER"_mipsel.ipk
		else
			wget -q -P /opt/tmp http://nw-dlcdnet.asus.com/asusware/mipsel/stable/libjpeg_"$JPEG_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/libjpeg_"$JPEG_VER"_mipsel.ipk
		rm -f /opt/tmp/libjpeg_"$JPEG_VER"_mipsel.ipk
	fi
fi
#exif
EXIF=`ls $APPS_INSTALL_PATH/lib/ |grep libexif.so`
EXIF_EXIST=0
for exifobj in $EXIF; do
	if [ -L "$APPS_INSTALL_PATH/lib/$exifobj" ]; then
		continue;
	elif [ -f "$APPS_INSTALL_PATH/lib/$exifobj" ]; then
		EXIF_EXIST=1;
		break;
	fi
done
if [ $EXIF_EXIST -eq 0 ]; then
	echo "EXIF_IPKG is error,we must reinstall it"
	EXIF_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/libexif.control" | grep Version`
	EXIF_VER=${EXIF_VER:9}
		IPKG_ERROR="exif"
	if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/libexif_"$EXIF_VER"_i686.ipk -O /opt/tmp/libexif_"$EXIF_VER"_i686.ipk
		ipkg install /opt/tmp/libexif_"$EXIF_VER"_i686.ipk
		rm -f /opt/tmp/libexif_"$EXIF_VER"_i686.ipk
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			wget -q -P /opt/tmp http://ipkg.nslu2-linux.org/feeds/optware/oleg/cross/stable/libexif_"$EXIF_VER"_mipsel.ipk
		else
			wget -q -P /opt/tmp http://nw-dlcdnet.asus.com/asusware/mipsel/stable/libexif_"$EXIF_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/libexif_"$EXIF_VER"_mipsel.ipk
		rm -f /opt/tmp/libexif_"$EXIF_VER"_mipsel.ipk
	fi
fi
#ogg
OGG=`ls $APPS_INSTALL_PATH/lib/ |grep libogg.so`
OGG_EXIST=0
for oggobj in $OGG; do
	if [ -L "$APPS_INSTALL_PATH/lib/$oggobj" ]; then
		continue;
	elif [ -f "$APPS_INSTALL_PATH/lib/$oggobj" ]; then
		OGG_EXIST=1;
		break;
	fi
done
if [ $OGG_EXIST -eq 0 ]; then
	echo "OGG_IPKG is error,we must reinstall it"
	OGG_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/libogg.control" | grep Version`
	OGG_VER=${OGG_VER:9}
		IPKG_ERROR="ogg"
	if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/libogg_"$OGG_VER"_i686.ipk -O /opt/tmp/libogg_"$OGG_VER"_i686.ipk
		ipkg install /opt/tmp/libogg_"$OGG_VER"_i686.ipk
		rm -f /opt/tmp/libogg_"$OGG_VER"_i686.ipk
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			wget -q -P /opt/tmp http://ipkg.nslu2-linux.org/feeds/optware/oleg/cross/stable/libogg_"$OGG_VER"_mipsel.ipk
		else
			wget -q -P /opt/tmp http://nw-dlcdnet.asus.com/asusware/mipsel/stable/libogg_"$OGG_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/libogg_"$OGG_VER"_mipsel.ipk
		rm -f /opt/tmp/libogg_"$OGG_VER"_mipsel.ipk
	fi
fi
#flac
FLAC=`ls $APPS_INSTALL_PATH/lib/ |grep libFLAC.so`
FLAC_EXIST=0
for flacobj in $FLAC; do
	if [ -L "$APPS_INSTALL_PATH/lib/$flacobj" ]; then
		continue;
	elif [ -f "$APPS_INSTALL_PATH/lib/$flacobj" ]; then
		FLAC_EXIST=1;
		break;
	fi
done
if [ $FLAC_EXIST -eq 0 ]; then
	echo "FLAC_IPKG is error,we must reinstall it"
	FLAC_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/flac.control" | grep Version`
	FLAC_VER=${FLAC_VER:9}
	IPKG_ERROR="flac"
	if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/flac_"$FLAC_VER"_i686.ipk -O /opt/tmp/flac_"$FLAC_VER"_i686.ipk
		ipkg install /opt/tmp/flac_"$FLAC_VER"_i686.ipk
		rm -f /opt/tmp/flac_"$FLAC_VER"_i686.ipk
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			wget -q -P /opt/tmp http://ipkg.nslu2-linux.org/feeds/optware/oleg/cross/stable/flac_"$FLAC_VER"_mipsel.ipk
		else
			wget -q -P /opt/tmp http://nw-dlcdnet.asus.com/asusware/mipsel/stable/flac_"$FLAC_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/flac_"$FLAC_VER"_mipsel.ipk
		rm -f /opt/tmp/flac_"$FLAC_VER"_mipsel.ipk
	fi
fi
#vorbis
VORBIS=`ls $APPS_INSTALL_PATH/lib/ |grep libvorbis.so`
VORBIS_EXIST=0
for vorbisobj in $VORBIS; do
	if [ -L "$APPS_INSTALL_PATH/lib/$vorbisobj" ]; then
		continue;
	elif [ -f "$APPS_INSTALL_PATH/lib/$vorbisobj" ]; then
		VORBIS_EXIST=1;
		break;
	fi
done
if [ $VORBIS_EXIST -eq 0 ]; then
	echo "VORBIS_IPKG is error,we must reinstall it"
	VORBIS_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/libvorbis.control" | grep Version`
	VORBIS_VER=${VORBIS_VER:9}
		IPKG_ERROR="vorbis"
	if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/libvorbis_"$VORBIS_VER"_i686.ipk -O /opt/tmp/libvorbis_"$VORBIS_VER"_i686.ipk
		ipkg install /opt/tmp/libvorbis_"$VORBIS_VER"_i686.ipk
		rm -f /opt/tmp/libvorbis_"$VORBIS_VER"_i686.ipk
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			wget -q -P /opt/tmp http://ipkg.nslu2-linux.org/feeds/optware/oleg/cross/stable/libvorbis_"$VORBIS_VER"_mipsel.ipk
		else
			wget -q -P /opt/tmp http://nw-dlcdnet.asus.com/asusware/mipsel/stable/libvorbis_"$VORBIS_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/libvorbis_"$VORBIS_VER"_mipsel.ipk
		rm -f /opt/tmp/libvorbis_"$VORBIS_VER"_mipsel.ipk
	fi
fi
#asusffmpeg
AVCODEC=`ls $APPS_INSTALL_PATH/lib/ |grep libavcodec_asus.so.52`
AVCODEC_EXIST=0
if [ -n "$AVCODEC" ]; then
	AVCODEC_EXIST=1
fi
AVFORMAT=`ls $APPS_INSTALL_PATH/lib/ |grep libavformat_asus.so.52`
AVFORMAT_EXIST=0
if [ -n "$AVFORMAT" ]; then
	AVFORMAT_EXIST=1
fi
AVUTIL=`ls $APPS_INSTALL_PATH/lib/ |grep libavutil_asus.so.50`
AVUTIL_EXIST=0
if [ -n "$AVUTIL" ]; then
	AVUTIL_EXIST=1
fi
if [ $AVCODEC_EXIST -eq 0 ] || [ $AVFORMAT_EXIST -eq 0 ] || [ $AVUTIL_EXIST -eq 0 ]; then
	echo "asusffmpeg_IPKG is error,we must reinstall it"
	FFMPEG_VER=`cat "$APPS_INSTALL_PATH/lib/ipkg/info/asusffmpeg.control" | grep Version`
	FFMPEG_VER=${FFMPEG_VER:9}
	FFMPEG_VERTGZ=${FFMPEG_VER//./-}
		IPKG_ERROR="asusffmpeg"
	if [ -n $is_i686_machine ]; then
		wget -c -q -t 2 -T 30 http://nw-dlcdnet.asus.com/asusware/i686/stable/asusffmpeg_"$FFMPEG_VER"_i686.ipk -O /opt/tmp/asusffmpeg_"$FFMPEG_VER"_i686.ipk
		ipkg install /opt/tmp/asusffmpeg_"$FFMPEG_VER"_i686.ipk
		rm -f /opt/tmp/asusffmpeg_"$FFMPEG_VER"_i686.ipk
	else
		if [ "$APPS_SERVER" == "http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT" ]; then
			#wget -q -P /opt/tmp http://ipkg.nslu2-linux.org/feeds/optware/oleg/cross/stable/asusffmpeg_"$FFMPEG_VER"_mipsel.ipk
			wget -c -q -t 2 -T 30 http://dlcdnet.asus.com/pub/ASUS/wireless/ASUSWRT/asusffmpeg_"$FFMPEG_VERTGZ"_mipsel.tgz -O /opt/tmp/asusffmpeg_"$FFMPEG_VER"_mipsel.ipk
		else
			wget -q -P /opt/tmp http://nw-dlcdnet.asus.com/asusware/mipsel/stable/asusffmpeg_"$FFMPEG_VER"_mipsel.ipk
		fi
		ipkg install /opt/tmp/asusffmpeg_"$FFMPEG_VER"_mipsel.ipk
		rm -f /opt/tmp/asusffmpeg_"$FFMPEG_VER"_mipsel.ipk
	fi
fi
if [ -n "$IPKG_ERROR" ]; then 
	app_base_link.sh
	app_base_library.sh
	app_move_to_pool.sh $APPS_DEV
fi
#echo "check minidlna_libs end"
