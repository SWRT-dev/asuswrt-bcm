#!/bin/sh

apps_ipkg_old=`nvram get apps_ipkg_old`
is_arm_machine=`uname -m |grep arm`

APPS_PATH=/opt
CONF_FILE=$APPS_PATH/etc/ipkg.conf
ASUS_SERVER=`nvram get apps_ipkg_server`
wget_timeout=`nvram get apps_wget_timeout`
#wget_options="-nv -t 2 -T $wget_timeout --dns-timeout=120"
wget_options="-q -t 2 -T $wget_timeout"
apps_from_internet=`nvram get rc_support |grep appnet`
apps_local_space=`nvram get apps_local_space`
APPS_INSTALL_FOLDER=`nvram get apps_install_folder`
APPS_MOUNTED_PATH=`nvram get apps_mounted_path`
APPS_INSTALL_PATH=$APPS_MOUNTED_PATH/$APPS_INSTALL_FOLDER
ASUS_LIGHTTPD_VER=3.1.0.71
ASUS_FFMPEG_VER=1.0.0.5
CPFLAG="NO"

# $1: package name.
# return value. 1: have package. 0: no package.
_check_package(){
	package_ready=`ipkg list_installed | grep "$1 "`
	package_ready2=`app_get_field.sh $1 Enabled 1`

	if [ -z "$package_ready" ] && [ -z "$package_ready2" ]; then
		return 0
	else
		return 1
	fi
}

# $1: package name, $2: ipkg server name, $3: force(1/0).
_get_pkg_file_name_old(){
	pkg_file_full=`app_get_field.sh $1 Filename 2`
	old_pkg_file=`echo "$pkg_file_full" |awk 'BEGIN {FS=".ipk"} {print $1}'`
	pkg_file=`echo "$old_pkg_file" |sed 's/\./-/g'`

	if [ "$3" == "1" ] || [ "$2" != "$ASUS_SERVER" ]; then
		echo "$pkg_file_full"
	else
		echo "$pkg_file.tgz"
	fi
}

# $1: package name.
_get_pkg_file_name(){
	pkg_file_full=`app_get_field.sh $1 Filename 2`

	echo "$pkg_file_full"
}

# $1: package name, $2: mounted path.
_install_package(){
	_check_package $1
	if [ "$?" == "0" ]; then
		pkg_server=
		pkg_file=
		installed_ipk_path=
		need_download=1

		installed_ipk_path=`ls $apps_local_space/$1*`
		if [ -n "$installed_ipk_path" ]; then
			need_download=0
		fi

		if [ "$need_download" == "1" ]; then
			# Geting the app's file name...
			server_names=`grep -n '^src.*' $CONF_FILE |sort -r |awk '{print $3}'`
			if [ -z "$is_arm_machine" ] && [ -n "$apps_ipkg_old" ] && [ "$apps_ipkg_old" == "1" ]; then
				IS_SUPPORT_SSL=`nvram get rc_support|grep -i HTTPS`
				if [ -n "$IS_SUPPORT_SSL" ]; then
					wget_options="-q -t 2 -T $wget_timeout --no-check-certificate"
				fi
			fi
			
			for s in $server_names; do
				if [ -z "$is_arm_machine" ] && [ -n "$apps_ipkg_old" ] && [ "$apps_ipkg_old" == "1" ]; then
					pkg_file=`_get_pkg_file_name_old $1 $s 0`
				else
					pkg_file=`_get_pkg_file_name $1`
				fi
			
				wget --spider $wget_options $s/$pkg_file
				
				if [ "$?" == "0" ]; then
					pkg_server=$s
					break
				fi
			done

			if [ -z "$pkg_server" ]; then
				return 1
			fi
	
			# Downloading the app's file name...
			ipk_file_name=
			if [ -z "$is_arm_machine" ] && [ -n "$apps_ipkg_old" ] && [ "$apps_ipkg_old" == "1" ] && [ "$pkg_server" == "$ASUS_SERVER" ]; then
				ipk_file_name=`_get_pkg_file_name_old $1 $pkg_server 1`
			else
				ipk_file_name=$pkg_file
			fi
	
			wget -c $wget_options $pkg_server/$pkg_file -O $2/$ipk_file_name
		
			if [ "$?" != "0" ]; then
				rm -f $2/$ipk_file_name
				sync
		
				return 1
			fi

			installed_ipk_path=$2"/"$ipk_file_name
		fi

		# Installing the apps...
		#ls  $installed_ipk_path >> $APPS_INSTALL_PATH/ipkg_log_1.txt
		ipkg install $installed_ipk_path 1>>$APPS_INSTALL_PATH/ipkg_log_1.txt
		if [ "$?" != "0" ]; then
			return 1
		fi

		if [ "$need_download" == "1" ]; then
			rm -f $installed_ipk_path
		fi
	fi

	return 0
}
_check_lighttpd_version(){
	lighttpd_control_file=$APPS_INSTALL_PATH/lib/ipkg/info/asuslighttpd.control

	if [ -f "$lighttpd_control_file" ]; then
		lighttpd_version=`cat "$lighttpd_control_file" |grep "Version:"`
		lighttpd_version=${lighttpd_version:9}
		ASUS_LIGHTTPD_VER_NUM=`echo $ASUS_LIGHTTPD_VER |sed 's/\.//g'`
		lighttpd_version_num=`echo $lighttpd_version |sed 's/\.//g'`
		if [ $ASUS_LIGHTTPD_VER_NUM -gt $lighttpd_version_num ]; then
			CPFLAG="YES"
			file=`ls $APPS_INSTALL_PATH/etc/downloadmaster`
			for s in $file; do
				if [ "$s" == "mediaserverui" ]; then
					continue
				else
					if [ ! -d $APPS_INSTALL_PATH/tmp/ui ]; then
						mkdir -p $APPS_INSTALL_PATH/tmp/ui
						chmod -R 777 $APPS_INSTALL_PATH/tmp/ui
					fi
					cp -rf $APPS_INSTALL_PATH/etc/downloadmaster/$s $APPS_INSTALL_PATH/tmp/ui/
				fi 
			done
			script=`ls $APPS_INSTALL_PATH/etc/asus_script`
			for i in $script; do
				fname=`echo $i | awk 'BEGIN {FS="_"} {print $1}'`
				if [ "$fname" == "asus" ] || [ "$fname" == "mes" ]; then
					continue
				else
					if [ ! -d $APPS_INSTALL_PATH/tmp/script ]; then
						mkdir -p $APPS_INSTALL_PATH/tmp/script
						chmod -R 777 $APPS_INSTALL_PATH/tmp/script
					fi
					cp -rf $APPS_INSTALL_PATH/etc/asus_script/$i $APPS_INSTALL_PATH/tmp/script/
				fi
			done
			ipkg remove asuslighttpd -force-depends
		fi
	fi
}
_check_ffmpeg_version(){
	ffmpeg_control_file=$APPS_INSTALL_PATH/lib/ipkg/info/asusffmpeg.control
	if [ -f "$ffmpeg_control_file" ]; then
		ffmpeg_version_tmp=`cat "$ffmpeg_control_file" |grep "Version:"`
		ffmpeg_version=`echo $ffmpeg_version_tmp |awk 'BEGIN {FS=": "} {print $2}'`
		ASUS_FFMPEG_VER_NUM=`echo $ASUS_FFMPEG_VER |sed 's/\.//g'`
		ffmpeg_version_num=`echo $ffmpeg_version |sed 's/\.//g'`
		if [ $ASUS_FFMPEG_VER_NUM -gt $ffmpeg_version_num ]; then
			/opt/bin/ipkg remove asusffmpeg -force-depends
		fi
	fi
}
#add for i686 base apps issue
_asus_base_apps(){
	
		       pkg_file="asus_base_apps_lib_i686.tgz"
			
			# Geting the app's file name...
			server_names=`grep -n '^src.*' $CONF_FILE |sort -r |awk '{print $3}'`
			IS_SUPPORT_SSL=`nvram get rc_support|grep -i HTTPS`
			if [ -n "$IS_SUPPORT_SSL" ]; then
			wget_options="-q -t 2 -T $wget_timeout --no-check-certificate"
			fi
			for s in $server_names; do
				wget --spider $wget_options $s/$pkg_file
				if [ "$?" == "0" ]; then
					pkg_server=$s
					break
				fi
			done
			if [ -z "$pkg_server" ]; then
				return 1
			fi

			# Downloading the app's file name...
			ipk_file_name="asus_base_apps_lib_i686.tgz"
			TEMP_LIB_FILE=$APPS_INSTALL_PATH/$ipk_file_name
			wget -c $wget_options $pkg_server/$pkg_file -O $APPS_INSTALL_PATH/$ipk_file_name
			i=0
			while [ $i -lt $wget_timeout ] && [ ! -f "$TEMP_LIB_FILE" ]; do
				i=$((i+1))
				sleep 1
			done
			tar xzf $TEMP_LIB_FILE -C $APPS_INSTALL_PATH/
			if [ "$?" != "0" ]; then
				rm -rf $APPS_INSTALL_PATH/$ipk_file_name
				sync

				return 1
			fi
			APPS_MOUNTED_TYPE=`mount |grep "/dev/$APPS_DEV on " |awk '{print $5}'`
			if [ "$APPS_MOUNTED_TYPE" == "vfat" ] || [ "$APPS_MOUNTED_TYPE" == "tfat" ]; then
				
				app_move_to_pool.sh $APPS_DEV
				if [ "$?" != "0" ]; then
					# apps_state_error was already set by app_move_to_pool.sh.
					exit 1
				fi
			fi

	return 0
}

_base_link(){


APP_UCLIBC_VERSION=2.12.1
APPS_DEV=`nvram get apps_dev`
APPS_MOUNTED_PATH=`nvram get apps_mounted_path`
APPS_INSTALL_FOLDER=`nvram get apps_install_folder`
APPS_INSTALL_PATH=$APPS_MOUNTED_PATH/$APPS_INSTALL_FOLDER


if [ -z "$APPS_MOUNTED_PATH" ]; then
	nvram set apps_state_error=2
	exit 1
fi

APP_BIN=$APPS_INSTALL_PATH/bin
APP_LIB=$APPS_INSTALL_PATH/lib

APP_LINK_DIR=/tmp/opt
APP_LINK_BIN=$APP_LINK_DIR/bin
APP_LINK_LIB=$APP_LINK_DIR/lib

APP_FS_TYPE=`mount | grep $APPS_MOUNTED_PATH | sed -e "s,.*on.* type \([^ ]*\) (.*$,\1,"`


# Others files or directories
objs=`ls -a $APPS_INSTALL_PATH |grep -v ^\.__*`
if [ -L "$APP_LINK_DIR" ] || [ ! -d "$APP_LINK_DIR" ]; then
	rm -rf $APP_LINK_DIR
	mkdir -p $APP_LINK_DIR
fi

for obj in $objs; do
	if [ "$obj" == "." ] || [ "$obj" == ".." ]; then
		continue
	fi

	if [ "$obj" != "bin" ] && [ "$obj" != "lib" ]; then
		if [ -d "$APP_LINK_DIR/$obj" ]; then
			rm -rf $APP_LINK_DIR/$obj
		fi
		ln -sf $APPS_INSTALL_PATH/$obj $APP_LINK_DIR/$obj
	fi
done


# BIN
objs=`ls -a $APP_BIN`
if [ -L "$APP_LINK_BIN" ] || [ ! -d "$APP_LINK_BIN" ]; then
	rm -rf $APP_LINK_BIN
	mkdir -p $APP_LINK_BIN
fi

# ipkg-opt
ln -sf $APP_BIN/ipkg $APP_LINK_BIN/ipkg-opt

for obj in $objs; do
	if [ "$obj" == "." ] || [ "$obj" == ".." ]; then
		continue
	fi

	if [ -d "$APP_LINK_BIN/$obj" ]; then
		rm -rf $APP_LINK_BIN/$obj
	fi
	ln -sf $APP_BIN/$obj $APP_LINK_BIN/$obj 
done


# LIB
objs=`ls -a $APP_LIB`
if [ -L "$APP_LINK_LIB" ] || [ ! -d "$APP_LINK_LIB" ]; then
	rm -rf $APP_LINK_LIB
	mkdir -p $APP_LINK_LIB
fi

# first find the other objs and then do uclibc.
for obj in $objs; do
	if [ "$obj" == "." ] || [ "$obj" == ".." ]; then
		continue
	fi

	if [ -d "$APP_LINK_LIB/$obj" ]; then
		rm -rf $APP_LINK_LIB/$obj
	fi
	ln -sf $APP_LIB/$obj $APP_LINK_LIB/$obj 
done

# ipkg-opt
#ln -sf $APP_LIB/libipkg.so.0.0.0 $APP_LINK_LIB/libipkg.so.0
#ln -sf $APP_LIB/libipkg.so.0.0.0 $APP_LINK_LIB/libipkg.so

# uclibc-opt
#ln -sf $APP_LIB/ld-uClibc-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/ld-uClibc.so.0
#ln -sf $APP_LIB/ld-uClibc-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/ld-uClibc.so
#ln -sf $APP_LIB/libuClibc-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libc.so.0
#ln -sf $APP_LIB/libuClibc-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libc.so
ln -sf $APP_LIB/libcrypt-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libcrypt.so.1
ln -sf $APP_LIB/libc-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libc.so.6
#ln -sf $APP_LIB/libcrypt-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libcrypt.so
ln -sf $APP_LIB/libgcc_s.so.1 $APP_LINK_LIB/libgcc_s.so
if [ "$pkg_type" == "arm" ]; then
	ln -sf $APP_LIB/libstdc++.so.6.0.2 $APP_LINK_LIB/libstdc++.so.6
	ln -sf $APP_LIB/libstdc++.so.6.0.2 $APP_LINK_LIB/libstdc++.so
else
	ln -sf $APP_LIB/libstdc++.so.6.0.14 $APP_LINK_LIB/libstdc++.so.6
	ln -sf $APP_LIB/libstdc++.so.6.0.14 $APP_LINK_LIB/libstdc++.so
	#ln -sf $APP_LIB/libdl-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libdl.so.0
	#ln -sf $APP_LIB/libdl-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libdl.so
	#ln -sf $APP_LIB/libintl-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libintl.so.0
	#ln -sf $APP_LIB/libintl-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libintl.so
	ln -sf $APP_LIB/libmudflap.so.0.0.0 $APP_LINK_LIB/libmudflap.so.0
	ln -sf $APP_LIB/libmudflap.so.0.0.0 $APP_LINK_LIB/libmudflap.so
	ln -sf $APP_LIB/libmudflapth.so.0.0.0 $APP_LINK_LIB/libmudflapth.so.0
	ln -sf $APP_LIB/libmudflapth.so.0.0.0 $APP_LINK_LIB/libmudflapth.so
	#ln -sf $APP_LIB/libnsl-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libnsl.so.0
	#ln -sf $APP_LIB/libnsl-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libnsl.so
fi
ln -sf $APP_LIB/libm-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libm.so.6
#ln -sf $APP_LIB/libm-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libm.so
ln -sf $APP_LIB/libpthread-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libpthread.so.0
ln -sf $APP_LIB/libpthread-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libpthread.so
ln -sf $APP_LIB/libresolv-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libresolv.so.2
#ln -sf $APP_LIB/libresolv-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libresolv.so
ln -sf $APP_LIB/librt-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/librt.so.1
#ln -sf $APP_LIB/librt-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/librt.so
#ln -sf $APP_LIB/libthread_db-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libthread_db.so.1
#ln -sf $APP_LIB/libthread_db-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libthread_db.so
ln -sf $APP_LIB/libutil-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libutil.so.1
#ln -sf $APP_LIB/libutil-${APP_UCLIBC_VERSION}.so $APP_LINK_LIB/libutil.so


}
#end add

ipkg_ready=`which ipkg`
lib_file_name="asus_base_apps_lib_i686.tgz"
if [ -n "$ipkg_ready" ]; then
LIBCRY_VER=`ls $APPS_INSTALL_PATH/lib/libcrypt-* | awk 'BEGIN {FS="libcrypt-"} {print $2}' |awk 'BEGIN {FS=".so"} {print $1}'`
LIBPTH_VER=`ls $APPS_INSTALL_PATH/lib/libpthread-* | awk 'BEGIN {FS="libpthread-"} {print $2}' |awk 'BEGIN {FS=".so"} {print $1}'`
LIBRT_VER=`ls $APPS_INSTALL_PATH/lib/librt-* | awk 'BEGIN {FS="librt-"} {print $2}' |awk 'BEGIN {FS=".so"} {print $1}'`

if [ "$LIBCRY_VER" != "2.12.1" ] || [ "$LIBPTH_VER" != "2.12.1" ] || [ "$LIBRT_VER" != "2.12.1" ]; then
	_asus_base_apps

APPS_MOUNTED_TYPE=`mount |grep "/dev/$APPS_DEV on " |awk '{print $5}'`

if [ "$APPS_MOUNTED_TYPE" == "vfat" ] || [ "$APPS_MOUNTED_TYPE" == "tfat" ]; then

_base_link

fi

	rm -rf $APPS_INSTALL_PATH/$lib_file_name
fi

	touch $APPS_INSTALL_PATH/ipkg_log_1.txt
	_check_lighttpd_version
	_install_package asuslighttpd $APPS_INSTALL_PATH
	_install_package asuslibdaemon $APPS_INSTALL_PATH
	_install_package asusavahi $APPS_INSTALL_PATH
	_check_ffmpeg_version
	_install_package asusffmpeg $APPS_INSTALL_PATH
	if [ "$CPFLAG" == "YES" ]; then
		chmod -R 777 $APPS_INSTALL_PATH
		if [ ! -d $APPS_INSTALL_PATH/etc/downloadmaster ]; then
			mkdir -p $APPS_INSTALL_PATH/etc/downloadmaster
			chmod -R 777 $APPS_INSTALL_PATH/etc/downloadmaster
		fi
		if [ ! -d $APPS_INSTALL_PATH/etc/asus_script ]; then
			mkdir -p $APPS_INSTALL_PATH/etc/asus_script
			chmod -r 777 $APPS_INSTALL_PATH/etc/asus_script
		fi
		cp -rf $APPS_INSTALL_PATH/tmp/ui/* $APPS_INSTALL_PATH/etc/downloadmaster/
		cp -rf $APPS_INSTALL_PATH/tmp/script/* $APPS_INSTALL_PATH/etc/asus_script/
		rm -rf $APPS_INSTALL_PATH/tmp/ui
		rm -rf $APPS_INSTALL_PATH/tmp/script
		sync
	fi
	rm -rf $APPS_INSTALL_PATH/ipkg_log_1.txt
fi

