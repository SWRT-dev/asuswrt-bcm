#!/bin/sh
APPS_PATH=/opt
CONF_FILE=$APPS_PATH/etc/ipkg.conf

APPS_INSTALL_FOLDER=`nvram get apps_install_folder`
APPS_MOUNTED_PATH=`nvram get apps_mounted_path`
APPS_INSTALL_PATH=$APPS_MOUNTED_PATH/$APPS_INSTALL_FOLDER


APP_LIB=$APPS_INSTALL_PATH/lib
APP_LINK_DIR=/tmp/opt
APP_LINK_LIB=$APP_LINK_DIR/lib

apps_new=`nvram get apps_new`

_base_link()
{
	APPS_CONTROL="$APPS_INSTALL_PATH/lib/ipkg/info/"
	if [ -f "$APPS_CONTROL/uclibc-opt.control" ]; then
		NEW_UCLIBC_VERSION_TMP=`cat "$APPS_CONTROL/uclibc-opt.control" | grep "Version:"`
		NEW_UCLIBC_VERSION=${NEW_UCLIBC_VERSION_TMP:9:6}
	fi

	if [ -f "$APPS_CONTROL/libstdc++.control" ]; then
		NEW_STDC_VERSION_TMP=`cat "$APPS_CONTROL/libstdc++.control" | grep "Version:"`
		NEW_STDC_VERSION=${NEW_STDC_VERSION_TMP:9:6}
	fi

	if [ -f "$APPS_CONTROL/libnsl.control" ]; then
		NEW_NSL_VERSION_TMP=`cat "$APPS_CONTROL/libnsl.control" | grep "Version:"`
		NEW_NSL_VERSION=${NEW_NSL_VERSION_TMP:9:6}
	fi
	
	ln -sf $APP_LIB/ld-uClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/ld-uClibc.so.1
	ln -sf $APP_LIB/ld-uClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/ld-uClibc.so.0
	ln -sf $APP_LIB/ld-uClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/ld-uClibc.so
	ln -sf $APP_LIB/libcrypt-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libcrypt.so.1
	ln -sf $APP_LIB/libcrypt-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libcrypt.so.0
	ln -sf $APP_LIB/libcrypt-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libcrypt.so
	ln -sf $APP_LIB/libuClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libc.so.1
	ln -sf $APP_LIB/libuClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libc.so.0
	ln -sf $APP_LIB/libuClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libc.so
	ln -sf $APP_LIB/libdl-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libdl.so.1
	ln -sf $APP_LIB/libgcc_s.so.1 $APP_LINK_LIB/libgcc_s.so
	ln -sf $APP_LIB/libm-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libm.so.1
	ln -sf $APP_LIB/libm-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libm.so.0
	ln -sf $APP_LIB/libm-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libm.so
	ln -sf $APP_LIB/libpthread-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libpthread.so.1
	ln -sf $APP_LIB/libpthread-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libpthread.so.0
	ln -sf $APP_LIB/libpthread-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libpthread.so
	ln -sf $APP_LIB/libresolv-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libresolv.so.1
	ln -sf $APP_LIB/libresolv-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libresolv.so.0
	ln -sf $APP_LIB/libresolv-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libresolv.so	
	ln -sf $APP_LIB/librt-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/librt.so
	ln -sf $APP_LIB/librt-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/librt.so.0
	ln -sf $APP_LIB/librt-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/librt.so.1
	ln -sf $APP_LIB/libthread_db-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libthread_db.so.1
	ln -sf $APP_LIB/libthread_db-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libthread_db.so.0
	ln -sf $APP_LIB/libthread_db-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libthread_db.so
	ln -sf $APP_LIB/libutil-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libutil.so.1
	ln -sf $APP_LIB/libutil-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libutil.so.0
	ln -sf $APP_LIB/libutil-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libutil.so
	#libnsl
	ln -sf $APP_LIB/libnsl-$NEW_NSL_VERSION.so $APP_LINK_LIB/libnsl.so.0
	ln -sf $APP_LIB/libnsl-$NEW_NSL_VERSION.so $APP_LINK_LIB/libnsl.so.1
	ln -sf $APP_LIB/libnsl-$NEW_NSL_VERSION.so $APP_LINK_LIB/libnsl.so
	#libstdc++
	ln -sf $APP_LIB/libstdc++.so.$NEW_STDC_VERSION $APP_LINK_LIB/libstdc++.so.6
	ln -sf $APP_LIB/libstdc++.so.$NEW_STDC_VERSION $APP_LINK_LIB/libstdc++.so	
}

_change_optwareasus(){
	LIST_DIR=$APPS_PATH/lib/ipkg/lists
	DELETE_LIST="spawn-fcgi libxml2 readline wxbase zlib pcre bzip2 libevent ncurses libsigc++ libpar2 sqlite openssl libcurl"
	LIST_FILES=`grep -n '^src.*' $CONF_FILE |sort -r |awk '{print "'$LIST_DIR'/"$2}'`
	if [ -z "$DELETE_LIST" ]; then
		exit 1
	fi

	for f in $DELETE_LIST; do
		for f2 in $LIST_FILES; do
			if [ ! -f "$f2" ]; then
				continue
			fi
			if [ "$f2" != "$LIST_DIR/optware.asus" ];then
				continue
			fi

		
			line_first=`grep -n "Package: "$f"" $f2 | awk 'BEGIN{FS=":"}{print $1}'`
			if [ -z "$line_first" ]; then
				continue
			fi
		
			line_info=`sed -n "$line_first"p $f2`
			while [ ! -z "$line_info" ]; do
				if [ ! -z "$line_info" ];then
					sed -i "$line_first"d  $f2
				fi
				line_info=`sed -n "$line_first"p  $f2`
			done
		done
	done

}

ready_for_upgrade(){
	new_environment=0
	APPS_DEV=`nvram get apps_dev`
	APPS_MOUNTED_TYPE=`mount |grep "/dev/$APPS_DEV on " |awk '{print $5}'`
	if [ "$APPS_MOUNTED_TYPE" == "vfat" ] || [ "$APPS_MOUNTED_TYPE" == "tfat" ]; then
		uclibc_control_file=$APPS_INSTALL_PATH/lib/ipkg/info/uclibc-opt.control
		if [ -f "$uclibc_control_file" ]; then
			uclibc_version=`cat "$uclibc_control_file" |grep "Version:"`
			uclibc_version=${uclibc_version:9}
			uclibc_version_num=`echo $uclibc_version |sed 's/\.//g'|sed 's/\-//g'`

			if [ "$uclibc_version_num" \> "10150" ]; then
				new_environment=1
			fi
			uclibc_path=`ls -al $APPS_PATH/lib | grep "ld-uClibc.so ->"|awk '{print $11}'`
			uclibc_name=`basename $uclibc_path`	

			if [ "$new_environment" == "1" ] && [ $uclibc_name == "ld-uClibc-0.9.28.so" ]; then
				_base_link
				#_change_optwareasus
			fi		
		fi
	fi
}

ipkg_ready=`which ipkg`
if [ -n "$ipkg_ready" ]; then
#2016.11.21 tina add for upgrade{
	ready_for_upgrade
#end tina}
if [ -z "$apps_new" ] || [ $apps_new -ne 1 ]; then
	#sed -i '2c src/gz optware.mbwe-bluering http://ipkg.nslu2-linux.org/optware-ng/buildroot-armeabi-ng' $CONF_FILE
	_change_optwareasus
fi
fi

