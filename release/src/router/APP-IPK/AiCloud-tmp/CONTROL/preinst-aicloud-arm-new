#!/bin/sh
apps_ipkg_old=`nvram get apps_ipkg_old`
APPS_PATH=/opt
CONF_FILE=$APPS_PATH/etc/ipkg.conf
ASUS_SERVER=`nvram get apps_ipkg_server`
wget_timeout=`nvram get apps_wget_timeout`
#wget_options="-nv -t 2 -T $wget_timeout --dns-timeout=120"
wget_options="-q -t 2 -T $wget_timeout"

APPS_INSTALL_FOLDER=`nvram get apps_install_folder`
APPS_MOUNTED_PATH=`nvram get apps_mounted_path`
APPS_INSTALL_PATH=$APPS_MOUNTED_PATH/$APPS_INSTALL_FOLDER

APPS_INSTALL_FOLDER_BAK=$APPS_INSTALL_FOLDER".bak"
APPS_INSTALL_PATH_BAK=$APPS_MOUNTED_PATH/$APPS_INSTALL_FOLDER_BAK
ASUS_UCLIBC_VER=1.0.15-1

apps_new=`nvram get apps_new`
download_file=
install_log2=$APPS_INSTALL_PATH/ipkg_log2.txt
install_log3=$APPS_INSTALL_PATH/ipkg_log3.txt
dm_exist=
aicloud_exist=
ms_exist=
APPS_DEV=`nvram get apps_dev`
APPS_MOUNTED_TYPE=`mount |grep "/dev/$APPS_DEV on " |awk '{print $5}'`

APP_BIN=$APPS_INSTALL_PATH/bin
APP_LIB=$APPS_INSTALL_PATH/lib

APP_LINK_DIR=/tmp/opt
APP_LINK_BIN=$APP_LINK_DIR/bin
APP_LINK_LIB=$APP_LINK_DIR/lib


f=`nvram get apps_install_folder`
case $f in
	"asusware.arm")
		pkg_type=`echo $f|sed -e "s,asusware\.,,"`		
		third_lib="mbwe-bluering" 
		;;
	"asusware.big")
		pkg_type="mipsbig"
		third_lib=
		;;
	"asusware.mipsbig")
		pkg_type=`echo $f|sed -e "s,asusware\.,,"`
		third_lib=
		;;
	"asusware")
		pkg_type="mipsel"
		third_lib="oleg"
		;;
	*)
		#echo "Unknown apps_install_folder: $f"
		exit 1
		;;
esac

# $1: package name.
# return value. 1: have package. 0: no package.
_check_package(){
	package_ready=`ipkg list_installed | grep "$1 "`
	package_ready2=`app_get_field.sh $1 Enabled 1`

	if [ -z "$package_ready" ] && [ -z "$package_ready2" ]; then
		return 0
	else
		return 1
	fi
}

# $1: package name, $2: ipkg server name, $3: force(1/0).
_get_pkg_file_name_old(){
	pkg_file_full=`app_get_field.sh $1 Filename 2`
	old_pkg_file=`echo "$pkg_file_full" |awk 'BEGIN{FS=".ipk"}{print $1}'`
	pkg_file=`echo "$old_pkg_file" |sed 's/\./-/g'`

	if [ "$3" == "1" ] || [ "$2" != "$ASUS_SERVER" ]; then
		echo "$pkg_file_full"
	else
		echo "$pkg_file.tgz"
	fi
}

# $1: package name.
_get_pkg_file_name(){
	pkg_file_full=`app_get_field.sh $1 Filename 2`

	echo "$pkg_file_full"
}


# $1: ipkg log file, $2: the depends of package.
_check_log_message(){
	got_log=`cat $1 |sed -n '$p'`
	action=`echo $got_log |awk '{print $1}'`

	if [ "$action" == "Installing" ] || [ "$action" == "Configuring" ]; then
		target=`echo $got_log |awk '{print $2}'`
	elif [ "$action" == "Downloading" ]; then
		target=`echo $got_log |awk '{print $2}' |awk 'BEGIN{FS="/"}{print $NF}' |awk 'BEGIN{FS="_"}{print $1}'`
	elif [ "$action" == "Successfully" ]; then
		target="terminated"
	elif [ "$action" == "update-alternatives:" ]; then
		target=""
	elif [ -z "$action" ]; then
		target="Space"
	else
		target="error"
	fi

	got_target=0
	if [ "$action" == "Installing" ] || [ "$action" == "Configuring" ] || [ "$action" == "Downloading" ]; then
		check_array=`echo $2 |sed 's/,/ /g'`
		for check in $check_array; do
			if [ "$target" == "$check" ]; then
				got_target=1
				break
			fi
		done
	fi

	if [ "$got_target" -eq "1" ]; then
		nvram set apps_depend_action="$action"
		nvram set apps_depend_action_target="$target"
	fi
	echo "$target"

	return 0
}

# $1: delay number.
_loop_delay(){
	i=0
	while [ $i -lt $1 ]; do
		i=$((i+1))
		#echo "."
	done
}

# $1: package name, $2: ipkg log file.
_log_ipkg_install(){
	package_deps=`/usr/sbin/app_get_field.sh $1 Depends 2`
	package_deps=`echo $package_deps |sed 's/,/ /g'`
	package_deps_do=
	for dep in $package_deps; do
		_check_package $dep
		if [ "$?" == "1" ]; then
			continue
		fi
		if [ -z "$package_deps_do" ]; then
			package_deps_do=$dep
			nvram set apps_depend_action="$dep"
			nvram set apps_depend_action_target="Installing"
		else
			package_deps_do=$package_deps_do,$dep
		fi
	done
	nvram set apps_depend_do="$package_deps_do"

	ret=`_check_log_message "$2" "$package_deps_do"`
	while [ "$ret" != "terminated" ] && [ "$ret" != "error" ]; do
		_loop_delay 10
		ret=`_check_log_message "$2" "$package_deps_do"`
	done
	echo "$ret"
	return 0
}

base_link()
{
	APP_UCLIBC_VERSION=0.9.28
	APPS_CONTROL="$APPS_INSTALL_PATH/lib/ipkg/info/"

		if [ -f "$APPS_CONTROL/uclibc-opt.control" ]; then
			NEW_UCLIBC_VERSION_TMP=`cat "$APPS_CONTROL/uclibc-opt.control" | grep "Version:"`
			NEW_UCLIBC_VERSION=${NEW_UCLIBC_VERSION_TMP:9:6}
		fi

		if [ -f "$APPS_CONTROL/libstdc++.control" ]; then
			NEW_STDC_VERSION_TMP=`cat "$APPS_CONTROL/libstdc++.control" | grep "Version:"`
			NEW_STDC_VERSION=${NEW_STDC_VERSION_TMP:9:6}
		fi

		if [ -f "$APPS_CONTROL/libnsl.control" ]; then
			NEW_NSL_VERSION_TMP=`cat "$APPS_CONTROL/libnsl.control" | grep "Version:"`
			NEW_NSL_VERSION=${NEW_NSL_VERSION_TMP:9:6}
		fi

	if [ -z "$APPS_MOUNTED_PATH" ]; then
		nvram set apps_state_error=2
		exit 1
	fi



	APP_FS_TYPE=`mount | grep $APPS_MOUNTED_PATH | sed -e "s,.*on.* type \([^ ]*\) (.*$,\1,"`

	if [ "$APPS_MOUNTED_TYPE" != "vfat" ] && [ "$APPS_MOUNTED_TYPE" != "tfat" ]; then
		if [ "$APP_FS_TYPE" != "fuseblk" ] ; then
			chmod -R 777 $APPS_INSTALL_PATH
		fi
		user_account=`nvram get http_username`
		if [ -z "$user_account" ]; then
			user_account="admin"
		fi
		if [ "$APP_FS_TYPE" != "fuseblk" ] ; then
			chown -R "$user_account":root $APPS_INSTALL_PATH
		fi
		rm -rf $APP_LINK_DIR
		ln -sf $APPS_INSTALL_PATH $APP_LINK_DIR
		return 0
	fi
	# Others files or directories
	objs=`ls -a $APPS_INSTALL_PATH |grep -v ^\.__*`
	if [ -L "$APP_LINK_DIR" ] || [ ! -d "$APP_LINK_DIR" ]; then
		rm -rf $APP_LINK_DIR
		mkdir -p $APP_LINK_DIR
	fi
	for obj in $objs; do
		if [ "$obj" == "." ] || [ "$obj" == ".." ]; then
			continue
		fi

		if [ "$obj" != "bin" ] && [ "$obj" != "lib" ]; then
			if [ -d "$APP_LINK_DIR/$obj" ]; then
				rm -rf $APP_LINK_DIR/$obj
			fi
			ln -sf $APPS_INSTALL_PATH/$obj $APP_LINK_DIR/$obj
		fi
	done

	# BIN
	objs=`ls -a $APP_BIN`
	if [ -L "$APP_LINK_BIN" ] || [ ! -d "$APP_LINK_BIN" ]; then
		rm -rf $APP_LINK_BIN
		mkdir -p $APP_LINK_BIN
	fi

	# ipkg-opt
	ln -sf $APP_BIN/ipkg $APP_LINK_BIN/ipkg-opt

	for obj in $objs; do
		if [ "$obj" == "." ] || [ "$obj" == ".." ]; then
			continue
		fi

		if [ -d "$APP_LINK_BIN/$obj" ]; then
			rm -rf $APP_LINK_BIN/$obj
		fi
		ln -sf $APP_BIN/$obj $APP_LINK_BIN/$obj 
	done

	# LIB
	objs=`ls -a $APP_LIB`
	if [ -L "$APP_LINK_LIB" ] || [ ! -d "$APP_LINK_LIB" ]; then
		rm -rf $APP_LINK_LIB
		mkdir -p $APP_LINK_LIB
	fi
	# first find the other objs and then do uclibc.
	for obj in $objs; do
		if [ "$obj" == "." ] || [ "$obj" == ".." ]; then
			continue
		fi

		if [ -d "$APP_LINK_LIB/$obj" ]; then
			rm -rf $APP_LINK_LIB/$obj
		fi
		ln -sf $APP_LIB/$obj $APP_LINK_LIB/$obj 
	done
	# ipkg-opt
	ln -sf $APP_LIB/libipkg.so.0.0.0 $APP_LINK_LIB/libipkg.so.0
	ln -sf $APP_LIB/libipkg.so.0.0.0 $APP_LINK_LIB/libipkg.so
	ln -sf $APP_LIB/ld-uClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/ld-uClibc.so.1
	ln -sf $APP_LIB/ld-uClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/ld-uClibc.so.0
	ln -sf $APP_LIB/ld-uClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/ld-uClibc.so
	ln -sf $APP_LIB/libcrypt-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libcrypt.so.1
	ln -sf $APP_LIB/libcrypt-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libcrypt.so
	ln -sf $APP_LIB/libuClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libc.so.1
	ln -sf $APP_LIB/libuClibc-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libc.so
	ln -sf $APP_LIB/libdl-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libdl.so.1
	ln -sf $APP_LIB/libgcc_s.so.1 $APP_LINK_LIB/libgcc_s.so
	ln -sf $APP_LIB/libm-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libm.so.1
	ln -sf $APP_LIB/libm-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libm.so
	ln -sf $APP_LIB/libpthread-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libpthread.so.1
	ln -sf $APP_LIB/libpthread-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libpthread.so
	ln -sf $APP_LIB/libresolv-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libresolv.so.1
	ln -sf $APP_LIB/libresolv-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libresolv.so	
	ln -sf $APP_LIB/librt-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/librt.so
	ln -sf $APP_LIB/librt-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/librt.so.1
	ln -sf $APP_LIB/libthread_db-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libthread_db.so.1
	ln -sf $APP_LIB/libthread_db-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libthread_db.so
	ln -sf $APP_LIB/libutil-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libutil.so.1
	ln -sf $APP_LIB/libutil-$NEW_UCLIBC_VERSION.so $APP_LINK_LIB/libutil.so
	#libnsl
	ln -sf $APP_LIB/libnsl-$NEW_NSL_VERSION.so $APP_LINK_LIB/libnsl.so.0
	ln -sf $APP_LIB/libnsl-$NEW_NSL_VERSION.so $APP_LINK_LIB/libnsl.so.1
	ln -sf $APP_LIB/libnsl-$NEW_NSL_VERSION.so $APP_LINK_LIB/libnsl.so
	#libstdc++
	ln -sf $APP_LIB/libstdc++.so.$NEW_STDC_VERSION $APP_LINK_LIB/libstdc++.so.6
	ln -sf $APP_LIB/libstdc++.so.$NEW_STDC_VERSION $APP_LINK_LIB/libstdc++.so
}

# $1: package name, $2: mounted path.
_download_package(){
	#if [ "$1" == "uclibc-opt" ] || [ "$1" == "ipkg-opt" ]; then
		#return 0
	#fi
	download_file=
	pkg_server=
	pkg_file=
	installed_ipk_path=
	need_download=1


	if [ "$need_download" == "1" ]; then
		# Geting the app's file name...
		server_names=`grep -n '^src.*' $CONF_FILE |sort -r |awk '{print $3}'`

		if [ "$pkg_type" != "arm" ] && [ -n "$apps_ipkg_old" ] && [ "$apps_ipkg_old" == "1" ]; then
			IS_SUPPORT_SSL=`nvram get rc_support|grep -i HTTPS`
			if [ -n "$IS_SUPPORT_SSL" ]; then
				wget_options="$wget_options --no-check-certificate"
			fi
		fi

		for s in $server_names; do
		if [ "$1" == "libxml2" ] && [ "$s" != "http://ipkg.nslu2-linux.org/optware-ng/buildroot-armeabi-ng" ]; then
			continue
		fi

			if [ "$pkg_type" != "arm" ] && [ -n "$apps_ipkg_old" ] && [ "$apps_ipkg_old" == "1" ]; then				
				pkg_file=`_get_pkg_file_name_old $1 $s 0`
			else
				pkg_file=`_get_pkg_file_name $1`
			fi

			wget --spider $wget_options $s/$pkg_file
			if [ "$?" == "0" ]; then
				pkg_server=$s
				break
			fi
			
		done
		if [ -z "$pkg_server" ]; then
			nvram set apps_state_error=6
			return 1
		fi

		# Downloading the app's file name...
		if [ "$pkg_type" != "arm" ] && [ -n "$apps_ipkg_old" ] && [ "$apps_ipkg_old" == "1" ] && [ "$pkg_server" == "$ASUS_SERVER" ]; then
			ipk_file_name=`_get_pkg_file_name_old $1 $pkg_server 1`
		else
			ipk_file_name=$pkg_file
		fi

		target=$2/$ipk_file_name
		nvram set apps_download_file=$ipk_file_name
		nvram set apps_download_percent=0
		#echo "wget -c $wget_options $pkg_server/$pkg_file -O $target"
		wget -c $wget_options $pkg_server/$pkg_file -O $target &
		wget_pid=`pidof wget`
		if [ -z "$wget_pid" ] || [ $wget_pid -lt 1 ]; then
			rm -rf $target
			sync
			nvram set apps_state_error=6
			return 1
		fi
		i=0
		while [ $i -lt $wget_timeout ] && [ ! -f "$target" ]; do
			i=$((i+1))
			sleep 1
		done

		wget_pid=`pidof wget`
		size=`/usr/sbin/app_get_field.sh $1 Size 2`
		target_size=`ls -l $target |awk '{printf $5}'`
		percent=$((target_size*100/size))
		nvram set apps_download_percent=$percent
		while [ -n "$wget_pid" ] && [ -n "$target_size" ] && [ $target_size -lt $size ]; do
			sleep 1

			wget_pid=`pidof wget`
			target_size=`ls -l $target |awk '{printf $5}'`
			percent=$((target_size*100/size))
			nvram set apps_download_percent=$percent
		done

		target_size=`ls -l $target |awk '{printf $5}'`
		percent=$((target_size*100/size))
		nvram set apps_download_percent=$percent
		if [ -z "$percent" ] || [ $percent -ne 100 ]; then
			rm -rf $target
			sync
			#nvram set apps_state_error=6
			return 1
		fi

		installed_ipk_path=$2"/"$ipk_file_name
	fi

	download_file=$installed_ipk_path

	return 0
}

_install_rest_lib(){
	target_file=
	INSTALL_LIST="pcre zlib"
	for install_file in $INSTALL_LIST; do
		_download_package $install_file $APPS_INSTALL_PATH/tmp	
		if [ -z "$target_file" ]; then
			target_file=$download_file
		else
			target_file=$target_file" $download_file"
		fi		
	done

	for file in $target_file; do
		ipkg install $file 1>$install_log3
		#ipkg install $file
		wait
		rm -rf $file
	done

	rm -rf $install_log3
}

# $1: package name, $2: yes or no, $3: 0 (if don't need to restart or stop).
_app_set_enabled(){
# $1: package name.
# return value. 1: have package. 0: no package.

#nvram set apps_state_enable=0 # INITIALIZING
if [ -z "$1" ] || [ -z "$2" ]; then
	#echo "Usage: app_set_enabled.sh <Package name> <yes|no>"
	nvram set apps_state_error=1
	exit 1
fi

if [ "$2" != "yes" ] && [ "$2" != "no" ]; then
	#echo "Usage: app_set_enabled.sh <Package name> <yes|no>"
	nvram set apps_state_error=1
	exit 1
fi

pkg_control_file=
_check_package $1
if [ "$?" == "0" ]; then
	nvram set apps_state_error=8
	exit 1
else
	pkg_control_file=/opt/lib/ipkg/info/$1.control
fi


#nvram set apps_state_enable=1 # SETTING
orig_value=`/usr/sbin/app_get_field.sh $1 Enabled 1`
if [ "$orig_value" != "$2" ]; then
	Field_enabled=`grep "Enabled: " "$pkg_control_file"`

	if [ -z "$Field_enabled" ]; then
		sed -i '$a Enabled: '$2 $pkg_control_file
	else
		sed -i 's/Enabled: .*$/Enabled: '$2'/g' $pkg_control_file
	fi
fi

if [ "$3" != "0" ]; then
	if [ "$2" == "yes" ]; then
		/usr/sbin/app_init_run.sh $1 restart
	fi
fi

#nvram set apps_state_enable=2 # FINISHED
}

#$1 package name  $2 mount path
install_package(){

	#nvram set apps_state_install=3 # DOWNLOADING

	if [ "$1" == "downloadmaster" ];then
		_install_rest_lib
	fi
need_asuslighttpd=0
need_asusffmpeg=0
need_smartsync=0
if [ "$1" == "downloadmaster" ]; then
	DM_version1=`/usr/sbin/app_get_field.sh downloadmaster Version 2 |awk 'BEGIN{FS="."}{print $1}'`
	DM_version4=`/usr/sbin/app_get_field.sh downloadmaster Version 2 |awk 'BEGIN{FS="."}{print $4}'`

	if [ "$DM_version1" -gt "3" ]; then
		need_asuslighttpd=1
	elif [ "$DM_version1" -eq "3" ] && [ "$DM_version4" -gt "59" ]; then
		need_asuslighttpd=1
	fi
elif [ "$1" == "mediaserver" ]; then
	MS_version1=`/usr/sbin/app_get_field.sh mediaserver Version 2 |awk 'BEGIN{FS="."}{print $1}'`
	MS_version4=`/usr/sbin/app_get_field.sh mediaserver Version 2 |awk 'BEGIN{FS="."}{print $4}'`

	if [ "$MS_version1" -gt "1" ]; then
		need_asuslighttpd=1
	elif [ "$MS_version1" -eq "1" ] && [ "$MS_version4" -gt "15" ]; then
		need_asuslighttpd=1
	fi

	if [ "$MS_version1" -gt "1" ]; then
		need_asusffmpeg=1
	elif [ "$MS_version1" -eq "1" ] && [ "$MS_version4" -ge "30" ]; then
		need_asusffmpeg=1
	fi
elif [ "$1" == "aicloud" ]; then
	AC_version1=`/usr/sbin/app_get_field.sh aicloud Version 2 |awk 'BEGIN{FS="."}{print $1}'`
	AC_version4=`/usr/sbin/app_get_field.sh aicloud Version 2 |awk 'BEGIN{FS="."}{print $4}'`

	if [ "$AC_version1" -gt "1" ]; then
		need_smartsync=1
	elif [ "$AC_version1" -eq "1" ] && [ "$AC_version4" -gt "4" ]; then
		need_smartsync=1
	fi
fi

target_file=
if [ "$need_asuslighttpd" == "1" ]; then
	_download_package asuslighttpd $APPS_INSTALL_PATH/tmp
	if [ "$?" != "0" ]; then
		# apps_state_error was already set by _download_package().
		exit 1
	fi
	if [ -z "$target_file" ]; then
		target_file=$download_file
	else
		target_file=$target_file" $download_file"
	fi
fi
if [ "$need_asusffmpeg" == "1" ]; then
	#echo "Downloading the dependent package: asusffmpeg..."
	_download_package asusffmpeg $APPS_INSTALL_PATH/tmp
	if [ "$?" != "0" ]; then
		# apps_state_error was already set by _download_package().
		exit 1
	fi
	if [ -z "$target_file" ]; then
		target_file=$download_file
	else
		target_file=$target_file" $download_file"
	fi
fi
if [ "$need_smartsync" == "1" ]; then
	if [ -n "$apps_ipkg_old" ] && [ "$apps_ipkg_old" == "1" ]; then
		deps=`/usr/sbin/app_get_field.sh smartsync Depends 2 |sed 's/,/ /g'`

		for dep in $deps; do
			#echo "Downloading the dependent package of smartsync: $dep..."
			_download_package $dep $APPS_INSTALL_PATH/tmp
			if [ "$?" != "0" ]; then
				# apps_state_error was already set by _download_package().
				exit 1
			fi
			if [ -z "$target_file" ]; then
				target_file=$download_file
			else
				target_file=$target_file" $download_file"
			fi
		done
	fi

	#echo "Downloading the dependent package: smartsync..."
	_download_package smartsync $APPS_INSTALL_PATH/tmp
	if [ "$?" != "0" ]; then
		#echo "Fail to download the package: smartsync!"
		# apps_state_error was already set by _download_package().
		exit 1
	fi
	if [ -z "$target_file" ]; then
		target_file=$download_file
	else
		target_file=$target_file" $download_file"
	fi
fi

#if [ "$1" != "aicloud" ]; then
	_download_package $1 $APPS_INSTALL_PATH/tmp
#then
if [ "$?" != "0" ]; then
	# apps_state_error was already set by _download_package().
	exit 1
fi
if [ -z "$target_file" ]; then
	target_file=$download_file
else
	target_file=$target_file" $download_file"
fi

nvram set apps_state_install=4 # INSTALLING
for file in $target_file; do	
	ipkg install $file 1>$install_log2 &
	result=`_log_ipkg_install $1 $install_log2`
	if [ "$result" == "error" ]; then
		nvram set apps_state_error=7
		exit 1
	else
		rm -rf $file
		rm -f $install_log2
	fi
done


if [ "$APPS_MOUNTED_TYPE" == "vfat" ] || [ "$APPS_MOUNTED_TYPE" == "tfat" ]; then
	/usr/sbin/app_move_to_pool.sh $APPS_DEV
	if [ "$?" != "0" ]; then
		# apps_state_error was already set by app_move_to_pool.sh.
		exit 1
	fi
fi

base_link

if [ "$?" != "0" ]; then
	# apps_state_error was already set by app_base_link.sh.
	exit 1
fi

if [ "$need_asuslighttpd" == "1" ]; then
	if [ "$1" == "downloadmaster" ] || [ "$1" == "mediaserver" ]; then
		_app_set_enabled asuslighttpd "yes"
	fi
fi
if [ "$need_asusffmpeg" == "1" ]; then
	_app_set_enabled asusffmpeg "yes"
fi
if [ "$need_smartsync" == "1" ]; then
	if [ -n "$apps_ipkg_old" ] && [ "$apps_ipkg_old" == "1" ]; then
		deps=`/usr/sbin/app_get_field.sh smartsync Depends 2 |sed 's/,/ /g'`

		for dep in $deps; do
			_app_set_enabled $dep "yes"
		done
	fi	
	_app_set_enabled smartsync "yes"
fi

if [ "$1" != "aicloud" ]; then
	_app_set_enabled $1 "yes"
fi
}


_remove_old_ipk(){
	REMOVE_LIST=`ipkg list_installed|awk '{print $1}'`
	base_list="ipkg-opt uclibc-opt Successfully"
	remove_file=
	#ipkg remove old lib
	for remove_file in $REMOVE_LIST; do
		leave=0
		list=
		for list in $base_list; do
			if [ "$remove_file" == "$list" ]; then
			leave=1
			fi
		done
		if [ "$leave" == "0" ]; then
			nvram set apps_depend_action="remove"
			nvram set apps_depend_action_target="$remove_file"		
			ipkg remove $remove_file -force-depends 1> $APPS_INSTALL_PATH/ipkg_log_2.txt
			wait
		fi
	done

	rm -rf $APPS_INSTALL_PATH/ipkg_log_2.txt

	if [ "$APPS_MOUNTED_TYPE" == "vfat" ] || [ "$APPS_MOUNTED_TYPE" == "tfat" ]; then
		list_app_bin=`ls -a $APP_BIN`
		list_app_lib=`ls -a $APP_LIB`
		asusware_bin="ipkg update-alternatives"
		asusware_lib="ld-uClibc-0.9.28.so libcrypt-0.9.28.so libgcc_s.so.1 libipkg.so.0.0.0 libm-0.9.28.so libpthread-0.9.28.so libresolv-0.9.28.so librt-0.9.28.so libthread_db-0.9.28.so libuClibc-0.9.28.so libutil-0.9.28.so ipkg"

		list_link_bin=`ls -a $APP_LINK_BIN`
		list_link_lib=`ls -a $APP_LINK_LIB`
		opt_bin="ipkg ipkg-opt update-alternatives"
		opt_lib="ipkg ld-uClibc-0.9.28.so ld-uClibc.so ld-uClibc.so.0 libc.so libc.so.0 libcrypt-0.9.28.so libcrypt.so libcrypt.so.0 libgcc_s.so libgcc_s.so.1 libipkg.so libipkg.so.0 libipkg.so.0.0.0 libm-0.9.28.so libm.so libm.so.0 libpthread-0.9.28.so libpthread.so libpthread.so.0 libresolv-0.9.28.so libresolv.so libresolv.so.0 librt-0.9.28.so librt.so librt.so.0 libthread_db-0.9.28.so libthread_db.so libthread_db.so.1 libuClibc-0.9.28.so libutil-0.9.28.so libutil.so libutil.so.0"
		#delete asusware bin		
		delete_bin=
		for delete_bin in $list_app_bin; do
			if [ "$delete_bin" == "." ] || [ "$delete_bin" == ".." ]; then
				continue
			fi
			leave=0
			list_file=
			for list_file in $asusware_bin; do
				if [ "$delete_bin" == "$list_file" ]; then
					leave=1
					continue
				fi
			done
			if [ "$leave" == "0" ]; then
				rm -rf $APP_BIN/$delete_bin
			fi
		done

		#delete asusware lib
		delete_lib=
		for delete_lib in $list_app_lib; do
			if [ "$delete_lib" == "." ] || [ "$delete_lib" == ".." ]; then
				continue
			fi
			leave=0
			list_file=
			for list_file in $asusware_lib; do
				if [ "$delete_lib" == "$list_file" ]; then
					leave=1
					continue
				fi
			done
			if [ "$leave" == "0" ]; then
				rm -rf $APP_LIB/$delete_lib
			fi
		done

		##delete opt bin
		delete_bin=
		for delete_bin in $list_link_bin; do
			if [ "$delete_bin" == "." ] || [ "$delete_bin" == ".." ]; then
				continue
			fi
			leave=0
			list_file=
			for list_file in $opt_bin; do
				if [ "$delete_bin" == "$list_file" ]; then
					leave=1
					continue
				fi
			done
			if [ "$leave" == "0" ]; then
				rm -rf $APP_LINK_BIN/$delete_bin
			fi
		done

		##delete opt lib
		delete_lib=
		for delete_lib in $list_link_lib; do
			if [ "$delete_lib" == "." ] || [ "$delete_lib" == ".." ]; then
				continue
			fi
			leave=0
			list_file=
			for list_file in $opt_lib; do
				if [ "$delete_lib" == "$list_file" ]; then
					leave=1
					continue
				fi
			done
			if [ "$leave" == "0" ]; then
				rm -rf $APP_LINK_LIB/$delete_lib
			fi
		done

	fi
}

_install_ipkg_opt()
{
	_download_package ipkg-opt $APPS_INSTALL_PATH/tmp
	nvram set apps_depend_action="Installing"
	nvram set apps_depend_action_target="ipkg-opt"	
	ipkg install $download_file 1>$install_log3
	#ipkg install $download_file
	rm -rf $download_file
	rm -f $install_log3
}

install_other_app(){
	app_inst_error=0
	dm_inst_error=1
	ms_inst_error=1
	aicloud_inst_error=1
	i=0

	while [ "$i" == "0" -o "$app_inst_error" == "1" ]; do
	
		i=$(($i+1))
		if [ "$i" -gt "2" ]; then
			break
		fi
				
		if [ "$dm_exist" == "1" ] && [ "$dm_inst_error" == "1" ]; then
			install_package downloadmaster
			if [ "$?" == "0" ]; then
				dm_inst_error=0
			else
				app_inst_error=1
			fi
		fi

				
		if [ "$ms_exist" == "1" ] && [ "$ms_inst_error" == "1" ]; then
			install_package mediaserver
			if [ "$?" == "0" ]; then
				ms_inst_error=0
			else
				app_inst_error=1
			fi
		fi
	done	
}

_change_optwareasus(){
	LIST_DIR=$APPS_PATH/lib/ipkg/lists
	DELETE_LIST="spawn-fcgi libxml2 readline wxbase zlib pcre bzip2 libevent ncurses libsigc++ libpar2 sqlite openssl libcurl"
	LIST_FILES=`grep -n '^src.*' $CONF_FILE |sort -r |awk '{print "'$LIST_DIR'/"$2}'`
	if [ -z "$DELETE_LIST" ]; then
		exit 1
	fi
	for f in $DELETE_LIST; do
		for f2 in $LIST_FILES; do
			if [ ! -f "$f2" ]; then
				continue
			fi
			if [ "$f2" != "$LIST_DIR/optware.asus" ];then
				continue
			fi

		
			line_first=`grep -n "Package: "$f"" $f2 | awk 'BEGIN{FS=":"}{print $1}'`
			if [ -z "$line_first" ]; then
				continue
			fi
		
			line_info=`sed -n "$line_first"p $f2`
			while [ ! -z "$line_info" ]; do
				if [ ! -z "$line_info" ];then
					sed -i "$line_first"d  $f2
				fi
				line_info=`sed -n "$line_first"p  $f2`
			done
		done
	done

}


_check_old_environment(){
	uclibc_control_file=$APPS_INSTALL_PATH/lib/ipkg/info/uclibc-opt.control

	if [ -f "$uclibc_control_file" ]; then
		uclibc_version=`cat "$uclibc_control_file" |grep "Version:"`
		uclibc_version=${uclibc_version:9}
		ASUS_UCLIBC_VER_NUM=`echo $ASUS_UCLIBC_VER |sed 's/\.//g'|sed 's/\-//g'`	
		uclibc_version_num=`echo $uclibc_version |sed 's/\.//g'|sed 's/\-//g'`
		if [ "$ASUS_UCLIBC_VER_NUM" \> "$uclibc_version_num" ]; then
			app_init_run.sh allpkg stop

			if [ -f $APPS_INSTALL_PATH/lib/ipkg/info/downloadmaster.control ]; then
				dm_exist=1
			fi

			if [ -f $APPS_INSTALL_PATH/lib/ipkg/info/mediaserver.control ]; then
				ms_exist=1
			fi
			
			if [ -n "$apps_new" ] && [ $apps_new -eq 1 ]; then
				#new FW
				cp -rf $APPS_INSTALL_PATH $APPS_INSTALL_PATH_BAK
				rm -rf $APPS_INSTALL_PATH

				#APPS_DEV=`nvram get apps_dev`
				app_inst_error=0
				dm_inst_error=1
				ms_inst_error=1
				aicloud_inst_error=1
				i=0

				while [ "$i" == "0" -o "$app_inst_error" == "1" ]; do
	
					i=$(($i+1))
					if [ "$i" -gt "2" ]; then
						break
					fi
				
					if [ "$dm_exist" == "1" ] && [ "$dm_inst_error" == "1" ]; then
						app_install.sh downloadmaster $APPS_DEV
						if [ "$?" == "0" ]; then
							dm_inst_error=0
						else
							app_inst_error=1
						fi
					fi

				
					if [ "$ms_exist" == "1" ] && [ "$ms_inst_error" == "1" ]; then
						sh app_install.sh mediaserver $APPS_DEV
						if [ "$?" == "0" ]; then
							ms_inst_error=0
						else
							app_inst_error=1
						fi
					fi
				done

				if [ "$app_inst_error" == "1" ]; then #install error
					rm -rf $APPS_INSTALL_PATH
					cp -rf $APPS_INSTALL_PATH_BAK $APPS_INSTALL_PATH
					rm -rf $APPS_INSTALL_PATH_BAK
					app_init_run.sh allpkg start
				else
					rm -rf $APPS_INSTALL_PATH_BAK
				fi
			else
				#old FW
				_remove_old_ipk
				_install_ipkg_opt
				install_other_app
				install_package aicloud
				aicloud_installed=1
			fi
		else
			if [ -z "$apps_new" ] || [ $apps_new -ne 1 ]; then
				_change_optwareasus
			fi
		fi

	fi	
}

reinstall_smartsync_depends(){
	REMOVE_LIST="libxml2"
	for remove_file in $REMOVE_LIST; do
		#nvram set apps_depend_action="remove"
		#nvram set apps_depend_action_target="$remove_file"		
		ipkg remove $remove_file -force-depends 1> $APPS_INSTALL_PATH/ipkg_log_2.txt
		wait	
	done

	for remove_file in $REMOVE_LIST; do
		_download_package $remove_file $APPS_INSTALL_PATH/tmp
		nvram set apps_depend_action="Installing"
		nvram set apps_depend_action_target="$remove_file"
		ipkg install $download_file 1>$install_log3
		rm -rf $download_file
		rm -rf $install_log3
	done
	
}

aicloud_installed=0
ipkg_ready=`which ipkg`
if [ -n "$ipkg_ready" ]; then
	_check_old_environment
	if [ -z "$apps_new" ] || [ $apps_new -ne 1 ]; then
		if [ "$aicloud_installed" != "1" ]; then
			reinstall_smartsync_depends
		fi
	fi
fi

