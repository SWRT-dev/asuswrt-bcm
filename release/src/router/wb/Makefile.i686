#include ../common.mak

export  SRCBASE := $(shell pwd)
BUILD := i386-pc-linux-gnu
HOSTCC := gcc
PLATFORM := i686-cm-linux
CROSS_COMPILE := i686-cm-linux-
CONFIGURE := ./configure --host=i686-cm-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/../../../.. && pwd)
#export LD_DIR := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/../../../../../staging && pwd)
export LD_DIR := $(TOOLCHAIN)

export CC := $(CROSS_COMPILE)gcc
export AR := $(CROSS_COMPILE)ar
export AS := $(CROSS_COMPILE)as
export LD := $(CROSS_COMPILE)ld
export NM := $(CROSS_COMPILE)nm
export RANLIB := $(CROSS_COMPILE)ranlib
export STRIP := $(CROSS_COMPILE)strip
export SIZE := $(CROSS_COMPILE)size
export CXX := $(CROSS_COMPILE)g++

export EXTRACFLAGS := -DBCMWPA2 -fno-delete-null-pointer-checks -mips32 -mtune=mips32
export INSTALLDIR := /WorkSpace_oleg/AiCloud/shared

WSLIB=libws.so

CURL_DIR=../curl-7.21.7
XML2_DIR=../libxml2
JSON_C_DIR=$(TOP)/json-c
OPENSSL_DIR=../openssl-ipk

WS_SRC=ws_src
OUTPUT=output

SRC=$(wildcard *.c)
OBJS=$(patsubst %.c, %.o, $(SRC))
#WS_SOURCES := $(WS_SRC)/curl_api.c $(WS_SRC)/parse_xml.c $(WS_SRC)/wb.c $(WS_SRC)/wb_util.c $(WS_SRC)/ssl_api.c $(WS_SRC)/log.c
WS_SOURCES := $(wildcard $(WS_SRC)/*.c)
WSLIB_OBJS := $(WS_SOURCES:%.c=$(OUTPUT)/%.o)

all: $(WSLIB)

CFLAGS = -fPIC -I$(CURL_DIR)/include -I$(OPENSSL_DIR)/include -I$(XML2_DIR)/include -I$(JSON_C_DIR) -I.  -I$(WS_SRC)

LDFLAGS = -L$(OPENSSL_DIR) -lcrypto -lssl
LDFLAGS += -L$(CURL_DIR)/lib/.libs -lcurl
LDFLAGS += -L$(XML2_DIR)/.libs -lxml2 -lpthread
LDFLAGS += -L$(JSON_C_DIR)/.libs -ljson-c
LDFLAGS += -ldl

$(WSLIB): $(WSLIB_OBJS)
	$(LD) -shared -o $@ $^ $(LDFLAGS)

$(WSLIB_OBJS): $(OUTPUT)/%.o: %.c
	mkdir -p $(dir $@)	
	$(CC) $(CFLAGS) -c $< -o $@

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@ 

install: all
	$(STRIP) $(WSLIB)
	install -D $(WSLIB) $(INSTALLDIR)/lib/$(WSLIB)

clean:
	rm -rf *.o  *.so output

