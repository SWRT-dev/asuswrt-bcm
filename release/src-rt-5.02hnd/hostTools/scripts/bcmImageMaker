#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;

my $cferom;
my $pmcrom;
my $pmcflag;
my $blocksize;
my $rootfs;
my $bootfs;
my $image;
my $verbose;
my $flashtype;
my $fsonly;
my $ubifs;
my $squbifs;
my $bootofs;
my $bootsize;
my $bootofsinkb;
my $bootsizeinkb;
my $blocksizeinkb;
my $securehdr;
my $unsecurehdr;
my $secbtdatadir;
my $secbtldr;
my $btrmflag;
my $ubionlyimage;
my $storedir;
my $romenc;
my $usefldoem;
my $imgsizealloc;
my $nvramalloc;

sub create_spi_nand_patch {

my $offset=shift;
my $bindata;
my $cfe_headered_file_name=shift;

	open CHFN, "<$cfe_headered_file_name" or die "Error opening $cfe_headered_file_name";
	binmode CHFN;

	read(CHFN, $bindata, 1024, 0);

	close (CHFN);

	my $real_offset=$offset+0x400;
	my $patch_base=(($real_offset&0xfffff)>>8);

	if(($patch_base + 0x20) > 0x400) {
		return "\377" x 1024;
	}

	( my $magic_1, my $magic_2, my $ver, my $modeElegible, my $hdrLen, my $sbiSize, my $Ver, my $crc, my $authhdrLen) = unpack("IIIIIIIII", $bindata);

	$patch_base=$patch_base+0x10;
	my $binary="\377" x $patch_base;
	$binary=$binary.pack('I', $hdrLen);
	$binary=$binary.pack('I', $sbiSize);
	$binary=$binary.pack('II', 0xffffffff, 0xffffffff);
	$binary=$binary.pack('I', $authhdrLen);
	$binary=$binary."\377" x (0x400-($patch_base+4+16));

return $binary;

}

GetOptions(
    "cferom=s", \$cferom, "pmcrom=s", \$pmcrom, "blocksize=i", \$blocksize, "rootfs=s", \$rootfs,  "bootfs=s", \$bootfs,
    "fsonly=s", \$fsonly, "image=s",     \$image,     "verbose",  \$verbose, "ubifs",    \$ubifs,  "squbifs", \$squbifs,
    "bootofs=i", \$bootofs, "bootsize=i", \$bootsize, "securehdr", \$securehdr, "unsecurehdr", \$unsecurehdr,
    "ubionlyimage", \$ubionlyimage
) or die("bad option");

my @required_env = (
    qw[
      PROFILE_DIR HOSTTOOLS_DIR BRCM_VOICE_BOARD_ID BRCM_NUM_MAC_ADDRESSES BRCM_BOARD_ID
      ]
);

foreach (@required_env) {
    $ENV{$_}
      or die("$_ not defined in environment");
}

if ( $blocksize == 16 * 1024 ) {
    $flashtype = "NAND16";
}
elsif ( $blocksize == 128 * 1024 ) {
    $flashtype = "NAND128";
}
elsif ( $blocksize == 256 * 1024 ) {
    $flashtype = "NAND256";
}
elsif ( $blocksize == 512 * 1024 ) {
    $flashtype = "NAND512";
}
elsif ( $blocksize == 1024 * 1024 ) {
    $flashtype = "NAND1024";
}
elsif ( $blocksize == 2048 * 1024 ) {
    $flashtype = "NAND2048";
}
else {
    die("blocksize not supported");
}

unless( $bootofs < $bootsize )
{
    die ("invalid boot offset");
}

unless ( ( $bootsize % $blocksize ) == 0 )
{
    die ("invalid boot size, must be multiple of block size.");
}


chdir $ENV{PROFILE_DIR};

$storedir = "$ENV{PROFILE_DIR}/../cfe";

$bootsizeinkb = $bootsize/1024;
$bootofsinkb = $bootofs/1024;
$blocksizeinkb = $blocksize/1024;

e("dd if=/dev/zero of=bootofs.tmp bs=1024 count=$bootofsinkb > bootofs.tmp");
if ( ($pmcrom) && (-e $pmcrom) ) {
    e("cat $pmcrom bootofs.tmp | head --bytes=$bootofs > bootofs.tmp");
    $pmcflag = 1;
}
else {
    $pmcflag = 0;
}

if ( ($unsecurehdr) || ($securehdr) ) {

    # if unsecurehdr is defined, then we know it is gen3 and we are building an unsecure boot
    # if securehdr is defined, then it could be gen1, 2 or 3 and we are building secure boot
    $btrmflag = 1;

    $secbtldr = "$storedir/cfe$ENV{BRCM_CHIP}bi_nand.bin";
    e("rm -f $secbtldr");

    if ($ENV{BTRM_BOOT_ONLY} eq "y") {

        # XIP to flash not supported. Bootrom boot only, therefore need a flash layout the bootrom recognizes. 

	# Build the beginning of the boot partition that is common to all bootrom-boot-only flash layouts
	$nvramalloc=1024*4;
        $imgsizealloc=1024*$ENV{BTRM_IMAGE_SIZE_ALLOCATION};
        $bootsize=1024*$ENV{BTRM_NAND_BOOT_PARTITION_SIZE};
        e("cat $cferom | head --bytes=$nvramalloc > nvramalloc.tmp");
        e("dd if=/dev/zero of=imgsizealloc.tmp bs=1024 count=$ENV{BTRM_IMAGE_SIZE_ALLOCATION} > imgsizealloc.tmp");
        e("dd if=/dev/zero of=fileboot.tmp bs=1024 count=$ENV{BTRM_NAND_BOOT_PARTITION_SIZE} > fileboot.tmp");
        e("cat bootofs.tmp nvramalloc.tmp > image.tmp");
        my $i;
        my $j;

        # We know we always need an unsecure, headered cferom, so build it
        e("$ENV{HOSTTOOLS_DIR}/SecureBootUtils/makeGen3UnsecureBootCfe nand $ENV{BRCM_CHIP} $ENV{PROFILE_DIR}");
        if ( ($secbtldr) && (-e $secbtldr) ) {
            e("mv $secbtldr $storedir/cfe$ENV{BRCM_CHIP}unsec_unenc.bin");
        } else {
            die("The file $secbtldr was not successfully created. Exiting.");
        }

        if ($securehdr) {

            # Gen3 secure boot. Cferom within secure,headered image might be in the clear or AES encrypted (2 times with two different keys)
            if ($ENV{SECURE_BOOT_ENCRYPT_BTLDRS} eq "y") {

                print "Packaging gen3 secure boot in which the cfe rom is encrypted. This image expects the bootrom to run ...\n";

                # We know we need a mfg-only secure, headered cferom that is encrypted with Kaes-mfg, so build it
		# This is a mfg-secure only image, so it doesn't matter what the oem_fld setting is ... just set it to no
                e("$ENV{HOSTTOOLS_DIR}/SecureBootUtils/makeGen3SecureBootCfe nand $ENV{BRCM_CHIP} $ENV{PROFILE_DIR} encr-Kaes-mfg oem_fld_no");
                if ( ($secbtldr) && (-e $secbtldr) ) {
                    e("mv $secbtldr $storedir/cfe$ENV{BRCM_CHIP}sec_enc_mfg.bin");
                } else {
                    die("The file $secbtldr was not successfully created. Exiting.");
                }

                # We need a field-only secure, headered cferom that is encrypted with either Kroe-fld or Kaes-fld
                if ($ENV{SECURE_BOOT_PROCESS_FLD_OEM_COT} eq "y") {
                    e("$ENV{HOSTTOOLS_DIR}/SecureBootUtils/makeGen3SecureBootCfe nand $ENV{BRCM_CHIP} $ENV{PROFILE_DIR} encr-Kaes-fld oem_fld_yes");
                    if ( ! (($secbtldr) && (-e $secbtldr)) ) {
                        die("The file $secbtldr was not successfully created. Exiting.");
                    }
                } else {
                    e("$ENV{HOSTTOOLS_DIR}/SecureBootUtils/makeGen3SecureBootCfe nand $ENV{BRCM_CHIP} $ENV{PROFILE_DIR} encr-Kroe-fld oem_fld_no");
                    if ( ! (($secbtldr) && (-e $secbtldr)) ) {
                        die("The file $secbtldr was not successfully created. Exiting.");
                    }
                }

                # Build the boot partition
                for ($i = 1; $i <= $ENV{BTRM_NUM_IMAGES_IN_PARTITION}; $i++) {
                    $j=$bootofs+$nvramalloc+($i*$imgsizealloc);
                    if ($i < ($ENV{BTRM_NUM_IMAGES_IN_PARTITION} - 1)) { 
                        e("cat image.tmp $secbtldr imgsizealloc.tmp | head --bytes=$j > image2.tmp");
                    } else {
                        if ($i < $ENV{BTRM_NUM_IMAGES_IN_PARTITION}) { 
                            e("cat image.tmp $storedir/cfe$ENV{BRCM_CHIP}unsec_unenc.bin imgsizealloc.tmp | head --bytes=$j > image2.tmp");
                        }
                        if ($i == $ENV{BTRM_NUM_IMAGES_IN_PARTITION}) { 
                            e("cat image.tmp $storedir/cfe$ENV{BRCM_CHIP}sec_enc_mfg.bin imgsizealloc.tmp | head --bytes=$j > image2.tmp");
                        }
                    }
                    e("mv image2.tmp image.tmp");
                }
                e("cat image.tmp fileboot.tmp | head --bytes=$bootsize > image2.tmp");
                e("mv image2.tmp image.tmp");

            } else {

	        # cferom is in the clear. Only need to build a headered image in which it is good for both mfg secure mode and field secure mode
                print "Packaging gen3 secure boot in which the cfe rom is not encrypted. This image expects the bootrom to run ...\n";

                if ($ENV{SECURE_BOOT_PROCESS_FLD_OEM_COT} eq "y") {
                    e("$ENV{HOSTTOOLS_DIR}/SecureBootUtils/makeGen3SecureBootCfe nand $ENV{BRCM_CHIP} $ENV{PROFILE_DIR} unencr oem_fld_yes");
                } else {
                    e("$ENV{HOSTTOOLS_DIR}/SecureBootUtils/makeGen3SecureBootCfe nand $ENV{BRCM_CHIP} $ENV{PROFILE_DIR} unencr oem_fld_no");
                }
                if ( ($secbtldr) && (-e $secbtldr) ) {

                    for ($i = 1; $i <= $ENV{BTRM_NUM_IMAGES_IN_PARTITION}; $i++) {
                        $j=$bootofs+$nvramalloc+($i*$imgsizealloc);
			if ($i < $ENV{BTRM_NUM_IMAGES_IN_PARTITION}) { 
                            e("cat image.tmp $secbtldr imgsizealloc.tmp | head --bytes=$j > image2.tmp");
                        } else {
                            e("cat image.tmp $storedir/cfe$ENV{BRCM_CHIP}unsec_unenc.bin imgsizealloc.tmp | head --bytes=$j > image2.tmp");
                        }
		        e("mv image2.tmp image.tmp");
                    }
                    e("cat image.tmp fileboot.tmp | head --bytes=$bootsize > image2.tmp");
                    e("mv image2.tmp image.tmp");

                } else {
                    die("The file $secbtldr was not successfully created. Exiting.");
                }
            }

        } else {

            # Unsecure only boot partition. Build the entire boot partition
            print "Packaging gen3 unsecure boot. This image expects the bootrom to run ...\n";

            for ($i = 1; $i <= $ENV{BTRM_NUM_IMAGES_IN_PARTITION}; $i++) {
	        my $Tdev,my $Tino,my $Tmode,my $Tnlink,my $Tuid,my $Tgid,my $Trdev,my $Tsize,my $Tatime,my $Tmtime,my $Tctime,my $Tblksize,my $Tblocks;
	        ($Tdev,$Tino,$Tmode,$Tnlink,$Tuid,$Tgid,$Trdev,$Tsize,$Tatime,$Tmtime,$Tctime,$Tblksize,$Tblocks)
	               = stat("image.tmp");
		my $one_k_patch=create_spi_nand_patch($Tsize, "$storedir/cfe$ENV{BRCM_CHIP}unsec_unenc.bin");
		open(patch_bin, ">patch.bin");
		binmode patch_bin;
		print patch_bin $one_k_patch;
		close(patch_bin);
                $j=$bootofs+$nvramalloc+($i*$imgsizealloc)+($i*1024);
                e("cat image.tmp patch.bin $storedir/cfe$ENV{BRCM_CHIP}unsec_unenc.bin imgsizealloc.tmp | head --bytes=$j > image2.tmp");
		e("mv image2.tmp image.tmp");
            }
            e("cat image.tmp fileboot.tmp | head --bytes=$bootsize > image2.tmp");
            e("mv image2.tmp image.tmp");

        }

    } else {

        # gen1 (63268) or gen2 secure boot. Build the entire boot partition
        e("dd if=/dev/zero of=fileboot.tmp bs=1024 count=$bootsizeinkb > fileboot.tmp");
        e("$ENV{HOSTTOOLS_DIR}/SecureBootUtils/makeSecureBootCfe nand $ENV{BRCM_CHIP} $ENV{PROFILE_DIR} $bootsize");
        if ( ($secbtldr) && (-e $secbtldr) ) {
            if ($ENV{BRCM_CHIP} == "63268") {
                print "Packaging with gen1 secure boot support ...\n";
                e("cat bootofs.tmp $secbtldr fileboot.tmp | head --bytes=$bootsize > image.tmp");
            } else {
                print "Packaging with gen2 secure boot support ...\n";
                e("cat bootofs.tmp $cferom fileboot.tmp | head --bytes=$bootsize > image.tmp");
	        my $i;
	        my $j;
                for ($i = 1; $i < $ENV{SECURE_BOOT_NUM_BOOT_BLKS}; $i++) {
                    $j=($i + 1)*$bootsize;
                    if ($i <= $ENV{SECURE_BOOT_NUM_BTLDR_IMAGES}) {
                        e("cat image.tmp $secbtldr fileboot.tmp | head --bytes=$j > image2.tmp");
                    } else {
                        e("cat image.tmp fileboot.tmp | head --bytes=$j > image2.tmp");
                    }
		    e("mv image2.tmp image.tmp");
                }
                $bootsize = $j;
            }
        } else {
            die("The file $secbtldr was not successfully created. Exiting.");
        }

    }
    e("rm -f $secbtldr");

} else {

    # Legacy XIP to flash boot
    print "Packaging with XIP boot support ...\n";
    $btrmflag = 0;
    e("dd if=/dev/zero of=fileboot.tmp bs=1024 count=$bootsizeinkb > fileboot.tmp");
    e("cat bootofs.tmp $cferom > image.tmp");

}


if (($ubifs) || ($squbifs)){
    if ($ubifs) {
        e("$ENV{HOSTTOOLS_DIR}/BcmFsTag -s 2 -u $blocksize > marker.tmp");
    }
    if ($squbifs) {
        e("$ENV{HOSTTOOLS_DIR}/BcmFsTag -s 2 -q $blocksize > marker.tmp");
    }
    if ($ubionlyimage) {
        e("cat image.tmp fileboot.tmp | head --bytes=$bootsize | cat - $rootfs > $image");
    }
    else {
        e("cat image.tmp fileboot.tmp | head --bytes=$bootsize | cat - $bootfs marker.tmp $rootfs > $image");
    }
    if ($fsonly) {
        e("cat $bootfs marker.tmp $rootfs > merged.tmp");
        e("$ENV{HOSTTOOLS_DIR}/addvtoken --endian $ENV{ARCH_ENDIAN} --chip $ENV{BRCM_CHIP} --flashtype $flashtype --btrm $btrmflag merged.tmp $fsonly.w");
    }
} 
else {
    e("cat image.tmp fileboot.tmp | head --bytes=$bootsize | cat - $rootfs > $image");
    if ($fsonly) {
        e("$ENV{HOSTTOOLS_DIR}/addvtoken --endian $ENV{ARCH_ENDIAN} --chip $ENV{BRCM_CHIP} --flashtype $flashtype --btrm $btrmflag $rootfs $fsonly.w");
    }
}

e("$ENV{HOSTTOOLS_DIR}/addvtoken --endian $ENV{ARCH_ENDIAN} --chip $ENV{BRCM_CHIP} --flashtype $flashtype --pmc $pmcflag --btrm $btrmflag $image $image.w");

e(      "$ENV{HOSTTOOLS_DIR}/createimg.pl --set boardid=$ENV{BRCM_BOARD_ID} "
       . " endian $ENV{ARCH_ENDIAN}"
       . " numbermac=$ENV{BRCM_NUM_MAC_ADDRESSES}"
       . " macaddr=$ENV{BRCM_BASE_MAC_ADDRESS}"
       . " tp=$ENV{BRCM_MAIN_TP_NUM}"
       . " psisize=$ENV{BRCM_PSI_SIZE}"
       . " flblksz=$blocksizeinkb"
       . " auxfsprcnt=$ENV{BRCM_AUXFS_PERCENT}"
       . " gponsn=$ENV{BRCM_GPON_SERIAL_NUMBER}"
       . " gponpw=$ENV{BRCM_GPON_PASSWORD}"
       . " misc1=$ENV{BRCM_MISC1_PARTITION_SIZE}"
      . " misc2=$ENV{BRCM_MISC2_PARTITION_SIZE}"
      . " misc3=$ENV{BRCM_MISC3_PARTITION_SIZE}"
      . " misc4=$ENV{BRCM_MISC4_PARTITION_SIZE}"
      . " --wholeflashfile=$image.w"
      . " --nvramfile $ENV{HOSTTOOLS_DIR}/nvram.h"
      . " --nvramdefsfile $ENV{HOSTTOOLS_DIR}/nvram_defaults.h"
      . " --conf $ENV{HOSTTOOLS_DIR}/local_install/conf/$ENV{TOOLCHAIN_PREFIX}.conf");


# five lines below used for emulation
# e("cat $image | head --bytes=1048576 > dummy.tmp");
# my $objcopy;
# $objcopy = "/opt/toolchains/crosstools-aarch64-gcc-4.9-linux-4.1-glibc-2.20-binutils-2.24/usr/bin/aarch64-buildroot-linux-gnu-objcopy";
# e("$objcopy --output-target=srec --input-target=binary --srec-forceS3 --change-addresses=0xffe00000 dummy.tmp $image.srec");
# e("rm -f dummy.tmp");


e("rm -f $image merged.tmp marker.tmp image.tmp imgsizealloc.tmp nvramalloc.tmp fileboot.tmp bootofs.tmp patch.bin");
e("rm -f $storedir/cfe$ENV{BRCM_CHIP}unsec_unenc.bin $storedir/cfe$ENV{BRCM_CHIP}sec_enc_mfg.bin");

sub e {
    my $cmnd = shift;
    if ($verbose) {
        print "bcmImageMaker: $cmnd\n";
    }
    system($cmnd);
}

