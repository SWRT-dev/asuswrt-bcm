#!/bin/sh

if test $# -lt 3
then
   echo "error: A minimum of two arguments is required"
   echo "usage: makeSecureBootCfeOnly <63268 | 63138 | 63148 | 63381> <build_dir> <btldr_max_size>"
   exit 1
fi

bld_dir=$2
base_bld_dir=$bld_dir/../../../..
base_btrm_dir=$base_bld_dir/cfe/cfe/board/bcm63xx_btrm
base_data_dir=$base_btrm_dir/data
data_dir=$base_data_dir/$1
hostTools_dir=$base_bld_dir/hostTools
tools_dir=$hostTools_dir/SecureBootUtils
targetscfe_dir=$base_bld_dir/targets/cfe

cd $bld_dir

# Set up a padding file
rm -f ./filek.tmp ./newfilek.tmp
dd if=/dev/zero of=./filek.tmp bs=1k count=512
tr '\000' '\377' < ./filek.tmp > ./newfilek.tmp

if [ "$1" != "63268" ]
then

   # 63381, 63148, 63138 SPI NOR cfe-only builds
   if [ "$1" == "63138" ] || [ "$1" == "63148" ]
   then
      proc=`echo arm`
   else
      proc=`echo mips`
   fi

   # Create the authenticated header ( type, ver, len, config ... all 16 bit)
   # dec2bin utility converts a decimal number to it's hex 32 bit binary equivalent 
   # The input to dec2bin is a decimal number and cannot by larger than 999999
   # The 4 byte binary is written to ./size.tmp 
   $tools_dir/secutil.pl dec2bin --config=${HOSTTOOLS_DIR}/local_install/conf/${TOOLCHAIN_PREFIX}.conf 0
   cat ./size.tmp | head --bytes=4 > ./fourbytes.tmp
   cat ./fourbytes.tmp ./fourbytes.tmp > ./authhdr.tmp
   rm -f ./fourbytes.tmp ./size.tmp

   # prepend the authenticated header, chain-of-trust (COT) credentials, and bootloader together
   cat ./authhdr.tmp $data_dir/mfg.cot.bin $data_dir/mfg.cot.sig $data_dir/op.cot.bin $data_dir/op.cot.sig $bld_dir/cfe$1.bin > ./unsigned_cfesbi.tmp
   rm -f ./authhdr.tmp

   # sign the entire BI image using the mfg COT element private key
   openssl dgst -sign $base_data_dir/mfg.pem -keyform pem -sha256 -sigopt rsa_padding_mode:pss -sigopt \
      rsa_pss_saltlen:-1 -out ./sig.tmp ./unsigned_cfesbi.tmp

   # Create a CRC across the entire BI image (4 byte crc in binary format will be stored in the file ./crc.tmp)
   # crc2bin expects a local file called unsigned_cfesbi.tmp
   $tools_dir/secutil.pl --config=${HOSTTOOLS_DIR}/local_install/conf/${TOOLCHAIN_PREFIX}.conf crc2bin

   # concatenate the signature and the crc to the end of the BI image
   cat ./unsigned_cfesbi.tmp ./sig.tmp ./crc.tmp > ./signed_cfesbi.tmp
   rm -f ./unsigned_cfesbi.tmp ./sig.tmp ./crc.tmp

   # Get the size of the entire BI image (This is the amount of bytes the btrm will copy into internal mem)
   sbi_size=`wc -c ./signed_cfesbi.tmp | cut -d " " -f1`

   # Increase the sbi_size by the size of the unauthenticated header that will be attached (20 bytes if no padding)
   sbi_size=`expr $sbi_size + 20`

   # Create the unauthenticated header with a crc
   # 64-bit magic number 1st word is (00112233), 2nd word is (00445566)
   # 3rd word is header version (1), 4th word is the sbi_size 
   $tools_dir/secutil.pl dec2bin --config=${HOSTTOOLS_DIR}/local_install/conf/${TOOLCHAIN_PREFIX}.conf 112233 
   cat ./size.tmp | head --bytes=4 > ./first_word.tmp
   $tools_dir/secutil.pl dec2bin --config=${HOSTTOOLS_DIR}/local_install/conf/${TOOLCHAIN_PREFIX}.conf 445566
   cat ./size.tmp | head --bytes=4 > ./second_word.tmp
   $tools_dir/secutil.pl dec2bin --config=${HOSTTOOLS_DIR}/local_install/conf/${TOOLCHAIN_PREFIX}.conf 1 
   cat ./size.tmp | head --bytes=4 > ./third_word.tmp
   $tools_dir/secutil.pl dec2bin --config=${HOSTTOOLS_DIR}/local_install/conf/${TOOLCHAIN_PREFIX}.conf $sbi_size
   cat ./size.tmp | head --bytes=4 > ./fourth_word.tmp
   cat ./first_word.tmp ./second_word.tmp ./third_word.tmp ./fourth_word.tmp  > ./unsigned_cfesbi.tmp
   $tools_dir/secutil.pl crc2bin --config=${HOSTTOOLS_DIR}/local_install/conf/${TOOLCHAIN_PREFIX}.conf
   cat ./unsigned_cfesbi.tmp ./crc.tmp > ./unauthsbihdr.tmp
   rm -f ./size.tmp ./first_word.tmp ./second_word.tmp ./third_word.tmp ./fourth_word.tmp ./crc.tmp ./unsigned_cfesbi.tmp

   # create the entire bi image (unauth_hdr + auth_hdr + sbi + trailer)
   cat ./unauthsbihdr.tmp ./signed_cfesbi.tmp > ./cfe$1bi.tmp

   # Calculate the pad length
   pad_len=`expr $3 / 2`

   # pad out the original headerless cferom (with ram) build and concatenate with bi image
   cat $targetscfe_dir/cfe$1.bin ./newfilek.tmp | head --bytes=$pad_len | cat - ./cfe$1bi.tmp > $bld_dir/cfe$1.tmp

   # cleanup
   rm -f ./unauthsbihdr.tmp ./signed_cfesbi.tmp ./cfe$1bi.tmp

else

   # 63268 SPI NOR cfe-only build
   rm -f ./cferom.tmp ./bootloader.sig ./cferom_head.tmp ./nvram.tmp ./cferom_tail.tmp

   # Pad secure boot cferom/ram spi nor image out to 128KB
   cat ./cfe$1.bin ./newfilek.tmp | head --bytes=$3 > ./cferom.tmp

   # Create a signature across the 128 KB padded image.
   openssl dgst -sign $base_data_dir/mfg.pem -keyform pem -sha256 -sigopt rsa_padding_mode:pss -sigopt \
           rsa_pss_saltlen:-1 -out ./bootloader.sig ./cferom.tmp

   # Concatenate all of the security materials into a single file. Should be 1412 bytes in length
   cat ./bootloader.sig $data_dir/mfg.cot.sig $data_dir/mfg.cot.bin | head --bytes=770 | \
   cat - $data_dir/op.cot.sig $data_dir/op.cot.bin | head --bytes=1284 | \
   cat - $data_dir/mfg.ek.enc $data_dir/op.ek.enc $data_dir/mfg.iv.enc $data_dir/op.iv.enc > ./nvram.tmp

   # Chop image into two pieces and remove NVRAM security empty bytes 
   # Security materials in NVRAM start at 0x580+0x400 = 0x980 (2432) bytes into the image
   cat ./cferom.tmp | head --bytes=2432 > ./cferom_head.tmp

   # Security credentials go for 1412 bytes.
   # Therefore, the 2nd piece for SPI is: 128KB - 2432 - 1412 = 127228
   cat ./cferom.tmp | tail --bytes=127228 > ./cferom_tail.tmp

   # Concatenate the tmp files. If SPI, final file should be 128KB in size; If NAND, then 48KB in size
   cat ./cferom_head.tmp ./nvram.tmp ./cferom_tail.tmp > ./cfe$1.bin

   # after this script, rom Makefile calls addvtoken which expects input file to be called ./cfe$1.tmp 
   # (don't change ... required for 63381, 63138, 63148)
   cp ./cfe$1.bin ./cfe$1.tmp

   # clean up
   rm -f ./cferom.tmp ./bootloader.sig ./cferom_head.tmp ./nvram.tmp ./cferom_tail.tmp
fi

rm -f ./filek.tmp ./newfilek.tmp 
