#!/bin/sh

if test $# -lt 2
then
   echo "error: A minimum of two arguments is required"
   echo "usage: makeEncryptedCfeRam  <63268 | 63138 | 63148 | 6838 | 63381 | 6848 | 6858 | 4908> <profile_directory>"
   exit 1
fi

profile_dir=$2
tgtfs_dir=$profile_dir/fs
base_bld_dir=$profile_dir/../..
base_btrm_dir=$base_bld_dir/cfe/cfe/board/bcm63xx_btrm
base_data_dir=$base_btrm_dir/data
base_gen3_data_dir=$base_data_dir/gen3_common
btldr_dir=$base_bld_dir/targets/cfe
hostTools_dir=$base_bld_dir/hostTools


if [ "$1" == "6838" ] || [ "$1" == "6858" ] || [ "$1" == "4908" ]
then
   ram_file=$btldr_dir/cfe$1ram.bin
else
   ram_file=$btldr_dir/cfesec$1ram.bin
fi


if [ "$1" == "6858" ] || [ "$1" == "4908" ]
then
   gen3=1
else
   gen3=0
fi


# create an compressed, encrypted, signed version of the cfe ram

# First 12 bytes of cferam.bin will not be compressed. Get the size of 
# the cferam.bin and create a copy of it without the 12 byte header
ram_size=`wc -c $ram_file | cut -d " " -f1`
ram_size=`expr $ram_size - 12`
cat $ram_file | tail --bytes=$ram_size > ./cferam.tmp
cat $ram_file | head --bytes=12 > ./cferam.hdr.tmp

# Compress image
$hostTools_dir/lzmacmd e ./cferam.tmp ./cferam.lz.tmp -d22 -lp2 -lc1

# Create compressed image with 12 byte header
cat ./cferam.hdr.tmp ./cferam.lz.tmp > ./cferam.cmp.tmp

if [ "$gen3" == "1" ]
then
   # Gen 3 secure boot. Build mfg bootloader first (secmfg.xxx)

   # Retrieve the customer mfg encryption key and initialization vector 
   bek=`od -Ax -tx1 < $base_gen3_data_dir/Kaes-mfg-ek.bin | cut -d " " -f2-17 | sed "s/ //g" | head --bytes=32`
   biv=`od -Ax -tx1 < $base_gen3_data_dir/Kaes-mfg-iv.bin | cut -d " " -f2-17 | sed "s/ //g" | head --bytes=32`

   # Encrypt the compressed CFE RAM
   openssl enc -aes-128-cbc -K $bek -iv $biv -in ./cferam.cmp.tmp -out ./cferam.enc.tmp

   # Sign the encrypted, compressed CFE RAM using the customer mfg RSA key. Put the signature on the front of it
   openssl dgst -sign $base_gen3_data_dir/Krsa-mfg.pem -keyform pem -sha256 -sigopt rsa_padding_mode:pss -sigopt \
           rsa_pss_saltlen:-1 -out ./cferam.sig.tmp ./cferam.enc.tmp

   cat ./cferam.sig.tmp ./cferam.enc.tmp > $tgtfs_dir/secmfg.000
   echo -e "/secmfg.000" >> $hostTools_dir/nocomprlist

   # Cleanup and then build fld bootloader now (secram.xxx)
   rm -f ./cferam.enc.tmp ./cferam.sig.tmp

   # Retrieve the customer field encryption key and initialization vector
   # Kroe-fld or Kaes-fld AES keys might be used based on menuconfig settings.
   if [ ! -z "$SECURE_BOOT_PROCESS_FLD_OEM_COT" ]
   then
      bek=`od -Ax -tx1 < $base_gen3_data_dir/Kaes-fld-ek.bin | cut -d " " -f2-17 | sed "s/ //g" | head --bytes=32`
      biv=`od -Ax -tx1 < $base_gen3_data_dir/Kaes-fld-iv.bin | cut -d " " -f2-17 | sed "s/ //g" | head --bytes=32`

      # Encrypt the compressed CFE RAM
      openssl enc -aes-128-cbc -K $bek -iv $biv -in ./cferam.cmp.tmp -out ./cferam.enc.tmp

      # Sign the encrypted, compressed CFE RAM using the customer field RSA key. Put the signature on the front of it
      openssl dgst -sign $base_gen3_data_dir/Krsa-fld.pem -keyform pem -sha256 -sigopt rsa_padding_mode:pss -sigopt \
              rsa_pss_saltlen:-1 -out ./cferam.sig.tmp ./cferam.enc.tmp
   else
      bek=`od -Ax -tx1 < $base_gen3_data_dir/Kroe-fld-ek.bin | cut -d " " -f2-17 | sed "s/ //g" | head --bytes=32`
      biv=`od -Ax -tx1 < $base_gen3_data_dir/Kroe-fld-iv.bin | cut -d " " -f2-17 | sed "s/ //g" | head --bytes=32`

      # Encrypt the compressed CFE RAM
      openssl enc -aes-128-cbc -K $bek -iv $biv -in ./cferam.cmp.tmp -out ./cferam.enc.tmp

      # Sign the encrypted, compressed CFE RAM using the customer field RSA key. Put the signature on the front of it
      openssl dgst -sign $base_gen3_data_dir/Krot-fld.pem -keyform pem -sha256 -sigopt rsa_padding_mode:pss -sigopt \
              rsa_pss_saltlen:-1 -out ./cferam.sig.tmp ./cferam.enc.tmp
   fi

   cat ./cferam.sig.tmp ./cferam.enc.tmp > $tgtfs_dir/secram.000
   echo -e "/secram.000" >> $hostTools_dir/nocomprlist

else
   # Gen 2 secure boot. Build the only encrypted bootloader (secram.xxx)

   # Retrieve the customer encryption key and initialization vector 
   bek=`od -Ax -tx1 < $base_data_dir/mfg.ek.bin | cut -d " " -f2-17 | sed "s/ //g" | head --bytes=32`
   biv=`od -Ax -tx1 < $base_data_dir/mfg.iv.bin | cut -d " " -f2-17 | sed "s/ //g" | head --bytes=32`

   # Encrypt the compressed CFE RAM
   openssl enc -aes-128-cbc -K $bek -iv $biv -in ./cferam.cmp.tmp -out ./cferam.enc.tmp

   # Sign the encrypted, compressed CFE RAM. Put the signature on the front of it
   openssl dgst -sign $base_data_dir/mfg.pem -keyform pem -sha256 -sigopt rsa_padding_mode:pss -sigopt \
           rsa_pss_saltlen:-1 -out ./cferam.sig.tmp ./cferam.enc.tmp

   cat ./cferam.sig.tmp ./cferam.enc.tmp > $tgtfs_dir/secram.000
   echo -e "/secram.000" >> $hostTools_dir/nocomprlist
fi

# Cleanup
rm -f ./cferam.tmp ./cferam.hdr.tmp ./cferam.lz.tmp
rm -f ./cferam.cmp.tmp ./cferam.enc.tmp ./cferam.sig.tmp
