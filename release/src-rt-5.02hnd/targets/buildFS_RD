#!/bin/bash

# This script runs under fakeroot.  The fakeroot utility has 
# problems under 64-bit/multi-processor/preemptive kernel, so
# we run it only when necessary.

source $KERNEL_DIR/.config

# Create devices
# (Swited from device table to fakeroot for device nodes - always use makeDevs)
./makeDevs

# make root file system image
if [ "$BRCM_IKOS" = "y" ]; then
# ikos need a simple init to just run the busybox shell
   rm -f $TARGET_FS/etc/inittab
   sed -e 's/^::respawn.*sh.*/::respawn:-\/bin\/sh/' -e 's/^::sysinit.*sh.*/::sysinit:\/bin\/sh -l -c \/etc\/init.sh/' $FSSRC_DIR/etc/inittab > $TARGET_FS/etc/inittab
   echo -e "\x23\x21bin/sh\nmount -t proc /proc /proc\nmount -t sysfs none /sys" > $TARGET_FS/etc/init.sh
   chmod +x $TARGET_FS/etc/init.sh
# ikos is too slow for using compressed SquashFS, so we are disabling the compression. Make sure kernel creates large enough ramdisk for the uncompressed fs image
   $HOSTTOOLS_DIR/mksquashfs $TARGET_FS $PROFILE_DIR/ramdisk -noappend -noI -noD -noF
else
   (ulimit -t 900 ; $HOSTTOOLS_DIR/mksquashfs $TARGET_FS $PROFILE_DIR/ramdisk -noappend -comp xz) 
   if [ $? -ne 0 ]; then
        echo "mksquashfs failed once"
        (ulimit -t 900 ; $HOSTTOOLS_DIR/mksquashfs $TARGET_FS $PROFILE_DIR/ramdisk -noappend -comp xz) 
        if [ $? -ne 0 ]; then
            echo "mksquashfs failed twice"
            exit 2
        fi
    fi
   
   cp $KERNEL_DIR/vmlinux $PROFILE_DIR/.
   $KSTRIP --remove-section=.note --remove-section=.comment $PROFILE_DIR/vmlinux
   # when using ramdisk boot from CFE/boot loader, change of the virtual address in the vmlinux elf file is required for ARM-based device
   if [ "$KARCH" == "arm" ] ; then
      $KOBJCOPY --change-start 0x40000000 --change-addr 0x40000000 $PROFILE_DIR/vmlinux $PROFILE_DIR/vmlinux_rd_boot
   else
       if [ "$KARCH" == "arm64" ] ; then
           $KOBJCOPY --change-start 0x4000000000 --change-addr 0x4000000000 $PROFILE_DIR/vmlinux $PROFILE_DIR/vmlinux_rd_boot
       else
           cp $PROFILE_DIR/vmlinux $PROFILE_DIR/vmlinux_rd_boot
       fi
   fi
fi
