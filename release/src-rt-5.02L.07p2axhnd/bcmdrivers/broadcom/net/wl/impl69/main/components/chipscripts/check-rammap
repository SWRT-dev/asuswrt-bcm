#!/usr/bin/perl
#
# This script checks the romoffload (or ram) image built against a
# rom library.  Currently it does:
#
# 1) Compares the shared data region between ROM/RAM.
# 2) Scans for duplicate symbols between ROM and RAM images.
# 3) Check __ramfnptr_ is not pointing to data
# 4) Check __ramfnptr_ is not pointing to ROM
# 5) Check struct offsets for all common structs between ROM/RAM.
# 6) Check enum values for common ROM/RAM enums.
#
# It returns 0 if succeeded, 255(-1) otherwise.
#
# $ Copyright Broadcom Corporation $
#
# <<Broadcom-WL-IPTag/Proprietary:>>
#
# $Id: check-rammap,v 1.12 2010-12-04 19:04:04 lut Exp $
#

use warnings;
use strict;
use File::Basename;

my $idre = '([\w$]+)';
my $fnre = '([\w.-]+)';
my $chkval = '(.+)';
my $adr = '([0-9a-fA-F]{8})';
my @parts = split(/SPLIT/, join('', <STDIN>));
my @g_nm_rom = split(/\n/, $parts[0]);
my @g_nm_ram = split(/\n/, $parts[1]);
my @g_objdump = split(/\n/, $parts[2]);
my $gdb_script_struct      = "check-rammap-struct.gdb";
my $gdb_script_enum        = "check-rammap-enum.gdb";
my $fname_struct_size      = "struct-size.txt";

my %anonymous_structs;

my %g_rom_tbl = ();
map {
	$g_rom_tbl{$2} = $1 if /${adr} . ${idre}$/;
} @g_nm_rom;

# Older ROM images do not support shared region
exit(0) if (!$g_rom_tbl{shdat_start});
exit(0) if (!$g_rom_tbl{shdat_end});
exit(0) if (!$g_rom_tbl{text_start});

my $flist = shift @ARGV if ($ARGV[0]);
my $froml = shift @ARGV if ($ARGV[0]);
my $foffl = shift @ARGV if ($ARGV[0]);
my $fnasm = shift @ARGV if ($ARGV[0]);
my $target_cpu = shift @ARGV if ($ARGV[0]);
my $GDB   = shift @ARGV if ($ARGV[0]);
my $readelf = $GDB;
$readelf =~ s/gdb/readelf/;


# Utility log function.
sub log_printf {
	my @print_args = @_;

	printf STDERR ("%s: ", basename($0));
	printf STDERR (@print_args);
}

# Helper function to open GDB script for writing.
#
# Params:  script_fname: IN  GBD script file to open.
#
# Returns: File descriptor.
sub gdb_open_script {
   my ($script_fname) = @_;
   my $fd;

   open($fd, ">$script_fname") or
      die "Could not open $script_fname for writing: $!\n";

   return ($fd);
}

# Helper function to close GDB script.
#
# Params:  fd: IN  File descriptor.
#
# Returns: Nothing.
sub gdb_close_script {
   my ($fd) = @_;
   close($fd);
}

# Helper function to run a GDB script.
#
# Params:  script_fname: IN  GDB script to run.
#          file:         IN  Name of ROM/RAM executable file (e.g. rtecdc.exe, roml.exe)
#          output:       OUT Output array containing GDB result.
#
# Returns: Nothing.
sub gdb_run_script {
   my ($script_fname, $file, $output) = @_;

   @{$output} = `$GDB --batch -nx -nw -x $script_fname $file`;
   die "GDB failed running script '$script_fname' on file '$file'" if $?;
}


# Helper function to parse GDB output returned by print commands.
#
# Params:  print_results: MOD On input, array elements contain raw GDB output (e.g. '$1 = 0xffc').
#                             On output, contains only values the values (e.g. '0xffc').
#
# Returns: Nothing.
sub gdb_parse_print_results {
   my $print_results = shift;

   # Parse GDB print command output. The format is:
   #    $1 = 0xffc
   #
   for (@{$print_results}) {
      s/\$[0-9]+ = (.*)\n/$1/;
   }
}


# Retrieve struct and enum type information from an ELF file.
#
# Params: elf_fname:       IN  Input ELF file that contains debug info sections.
#         structs:         OUT Hash of all structs contained in input file.
#         struct_typedefs: OUT Hash of all typedef'ed, anonymous structs in input file.
#         struct_sizes:    OUT Hash that maps struct names to their sizes.
#         enums:           OUT Hash of all enums contained in input file.
#
# Returns: Nothing.
sub get_types_info {
   my ($elf_fname, $structs, $struct_typedefs, $struct_sizes, $enums) = @_;
   my $offset;
   my $name;
   my $size;
   my %struct_offsets;
   my %anonymous_struct_size;
   my %typedef_type_offsets;

   # DWARF tags
   my $dwarf_tag_struct_regexp  = qr/<.*><([[:xdigit:]]+)>.*DW_TAG_structure_type/;
   my $dwarf_tag_enum_regexp    = qr/DW_TAG_enumeration_type/;
   my $dwarf_tag_typedef_regexp = qr/DW_TAG_typedef/;

   # DWARF attributes
   my $dwarf_attrib_name_regexp = qr/DW_AT_name.*\s+(\w+)\s*$/;
   my $dwarf_attrib_size_regexp = qr/DW_AT_byte_size\s+:\s+(\d+)/;
   my $dwarf_attrib_type_regexp = qr/DW_AT_type\s+:\s+<0x([[:xdigit:]]+)>/;

   # Line offsets from the DWARF tag to the specified DWARF attribute obtained from a readelf dump.
   use constant {
      STRUCT_NAME_OFFSET           => 1,
      STRUCT_SIZE_OFFSET           => 2,
      STRUCT_ANONYMOUS_SIZE_OFFSET => 1,
      ENUM_NAME_OFFSET             => 1,
      TYPEDEF_NAME_OFFSET          => 1,
      TYPEDEF_TYPE_OFFSET          => 4
   };

   # Use readelf to dump the contents of the DWARF debug section '.debug_info'. This contains
   # struct and enum information entries. Only dump DWARF information entires at level 2 and
   # below to minimize processing time.
   my @types_info = `$readelf --debug-dump=info --dwarf-depth=2 $elf_fname`;
   if (scalar(@types_info) eq 0) {
      log_printf("Error: Unable to dump debug info from '$elf_fname'\n");
      exit (1);
   }

   # Perform minimal DWARF information entry parsing. Extract struct/enum information
   # from the tags and associated attributes.
   for (my $i = 0; $i <= $#types_info; $i++) {
      # struct tag
      #
      #   <1><ff>: Abbrev Number: 8 (DW_TAG_structure_type)
      #      <100>   DW_AT_name        : (indirect string, offset: 0x96): osl_info
      #      <104>   DW_AT_byte_size   : 16
      #      <105>   DW_AT_decl_file   : 5
      #      <106>   DW_AT_decl_line   : 121
      #      <107>   DW_AT_sibling     : <0x144>
      if (($offset) = ($types_info[$i] =~ /$dwarf_tag_struct_regexp/)) {
         if ((($name) = $types_info[$i + STRUCT_NAME_OFFSET] =~ /$dwarf_attrib_name_regexp/) &&
             (($size) = $types_info[$i + STRUCT_SIZE_OFFSET] =~ /$dwarf_attrib_size_regexp/)) {
               # Found a named struct. Store it and its size.
               $structs->{$name}      = 1;
               $struct_sizes->{$name} = $size;
               $i += STRUCT_SIZE_OFFSET;
         }
         elsif (($size) = $types_info[$i + STRUCT_ANONYMOUS_SIZE_OFFSET] =~ /$dwarf_attrib_size_regexp/) {
            # Found an anonymous struct. Store its offset so that it can be
            # correlated later with its associated typedef.
            $struct_offsets{$offset}        = 1;
            $anonymous_struct_size{$offset} = $size;
            $i += STRUCT_ANONYMOUS_SIZE_OFFSET;
         }
      }
      # enum tag
      #
      #   <1><10110>: Abbrev Number: 25 (DW_TAG_enumeration_type)
      #      <10111>   DW_AT_name        : (indirect string, offset: 0x105f): lbuf_type
      #      <10115>   DW_AT_byte_size   : 4
      #      <10116>   DW_AT_decl_file   : 1
      #      <10117>   DW_AT_decl_line   : 245
      #      <10118>   DW_AT_sibling     : <0x1012f>
      elsif (($types_info[$i] =~ /$dwarf_tag_enum_regexp/) &&
             (($name) = $types_info[$i + ENUM_NAME_OFFSET] =~ /$dwarf_attrib_name_regexp/)) {
         # Found a named enum.
         $enums->{$name} = 1;
         $i += ENUM_NAME_OFFSET;
      }
      # typedef tag
      #
      #   <1><176c79>: Abbrev Number: 28 (DW_TAG_structure_type)
      #      <176c7a>   DW_AT_byte_size   : 120
      #      <176c7b>   DW_AT_decl_file   : 11
      #      <176c7c>   DW_AT_decl_line   : 1829
      #      <176c7e>   DW_AT_sibling     : <0x176cfb>
      #
      #   <1><176cfb>: Abbrev Number: 4 (DW_TAG_typedef)
      #      <176cfc>   DW_AT_name        : (indirect string, offset: 0x1df49): acphy_cal_result_t
      #      <176d00>   DW_AT_decl_file   : 11
      #      <176d01>   DW_AT_decl_line   : 1838
      #      <176d03>   DW_AT_type        : <0x176c79>
      elsif (($types_info[$i] =~ /$dwarf_tag_typedef_regexp/) &&
             (($name)   = $types_info[$i + TYPEDEF_NAME_OFFSET] =~ /$dwarf_attrib_name_regexp/) &&
             (($offset) = $types_info[$i + TYPEDEF_TYPE_OFFSET] =~ /$dwarf_attrib_type_regexp/)) {
         # Found a typedef. Store the offset of the type so that it can be
         # correlated later with structs.
         $typedef_type_offsets{$name} = $offset;
         $i += TYPEDEF_TYPE_OFFSET;
      }
   }

   # Search for all the typedefs whose type is a struct. Store the struct name/size.
   foreach my $typedef (keys %typedef_type_offsets) {
      $offset = $typedef_type_offsets{$typedef};
      if ($struct_offsets{$offset}) {
         $structs->{$typedef}         = 1;
         $struct_typedefs->{$typedef} = 1;
         $struct_sizes->{$typedef}    = $anonymous_struct_size{$offset};
      }
   }
}


#
# Compare structures/enums between roml.exe and rtecdc.exe
#
my $rc = 0;
my $enum_mismatch = 0;
my $struct_mismatch = 0;
if ((-e $flist) && (-e $froml) && (-e $foffl)) {
   my $fh;
   my @st_l_rom     = ();  # ROM struct list
   my @st_l_common  = ();  # Common ROM/RAM structs list
   my @st_r_offsets = ();  # roml.exe struct offsets
   my @st_o_offsets = ();  # rtecdc.exe struct offsets
   my %st_member_rom;      # Hash that maps ROM structs to last member name.
   my %st_exists_ram;      # Hash that indicates if a structure exists in RAM.
   my %struct_sizes_ram;   # Hash that maps structures in RAM to their sizes.
   my %enum_member_rom;    # Hash that maps ROM enums to last member name.
   my %enum_exists_ram;    # Hash that indicates if an enum exists in RAM.
   my @enum_l_common = (); # Common ROM/RAM enums list
   my @enum_r_values = (); # roml.exe enum values
   my @enum_o_values = (); # rtecdc.exe enum values
   my @ram_types_info;
   my $gdb_script;
   my $fd_gdb_script;
   my $fd_struct_size;
   my $struct;
   my $enum;

   ######################################################################################
   # Parse ROM types.
   #
   # Open/read the list of GDB test strings. For each structure in ROM, there should be
   # a GDB test string with one of the following formats:
   #
   #    p/x &((struct wl_info *)0)->wlfc_info
   #    p/x &((wsec_pmk_t *)0)->key
   #
   # For each enum in ROM, there should be a line of the following format:
   #
   #    enum wl_tx_bw WL_TX_BW_40IN80
   #
   open($fh, $flist) or die "Could not open $flist for reading: $!\n";
   @st_l_rom = <$fh>;
   close $fh;

   # Parse the ROM structs/enums and last member. Store them in a hash.
   foreach my $line (@st_l_rom) {
      # Skip blank lines and commented out lines.
      if ($line =~ /(^\s*#|^\s+$)/) {
         next;
      }

      $line =~ s/\s+$//; #remove trailing spaces

      # struct syntax:  p/x &((struct wl_info_t *)0)->wlfc_info
      if ($line =~ /.*struct[ \t]+(.*)[ \t]+.*-\>(.*)/) {
         $st_member_rom{$1} = $2;
      }
      # Anonymous struct syntax:  p/x &((wsec_pmk_t *)0)->key
      elsif ($line =~ /p\/x\s+&\(\((.*)\s+\*\)0\)->(.*)/) {
         $st_member_rom{$1} = $2;
      }
      # enum syntax:  enum wl_tx_bw WL_TX_BW_40IN80
      elsif ($line =~ /^enum\s+(\w+)\s+(\w+)\s*$/) {
         $enum_member_rom{$1} = $2;
      }
      else {
         log_printf("Unknown syntax: '$line'\n");
      }
   }


   ######################################################################################
   # Extract RAM types.
   #
   # Retrieve a list of all structs/enums in the RAM image.
   get_types_info($foffl, \%st_exists_ram, \%anonymous_structs, \%struct_sizes_ram, \%enum_exists_ram);


   ######################################################################################
   # Create a text file that documents the size of each structure that exists in RAM.
   # The struct sizes are not actually used in the build process; however, are often
   # useful for debugging purposes.
   open($fd_struct_size, ">$fname_struct_size") or
      die "Could not open $fname_struct_size for writing: $!\n";

   printf $fd_struct_size ("# Generated by %s\n", basename($0));
   printf $fd_struct_size ("#\n");
   foreach $struct (sort keys %struct_sizes_ram) {
         printf $fd_struct_size ("$struct %d\n", $struct_sizes_ram{$struct});
   }
   close($fd_struct_size);


   ######################################################################################
   # struct verification.
   #
   # Create a GDB script. For each structure that exists in both ROM and RAM add a test
   # string to the script of the following format:
   #
   #    p/x &((struct wl_info *)0)->wlfc_info
   #
   $fd_gdb_script = gdb_open_script($gdb_script_struct);

   foreach $struct (sort keys %st_member_rom) {
      if ($st_exists_ram{$struct}) {
         if ($anonymous_structs{$struct}) {
		 printf $fd_gdb_script ("p/x &(($struct *)0)->$st_member_rom{$struct}\n");
	 }
	 else {
		 printf $fd_gdb_script ("p/x &((struct $struct *)0)->$st_member_rom{$struct}\n");
	 }
         push(@st_l_common, $struct);
      }
   }

   gdb_close_script($fd_gdb_script);


   log_printf("Validating %d shared ROM/RAM structs\n", scalar(@st_l_common));


   # Run the GDB test script on both the ROM and RAM images. This will output the struct
   # offsets of the last member of each specified struct.
   gdb_run_script($gdb_script_struct, $froml, \@st_r_offsets);
   gdb_run_script($gdb_script_struct, $foffl, \@st_o_offsets);


   # Parse the structure offsets. The format is:
   #    $1 = 0xffc
   #
   gdb_parse_print_results(\@st_r_offsets);
   gdb_parse_print_results(\@st_o_offsets);

   if (@st_l_common != @st_r_offsets) {
      # Error extracting ROM struct offsets.
      log_printf("ERROR: Error extracting ROM struct offsets!: lst:%d rom:%d\n", scalar(@st_l_common), scalar(@st_r_offsets));
      exit(1);
   }

   if (@st_l_common != @st_o_offsets) {
      # For the common set of ROM/RAM structs, the last struct member from ROM is missing in RAM.
      log_printf("ERROR: struct '%s' exists in RAM. However member '%s->%s' is missing.\n",
                 $st_l_common[@st_o_offsets], $st_l_common[@st_o_offsets],
                 $st_member_rom{$st_l_common[@st_o_offsets]});
      log_printf("ERROR: Avoid removing struct members to prevent ROM invalidation.\n\n");
      log_printf("ERROR: Please refer to this twiki for more details:\n");
      log_printf("\thttp://hwnbu-twiki.sj.broadcom.com/bin/view/Mwgroup/BcmRomTechnique#3_2_Error_Messages\n\n");
      exit(1);
   }


   # Verify that all ROM/RAM struct offsets match.
   for (my $i = 0; $i < @st_l_common; $i++) {
      # printf STDERR ("$st_l_common[$i] => r:$st_r_offsets[$i], o:$st_o_offsets[$i]\n");

      if (hex($st_r_offsets[$i]) != hex($st_o_offsets[$i])) {
          log_printf("ERROR: struct offset mismatch for '%s->%s': ROM(%d) != RAM(%d)\n",
                     $st_l_common[$i], $st_member_rom{$st_l_common[$i]},
                     hex($st_r_offsets[$i]), hex($st_o_offsets[$i]));
          $rc = 1;
          $struct_mismatch = 1;
      }
   }

   if ($struct_mismatch) {
      log_printf("ERROR: Add new fields to the end of structures to prevent ROM invalidation.\n\n");
      log_printf("ERROR: Please refer to this twiki for more details:\n");
      log_printf("\thttp://hwnbu-twiki.sj.broadcom.com/bin/view/Mwgroup/BcmRomTechnique#3_2_Error_Messages\n\n");
   }



   ######################################################################################
   # enum verification.
   #
   # Create a GDB script. For each enum that exists in both ROM and RAM add a test string
   # to the script of the following format:
   #
   #    enum wl_tx_bw WL_TX_BW_40IN80
   #
   $fd_gdb_script = gdb_open_script($gdb_script_enum);

   foreach $enum (sort keys %enum_member_rom) {
      if ($enum_exists_ram{$enum}) {
         printf $fd_gdb_script ("p/x $enum_member_rom{$enum}\n");
         push(@enum_l_common, $enum);
      }
   }
   gdb_close_script($fd_gdb_script);


   log_printf("Validating %d shared ROM/RAM enums\n", scalar(@enum_l_common));


   # Run the GDB test script on both the ROM and RAM images. This will output the value
   # of the last member of each specified enum.
   gdb_run_script($gdb_script_enum, $froml, \@enum_r_values);
   gdb_run_script($gdb_script_enum, $foffl, \@enum_o_values);


   # Parse the enum values. The format is:
   #    $1 = 0xffc
   #
   gdb_parse_print_results(\@enum_r_values);
   gdb_parse_print_results(\@enum_o_values);

   if (@enum_l_common != @enum_r_values) {
      # Error extracting ROM enum values.
      log_printf("ERROR: Error extracting ROM enum values!: lst:%d rom:%d\n",
                 scalar(@enum_l_common), scalar(@enum_r_values));
      exit(1);
   }

   if (@enum_l_common != @enum_o_values) {
      # For the common set of ROM/RAM enums, the last enum member from ROM is missing in RAM.
      log_printf("ERROR: enum '%s' exists in RAM. However member '%s' is missing.\n",
       $enum_l_common[@enum_o_values], $enum_member_rom{$enum_l_common[@enum_o_values]});
      log_printf("ERROR: Avoid removing enum members to prevent ROM invalidation.\n\n");
      log_printf("ERROR: Please refer to this twiki for more details:\n");
      log_printf("\thttp://hwnbu-twiki.sj.broadcom.com/bin/view/Mwgroup/BcmRomTechnique#3_2_Error_Messages\n\n");
      exit(1);
   }


   # Verify that the value of the last member of all shared ROM/RAM enums match.
   for (my $i = 0; $i < @enum_l_common; $i++) {
      if (hex($enum_r_values[$i]) != hex($enum_o_values[$i])) {
         log_printf("ERROR: enum value mismatch for '%s::%s': ROM(%d) != RAM(%d)\n",
                    $enum_l_common[$i], $enum_member_rom{$enum_l_common[$i]},
                    hex($enum_r_values[$i]), hex($enum_o_values[$i]));
         $rc = 1;
         $enum_mismatch = 1;
      }
   }

   if ($enum_mismatch) {
      log_printf("ERROR: Add new members to the end of enums to prevent ROM invalidation.\n\n");
      log_printf("ERROR: Please refer to this twiki for more details:\n");
      log_printf("\thttp://hwnbu-twiki.sj.broadcom.com/bin/view/Mwgroup/BcmRomTechnique#3_2_Error_Messages\n\n");
   }
}

# Constants
my $g_ramfn_prefix = "__ramfnptr_";

my %g_ram_abs = ();
my %g_ram_tbl = ();
my %g_ram_fns = ();
map {
	$g_ram_tbl{$2} = $1 if /${adr} . ${idre}$/;
	$g_ram_abs{$2} = $1 if /${adr} A ${idre}$/;
	$g_ram_fns{$1} = 1 if /${g_ramfn_prefix}${idre}$/;
} @g_nm_ram;

my %g_ram_fns_obj = ();
map {
	$g_ram_fns_obj{$1} = $_ if /\b${idre}$/;
} @g_objdump;

# ROM defaults
my $g_romaddr_start = $g_rom_tbl{shdat_start};
my $g_romaddr_end = $g_rom_tbl{shdat_end};
my $g_rom_text_start = $g_rom_tbl{text_start};

# RAM defaults
my $g_ramaddr_start = $g_ram_tbl{shdat_start};
my $g_ramaddr_end = $g_ram_tbl{shdat_end};

# shared data size
my $g_rom_size = hex($g_romaddr_end) - hex($g_romaddr_start);
my $g_ram_size = hex($g_ramaddr_end) - hex($g_ramaddr_start);

# Basic sanity check on the shared data region
if (hex($g_rom_size) != hex($g_ram_size)) {
	log_printf("ERROR: ROM/RAM shdat size mismatch: %d != %d\n",
	           int($g_rom_size), int($g_ram_size));
} elsif (hex($g_romaddr_start) != hex($g_ramaddr_start)) {
	log_printf("ERROR: ROM/RAM shdat start mismatch: 0x%x != 0x%x\n",
	           hex($g_romaddr_start), hex($g_ramaddr_start));
	exit(1);
} elsif (hex($g_romaddr_end) != hex($g_ramaddr_end)) {
	log_printf("ERROR: ROM/RAM shdat end mismatch: 0x%x != 0x%x\n",
	           hex($g_romaddr_end), hex($g_ramaddr_end));
	exit(1);
}

# Loop through the shared data region
# and compare the addresses
for (my $d = 0; $d < @g_nm_rom; $d ++) {
	my($romaddr, $attr, $symrom) = split(/ /, $g_nm_rom[$d]);

	if (hex($romaddr) < hex($g_romaddr_start)) {
		next;
	} elsif (hex($romaddr) > hex($g_romaddr_end)) {
		last;
	}

	# ignore these symbols
	if ($symrom =~ /\b(esc|ramfnptr|jmptblrom|datblrom|_patch_table|_patch_align)_(start|end)|logstr\.\d+|fmtnum\.\d+\b/) {
		next;
	}

	if (!$g_ram_tbl{$symrom}) {
		log_printf("Note: symbol removed from ram image: %s\n", $symrom);
		next;
#		exit(1);
	}

	my $ramaddr = $g_ram_tbl{$symrom};
	if (hex($romaddr) != hex($ramaddr)) {
		log_printf("\nERROR: ROM/RAM shared addr mismatch for %s: 0x%x != 0x%x\n\n",
			   $symrom, hex($romaddr), hex($ramaddr));
		exit(1);
	}
}


# Extract end of RAM image
my $g_ramaddr_rend = $g_ram_tbl{_end};
for (my $d = 1; $d < @g_nm_ram; $d ++) {
	my($ramaddr, $attr, $symram) = split(/ /, $g_nm_ram[$d]);

	if (hex($ramaddr) < hex($g_ramaddr_end)) {
		next;
	} elsif (hex($ramaddr) > hex($g_ramaddr_rend)) {
		last;
	}

	# ignore these symbols
	if ($symram =~ /\b(shdat|ramfnptr|jmptblrom|datblrom|_patch_table|_patch_align|_ram_mpu_region|)_(start|end)\b/) {
		next;
	}

	next if (!$g_ram_abs{$symram});

	log_printf("Dup symbol in RAM image: $symram @ [$g_ram_abs{$symram}]\n", $symram);
}

# Cycle through ram function stubs and make sure
# they are not referencing data
#
foreach my $symram (sort keys %g_ram_fns) {

	# The RAM function stub may contain a reference to hnd_unimpl() for functions that
	# are not required by the ROM offload build (in order to save memory). Skip these functions.
	if (!$g_ram_fns_obj{$symram}) {
		next;
	}

	my $lines = $g_ram_fns_obj{$symram};

	my($ramaddr, $attr, $type) = split(/\s+/, $lines);
	if ($type ne 'F') {
		log_printf("ERROR: $g_ramfn_prefix$symram not func type($type)!\n");
		$rc = 1;
	}

	# Check if __ramfnptr_ points to ROM
	# Sym is in romtable.S but not tag with BCMROMFN and is
	# referenced by another ROM function
	if (!$g_ram_tbl{$symram}) {
		log_printf("ERROR: $g_ramfn_prefix$symram not found in RAM image!\n");
		$rc = 1;
		next;
	}

	$ramaddr = $g_ram_tbl{$symram};
	if($target_cpu eq 'cr4' || $target_cpu eq 'ca7')
	{
	        if (hex($ramaddr) < hex($g_rom_text_start)) {
		        printf("ERROR: $g_ramfn_prefix$symram points to ROM: 0x$ramaddr!\n");
		       $rc = 1;
		}
	}
	else {
	if (hex($ramaddr) > hex($g_rom_text_start)) {
		log_printf("ERROR: $g_ramfn_prefix$symram points to ROM: 0x$ramaddr!\n");
		$rc = 1;
	}
}
}

# Check b.w instructions
if (open(my $fh, "<$fnasm")) {
  my %plut = ();
  map {
    $plut{$2} = $1 if /\s+b\.w\s+${idre}\s+\<${idre}\>/;
  } <$fh>;
  close($fh);

  foreach my $sym (sort keys %plut) {
	my $ram_addr;
	if (!$g_ram_tbl{$sym}) {
		log_printf("ERROR: TCAM abandoned $sym not found in RAM image!\n");
		$rc = 1;
		next;
	}

	$ram_addr = $plut{$sym};
	if (hex($ram_addr) != hex($g_ram_tbl{$sym})) {
		log_printf("ERROR: b.w addr, $ram_addr, not equal to $sym, $g_ram_tbl{$sym}\n");
		$rc = 1;
		next;
	}
  }
}

exit ($rc);
