#!/usr/bin/perl
#
# This script generates an MD5 signature file for a list of symbols. The format of the output file
# is as follows:
#
#    9f8d58b4e978297a9e35aea79ac0aeb0  bcmstdlib$__atox.bcmstdlib.func.S
#    a4b60292eb72c043734901cfc7abd810  bcmstdlib$hex_lower.bcmstdlib.data.S
#    ...
#
# The list of symbols is determined from the input disassembly listing files. There is one listing
# file per object file. The listing file contains a list of disassembly symbols contained in the
# object file. e.g. bcmstdlib.nopt.lst:
#
#    memcmp.bcmstdlib.func.S
#    memcpy.bcmstdlib.func.S
#    memmove.bcmstdlib.func.S
#    ...
#
# $ Copyright Broadcom Corporation $
#
# <<Broadcom-WL-IPTag/Proprietary:>>
#

use strict;
use warnings;
use File::Basename;
use Digest::MD5;

sub usage {
	print STDERR "\nUsage: gen-md5sum <md5sign-file> <disassembly listing files...>\n";
	exit 1;
}

# Output MD5 signature file.
my $g_md5sign_fname;
my $g_md5sign_fd;

# Array of disassembly files. An MD5 checksum will be calculated for each one.
my @g_disas_files;

# Parse command line arguments.
($g_md5sign_fname = shift @ARGV) || &usage;
@ARGV || &usage;

# Read all disassembly listing files, and create an array of disassembly files.
for my $fname (sort @ARGV) {
	my $fd;

	# Open disassembly listing file. This contains a list of disassembly files per object file.
	open($fd, "<$fname") or
		die "Could not open $fname for reading: $!\n";

	# Create an array of disassembly files.
	foreach my $disas_file (<$fd>) {
		push(@g_disas_files, $disas_file);
	}

	# Cleanup.
	close($fd);
}

# Open output romtable for writing.
open($g_md5sign_fd, ">$g_md5sign_fname") or
	 die "Could not open $g_md5sign_fname for writing: $!\n";

# Write header.
printf $g_md5sign_fd ("# Generated File From Script %s\n", basename($0));
print $g_md5sign_fd "#\n";
print $g_md5sign_fd "# MD5 Symbol Signatures\n";
print $g_md5sign_fd "#\n";

# Write MD5 signatures to output file. Do this in a for-loop to avoid shell errors for argument
# list too long.
foreach my $disas_file (sort @g_disas_files) {
	open(FILE, $disas_file) or die "Can't open '$disas_file': $!";
	binmode(FILE);
	printf $g_md5sign_fd ("%s  %s", Digest::MD5->new->addfile(*FILE)->hexdigest, basename($disas_file));
	close(FILE);
}

# Cleanup.
close($g_md5sign_fd);
