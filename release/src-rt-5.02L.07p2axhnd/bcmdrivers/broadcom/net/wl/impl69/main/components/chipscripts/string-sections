#!/usr/bin/perl
#
# This script reprocesses <file.S> which contains assembly text (gcc compiler output).
# It searches for labeled, read-only .ascii strings in the .rodata.str1.1 section, and
# places each string in a unique mergeable string section.
#
# By default, all anonymous strings for an object file are co-located in a single
# section: .rodata.str1.1. Therefore, if any string in this section is referenced, then
# all strings for the object file are included in the final linked binary. Even if some of
# the strings are unused/unreferenced!
#
# Placing each string in a unique section prevents unreferenced strings from being included
# in the final linked binary.
#
# Usage: See 'usage' subroutine below.

use strict;
use warnings;
use File::Basename;

# Name of this script.
my $script = basename($0);

# Display usage info.
sub usage {
	print STDERR "\nUsage: $script <file.S>\n";
	exit 1;
}

# Parse command line arguments.
my ($fname, $base_fname);
($fname = shift @ARGV) || &usage;
shift @ARGV && &usage;
$base_fname = basename($fname);

# Error check input filename.
if ($fname !~ /\.S$/) {
	die("$script: Input is not a .S file ($fname)\n");
}


# Open input file.
my $fh;
open($fh, $fname) or
	die("$script: Could not open '$fname' for reading: $!\n");


# Debug utility print.
my $debug = 0;
sub dprint {
	print ("$script ($base_fname): " . shift) if $debug;
}


# Locate the string section (.rodata.str1.1), which contains labeled, read-only .ascii strings  e.g.
#
#            .section   .rodata.str1.1,"aMS",%progbits,1
#    .LC0:
#            .ascii     "pkt_filter\000"
#    .LC1:
#            .ascii     "pkt_filter_add\000"
#
# Place each labeled string in a unique mergeable string section, e.g.
#
#            .section	.rodata.str1.1.LC0,"aMS",%progbits,1
#    .LC0:
#            .ascii     "pkt_filter\000"
#
#            .section	.rodata.str1.1.LC1,"aMS",%progbits,1
#    .LC1:
#            .ascii     "pkt_filter_add\000"
#
my $asm_out = '';
my $changed = 0;
my $line;
while ($line = <$fh>) {
	$asm_out .= $line;

	# Locate the string section.
	if ($line =~ /^\t\.section\t\.rodata\.str/) {
		# Process labeled .ascii strings as long as we're in the string section.
		while ($line = <$fh>) {
			if ($line =~ /^\t\.section\t/) {
				last;
			}

			# Place each labeled string in a unique mergeable string section.
			if ($line =~ /^(\.LC\d+):/) {
				my $label = $1;
				$asm_out .= "\t.section\t.rodata.str1.1$label,\"aMS\",\%progbits,1\n";
				$changed = 1;

				# Debug.
				dprint("Place '$label' in unique string section\n");
			}
			$asm_out .= $line;
		}
		redo;
	}
}

# Cleanup.
close $fh;


# Overwrite the input file with the output.
if ($changed) {
	open($fh, ">$fname") or
		die("$script: Could not open '$fname' for writing: $!\n");
	print $fh $asm_out;
	close $fh;
}

