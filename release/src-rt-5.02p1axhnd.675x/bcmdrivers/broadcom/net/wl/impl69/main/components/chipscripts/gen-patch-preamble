#!/usr/bin/perl
#
# This script generates the ROM "patch preambles" assembly file.
#
# "Patch preambles" are assembly instructions corresponding to the first couple instructions
# for each ROM function. These instructions are executed (in RAM) by manual patch functions prior
# to branching to an offset within the patched ROM function. This avoids recursively hitting the
# TCAM entry located at the beginning of the ROM function.
#
# Historically, each function in ROM contained a 2 nop preamble, e.g.
#    printf:
#       nop               <== 4 byte TCAM entry
#       nop               <==
#    printf__bcmromfn:    <== Manual patch branches here
#       push   {r0, r1, r2, r3}
#       push   {r4, r5, r6, lr}
#       ldr    r5, [pc, #112]
#
# When printf() was abandoned, a TCAM entry would overlay the nop instructions and branch to the
# RAM version of printf(). If a manual patch function for printf() was created, it would call
# 'printf__bcmromfn' in ROM to prevent hitting the TCAM entry.
#
# Recent ROMs have excluded the nop preamble as a ROM memory optimization, e.g.
#
#    printf:
#       push   {r0, r1, r2, r3}  <== 4 byte TCAM entry
#       push   {r4, r5, r6, lr}  <==
#       ldr    r5, [pc, #112]    <== Patch preamble branches here
#
# It is therefore no longer possible for manual patch functions to branch to the start of the
# ROM function.
#
# As a solution, "patch preambles" are generated when the ROM is created. The preamble is executed
# in RAM before branching to an offset with the ROM function, e.g.
#
#    printf__bcmromfn_preamble:
#       push   {r0, r1, r2, r3}
#       push   {r4, r5, r6, lr}
#       b 0x120b1                <== Branch to ROM printf+4
#
# Usage: See 'usage' subroutine below.
#
# $ Copyright Broadcom Corporation $
#
# <<Broadcom-WL-IPTag/Proprietary:>>
#

use strict;
use warnings;
use File::Basename;
use Log;


# Display usage info.
#
# Params: None.
#
# Returns: Nothing.
sub usage {
    print STDERR "Usage: gen-patch-preamble <romtable.S> <roml.dis> <output-file>\n";
    print STDERR "   <romtable.S>:  IN  ROM table.\n";
    print STDERR "   <roml.dis>:    IN  ROM disassembly.\n";
    print STDERR "   <output-file>: OUT Generated patch preamble assembly file.\n";
    exit 1;
}

# Subroutine return codes.
use constant {
	OK          => 0,
	UNSUPPORTED => 1,
};

# The size of the ROM preamble instructions must be at least 4 bytes. This is the size of the
# TCAM patch entry.
use constant ROM_PREAMBLE_MIN_SIZE_BYTES => 4;

# Input filenames.
my $g_fname_rom_dis;
my $g_fname_romtable;
my $g_patch_preamble_fname;

# Script name.
my $g_script = basename($0);

# Hash of functions in ROM. (Key is function name, value is '1').
my %g_romtable_funcs;

# Hash of ROM function instruction preambles. (Key is function name, value is array of instructions).
my %g_func_preambles;

# Hash of ROM function preamble end addresses. The preamble function will branch to this ROM
# address after executing the preamble instructions from RAM. (Key is function name, value is
# ROM address).
my %g_preamble_end_addrs;

# Hash of functions in ROM that have instructions that branch to the preamble.
# (Key is function name, value is '1').
my %g_branch_to_preamble_funcs;

# Debug file.
my $g_debug_fd;
my $g_debug_fname = $g_script . "-debug.txt";

# Regular expression search strings.
my $g_sym_regexp   = '[\w$]+';
my $g_addr4_regexp = '[0-9a-fA-F]{4}';
my $g_addr_regexp  = '[0-9a-fA-F]{1,8}';

# Optional assembly instruction qualifiers (narrow, wide).
my $g_qualifiers_regexp = qr/(?:\.[nw])?/;

# Branch condition codes regular expressions.
my $g_cond_codes_regexp = qr/eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al/;

# Instruction type regular expressions.
my $g_branch_regexp  = qr/(?:bl?x?(?:$g_cond_codes_regexp)?$g_qualifiers_regexp)/;
my $g_cbz_regexp     = qr/cbn?z$g_qualifiers_regexp/;
my $g_if_then_regexp = qr/it[t|e]{0,3}$g_qualifiers_regexp/;
my $g_pc_rel_regexp  = qr/(?:ldr|tbb|tbh).*\[pc,/;


# Parse command line arguments.
($g_fname_romtable       = shift @ARGV) || &usage;
($g_fname_rom_dis        = shift @ARGV) || &usage;
($g_patch_preamble_fname = shift @ARGV) || &usage;
shift @ARGV && &usage;


# Parse functions from ROM table.
#
# Params:  fname:     IN  Input filename.
#          rom_funcs: OUT Hash table of all symbols in ROM (from input romtable.S).
#
# Returns: Nothing.
sub parse_romtable_file {
	my ($fname, $rom_funcs) = @_;
	my ($fd, $line);

	# Open romtable input file.
	open($fd, "<$fname") or
		die "Could not open $fname for reading: $!\n";

	# Parse symbols.
	foreach $line (<$fd>) {

		# Parse all ROM functions. The syntax is:
		#   .extern bcm_mp_alloc
		if (($line =~ /^\s*\.extern\s+(${g_sym_regexp})\b/) && ($line !~ /\.rodata/)) {
			$rom_funcs->{$1} = 1;

			# Debug.
			log_debug("$1\n");
		}
	}

	# Clean up.
	close $fd;
}


# Parse ROM preamble instructions from disassembly file.
#
# Params: fname:                   IN  Input filename.
#         romtable_funcs:          IN  Hash of functions in ROM. (Key is function name, value is '1').
#         func_preambles:          OUT Hash of ROM function instruction preambles. (Key is function
#                                      name, value is array of instructions).
#         preamble_end_addrs:      OUT Hash of ROM function preamble end addresses. (Key is function
#                                      name, value is ROM address).
#         branch_to_preamble_funcs OUT Hash of functions in ROM that have instructions that branch
#                                      to the preamble. (Key is function name, value is '1').
#
# Returns: Nothing.
sub parse_rom_disas_file {
	my ($fname, $romtable_funcs, $func_preambles, $preamble_end_addrs, @more_args) = @_;
	my ($branch_to_preamble_funcs) = @more_args;
	my ($fh, $line, $func, $func_addr, $parse_preamble);
	my ($instr_encoding_regexp, $disas_instr_regexp);

	$func           = "nil";
	$func_addr      = 0;
	$parse_preamble = 0;

	# Open disassembly file.
	open($fh, "<$fname") or
	    die "Could not open $fname for reading: $!\n";

	# Instruction disassembly regular expressions.
	$instr_encoding_regexp = qr/${g_addr4_regexp}(\s${g_addr4_regexp})?/;
	$disas_instr_regexp    = qr/^\s+(${g_addr_regexp}):    # Instruction address
	                            \s+$instr_encoding_regexp  # Instruction hex encoding
                                    \s+(.*)/x;                 # Instruction disassembly

	# Parse disassembly file.
	foreach $line (<$fh>) {
		# Parse function name, syntax is:
		#    0000efc8 <aes$xor_128bit_block>:
		if ($line =~ /(${g_addr_regexp})\s+<(${g_sym_regexp})>:\s*$/) {
			$func_addr = hex($1);
			$func      = $2;

			# Filter out read-only data sections, and RAM function stubs contained
			# in the disassembly.
			if ($romtable_funcs->{$func}) {
				$parse_preamble = 1;

				# Debug.
				log_debug("$func\n");
			}
		}
		# Parse ROM function preamble instructions, e.g.
		#    efc8: ea41 0300    orr.w   r3, r1, r0
		elsif ($parse_preamble) {
			my ($instr, $instr_len, $instr_addr);
			if ($line =~ /$disas_instr_regexp/) {
				$instr_addr = hex($1);
				$instr_len  = defined($2) ? 4 : 2;
				$instr      = $3;
			}
			else {
				log_error("Unknown syntax ($func) '$line'\n");
				exit 1;
			}


			# Save ROM preamble instruction.
			push(@{$func_preambles->{$func}}, $instr);

			# Stop parsing preamble instructions once the min number of instruction
			# bytes have been parsed.
			#
			# It is assumed that all functions are >= ROM_PREAMBLE_MIN_SIZE_BYTES (4)
			# bytes. (This is validated by the error check above). ROM functions are
			# forced to be 4-byte aligned due to TCAM restrictions. Therefore, even a
			# stub function will be 4 bytes: (bx lr; nop;).
			if ($instr_addr + $instr_len - $func_addr >= ROM_PREAMBLE_MIN_SIZE_BYTES) {
				$preamble_end_addrs->{$func} = $instr_addr + $instr_len;
				$parse_preamble = 0;
			}
		}
		# Parse the rest of the function disassembly. Detect special cases.
		elsif ($line =~ /$disas_instr_regexp/) {
			my $instr = $3;
			# Detect branches back to the ROM preamble. This is problematic since the
			# preamble instructions should only be executed in RAM by the
			# patch-preamble. e.g. The following will attempt to execute the 2nd
			# halfword of a TCAM branch instruction!
			#
			#    <strcpy>:
			#       mov    r3, r0             <--+ 4 byte TCAM entry
			#       ldrb.w r2, [r1], #1       <--+   <--+
			#       strb.w r2, [r3], #1                 |
			#       cmp    r2, #0                       |
			#       bne.n  d8de <strcpy+0x2>  ----------+ Branch back into ROM preamble.
			#       bx lr
			#
			# The detection of branches back to the preamble is limited to variants
			# of the 'b(l)(x)<c><q>' branch instructions and 'cb(n)z' instructions.
			# There are other instructions that perform branches, though it seems
			# unlikely that they would branch to the preamble (and in some cases it
			# may not be possible to detect if they do from the disas), e.g.
			#   ldmdb   - Does not appear to be used with PC in existing ROMs.
			#   ldmia   - Typically used to return to caller (pop LR from stack to PC).
			#   ldr     - In practice appears to be used to branch to case handlers for
			#             large switch statements (e.g. wlc_doiovar).
			#   mov     - Does not appear to be used with PC in existing ROMs.
			#   pop     - Typically used to return to caller (pop LR from stack to PC).
			#   tbb/tbh - Branch forward only.
			if ($instr =~ /^(?:$g_branch_regexp|$g_cbz_regexp)
				       \s+.*<$g_sym_regexp\+(0x[0-9a-fA-f]+)>/x) {
				my $offset = hex($1);
				if ($offset < ($preamble_end_addrs->{$func} - $func_addr)) {
					$branch_to_preamble_funcs->{$func} = 1;

					# Debug.
					log_debug("Branch to preamble: $func\n");
				}
			}
		}
	}

	# Clean up.
	close $fh;
}


# Post-process and validate patch preamble parsed from ROM disassembly file.
#
# Params: func:          IN  Name of function.
#         func_preamble: MOD Hash of ROM function instruction preambles. (Key is function
#                            name, value is array of instructions).
#
# Returns: OK for success, UNSUPPORTED if preamble contains unsupported instructions.
sub update_patch_preamble {
	my ($func, $func_preamble) = @_;

	foreach my $instr (@{$func_preamble}) {
		# Convert disassembly comments into C-style comments (for re-assembling), e.g.
		#        sub   sp, #140   ; 0x8c
		#    ==> sub   sp, #140   /*  0x8c */
		$instr =~ s/;(.*)$/\/* $1 *\//;

		# Branch instructions currently not supported, e.g.
		#    bl   11fb8 <memcpy>
		#
		# There are a few issues:
		#    - "Narrow" branches (16-bit instructions) might need to be converted to
		#      "wide" branches (32-bit) to support larger branch offsets required to branch
		#      from the RAM patch preamble to the ROM function.
		#    - The extra branch (to ROM) added to the RAM patch preamble may be unnecessary.
		#    - "Narrow" branches (16-bit instructions) in 1st preamble instruction could be
		#      problematic. e.g. some part of the ROM function will branch to the 2nd
		#      16-bit instruction of the ROM function which will contain a (partial)
		#      TCAM entry.
		if ($instr =~ /^$g_branch_regexp\s+/) {
			log_debug("Branch instruction unsupported for '$func'\n");
			return (UNSUPPORTED);
		}

		# 'Compare and branch on (not) zero' instructions currently not supported, e.g.
		#    cbz   r3, f390
		#
		# These instructions only support small branch offsets. These preamble instructions
		# might need to be replaced with multiple instructions to support the larger branch
		# offsets required to branch from the RAM patch preamble to the ROM function.
		#
		# According to the ARM documentation:
		# "Except that it does not change the condition code flags, CBZ Rn, label is
		# equivalent to:
		#   CMP     Rn, #0
		#   BEQ     label
		# "
		#
		# Also, "In addition, they preserve the condition code flags. This means that a
		# condition code flag setting generated before the instruction can be used after it.
		# This is not possible with the two instruction sequence that CBZ and CBNZ replace."
		#
		# Therefore, even if cb(n)z is replaced with the 2 instruction equivalents, there
		# are still potential issues if the 1st instruction of the preamble modifies the
		# condition code registers, and the 2nd instruction is a cb(n)z. This situation
		# would need to be detected by this script (and presumably that function could
		# not be supported).
		if ($instr =~ /^$g_cbz_regexp\s+/) {
			log_debug("Compare and branch instruction unsupported for '$func'\n");
			return (UNSUPPORTED);
		}

		# 'If then' (IT) block instructions currently not supported, e.g.
		#    ite       ne
		#     movne.w   r0, #4294967295
		#     moveq     r0, #0
		#
		# The preamble would need to contain all instructions that form the instruction
		# block and then branch to the location after end of instruction block.
		if ($instr =~ /^$g_if_then_regexp\s+/) {
			log_debug("IT instruction unsupported for '$func'\n");
			return (UNSUPPORTED);
		}

		# Program counter (PC) relative instructions currently not supported, e.g.
		#    ldr   r2, [pc, #204]
		#    ldr.w r0, [r3, r0, lsl #2]
		#    ... <lots of instructions>
		#    .word 0x00182068
		#
		# The PC offset would need to be updated in the preamble, and the preamble would
		# need to include the source word value, e.g.
		#    ldr r2, [pc, #offset]    <== update offset
		#    ldr.w r0, [r3, r0, lsl #2]
		#    .word 0x00182068
		if ($instr =~ /^$g_pc_rel_regexp/) {
			log_debug("PC relative instruction unsupported for '$func'\n");
			return (UNSUPPORTED);
		}
	}

	return (OK);
}


# Generate the output patch preamble assembly file.
#
# Params: fname:                   IN  Output filename.
#         func_preambles:          IN  Hash of ROM function instruction preambles. (Key is function
#                                      name, value is array of instructions).
#         preamble_end_addrs:      IN  Hash of ROM function preamble end addresses. (Key is function
#                                      name, value is ROM address).
#         branch_to_preamble_funcs OUT Hash of functions in ROM that have instructions that branch
#                                      to the preamble. (Key is function name, value is '1').
#
# Returns: Nothing.
sub generate_patch_preamble_file {
	my ($fname, $func_preambles, $preamble_end_addrs, $branch_to_preamble_funcs) = @_;
	my $fh;
	my $rom_preamble_fn_suffix = "__bcmromfn_preamble";

	# Open output file for writing.
	open($fh, ">$fname") or
		die "Could not open $fname for writing: $!\n";

	# File header.
	printf $fh ("/*\n");
	printf $fh (" * DO NOT MODIFY! THIS WAS GENERATED BY SCRIPT $g_script.\n");
	printf $fh (" *\n");
	printf $fh (" * ROM preambles for manually patched functions to call ROM functions.\n");
	printf $fh (" */\n\n\n");

	# Error checking for supported architectures/variants.
	printf $fh ("#if !defined(__arm__)\n");
	printf $fh ("\t#error \"Only ARM supported!\"\n");
	printf $fh ("#endif /* !__arm__ */\n\n");

	printf $fh ("#if !defined(__thumb__) && !defined(__thumb2__)\n");
	printf $fh ("\t#error \"Only thumb(2) mode supported!\"\n");
	printf $fh ("#endif /* !__thumb__ && !__thumb2__*/\n\n\n");


	# Select unified ARM/thumb instruction set syntax.
	printf $fh ("\t.syntax unified\n");
	printf $fh ("\n");
	printf $fh ("\n");

	# Helper macros for assembler directives required for preamble functions.
	printf $fh ("#define PATCH_PREAMBLE(_fn) _PATCH_PREAMBLE(_fn ## $rom_preamble_fn_suffix)\n");
	printf $fh ("#define _PATCH_PREAMBLE(_fn) \\\n");
	printf $fh ("\t.section .text._fn,\"ax\",%%progbits; \\\n");
	printf $fh ("\t.thumb; \\\n");
	printf $fh ("\t.align  2; \\\n");
	printf $fh ("\t.global _fn; \\\n");
	printf $fh ("\t.type _fn, %%function; \\\n");
	printf $fh ("_fn: \n\n\n");

	# Generate patch preambles for each function in ROM.
	foreach my $func (sort keys %{$func_preambles}) {
		# Debug.
		log_debug("$func\n");

		# Manual patching for this function is unsupported if:
		#    - The preamble contains unsupported instructions.
		#    - An instruction in the rest of the function branches back within the preamble.
		if (($branch_to_preamble_funcs->{$func}) ||
		    (update_patch_preamble($func, $func_preambles->{$func}) != OK)) {
			printf $fh ("/* '$func' patch preamble unsupported. */\n\n");
			next;
		}

		# Write preamble, and then add an extra branch instruction to jump to ROM.
		printf $fh ("PATCH_PREAMBLE($func)\n");
		foreach my $line (@{$func_preambles->{$func}}) {
			printf $fh ("\t$line\n");
		}
		printf $fh ("\tb 0x%x\n", $preamble_end_addrs->{$func} + 1);
		printf $fh ("\n");
	}

	# Clean up.
	close $fh or
		die "Could not close $fh: $!\n";
}


##############################################################################
# Setup logging.
#
open($g_debug_fd, ">$g_debug_fname") or
	die "Could not open $g_debug_fname for writing: $!\n";

log_set_debug_fd($g_debug_fd);

##############################################################################
# Parse input files.
#

# Parse ROM table.
parse_romtable_file($g_fname_romtable, \%g_romtable_funcs);

# Parse ROM disassembly file.
parse_rom_disas_file($g_fname_rom_dis,
                     \%g_romtable_funcs,
                     \%g_func_preambles,
                     \%g_preamble_end_addrs,
                     \%g_branch_to_preamble_funcs);

##############################################################################
# Generate patch preamble file.
#
generate_patch_preamble_file($g_patch_preamble_fname,
                             \%g_func_preambles,
                             \%g_preamble_end_addrs,
                             \%g_branch_to_preamble_funcs);


##############################################################################
# Cleanup.
#
close($g_debug_fd) or
	die "Could not close $g_debug_fd: $!\n";

