#!/usr/bin/perl

# This script modifies the exe file so that at run time correct jump instructions are populated in the flops.
#
# $ Copyright Broadcom Corporation $
#
# <<Broadcom-WL-IPTag/Proprietary:>>
#


use warnings;
use strict;


sub usage {
		die 'Usage: perl flopscopy <exe file> $(TEXT_START)  $(FLOPS_START) $(HBUS_ENAB) $(BOOTLOADER_PATCH_SIZE)' ;
		print "\n ";
}

if(@ARGV < 5) {
	&usage;
}

my $fnexe = $ARGV[0];
my $text_start = $ARGV[1];
my $flops_start = $ARGV[2];
my $bus = $ARGV[3];
my $offset = hex($ARGV[4]);
my $fnsize = -s $fnexe;
my $fhexe;
my @exe;
my $read_val;
my @elf_header;
my $elf_ident;

open($fhexe,'+<', $fnexe) or die "Could not open $fnexe!!\n";
binmode $fhexe;
read $fhexe, $read_val, 52, 0;

@elf_header = split(//,$read_val);
$elf_ident = join('',@elf_header[0..3]);
$elf_ident = unpack('H*',$elf_ident);


# magic no that identifies an elf file
if($elf_ident ne '7f454c46'){
	print "$fnexe is not a elf32 file!!\n";
	exit;
}



# read  the program header and section header offset and their number from the elf header 
my $elf_phoff = join('', @elf_header[28..31]);
my $elf_shoff = join('', @elf_header[32..35]);
my $elf_phnum = join('', @elf_header[44..45]);
my $elf_shnum = join('', @elf_header[48..49]);
my $elf_phentsize = join('', @elf_header[42..43]);
my $elf_shentsize = join('', @elf_header[46..47]);
$elf_phoff = unpack('I1', $elf_phoff);
$elf_shoff = unpack('I1', $elf_shoff);
$elf_phnum = unpack('S1', $elf_phnum);
$elf_shnum = unpack('S1', $elf_shnum);
$elf_phentsize = unpack('S1', $elf_phentsize);
$elf_shentsize = unpack('S1', $elf_shentsize);


if(hex($text_start) == hex($flops_start)) {
	# go the the start of the program header
	seek $fhexe, $elf_phoff, 0;

	read $fhexe, $read_val, $elf_phentsize;

	my @elf_phdr  = split(//, $read_val);

	my $elf_p_offset = join('',@elf_phdr[4..7]);
	my $elf_p_filesz = join('',@elf_phdr[16..19]);

	$elf_p_offset = unpack('I1', $elf_p_offset);
	$elf_p_filesz = unpack('I1', $elf_p_filesz);

	# read 32 bytes from the 1st program header
	seek $fhexe, $elf_p_offset, 0;
	read $fhexe, $read_val, 32;

	seek $fhexe, ($elf_p_offset + 32),0;
	print $fhexe $read_val;
}else {
	# go the the start of the program header and read the contents of the first program header section
	seek $fhexe, $elf_phoff, 0;

	read $fhexe, $read_val, $elf_phentsize;
	
	my @elf_p1hdr  = split(//, $read_val);

	my $elf_p1_offset = join('',@elf_p1hdr[4..7]);
	my $elf_p1_filesz = join('',@elf_p1hdr[16..19]);
	$elf_p1_offset = unpack('I1', $elf_p1_offset);
	$elf_p1_filesz = unpack('I1', $elf_p1_filesz);
	

	# read 32 bytes from the startup_flops_reloc section
	seek $fhexe, $elf_p1_offset, 0;
	read $fhexe, $read_val, 32 ;

	my $write_val = $read_val;

	# read the content of the second program header section
	seek $fhexe, ($elf_phoff + $elf_phentsize), 0;

	read $fhexe, $read_val, $elf_phentsize;


	my @elf_p2hdr  = split(//, $read_val);


	my $elf_p2_offset = join('',@elf_p2hdr[4..7]);
	my $elf_p2_filesz = join('',@elf_p2hdr[16..19]);

	$elf_p2_offset = unpack('I1', $elf_p2_offset);
	$elf_p2_filesz = unpack('I1', $elf_p2_filesz);

	# read the content of the Third program header section
	seek $fhexe, ($elf_phoff + 2* $elf_phentsize), 0;

	read $fhexe, $read_val, $elf_phentsize;


	my @elf_p3hdr  = split(//, $read_val);


	my $elf_p3_offset = join('',@elf_p3hdr[4..7]);
	my $elf_p3_filesz = join('',@elf_p3hdr[16..19]);

	$elf_p3_offset = unpack('I1', $elf_p3_offset);
	$elf_p3_filesz = unpack('I1', $elf_p3_filesz);
	
	# Though our TEXT_START is 0x180_000 the actual code starts at 0x180_800, the initial 0x800 bytes are reserved for boot loader patch.
	# writing at location 0x180800 the contents of startup_flops_reloc.
	# Also the same contents has to be written at 0x180820.
	# http://hwnbu-twiki.sj.broadcom.com/twiki/pub/Mwgroup/11acEmbeddedChangesProposed/4335_SWImageLayout.pptx
	if ($bus ne "usb") {	
		seek $fhexe, $elf_p2_offset , 0;
		print $fhexe $write_val;
	}

	seek $fhexe, $elf_p2_offset + $offset, 0;
	print $fhexe $write_val;
	
	seek $fhexe, $elf_p2_offset +$offset + 32, 0;
	print $fhexe $write_val;

	# in the elf header change the e_phnum field  to e_phnum -1
	
	$elf_phnum = $elf_phnum - 1 ;
	$elf_phnum = pack('S1', $elf_phnum);

	seek $fhexe, 44, 0 ; # here 44 is the offset of $elf_phnum filed in the elf file from the beginning.
	print $fhexe $elf_phnum;

	# changing the program header offset in the elf header

	$elf_phoff = $elf_phoff + $elf_phentsize ;
	$elf_phoff = pack('S1', $elf_phoff);

	seek $fhexe, 28, 0;  # here 28 is the offset of program header in the elf header.
	print $fhexe $elf_phoff;

	# we dont want starup_flops_reloc section into our final image. Below we change the type to NULL and
	# flags to NULL in the section header of startup_flops_reloc
	seek $fhexe, $elf_shoff + $elf_shentsize, 0;
	my $elf_shdr_flags_index = 8;
	my $elf_shdr_type_index = 4;

	seek $fhexe, ($elf_shoff + $elf_shentsize + $elf_shdr_type_index), 0;
	my $sh_type = 0;
	$sh_type = pack('I1', $sh_type);
	print $fhexe $sh_type;

	seek $fhexe, ($elf_shoff + $elf_shentsize + $elf_shdr_flags_index), 0;
	my $flags_attribute = 0;
	$flags_attribute = pack('I1', $flags_attribute);
	print $fhexe $flags_attribute;

}
close($fhexe);
