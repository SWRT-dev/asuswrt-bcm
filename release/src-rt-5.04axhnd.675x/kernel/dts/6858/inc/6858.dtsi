/dts-v1/;

#include <dt-bindings/interrupt-controller/arm-gic.h>
#include <dt-bindings/interrupt-controller/irq.h>

#include "linux_autoconf.h"

#include "../../boot_rsvdmem.dtsi"

/ {
	/* memory reservations */
	#include "../../bcm_rsvdmem.dtsi"

	/* memc */
	#include "../../ip/memc.dtsi"

	aliases {
		serial0 = &uart0;
		serial1 = &uart1;
		spi1 = &hsspi; /* 0 = legacy, 1 = high speed */
		hs_serial0 = &hs_uart0;
		spinand0 = &spinand;
		nand0 = &nand;
	};

	chosen {
		stdout-path = "serial0:115200n8";
		/* increase coherent_pool size */
		bootargs = "coherent_pool=4M cpuidle_sysfs_switch pci=pcie_bus_safe console=ttyS0,115200 earlycon rootwait";
	};

	/* PMC */
	pmc: pmc {
		#define PMC_REG_OFFSET              0x0 0x80201000 
		#define PMC_REG_SIZE                0x0 0x3800
		#define PROCMON_REG_OFFSET          0x0 0x80280000
		#define PROCMON_REG_SIZE            0x0 0x184
		#define MISC_STRAP_BUS_OFFSET       0x0 0xff802600 
		#define MISC_STRAP_BUS_SIZE         0x0 0x4
		#include "../../ip/bcm_pmc_1_x.dtsi"
	};

    /* boot state */
	boot_state: boot_state {
		#define RESET_REASON_OFFSET  0x0 0xff802624
		#define RESET_REASON_SIZE    0x0 0x4
		#define RESET_STATUS_OFFSET  0x0 0xff802748
		#define RESET_STATUS_SIZE    0x0 0x4
		#include "../../ip/bcm_boot_state_v2.dtsi"
	};

	/* wan type auto detect */
	wantype_detect {
		#define GPON_GENERAL_CONFIG_ADDR	0x0 0x80150000
		#define GPON_GENERAL_CONFIG_SIZE	0x0 0x10
		#define EPON_TOP_ADDR			0x0 0x80140000
		#define EPON_TOP_SIZE			0x0 0x1C
		#define EPON_LIF_ADDR			0x0 0x80141800
		#define EPON_LIF_SIZE			0x0 0x110
		#define EPON_XPCSR_ADDR			0x0 0x80143000
		#define EPON_XPCSR_SIZE			0x0 0x124
		#define NGPON_RXGEN_ADDR		0x0 0x80160000
		#define NGPON_RXGEN_SIZE		0x0 0x80
		#include "../../ip/bcm_wantype_detect.dtsi"
	};

#if (defined(CONFIG_BCM_PDC) || defined(CONFIG_BCM_PDC_MODULE)) && \
    (defined(CONFIG_BCM_SPU) || defined(CONFIG_BCM_SPU_MODULE))
	/* spu */
	#define SPU_DMA_ADDR			0x00000000 0x8001c000
	#define SPU_DMA_SIZE			0x00000000 0x448
	#define SPU_DMA_NUM_CHAN		1
	#define SPU_DMA_NUM_AE			1
	#define SPU_CRYPTO_ADDR			0x00000000 0x8001d000
	#define SPU_CRYPTO_SIZE			0x00000000 0x64
	#define SPU_GMAC_SPI			118
	#include "../../ip/bcm_spu.dtsi"
#endif

	/* NAND controller and EMMC although they are on PERIPH bus, but to facilitate single
	  device tree for linux/uboot and because uboot cannot interpret composite
	  addresses, has no scope */
	/* NAND controller */
	nand: nand {
		#define NAND_CTRL_OFFSET		0x0 0xff801800
		#define NAND_CTRL_SIZE			0x0 0x400
		#define NAND_INTR_OFFSET		0x0 0xff802000
		#define NAND_INTR_SIZE			0x0 0x10
		#define NAND_CACHE_OFFSET		0x0 0xff801C00
		#define NAND_CACHE_SIZE			0x0 0x200
		#include "../../ip/bcm_nand7_1.dtsi"
	};

   	/* EMMC */
	sdhci: sdhci {
		#define SDHCI_OFFSET			0x00000000 0xff858000
		#define SDHCI_SIZE			0x00000000 0x100
		#define SDHCI_TOPCFG_OFFSET		0x00000000 0xff858100
		#define SDHCI_TOPCFG_SIZE		0x00000000 0x100
		#define SDHCI_BOOT_OFFSET		0x00000000 0xff858200
		#define SDHCI_BOOT_SIZE			0x00000000 0x40
		#define SDHCI_AHBSS_CTRL_OFFSET		0x00000000 0xff858300
		#define SDHCI_AHBSS_CTRL_SIZE		0x00000000 0x100
		#define SDIO_EMMC_SPI			95
		#include "../../ip/bcm_sdhci.dtsi"
	};

	hs_uart0: hs_serial0 {
		#define UART_OFFSET			0x0 0xff858400
		#define UART_SIZE			0x0 0x1E0
		#define UART_SPI 			93
		#include "../../ip/bcm_hs_uart.dtsi"
	};

	periph {
		compatible = "simple-bus";
		#address-cells = <2>;
		#size-cells = <2>;
		ranges = <0x0 0x0 0x0 0xff800000 0x0 0x62000>;

		/* UART 1*/
		uart0: serial0 {
			#define UART_OFFSET			0x0 0x640
			#define UART_SIZE			0x0 0x18
			#define UART_SPI 			32
			#include "../../ip/bcm_uart.dtsi"
		};

		/* UART 2*/
		uart1: serial1 {
			#define UART_OFFSET			0x0 0x660
			#define UART_SIZE			0x0 0x18
			#define UART_SPI 			33
			#include "../../ip/bcm_uart.dtsi"
		};

		/* HS SPI */
		hsspi: spi {
			pinctrl-0 = <&spim_group_pins>;
			pinctrl-names = "default";
			#define HS_SPI_OFFSET			0x0 0x1000
			#define HS_SPI_SIZE			0x0 0x600
			#define HS_SPI_MAX_FREQ			100000000
			#define HS_SPIM_SPI			37
			#include "../../ip/bcm_hsspi.dtsi"
			spinand: spi-nand@0 {
				#define SPINAND_MAX_FREQ	100000000
				#include "../../ip/bcm_spinand.dtsi"
			};

			voice7 {
				pinctrl-0 = <&a_pcm_sdin_pin_0 &a_pcm_sdout_pin_1 &a_pcm_clk_pin_2 &a_pcm_fs_pin_3>;
				pinctrl-names = "default";
				compatible = "bcm-spi-voice";
				reg = <7>; /* chip select 7 */
				spi-index = <7>;/* ZSI/ISI header position index */
				spi-max-frequency = <1024000>;
			};
		};

		rng: rng {
			#define RNG200_OFFSET			0x0 0x00000b80
			#define RNG200_SIZE			0x0 0x28
			#include "../../ip/bcm_rng200.dtsi"
		};

		i2c0: i2c0 {
			#define I2C_OFFSET			0x0 0x2100
			#define I2C_SIZE			0x0 0x60
			#include "../../ip/bcm_i2c_bus.dtsi"
		};

		/* use second i2c bus for pon sfp i2c device */
		i2c1: i2c1 {
			#define I2C_OFFSET			0x0 0x5a800
			#define I2C_SIZE			0x0 0x60
			#include "../../ip/bcm_i2c_bus.dtsi"
		};

		/* watchdog */
		wdt: watchdog {
			#define WATCHDOG_OFFSET			0x0 0x2780
			#define WATCHDOG_SIZE			0x0 0x10
			#define WATCHDOG_TIMEOUT		80
			#include "../../ip/bcm_wdt.dtsi"
		};

		/* periph timers */
		timers: timers {
			#define TIMERS_OFFSET		0x0 0x2700
			#define TIMERS__SIZE		0x0 0x48
			#define TIMER0_SPI			64
			#define TIMER1_SPI			65
			#define TIMER2_SPI			66
			#define TIMER3_SPI			67
			#include "../../ip/bcm_timer.dtsi"
		};

		/* watchdog reboot */
		wdt-reboot {
			compatible = "wdt-reboot";
			wdt = <&wdt>;
		};
		
		/* sotp */
		sotp {
			#define SOTP_OFFSET			0x0 0xc00
			#define SOTP_SIZE			0x0 0x84
			#include "../../ip/bcm_sotp.dtsi"
		};
		
		/* pinctrl */
		pincontroller: pinctrl {
			#define PINCTRL_OFFSET       0x0 0x554
			#define PINCTRL_SIZE         0x0 0xc
			#define PINCTRL_NUM_PINS     118
			#define PINCTRL_NUM_FUNC     8
			#define PINCTRL_GPIO_FUNC    5
			#include "../../ip/bcm_bca_pinctrl.dtsi"
			#include "6858_pinctrl.dtsi"
		};

		/* gpio */
		gpioc: gpioc {
			#define GPIO_DIR_OFFSET      0x0 0x500
			#define GPIO_DIR_SIZE        0x0 0x20
			#define GPIO_DATA_OFFSET     0x0 0x520
			#define GPIO_DATA_SIZE       0x0 0x20
			#define NUM_OF_GPIOS         118
			#include "../../ip/bcm_bca_gpio.dtsi"
		};

		/* external interrups */
		bca_extintr: bca_extintr0 {
			#define EXTINTR_OFFSET       0x0 0x4
			#define EXTINTR_SIZE         0x0 0x48
			#define MAX_EXT_INTR         8
			#include "../../ip/bcm_bca_extintr.dtsi"
			external_interrupts = <105 106 107 108 109 110 48 49>;
			clear_workarround;
		};
			
		/* Led Controller */
		led_ctrl: led_ctrl {
			#define LED_GLBL_CTRL_OFFSET     0x0 0x800
			#define LED_GLBL_CTRL_SIZE       0x0 0x4 
			#define LED_HW_EN_OFFSET         0x0 0x808
			#define LED_HW_EN_SIZE           0x0 0x4
			#define LED_SER_SHIFT_OFFSET     0x0 0x80c
			#define LED_SER_SHIFT_SIZE       0x0 0x4
			#define LED_FLASH_RATE_OFFSET    0x0 0x810
			#define LED_FLASH_RATE_SIZE      0x0 0x10
			#define LED_BRIGHTNESS_OFFSET    0x0 0x820
			#define LED_BRIGHTNESS_SIZE      0x0 0x10
			#define LED_POWER_LED_CFG_OFFSET 0x0 0x830
			#define LED_POWER_LED_CFG_SIZE   0x0 0x4
			#define LED_POWER_LUT_OFFSET     0x0 0x834
			#define LED_POWER_LUT_SIZE       0x0 0x80
			#define LED_HW_POLARITY_OFFSET   0x0 0x8b4
			#define LED_HW_POLARITY_SIZE     0x0 0x4
			#define LED_SW_DATA_OFFSET       0x0 0x8b8
			#define LED_SW_DATA_SIZE         0x0 0x4
			#define LED_SW_POLARITY_OFFSET   0x0 0x8bc
			#define LED_SW_POLARITY_SIZE     0x0 0x4
			#define LED_PAR_POLARITY_OFFSET  0x0 0x8c0
			#define LED_PAR_POLARITY_SIZE    0x0 0x4
			#define LED_SER_POLARITY_OFFSET  0x0 0x8c4
			#define LED_SER_POLARITY_SIZE    0x0 0x4
			#define LED_MASK_OFFSET          0x0 0x804
			#define LED_MASK_SIZE            0x0 0x4
			#define MAX_SUPPORTED_LEDS       32

			hw-polarity-quirk = <0xc0000000>;
			status = "okay";
			#include "../../ip/bcm_led_ctrl.dtsi"
			#include "6858_leds.dtsi"
		};

        legacy_leds: legacy_leds {
			compatible = "brcm,legacy-led";
        };
	};

    therm0: brcm-therm {
		compatible = "brcm,therm";
		reboot-temperature = <130000>; /* millicelsius */
	};
	
	/* network configuration */
	lport {
		compatible = "brcm,lport";
        reg = <0x0 0x80138000 0x0 0x8000>,
              <0x0 0xff802600 0x0 0xe4>,
              <0x0 0x82d2b000 0x0 0xe80>;
    };

		mdio_lport: mdio {
			compatible = "simple-bus";

			#address-cells = <1>;
			#size-cells = <0>;
			bus-type = "6858_LPORT";

			lportphy1:1 {
				compatible = "brcm,bcaphy";
				phy-type = "EGPHY";
				reg = <1>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy2:2 {
				compatible = "brcm,bcaphy";
				phy-type = "EGPHY";
				reg = <2>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy3:3 {
				compatible = "brcm,bcaphy";
				phy-type = "EGPHY";
				reg = <3>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy4:4 {
				compatible = "brcm,bcaphy";
				phy-type = "EGPHY";
				reg = <4>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy1e:1e {
				compatible = "brcm,bcaphy";
				phy-type = "EXT3";
				reg = <0x1e>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy1b:1b {
				compatible = "brcm,bcaphy";
				phy-type = "EXT3";
				reg = <0x1b>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy18:18 {
				compatible = "brcm,bcaphy";
				phy-type = "EXT2";
				reg = <0x18>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy19:19 {
				compatible = "brcm,bcaphy";
				phy-type = "EXT2";
				reg = <0x19>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy5:5 {
				compatible = "brcm,bcaphy";
				phy-type = "EXT1";
				reg = <0x5>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy6:6 {
				compatible = "brcm,bcaphy";
				phy-type = "EXT1";
				reg = <0x6>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy7:7 {
				compatible = "brcm,bcaphy";
				phy-type = "EXT1";
				reg = <0x7>;
				caps-no-hdx;
				status = "disabled";
			};
		};

		serdes_lport: serdes {
			compatible = "simple-bus";

			#address-cells = <1>;
			#size-cells = <0>;
			bus-type = "UNKOWN";

			lportphy_opt4:opt4 {
				compatible = "brcm,bcaphy";
				phy-type = "SERDES";
				reg = <0x4>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy_opt5:opt5 {
				compatible = "brcm,bcaphy";
				phy-type = "SERDES";
				reg = <0x5>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy_opt6:opt6 {
				compatible = "brcm,bcaphy";
				phy-type = "SERDES";
				reg = <0x6>;
				caps-no-hdx;
				status = "disabled";
			};

			lportphy_opt7:opt7 {
				compatible = "brcm,bcaphy";
				phy-type = "SERDES";
				reg = <0x7>;
				caps-no-hdx;
				status = "disabled";
			};
		};

	switch0: switch0 {
		compatible = "brcm,enet";
		label = "bcmsw";
		sw-type = "RUNNER_SW";

		ports {
			#address-cells = <1>;
			#size-cells = <0>;

			port0@0 {
				reg = <0>;
				mac-type = "LPORT";
				phy-handle = <&lportphy1>;
				phy-mode = "gmii";
				status = "disabled";
			};

			port_xfi0@0 {
				reg = <0>;
				mac-type = "LPORT";
				phy-mode = "xfi";
				status = "disabled";
			};

			port1@1 {
				reg = <1>;
				mac-type = "LPORT";
				phy-handle = <&lportphy2>;
				phy-mode = "gmii";
				status = "disabled";
			};

			port2@2 {
				reg = <2>;
				mac-type = "LPORT";
				phy-handle = <&lportphy3>;
				phy-mode = "gmii";
				status = "disabled";
			};

			port3@3 {
				reg = <3>;
				mac-type = "LPORT";
				phy-handle = <&lportphy4>;
				phy-mode = "gmii";
				status = "disabled";
			};

			port_xfi4@4 {
				reg = <4>;
				mac-type = "LPORT";
				phy-mode = "xfi";
				status = "disabled";
			};

			port_rgmii_4@4 {
				reg = <4>;
				mac-type = "LPORT";
				phy-mode = "rgmii";
				tx-delay;
				status = "disabled";
			};

			port_rgmii_5@5 {
				reg = <5>;
				mac-type = "LPORT";
				phy-mode = "rgmii";
				tx-delay;
				status = "disabled";
			};

			port_rgmii_6@6 {
				reg = <6>;
				mac-type = "LPORT";
				phy-mode = "rgmii";
				tx-delay;
				status = "disabled";
			};
		};
	};
};

&uart0 {
	status = "okay";
};
#if (defined(CONFIG_BCM_PDC) || defined(CONFIG_BCM_PDC_MODULE)) && \
    (defined(CONFIG_BCM_SPU) || defined(CONFIG_BCM_SPU_MODULE))
&spu_pdc {
	status = "okay";
};
&spu_crypto {
	status = "okay";
};
#endif
