/*
   Copyright (c) 2015 Broadcom
   All Rights Reserved

    <:label-BRCM:2015:DUAL/GPL:standard

    Unless you and Broadcom execute a separate written software license
    agreement governing use of this software, this software is licensed
    to you under the terms of the GNU General Public License version 2
    (the "GPL"), available at http://www.broadcom.com/licenses/GPLv2.php,
    with the following added to such license:

       As a special exception, the copyright holders of this software give
       you permission to link this software with independent modules, and
       to copy and distribute the resulting executable under terms of your
       choice, provided that you also meet, for each linked independent
       module, the terms and conditions of the license of that module.
       An independent module is a module which is not derived from this
       software.  The special exception does not apply to any modifications
       of the software.

    Not withstanding the above, under no circumstances may you combine
    this software in any way with any other Broadcom software provided
    under a license other than the GPL, without Broadcom's express prior
    written consent.

:>
*/



/* This is an automated file. Do not edit its contents. */


#ifndef _RDD_DATA_STRUCTURES_AUTO_H_
#define _RDD_DATA_STRUCTURES_AUTO_H_

#define GROUPED_EN_SEGMENTS_NUM       6
#define INVALID_TABLE_ADDRESS         0xFFFFFF

#ifdef __clang__
#define ALIGNMENT(x) __attribute__((align_value((x))))
#else
#define ALIGNMENT(x)
#endif


/* DDR */

/* >>>IPTV_DDR_CONTEXT_TABLE */

/* >>>IPTV_DDR_CONTEXT_ENTRY_STRUCT */
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_NUMBER	16
#define RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_NUMBER	16
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_NUMBER	32
typedef union
{
    uint32_t word_32[22];
    uint64_t dword_64[11];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	valid                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_ver                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	any_vid                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	any_src_ip                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vid                                                               	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	next_entry_idx                                                    	;
        uint16_t	ssid_vector_0_or_flooding_vport                                   	;
        uint16_t	ssid_vector_1                                                     	;
        uint16_t	ssid_vector_2                                                     	;
        uint32_t	radio_dhd_vector                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rdd_vport                                                         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wlan_mcast_proxy_enabled                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wlan_mcast_index                                                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wlan_mcast_tx_prio                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                                                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pool_num                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	replications                                                      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                                         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cntr_id                                                           	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_ports_vector                                               	;
        uint32_t	src_ip                                                            	;
        uint8_t	src_ipv6_addr[RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_NUMBER];
        uint8_t	dst_ipv6_addr[RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_NUMBER];
        uint8_t	result[RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_NUMBER];
#else
        uint16_t	next_entry_idx                                                    	;
        uint32_t	vid                                                               	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	any_src_ip                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	any_vid                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_ver                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	ssid_vector_1                                                     	;
        uint16_t	ssid_vector_0_or_flooding_vport                                   	;
        uint32_t	wlan_mcast_index                                                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wlan_mcast_proxy_enabled                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rdd_vport                                                         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	radio_dhd_vector                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	ssid_vector_2                                                     	;
        uint32_t	cntr_id                                                           	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                                         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	replications                                                      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pool_num                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                                                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wlan_mcast_tx_prio                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_ports_vector                                               	;
        uint32_t	src_ip                                                            	;
        uint8_t	src_ipv6_addr[RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_NUMBER];
        uint8_t	dst_ipv6_addr[RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_NUMBER];
        uint8_t	result[RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) IPTV_DDR_CONTEXT_ENTRY_STRUCT;

#define RDD_IPTV_DDR_CONTEXT_ENTRY_VALID_READ_G(r, g, idx)                                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT), 7, 1, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VALID_WRITE_G(v, g, idx)                                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT), 7, 1, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VALID_READ(r, p)                                           FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VALID_WRITE(v, p)                                          FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_IP_VER_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT), 6, 1, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_IP_VER_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT), 6, 1, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_IP_VER_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_IP_VER_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_VID_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT), 5, 1, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_VID_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT), 5, 1, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_VID_READ(r, p)                                         FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_VID_WRITE(v, p)                                        FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT), 4, 1, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT), 4, 1, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VID_READ_G(r, g, idx)                                      GROUP_FIELD_MREAD_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT), 0, 12, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VID_WRITE_G(v, g, idx)                                     GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT), 0, 12, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VID_READ(r, p)                                             FIELD_MREAD_16((uint8_t *)(p), 0, 12, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_VID_WRITE(v, p)                                            FIELD_MWRITE_16((uint8_t *)(p), 0, 12, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_READ_G(r, g, idx)                           GROUP_MREAD_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 2, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WRITE_G(v, g, idx)                          GROUP_MWRITE_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 2, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_READ(r, p)                                  MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WRITE(v, p)                                 MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 4, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 4, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_READ(r, p)                 MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_READ_G(r, g, idx)                            GROUP_MREAD_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 6, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_WRITE_G(v, g, idx)                           GROUP_MWRITE_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 6, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_READ(r, p)                                   MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_WRITE(v, p)                                  MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_READ_G(r, g, idx)                            GROUP_MREAD_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 8, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_WRITE_G(v, g, idx)                           GROUP_MWRITE_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 8, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_READ(r, p)                                   MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_WRITE(v, p)                                  MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 10, 5, 3, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 10, 5, 3, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 10, 5, 3, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 10, 5, 3, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RDD_VPORT_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 10, 0, 5, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RDD_VPORT_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 10, 0, 5, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RDD_VPORT_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p) + 10, 0, 5, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RDD_VPORT_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p) + 10, 0, 5, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 11, 7, 1, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 11, 7, 1, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 11, 7, 1, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 11, 7, 1, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 11, 0, 7, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 11, 0, 7, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 11, 0, 7, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 11, 0, 7, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 12, 4, 3, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 12, 4, 3, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 12, 4, 3, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 12, 4, 3, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 13, 6, 2, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 13, 6, 2, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_READ(r, p)                                        FIELD_MREAD_8((uint8_t *)(p) + 13, 6, 2, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_WRITE(v, p)                                       FIELD_MWRITE_8((uint8_t *)(p) + 13, 6, 2, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 13, 0, 6, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 13, 0, 6, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 6, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 6, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 14, 0, 10, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 14, 0, 10, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_READ(r, p)                                         FIELD_MREAD_16((uint8_t *)(p) + 14, 0, 10, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_WRITE(v, p)                                        FIELD_MWRITE_16((uint8_t *)(p) + 14, 0, 10, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 16, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 16, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_READ(r, p)                             MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IP_READ_G(r, g, idx)                                   GROUP_MREAD_32((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 20, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IP_WRITE_G(v, g, idx)                                  GROUP_MWRITE_32((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 20, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IP_READ(r, p)                                          MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IP_WRITE(v, p)                                         MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_READ_G(r, g, idx, i)                         GROUP_MREAD_I_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 24, i, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_WRITE_G(v, g, idx, i)                        GROUP_MWRITE_I_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 24, i, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_READ(r, p, i)                                MREAD_I_8((uint8_t *)(p) + 24, i, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_WRITE(v, p, i)                               MWRITE_I_8((uint8_t *)(p) + 24, i, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_READ_G(r, g, idx, i)                         GROUP_MREAD_I_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 40, i, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_WRITE_G(v, g, idx, i)                        GROUP_MWRITE_I_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 40, i, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_READ(r, p, i)                                MREAD_I_8((uint8_t *)(p) + 40, i, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_WRITE(v, p, i)                               MWRITE_I_8((uint8_t *)(p) + 40, i, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_READ_G(r, g, idx, i)                                GROUP_MREAD_I_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 56, i, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_WRITE_G(v, g, idx, i)                               GROUP_MWRITE_I_8((g), (idx)*sizeof(IPTV_DDR_CONTEXT_ENTRY_STRUCT) + 56, i, (v))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_READ(r, p, i)                                       MREAD_I_8((uint8_t *)(p) + 56, i, (r))
#define RDD_IPTV_DDR_CONTEXT_ENTRY_RESULT_WRITE(v, p, i)                                      MWRITE_I_8((uint8_t *)(p) + 56, i, (v))
/* <<<IPTV_DDR_CONTEXT_ENTRY_STRUCT */


#define RDD_IPTV_DDR_CONTEXT_TABLE_SIZE     1024
typedef struct
{
	IPTV_DDR_CONTEXT_ENTRY_STRUCT	entry[ RDD_IPTV_DDR_CONTEXT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ IPTV_DDR_CONTEXT_TABLE_STRUCT;

/* <<<IPTV_DDR_CONTEXT_TABLE */


/* >>>IPTV_DDR_PORT_BUFFER_TABLE */

/* >>>IPTV_DDR_PORT_BUFFER_ENTRY_STRUCT */
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_NUMBER	56
typedef union
{
    uint32_t word_32[16];
    uint64_t dword_64[8];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	header[RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_NUMBER];
        uint32_t	context_0                                               	;
        uint32_t	context_1                                               	;
#else
        uint8_t	header[RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_NUMBER];
        uint32_t	context_0                                               	;
        uint32_t	context_1                                               	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) IPTV_DDR_PORT_BUFFER_ENTRY_STRUCT;

#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_READ_G(r, g, idx, i)          GROUP_MREAD_I_8((g), (idx)*sizeof(IPTV_DDR_PORT_BUFFER_ENTRY_STRUCT), i, (r))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_WRITE_G(v, g, idx, i)         GROUP_MWRITE_I_8((g), (idx)*sizeof(IPTV_DDR_PORT_BUFFER_ENTRY_STRUCT), i, (v))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_READ(r, p, i)                 MREAD_I_8((uint8_t *)(p), i, (r))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_WRITE(v, p, i)                MWRITE_I_8((uint8_t *)(p), i, (v))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(IPTV_DDR_PORT_BUFFER_ENTRY_STRUCT) + 56, (r))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(IPTV_DDR_PORT_BUFFER_ENTRY_STRUCT) + 56, (v))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_READ(r, p)                 MREAD_32((uint8_t *)(p) + 56, (r))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 56, (v))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(IPTV_DDR_PORT_BUFFER_ENTRY_STRUCT) + 60, (r))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(IPTV_DDR_PORT_BUFFER_ENTRY_STRUCT) + 60, (v))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_READ(r, p)                 MREAD_32((uint8_t *)(p) + 60, (r))
#define RDD_IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 60, (v))
/* <<<IPTV_DDR_PORT_BUFFER_ENTRY_STRUCT */


#define RDD_IPTV_DDR_PORT_BUFFER_TABLE_SIZE     14
typedef struct
{
	IPTV_DDR_PORT_BUFFER_ENTRY_STRUCT	entry[ RDD_IPTV_DDR_PORT_BUFFER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ IPTV_DDR_PORT_BUFFER_TABLE_STRUCT;

/* <<<IPTV_DDR_PORT_BUFFER_TABLE */


/* >>>WLAN_MCAST_DHD_LIST_TABLE */

/* >>>WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_STRUCT */
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_NUMBER	64
typedef union
{
    uint32_t word_32[16];
    uint64_t dword_64[8];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	dhd_station[RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_NUMBER];
#else
        uint8_t	dhd_station[RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_STRUCT;

#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_READ_G(r, g, idx, i)       GROUP_MREAD_I_8((g), (idx)*sizeof(WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_STRUCT), i, (r))
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8((g), (idx)*sizeof(WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_STRUCT), i, (v))
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_READ(r, p, i)              MREAD_I_8((uint8_t *)(p), i, (r))
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_DHD_STATION_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)(p), i, (v))
/* <<<WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_STRUCT */


#define RDD_WLAN_MCAST_DHD_LIST_TABLE_SIZE     64
typedef struct
{
	WLAN_MCAST_DHD_LIST_ENTRY_ARRAY_STRUCT	entry[ RDD_WLAN_MCAST_DHD_LIST_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ WLAN_MCAST_DHD_LIST_TABLE_STRUCT;

/* <<<WLAN_MCAST_DHD_LIST_TABLE */


/* >>>WLAN_MCAST_DHD_LIST_FORMAT_TABLE */

/* >>>WLAN_MCAST_DHD_LIST_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	valid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	index     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	index     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	valid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} WLAN_MCAST_DHD_LIST_ENTRY_STRUCT;

#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_VALID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(WLAN_MCAST_DHD_LIST_ENTRY_STRUCT), 7, 1, (r))
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_VALID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(WLAN_MCAST_DHD_LIST_ENTRY_STRUCT), 7, 1, (v))
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_VALID_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_VALID_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_INDEX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(WLAN_MCAST_DHD_LIST_ENTRY_STRUCT), 0, 7, (r))
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_INDEX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(WLAN_MCAST_DHD_LIST_ENTRY_STRUCT), 0, 7, (v))
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_INDEX_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 0, 7, (r))
#define RDD_WLAN_MCAST_DHD_LIST_ENTRY_INDEX_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 0, 7, (v))
/* <<<WLAN_MCAST_DHD_LIST_ENTRY_STRUCT */


#define RDD_WLAN_MCAST_DHD_LIST_FORMAT_TABLE_SIZE     1
typedef struct
{
	WLAN_MCAST_DHD_LIST_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ WLAN_MCAST_DHD_LIST_FORMAT_TABLE_STRUCT;

/* <<<WLAN_MCAST_DHD_LIST_FORMAT_TABLE */

/* PSRAM */
/* CORE_0 */

/* >>>RX_FLOW_TABLE */

/* >>>RX_FLOW_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	virtual_port	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	flow_dest   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	exception   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	is_lan      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	cntr_id     	;
#else
        uint8_t	cntr_id     	;
        uint16_t	is_lan      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	exception   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	flow_dest   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	virtual_port	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) RX_FLOW_ENTRY_STRUCT;

#define RDD_RX_FLOW_ENTRY_VIRTUAL_PORT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RX_FLOW_ENTRY_STRUCT), 3, 5, (r))
#define RDD_RX_FLOW_ENTRY_VIRTUAL_PORT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RX_FLOW_ENTRY_STRUCT), 3, 5, (v))
#define RDD_RX_FLOW_ENTRY_VIRTUAL_PORT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 3, 5, (r))
#define RDD_RX_FLOW_ENTRY_VIRTUAL_PORT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 3, 5, (v))
#define RDD_RX_FLOW_ENTRY_FLOW_DEST_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RX_FLOW_ENTRY_STRUCT), 2, 1, (r))
#define RDD_RX_FLOW_ENTRY_FLOW_DEST_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RX_FLOW_ENTRY_STRUCT), 2, 1, (v))
#define RDD_RX_FLOW_ENTRY_FLOW_DEST_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_RX_FLOW_ENTRY_FLOW_DEST_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_RX_FLOW_ENTRY_EXCEPTION_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RX_FLOW_ENTRY_STRUCT), 1, 1, (r))
#define RDD_RX_FLOW_ENTRY_EXCEPTION_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RX_FLOW_ENTRY_STRUCT), 1, 1, (v))
#define RDD_RX_FLOW_ENTRY_EXCEPTION_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_RX_FLOW_ENTRY_EXCEPTION_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_RX_FLOW_ENTRY_IS_LAN_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RX_FLOW_ENTRY_STRUCT), 0, 1, (r))
#define RDD_RX_FLOW_ENTRY_IS_LAN_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RX_FLOW_ENTRY_STRUCT), 0, 1, (v))
#define RDD_RX_FLOW_ENTRY_IS_LAN_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 0, 1, (r))
#define RDD_RX_FLOW_ENTRY_IS_LAN_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 0, 1, (v))
#define RDD_RX_FLOW_ENTRY_CNTR_ID_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(RX_FLOW_ENTRY_STRUCT) + 1, (r))
#define RDD_RX_FLOW_ENTRY_CNTR_ID_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(RX_FLOW_ENTRY_STRUCT) + 1, (v))
#define RDD_RX_FLOW_ENTRY_CNTR_ID_READ(r, p)                      MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_RX_FLOW_ENTRY_CNTR_ID_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 1, (v))
/* <<<RX_FLOW_ENTRY_STRUCT */


#define RDD_RX_FLOW_TABLE_SIZE     340
typedef struct
{
	RX_FLOW_ENTRY_STRUCT	entry[ RDD_RX_FLOW_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RX_FLOW_TABLE_STRUCT;

extern uint32_t RDD_RX_FLOW_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RX_FLOW_TABLE_PTR(core_id)	( RX_FLOW_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RX_FLOW_TABLE_ADDRESS_ARR[core_id] ))

/* <<<RX_FLOW_TABLE */


/* >>>GENERAL_QUEUE_DYNAMIC_MNG_TABLE */

/* >>>QUEUE_DYNAMIC_MNG_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	qm_queue_us_start  	;
        uint8_t	qm_queue_us_end    	;
        uint8_t	qm_queue_ds_start  	;
        uint8_t	qm_queue_ds_end    	;
        uint8_t	qm_queue_epon_start	;
        uint8_t	qm_queue_sq_start  	;
        uint16_t	reserved           	;
#else
        uint8_t	qm_queue_ds_end    	;
        uint8_t	qm_queue_ds_start  	;
        uint8_t	qm_queue_us_end    	;
        uint8_t	qm_queue_us_start  	;
        uint16_t	reserved           	;
        uint8_t	qm_queue_sq_start  	;
        uint8_t	qm_queue_epon_start	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) QUEUE_DYNAMIC_MNG_ENTRY_STRUCT;

#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_START_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT), (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_START_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT), (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_START_READ(r, p)                   MREAD_8((uint8_t *)(p), (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_START_WRITE(v, p)                  MWRITE_8((uint8_t *)(p), (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_END_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT) + 1, (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_END_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT) + 1, (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_END_READ(r, p)                     MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_US_END_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_START_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT) + 2, (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_START_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT) + 2, (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_START_READ(r, p)                   MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_START_WRITE(v, p)                  MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_END_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT) + 3, (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_END_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT) + 3, (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_END_READ(r, p)                     MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_DS_END_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_EPON_START_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT) + 4, (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_EPON_START_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT) + 4, (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_EPON_START_READ(r, p)                 MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_EPON_START_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_SQ_START_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT) + 5, (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_SQ_START_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(QUEUE_DYNAMIC_MNG_ENTRY_STRUCT) + 5, (v))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_SQ_START_READ(r, p)                   MREAD_8((uint8_t *)(p) + 5, (r))
#define RDD_QUEUE_DYNAMIC_MNG_ENTRY_QM_QUEUE_SQ_START_WRITE(v, p)                  MWRITE_8((uint8_t *)(p) + 5, (v))
/* <<<QUEUE_DYNAMIC_MNG_ENTRY_STRUCT */


#define RDD_GENERAL_QUEUE_DYNAMIC_MNG_TABLE_SIZE     1
typedef struct
{
	QUEUE_DYNAMIC_MNG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ GENERAL_QUEUE_DYNAMIC_MNG_TABLE_STRUCT;

extern uint32_t RDD_GENERAL_QUEUE_DYNAMIC_MNG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GENERAL_QUEUE_DYNAMIC_MNG_TABLE_PTR(core_id)	( GENERAL_QUEUE_DYNAMIC_MNG_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GENERAL_QUEUE_DYNAMIC_MNG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<GENERAL_QUEUE_DYNAMIC_MNG_TABLE */


/* >>>SPDTEST_GEN_PARAM */

/* >>>SPDTEST_GEN_CFG_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	test_type         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_on             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_endless_tx     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	not_valid_license 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	iperf3_64bit_pktid	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved          	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved          	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	iperf3_64bit_pktid	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	not_valid_license 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_endless_tx     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_on             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	test_type         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) SPDTEST_GEN_CFG_STRUCT;

#define RDD_SPDTEST_GEN_CFG_TEST_TYPE_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SPDTEST_GEN_CFG_STRUCT), 4, 4, (r))
#define RDD_SPDTEST_GEN_CFG_TEST_TYPE_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SPDTEST_GEN_CFG_STRUCT), 4, 4, (v))
#define RDD_SPDTEST_GEN_CFG_TEST_TYPE_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 4, 4, (r))
#define RDD_SPDTEST_GEN_CFG_TEST_TYPE_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 4, 4, (v))
#define RDD_SPDTEST_GEN_CFG_IS_ON_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SPDTEST_GEN_CFG_STRUCT), 3, 1, (r))
#define RDD_SPDTEST_GEN_CFG_IS_ON_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SPDTEST_GEN_CFG_STRUCT), 3, 1, (v))
#define RDD_SPDTEST_GEN_CFG_IS_ON_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_SPDTEST_GEN_CFG_IS_ON_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_SPDTEST_GEN_CFG_IS_ENDLESS_TX_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SPDTEST_GEN_CFG_STRUCT), 2, 1, (r))
#define RDD_SPDTEST_GEN_CFG_IS_ENDLESS_TX_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SPDTEST_GEN_CFG_STRUCT), 2, 1, (v))
#define RDD_SPDTEST_GEN_CFG_IS_ENDLESS_TX_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_SPDTEST_GEN_CFG_IS_ENDLESS_TX_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_SPDTEST_GEN_CFG_NOT_VALID_LICENSE_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SPDTEST_GEN_CFG_STRUCT), 1, 1, (r))
#define RDD_SPDTEST_GEN_CFG_NOT_VALID_LICENSE_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SPDTEST_GEN_CFG_STRUCT), 1, 1, (v))
#define RDD_SPDTEST_GEN_CFG_NOT_VALID_LICENSE_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_SPDTEST_GEN_CFG_NOT_VALID_LICENSE_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_SPDTEST_GEN_CFG_IPERF3_64BIT_PKTID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SPDTEST_GEN_CFG_STRUCT), 0, 1, (r))
#define RDD_SPDTEST_GEN_CFG_IPERF3_64BIT_PKTID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SPDTEST_GEN_CFG_STRUCT), 0, 1, (v))
#define RDD_SPDTEST_GEN_CFG_IPERF3_64BIT_PKTID_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 0, 1, (r))
#define RDD_SPDTEST_GEN_CFG_IPERF3_64BIT_PKTID_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 0, 1, (v))
/* <<<SPDTEST_GEN_CFG_STRUCT */


#define RDD_SPDTEST_GEN_PARAM_SIZE     4
typedef struct
{
	SPDTEST_GEN_CFG_STRUCT	entry[ RDD_SPDTEST_GEN_PARAM_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDTEST_GEN_PARAM_STRUCT;

extern uint32_t RDD_SPDTEST_GEN_PARAM_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDTEST_GEN_PARAM_PTR(core_id)	( SPDTEST_GEN_PARAM_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDTEST_GEN_PARAM_ADDRESS_ARR[core_id] ))

/* <<<SPDTEST_GEN_PARAM */


/* >>>VPORT_CFG_TABLE */

/* >>>VPORT_CFG_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	loopback_en                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mirroring_en                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_filter_profile      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	natc_tbl_id                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	emac_idx                    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	viq                         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	port_dbg_stat_en            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	congestion_flow_control     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_rate_limit          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mcast_whitelist_skip        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dos_attack_detection_disable	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                   	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved0                   	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dos_attack_detection_disable	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mcast_whitelist_skip        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_rate_limit          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	congestion_flow_control     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	port_dbg_stat_en            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	viq                         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	emac_idx                    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	natc_tbl_id                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_filter_profile      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mirroring_en                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	loopback_en                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) VPORT_CFG_ENTRY_STRUCT;

#define RDD_VPORT_CFG_ENTRY_LOOPBACK_EN_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT), 7, 1, (r))
#define RDD_VPORT_CFG_ENTRY_LOOPBACK_EN_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT), 7, 1, (v))
#define RDD_VPORT_CFG_ENTRY_LOOPBACK_EN_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_VPORT_CFG_ENTRY_LOOPBACK_EN_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_VPORT_CFG_ENTRY_MIRRORING_EN_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT), 6, 1, (r))
#define RDD_VPORT_CFG_ENTRY_MIRRORING_EN_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT), 6, 1, (v))
#define RDD_VPORT_CFG_ENTRY_MIRRORING_EN_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_VPORT_CFG_ENTRY_MIRRORING_EN_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT), 0, 6, (r))
#define RDD_VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT), 0, 6, (v))
#define RDD_VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 0, 6, (r))
#define RDD_VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 0, 6, (v))
#define RDD_VPORT_CFG_ENTRY_NATC_TBL_ID_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 1, 5, 3, (r))
#define RDD_VPORT_CFG_ENTRY_NATC_TBL_ID_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 1, 5, 3, (v))
#define RDD_VPORT_CFG_ENTRY_NATC_TBL_ID_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 1, 5, 3, (r))
#define RDD_VPORT_CFG_ENTRY_NATC_TBL_ID_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 1, 5, 3, (v))
#define RDD_VPORT_CFG_ENTRY_EMAC_IDX_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 1, 2, 3, (r))
#define RDD_VPORT_CFG_ENTRY_EMAC_IDX_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 1, 2, 3, (v))
#define RDD_VPORT_CFG_ENTRY_EMAC_IDX_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p) + 1, 2, 3, (r))
#define RDD_VPORT_CFG_ENTRY_EMAC_IDX_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p) + 1, 2, 3, (v))
#define RDD_VPORT_CFG_ENTRY_VIQ_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 0, 15, 3, (r))
#define RDD_VPORT_CFG_ENTRY_VIQ_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 0, 15, 3, (v))
#define RDD_VPORT_CFG_ENTRY_VIQ_READ(r, p)                                          FIELD_MREAD_32((uint8_t *)(p) + 0, 15, 3, (r))
#define RDD_VPORT_CFG_ENTRY_VIQ_WRITE(v, p)                                         FIELD_MWRITE_32((uint8_t *)(p) + 0, 15, 3, (v))
#define RDD_VPORT_CFG_ENTRY_PORT_DBG_STAT_EN_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 2, 6, 1, (r))
#define RDD_VPORT_CFG_ENTRY_PORT_DBG_STAT_EN_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 2, 6, 1, (v))
#define RDD_VPORT_CFG_ENTRY_PORT_DBG_STAT_EN_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 2, 6, 1, (r))
#define RDD_VPORT_CFG_ENTRY_PORT_DBG_STAT_EN_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 2, 6, 1, (v))
#define RDD_VPORT_CFG_ENTRY_CONGESTION_FLOW_CONTROL_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 2, 5, 1, (r))
#define RDD_VPORT_CFG_ENTRY_CONGESTION_FLOW_CONTROL_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 2, 5, 1, (v))
#define RDD_VPORT_CFG_ENTRY_CONGESTION_FLOW_CONTROL_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 2, 5, 1, (r))
#define RDD_VPORT_CFG_ENTRY_CONGESTION_FLOW_CONTROL_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 2, 5, 1, (v))
#define RDD_VPORT_CFG_ENTRY_INGRESS_RATE_LIMIT_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 2, 4, 1, (r))
#define RDD_VPORT_CFG_ENTRY_INGRESS_RATE_LIMIT_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 2, 4, 1, (v))
#define RDD_VPORT_CFG_ENTRY_INGRESS_RATE_LIMIT_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 2, 4, 1, (r))
#define RDD_VPORT_CFG_ENTRY_INGRESS_RATE_LIMIT_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 2, 4, 1, (v))
#define RDD_VPORT_CFG_ENTRY_MCAST_WHITELIST_SKIP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 2, 3, 1, (r))
#define RDD_VPORT_CFG_ENTRY_MCAST_WHITELIST_SKIP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 2, 3, 1, (v))
#define RDD_VPORT_CFG_ENTRY_MCAST_WHITELIST_SKIP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 1, (r))
#define RDD_VPORT_CFG_ENTRY_MCAST_WHITELIST_SKIP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 1, (v))
#define RDD_VPORT_CFG_ENTRY_DOS_ATTACK_DETECTION_DISABLE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 2, 2, 1, (r))
#define RDD_VPORT_CFG_ENTRY_DOS_ATTACK_DETECTION_DISABLE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VPORT_CFG_ENTRY_STRUCT) + 2, 2, 1, (v))
#define RDD_VPORT_CFG_ENTRY_DOS_ATTACK_DETECTION_DISABLE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 2, 2, 1, (r))
#define RDD_VPORT_CFG_ENTRY_DOS_ATTACK_DETECTION_DISABLE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 2, 2, 1, (v))
/* <<<VPORT_CFG_ENTRY_STRUCT */


#define RDD_VPORT_CFG_TABLE_SIZE     16
typedef struct
{
	VPORT_CFG_ENTRY_STRUCT	entry[ RDD_VPORT_CFG_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ VPORT_CFG_TABLE_STRUCT;

extern uint32_t RDD_VPORT_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VPORT_CFG_TABLE_PTR(core_id)	( VPORT_CFG_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VPORT_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<VPORT_CFG_TABLE */


/* >>>SPDSVC_ANALYZER_STACK */

/* >>>BYTE_1_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	bits      	;
#else
        uint8_t	bits      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} BYTE_1_STRUCT;

#define RDD_BYTE_1_BITS_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(BYTE_1_STRUCT), (r))
#define RDD_BYTE_1_BITS_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(BYTE_1_STRUCT), (v))
#define RDD_BYTE_1_BITS_READ(r, p)                 MREAD_8((uint8_t *)(p), (r))
#define RDD_BYTE_1_BITS_WRITE(v, p)                MWRITE_8((uint8_t *)(p), (v))
/* <<<BYTE_1_STRUCT */


#define RDD_SPDSVC_ANALYZER_STACK_SIZE     256
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_SPDSVC_ANALYZER_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_ANALYZER_STACK_STRUCT;

extern uint32_t RDD_SPDSVC_ANALYZER_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_ANALYZER_STACK_PTR(core_id)	( SPDSVC_ANALYZER_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_ANALYZER_STACK_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_ANALYZER_STACK */


/* >>>RUNNER_PROFILING_TRACE_BUFFER */

/* >>>TRACE_EVENT_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	timestamp              	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	event_id               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	trace_event_info       	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_timestamp            	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_event_id             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	incoming_task_num                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	reserved                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	task_pc                          	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_timestamp            	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_event_id             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	incoming_bbhrx_src_addr          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	dma_wr                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	dma_rd                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	dma_wr_reply                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	ramrd                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	parser                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	bbhtx                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	bbhrx_async                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	bbhrx_sync                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	cpu                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	fw_self                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	fw                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	timer                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_timestamp            	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_event_id             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                        	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	acc_type                         	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	trace_event_info       	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	event_id               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	timestamp              	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	task_pc                          	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	reserved                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	incoming_task_num                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	reservedSU1_event_id             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_timestamp            	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	timer                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	fw                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	fw_self                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	cpu                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	bbhrx_sync                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	bbhrx_async                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	bbhtx                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	parser                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	ramrd                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	dma_wr_reply                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	dma_rd                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	dma_wr                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	incoming_bbhrx_src_addr          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	reservedSU2_event_id             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_timestamp            	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	acc_type                         	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	reserved2                        	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of trace_event_info union */
        uint32_t	reservedSU3_event_id             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_timestamp            	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) TRACE_EVENT_STRUCT;

#define RDD_TRACE_EVENT_TIMESTAMP_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16((g), (idx)*sizeof(TRACE_EVENT_STRUCT), 4, 12, (r))
#define RDD_TRACE_EVENT_TIMESTAMP_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(TRACE_EVENT_STRUCT), 4, 12, (v))
#define RDD_TRACE_EVENT_TIMESTAMP_READ(r, p)                               FIELD_MREAD_16((uint8_t *)(p), 4, 12, (r))
#define RDD_TRACE_EVENT_TIMESTAMP_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)(p), 4, 12, (v))
#define RDD_TRACE_EVENT_EVENT_ID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 1, 2, 2, (r))
#define RDD_TRACE_EVENT_EVENT_ID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 1, 2, 2, (v))
#define RDD_TRACE_EVENT_EVENT_ID_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 1, 2, 2, (r))
#define RDD_TRACE_EVENT_EVENT_ID_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 1, 2, 2, (v))
#define RDD_TRACE_EVENT_TRACE_EVENT_INFO_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_32((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 0, 0, 18, (r))
#define RDD_TRACE_EVENT_TRACE_EVENT_INFO_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 0, 0, 18, (v))
#define RDD_TRACE_EVENT_TRACE_EVENT_INFO_READ(r, p)                        FIELD_MREAD_32((uint8_t *)(p) + 0, 0, 18, (r))
#define RDD_TRACE_EVENT_TRACE_EVENT_INFO_WRITE(v, p)                       FIELD_MWRITE_32((uint8_t *)(p) + 0, 0, 18, (v))
#define RDD_TRACE_EVENT_INCOMING_TASK_NUM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_32((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 0, 14, 4, (r))
#define RDD_TRACE_EVENT_INCOMING_TASK_NUM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 0, 14, 4, (v))
#define RDD_TRACE_EVENT_INCOMING_TASK_NUM_READ(r, p)                       FIELD_MREAD_32((uint8_t *)(p) + 0, 14, 4, (r))
#define RDD_TRACE_EVENT_INCOMING_TASK_NUM_WRITE(v, p)                      FIELD_MWRITE_32((uint8_t *)(p) + 0, 14, 4, (v))
#define RDD_TRACE_EVENT_TASK_PC_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 0, 13, (r))
#define RDD_TRACE_EVENT_TASK_PC_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 0, 13, (v))
#define RDD_TRACE_EVENT_TASK_PC_READ(r, p)                                 FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 13, (r))
#define RDD_TRACE_EVENT_TASK_PC_WRITE(v, p)                                FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 13, (v))
#define RDD_TRACE_EVENT_INCOMING_BBHRX_SRC_ADDR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 0, 12, 6, (r))
#define RDD_TRACE_EVENT_INCOMING_BBHRX_SRC_ADDR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 0, 12, 6, (v))
#define RDD_TRACE_EVENT_INCOMING_BBHRX_SRC_ADDR_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 0, 12, 6, (r))
#define RDD_TRACE_EVENT_INCOMING_BBHRX_SRC_ADDR_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 0, 12, 6, (v))
#define RDD_TRACE_EVENT_DMA_WR_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 3, 1, (r))
#define RDD_TRACE_EVENT_DMA_WR_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 3, 1, (v))
#define RDD_TRACE_EVENT_DMA_WR_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 1, (r))
#define RDD_TRACE_EVENT_DMA_WR_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 1, (v))
#define RDD_TRACE_EVENT_DMA_RD_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 2, 1, (r))
#define RDD_TRACE_EVENT_DMA_RD_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 2, 1, (v))
#define RDD_TRACE_EVENT_DMA_RD_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 2, 2, 1, (r))
#define RDD_TRACE_EVENT_DMA_RD_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 2, 2, 1, (v))
#define RDD_TRACE_EVENT_DMA_WR_REPLY_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 1, 1, (r))
#define RDD_TRACE_EVENT_DMA_WR_REPLY_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 1, 1, (v))
#define RDD_TRACE_EVENT_DMA_WR_REPLY_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 2, 1, 1, (r))
#define RDD_TRACE_EVENT_DMA_WR_REPLY_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 2, 1, 1, (v))
#define RDD_TRACE_EVENT_RAMRD_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 0, 1, (r))
#define RDD_TRACE_EVENT_RAMRD_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 0, 1, (v))
#define RDD_TRACE_EVENT_RAMRD_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 1, (r))
#define RDD_TRACE_EVENT_RAMRD_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 1, (v))
#define RDD_TRACE_EVENT_PARSER_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 7, 1, (r))
#define RDD_TRACE_EVENT_PARSER_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 7, 1, (v))
#define RDD_TRACE_EVENT_PARSER_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 3, 7, 1, (r))
#define RDD_TRACE_EVENT_PARSER_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 3, 7, 1, (v))
#define RDD_TRACE_EVENT_BBHTX_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 6, 1, (r))
#define RDD_TRACE_EVENT_BBHTX_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 6, 1, (v))
#define RDD_TRACE_EVENT_BBHTX_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 1, (r))
#define RDD_TRACE_EVENT_BBHTX_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 1, (v))
#define RDD_TRACE_EVENT_BBHRX_ASYNC_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 5, 1, (r))
#define RDD_TRACE_EVENT_BBHRX_ASYNC_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 5, 1, (v))
#define RDD_TRACE_EVENT_BBHRX_ASYNC_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 3, 5, 1, (r))
#define RDD_TRACE_EVENT_BBHRX_ASYNC_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 3, 5, 1, (v))
#define RDD_TRACE_EVENT_BBHRX_SYNC_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 4, 1, (r))
#define RDD_TRACE_EVENT_BBHRX_SYNC_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 4, 1, (v))
#define RDD_TRACE_EVENT_BBHRX_SYNC_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 3, 4, 1, (r))
#define RDD_TRACE_EVENT_BBHRX_SYNC_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 3, 4, 1, (v))
#define RDD_TRACE_EVENT_CPU_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 3, 1, (r))
#define RDD_TRACE_EVENT_CPU_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 3, 1, (v))
#define RDD_TRACE_EVENT_CPU_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p) + 3, 3, 1, (r))
#define RDD_TRACE_EVENT_CPU_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p) + 3, 3, 1, (v))
#define RDD_TRACE_EVENT_FW_SELF_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 2, 1, (r))
#define RDD_TRACE_EVENT_FW_SELF_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 2, 1, (v))
#define RDD_TRACE_EVENT_FW_SELF_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 3, 2, 1, (r))
#define RDD_TRACE_EVENT_FW_SELF_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 3, 2, 1, (v))
#define RDD_TRACE_EVENT_FW_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 1, 1, (r))
#define RDD_TRACE_EVENT_FW_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 1, 1, (v))
#define RDD_TRACE_EVENT_FW_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p) + 3, 1, 1, (r))
#define RDD_TRACE_EVENT_FW_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p) + 3, 1, 1, (v))
#define RDD_TRACE_EVENT_TIMER_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 0, 1, (r))
#define RDD_TRACE_EVENT_TIMER_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 3, 0, 1, (v))
#define RDD_TRACE_EVENT_TIMER_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 1, (r))
#define RDD_TRACE_EVENT_TIMER_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 1, (v))
#define RDD_TRACE_EVENT_ACC_TYPE_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 0, 12, (r))
#define RDD_TRACE_EVENT_ACC_TYPE_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(TRACE_EVENT_STRUCT) + 2, 0, 12, (v))
#define RDD_TRACE_EVENT_ACC_TYPE_READ(r, p)                                FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 12, (r))
#define RDD_TRACE_EVENT_ACC_TYPE_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 12, (v))
/* <<<TRACE_EVENT_STRUCT */


#define RDD_RUNNER_PROFILING_TRACE_BUFFER_SIZE     128
typedef struct
{
	TRACE_EVENT_STRUCT	entry[ RDD_RUNNER_PROFILING_TRACE_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RUNNER_PROFILING_TRACE_BUFFER_STRUCT;

extern uint32_t RDD_RUNNER_PROFILING_TRACE_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RUNNER_PROFILING_TRACE_BUFFER_PTR(core_id)	( RUNNER_PROFILING_TRACE_BUFFER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RUNNER_PROFILING_TRACE_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<RUNNER_PROFILING_TRACE_BUFFER */


/* >>>DHD_COMPLETE_COMMON_RADIO_DATA */

/* >>>DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT */
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED1_NUMBER	3
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER	3
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED2_NUMBER	4
typedef union
{
    uint32_t word_32[30];
    uint64_t dword_64[15];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	rx_complete_fr_base_ptr_low                                         	;
        uint32_t	rx_complete_fr_base_ptr_high                                        	;
        uint32_t	rx_complete_fr_rd_idx_ptr_low                                       	;
        uint32_t	rx_complete_fr_rd_idx_ptr_high                                      	;
        uint32_t	rx_complete_fr_wr_idx_ptr_low                                       	;
        uint32_t	rx_complete_fr_wr_idx_ptr_high                                      	;
        uint32_t	tx_complete_fr_base_ptr_low                                         	;
        uint32_t	tx_complete_fr_base_ptr_high                                        	;
        uint32_t	tx_complete_fr_rd_idx_ptr_low                                       	;
        uint32_t	tx_complete_fr_rd_idx_ptr_high                                      	;
        uint32_t	tx_complete_fr_wr_idx_ptr_low                                       	;
        uint32_t	tx_complete_fr_wr_idx_ptr_high                                      	;
        uint32_t	rx_post_fr_base_ptr_low                                             	;
        uint32_t	rx_post_fr_base_ptr_high                                            	;
        uint32_t	rx_post_fr_rd_idx_ptr_low                                           	;
        uint32_t	rx_post_fr_rd_idx_ptr_high                                          	;
        uint32_t	rx_post_fr_wr_idx_ptr_low                                           	;
        uint32_t	rx_post_fr_wr_idx_ptr_high                                          	;
        uint32_t	dhd_doorbell_low                                                    	;
        uint32_t	dhd_doorbell_high                                                   	;
        uint16_t	rx_complete_rd_idx                                                  	;
        uint16_t	rx_complete_wr_idx                                                  	;
        uint16_t	rx_complete_wr_idx_rsrv                                             	;
        uint16_t	tx_complete_rd_idx                                                  	;
        uint16_t	tx_complete_wr_idx                                                  	;
        uint16_t	tx_complete_wr_idx_rsrv                                             	;
        uint16_t	rx_post_wr_idx                                                      	;
        uint16_t	rx_post_wr_idx_rsrv                                                 	;
        uint32_t	flow_ring_format                                                    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	idma_active                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	idma_group_shift                                                    	;
        uint16_t	idma_last_group_fr                                                  	;
        uint8_t	fr_ptrs_size_shift                                                  	;
        uint8_t	reserved1[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED1_NUMBER];
        uint32_t	scratchpad[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
        uint8_t	reserved2[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED2_NUMBER];
#else
        uint32_t	rx_complete_fr_base_ptr_low                                         	;
        uint32_t	rx_complete_fr_base_ptr_high                                        	;
        uint32_t	rx_complete_fr_rd_idx_ptr_low                                       	;
        uint32_t	rx_complete_fr_rd_idx_ptr_high                                      	;
        uint32_t	rx_complete_fr_wr_idx_ptr_low                                       	;
        uint32_t	rx_complete_fr_wr_idx_ptr_high                                      	;
        uint32_t	tx_complete_fr_base_ptr_low                                         	;
        uint32_t	tx_complete_fr_base_ptr_high                                        	;
        uint32_t	tx_complete_fr_rd_idx_ptr_low                                       	;
        uint32_t	tx_complete_fr_rd_idx_ptr_high                                      	;
        uint32_t	tx_complete_fr_wr_idx_ptr_low                                       	;
        uint32_t	tx_complete_fr_wr_idx_ptr_high                                      	;
        uint32_t	rx_post_fr_base_ptr_low                                             	;
        uint32_t	rx_post_fr_base_ptr_high                                            	;
        uint32_t	rx_post_fr_rd_idx_ptr_low                                           	;
        uint32_t	rx_post_fr_rd_idx_ptr_high                                          	;
        uint32_t	rx_post_fr_wr_idx_ptr_low                                           	;
        uint32_t	rx_post_fr_wr_idx_ptr_high                                          	;
        uint32_t	dhd_doorbell_low                                                    	;
        uint32_t	dhd_doorbell_high                                                   	;
        uint16_t	rx_complete_wr_idx                                                  	;
        uint16_t	rx_complete_rd_idx                                                  	;
        uint16_t	tx_complete_rd_idx                                                  	;
        uint16_t	rx_complete_wr_idx_rsrv                                             	;
        uint16_t	tx_complete_wr_idx_rsrv                                             	;
        uint16_t	tx_complete_wr_idx                                                  	;
        uint16_t	rx_post_wr_idx_rsrv                                                 	;
        uint16_t	rx_post_wr_idx                                                      	;
        uint16_t	idma_last_group_fr                                                  	;
        uint8_t	idma_group_shift                                                    	;
        uint32_t	reserved                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	idma_active                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow_ring_format                                                    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved1[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED1_NUMBER];
        uint8_t	fr_ptrs_size_shift                                                  	;
        uint32_t	scratchpad[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
        uint8_t	reserved2[RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RESERVED2_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT;

#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT), (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT), (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_READ(r, p)                    MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_WRITE(v, p)                   MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 4, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 4, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_READ(r, p)                   MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 8, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 8, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 12, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 12, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 16, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 16, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 20, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 20, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 24, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 24, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_READ(r, p)                    MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 28, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 28, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_READ(r, p)                   MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 32, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 32, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 36, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 36, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 40, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 40, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p) + 40, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 40, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 44, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 44, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)(p) + 44, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 44, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 48, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 48, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_READ(r, p)                        MREAD_32((uint8_t *)(p) + 48, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_WRITE(v, p)                       MWRITE_32((uint8_t *)(p) + 48, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 52, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 52, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_READ(r, p)                       MREAD_32((uint8_t *)(p) + 52, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 52, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 56, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 56, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_READ(r, p)                      MREAD_32((uint8_t *)(p) + 56, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 56, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 60, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 60, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_READ(r, p)                     MREAD_32((uint8_t *)(p) + 60, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 60, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 64, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 64, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_READ(r, p)                      MREAD_32((uint8_t *)(p) + 64, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 64, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 68, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 68, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_READ(r, p)                     MREAD_32((uint8_t *)(p) + 68, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 68, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 72, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 72, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_READ(r, p)                               MREAD_32((uint8_t *)(p) + 72, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 72, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 76, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 76, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_READ(r, p)                              MREAD_32((uint8_t *)(p) + 76, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 76, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 80, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 80, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_READ(r, p)                             MREAD_16((uint8_t *)(p) + 80, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 80, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 82, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 82, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_READ(r, p)                             MREAD_16((uint8_t *)(p) + 82, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 82, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_RSRV_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 84, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_RSRV_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 84, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_RSRV_READ(r, p)                        MREAD_16((uint8_t *)(p) + 84, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_RSRV_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 84, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 86, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 86, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_READ(r, p)                             MREAD_16((uint8_t *)(p) + 86, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 86, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 88, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 88, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_READ(r, p)                             MREAD_16((uint8_t *)(p) + 88, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 88, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_RSRV_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 90, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_RSRV_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 90, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_RSRV_READ(r, p)                        MREAD_16((uint8_t *)(p) + 90, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_RSRV_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 90, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_READ_G(r, g, idx)                          GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 92, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_WRITE_G(v, g, idx)                         GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 92, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_READ(r, p)                                 MREAD_16((uint8_t *)(p) + 92, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_WRITE(v, p)                                MWRITE_16((uint8_t *)(p) + 92, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_RSRV_READ_G(r, g, idx)                     GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 94, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_RSRV_WRITE_G(v, g, idx)                    GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 94, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_RSRV_READ(r, p)                            MREAD_16((uint8_t *)(p) + 94, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_RSRV_WRITE(v, p)                           MWRITE_16((uint8_t *)(p) + 94, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 96, 5, 3, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 96, 5, 3, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 96, 5, 3, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 96, 5, 3, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 96, 4, 1, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 96, 4, 1, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 96, 4, 1, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 96, 4, 1, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_READ_G(r, g, idx)                        GROUP_MREAD_8((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 97, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_WRITE_G(v, g, idx)                       GROUP_MWRITE_8((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 97, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_READ(r, p)                               MREAD_8((uint8_t *)(p) + 97, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_WRITE(v, p)                              MWRITE_8((uint8_t *)(p) + 97, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 98, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 98, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_READ(r, p)                             MREAD_16((uint8_t *)(p) + 98, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 98, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 100, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 100, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_READ(r, p)                             MREAD_8((uint8_t *)(p) + 100, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_WRITE(v, p)                            MWRITE_8((uint8_t *)(p) + 100, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_READ_G(r, g, idx, i)                           GROUP_MREAD_I_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 104, i, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_WRITE_G(v, g, idx, i)                          GROUP_MWRITE_I_32((g), (idx)*sizeof(DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT) + 104, i, (v))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_READ(r, p, i)                                  MREAD_I_32((uint8_t *)(p) + 104, i, (r))
#define RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_WRITE(v, p, i)                                 MWRITE_I_32((uint8_t *)(p) + 104, i, (v))
/* <<<DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT */


#define RDD_DHD_COMPLETE_COMMON_RADIO_DATA_SIZE     3
typedef struct
{
	DHD_COMPLETE_COMMON_RADIO_ENTRY_STRUCT	entry[ RDD_DHD_COMPLETE_COMMON_RADIO_DATA_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_COMPLETE_COMMON_RADIO_DATA_STRUCT;

extern uint32_t RDD_DHD_COMPLETE_COMMON_RADIO_DATA_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_COMPLETE_COMMON_RADIO_DATA_PTR(core_id)	( DHD_COMPLETE_COMMON_RADIO_DATA_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_COMPLETE_COMMON_RADIO_DATA_ADDRESS_ARR[core_id] ))

/* <<<DHD_COMPLETE_COMMON_RADIO_DATA */


/* >>>DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR */

/* >>>DDR_ADDRESS_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	low       	;
        uint32_t	high      	;
#else
        uint32_t	low       	;
        uint32_t	high      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DDR_ADDRESS_STRUCT;

#define RDD_DDR_ADDRESS_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DDR_ADDRESS_STRUCT), (r))
#define RDD_DDR_ADDRESS_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DDR_ADDRESS_STRUCT), (v))
#define RDD_DDR_ADDRESS_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p), (r))
#define RDD_DDR_ADDRESS_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p), (v))
#define RDD_DDR_ADDRESS_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(DDR_ADDRESS_STRUCT) + 4, (r))
#define RDD_DDR_ADDRESS_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(DDR_ADDRESS_STRUCT) + 4, (v))
#define RDD_DDR_ADDRESS_HIGH_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DDR_ADDRESS_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<DDR_ADDRESS_STRUCT */


#define RDD_DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_SIZE     1
typedef struct
{
	DDR_ADDRESS_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_STRUCT;

extern uint32_t RDD_DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_PTR(core_id)	( DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[core_id] ))

/* <<<DHD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR */


/* >>>LOOPBACK_QUEUE_TABLE */

#define RDD_LOOPBACK_QUEUE_TABLE_SIZE     16
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_LOOPBACK_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ LOOPBACK_QUEUE_TABLE_STRUCT;

extern uint32_t RDD_LOOPBACK_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_LOOPBACK_QUEUE_TABLE_PTR(core_id)	( LOOPBACK_QUEUE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_LOOPBACK_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<LOOPBACK_QUEUE_TABLE */


/* >>>DHD_TX_COMPLETE_0_STACK */

#define RDD_DHD_TX_COMPLETE_0_STACK_SIZE     128
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_TX_COMPLETE_0_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_COMPLETE_0_STACK_STRUCT;

extern uint32_t RDD_DHD_TX_COMPLETE_0_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_0_STACK_PTR(core_id)	( DHD_TX_COMPLETE_0_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_0_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_0_STACK */


/* >>>PROCESSING0_STACK */

#define RDD_PROCESSING0_STACK_SIZE     320
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_PROCESSING0_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PROCESSING0_STACK_STRUCT;

extern uint32_t RDD_PROCESSING0_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING0_STACK_PTR(core_id)	( PROCESSING0_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING0_STACK_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING0_STACK */


/* >>>DHD_RX_COMPLETE_0_STACK */

#define RDD_DHD_RX_COMPLETE_0_STACK_SIZE     64
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_RX_COMPLETE_0_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_RX_COMPLETE_0_STACK_STRUCT;

extern uint32_t RDD_DHD_RX_COMPLETE_0_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_0_STACK_PTR(core_id)	( DHD_RX_COMPLETE_0_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_0_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_0_STACK */


/* >>>DHD_TX_COMPLETE_1_STACK */

#define RDD_DHD_TX_COMPLETE_1_STACK_SIZE     128
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_TX_COMPLETE_1_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_COMPLETE_1_STACK_STRUCT;

extern uint32_t RDD_DHD_TX_COMPLETE_1_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_1_STACK_PTR(core_id)	( DHD_TX_COMPLETE_1_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_1_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_1_STACK */


/* >>>PROCESSING1_STACK */

#define RDD_PROCESSING1_STACK_SIZE     320
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_PROCESSING1_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PROCESSING1_STACK_STRUCT;

extern uint32_t RDD_PROCESSING1_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING1_STACK_PTR(core_id)	( PROCESSING1_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING1_STACK_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING1_STACK */


/* >>>DHD_RX_COMPLETE_1_STACK */

#define RDD_DHD_RX_COMPLETE_1_STACK_SIZE     64
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_RX_COMPLETE_1_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_RX_COMPLETE_1_STACK_STRUCT;

extern uint32_t RDD_DHD_RX_COMPLETE_1_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_1_STACK_PTR(core_id)	( DHD_RX_COMPLETE_1_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_1_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_1_STACK */


/* >>>DHD_TX_COMPLETE_2_STACK */

#define RDD_DHD_TX_COMPLETE_2_STACK_SIZE     128
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_TX_COMPLETE_2_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_COMPLETE_2_STACK_STRUCT;

extern uint32_t RDD_DHD_TX_COMPLETE_2_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_2_STACK_PTR(core_id)	( DHD_TX_COMPLETE_2_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_2_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_2_STACK */


/* >>>PROCESSING2_STACK */

#define RDD_PROCESSING2_STACK_SIZE     320
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_PROCESSING2_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PROCESSING2_STACK_STRUCT;

extern uint32_t RDD_PROCESSING2_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING2_STACK_PTR(core_id)	( PROCESSING2_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING2_STACK_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING2_STACK */


/* >>>DHD_RX_COMPLETE_2_STACK */

#define RDD_DHD_RX_COMPLETE_2_STACK_SIZE     64
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_RX_COMPLETE_2_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_RX_COMPLETE_2_STACK_STRUCT;

extern uint32_t RDD_DHD_RX_COMPLETE_2_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_2_STACK_PTR(core_id)	( DHD_RX_COMPLETE_2_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_2_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_2_STACK */


/* >>>DHD_RX_COMPLETE_FLOW_RING_BUFFER */

/* >>>DHD_RX_COMPLETE_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[8];
    uint64_t dword_64[4];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	msg_type            	;
        uint8_t	if_id               	;
        uint8_t	common_hdr_flags    	;
        uint8_t	epoch               	;
        uint32_t	request_id          	;
        uint16_t	compl_msg_hdr_status	;
        uint16_t	flow_ring_id        	;
        uint16_t	meta_buf_len        	;
        uint16_t	data_len            	;
        uint16_t	data_offset         	;
        uint16_t	flags               	;
        uint32_t	rx_status_0         	;
        uint32_t	rx_status_1         	;
        uint32_t	dma_done_mark       	;
#else
        uint8_t	epoch               	;
        uint8_t	common_hdr_flags    	;
        uint8_t	if_id               	;
        uint8_t	msg_type            	;
        uint32_t	request_id          	;
        uint16_t	flow_ring_id        	;
        uint16_t	compl_msg_hdr_status	;
        uint16_t	data_len            	;
        uint16_t	meta_buf_len        	;
        uint16_t	flags               	;
        uint16_t	data_offset         	;
        uint32_t	rx_status_0         	;
        uint32_t	rx_status_1         	;
        uint32_t	dma_done_mark       	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_RX_COMPLETE_DESCRIPTOR_STRUCT;

#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT), (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT), (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_READ(r, p)                             MREAD_8((uint8_t *)(p), (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_WRITE(v, p)                            MWRITE_8((uint8_t *)(p), (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_L_READ( wv )                           FIELD_GET( wv, 24, 8 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_L_WRITE( v, wv )                       FIELD_SET( v, 24, 8, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_READ_G(r, g, idx)                         GROUP_MREAD_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 1, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_WRITE_G(v, g, idx)                        GROUP_MWRITE_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 1, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_READ(r, p)                                MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_WRITE(v, p)                               MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_L_READ( wv )                              FIELD_GET( wv, 16, 8 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_L_WRITE( v, wv )                          FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 2, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 2, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_READ(r, p)                     MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_L_READ( wv )                   FIELD_GET( wv, 8, 8 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_L_WRITE( v, wv )               FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_READ_G(r, g, idx)                         GROUP_MREAD_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 3, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_WRITE_G(v, g, idx)                        GROUP_MWRITE_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 3, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_READ(r, p)                                MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_WRITE(v, p)                               MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_L_READ( wv )                              FIELD_GET( wv, 0, 8 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_L_WRITE( v, wv )                          FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_READ(r, p)                           MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_L_READ( wv )                         FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_L_WRITE( v, wv )                     FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 8, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 8, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_READ(r, p)                 MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_L_READ( wv )               FIELD_GET( wv, 16, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_L_WRITE( v, wv )           FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_READ_G(r, g, idx)                  GROUP_MREAD_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 10, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WRITE_G(v, g, idx)                 GROUP_MWRITE_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 10, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_READ(r, p)                         MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WRITE(v, p)                        MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_L_READ( wv )                       FIELD_GET( wv, 0, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_L_WRITE( v, wv )                   FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_READ_G(r, g, idx)                  GROUP_MREAD_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_WRITE_G(v, g, idx)                 GROUP_MWRITE_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_READ(r, p)                         MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_WRITE(v, p)                        MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_L_READ( wv )                       FIELD_GET( wv, 16, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_L_WRITE( v, wv )                   FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_READ(r, p)                             MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_L_READ( wv )                           FIELD_GET( wv, 0, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_L_WRITE( v, wv )                       FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 16, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 16, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_READ(r, p)                          MREAD_16((uint8_t *)(p) + 16, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 16, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_L_READ( wv )                        FIELD_GET( wv, 16, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_L_WRITE( v, wv )                    FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_READ_G(r, g, idx)                         GROUP_MREAD_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 18, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_WRITE_G(v, g, idx)                        GROUP_MWRITE_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 18, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_READ(r, p)                                MREAD_16((uint8_t *)(p) + 18, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_WRITE(v, p)                               MWRITE_16((uint8_t *)(p) + 18, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_L_READ( wv )                              FIELD_GET( wv, 0, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_L_WRITE( v, wv )                          FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 20, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 20, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_READ(r, p)                          MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 24, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 24, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_READ(r, p)                          MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 28, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_STRUCT) + 28, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_READ(r, p)                        MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WRITE(v, p)                       MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_L_READ( wv )                      FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_L_WRITE( v, wv )                  FIELD_SET( v, 0, 32, wv )
/* <<<DHD_RX_COMPLETE_DESCRIPTOR_STRUCT */


#define RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_SIZE     3
typedef struct
{
	DHD_RX_COMPLETE_DESCRIPTOR_STRUCT	entry[ RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_RX_COMPLETE_FLOW_RING_BUFFER_STRUCT;

extern uint32_t RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_PTR(core_id)	( DHD_RX_COMPLETE_FLOW_RING_BUFFER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_FLOW_RING_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_FLOW_RING_BUFFER */


/* >>>VPORT_TO_LOOKUP_PORT_MAPPING_TABLE */

#define RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_SIZE     32
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_STRUCT;

extern uint32_t RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_PTR(core_id)	( VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VPORT_TO_LOOKUP_PORT_MAPPING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<VPORT_TO_LOOKUP_PORT_MAPPING_TABLE */


/* >>>PROCESSING3_STACK */

#define RDD_PROCESSING3_STACK_SIZE     320
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_PROCESSING3_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PROCESSING3_STACK_STRUCT;

extern uint32_t RDD_PROCESSING3_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING3_STACK_PTR(core_id)	( PROCESSING3_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING3_STACK_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING3_STACK */


/* >>>DHD_TX_COMPLETE_FLOW_RING_BUFFER */

/* >>>DHD_TX_COMPLETE_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	msg_type        	;
        uint8_t	if_id           	;
        uint8_t	common_hdr_flags	;
        uint8_t	epoch           	;
        uint32_t	request_id      	;
        uint16_t	status          	;
        uint16_t	flow_ring_id    	;
        uint32_t	dma_done_mark   	;
#else
        uint8_t	epoch           	;
        uint8_t	common_hdr_flags	;
        uint8_t	if_id           	;
        uint8_t	msg_type        	;
        uint32_t	request_id      	;
        uint16_t	flow_ring_id    	;
        uint16_t	status          	;
        uint32_t	dma_done_mark   	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_TX_COMPLETE_DESCRIPTOR_STRUCT;

#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT), (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT), (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_READ(r, p)                         MREAD_8((uint8_t *)(p), (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_WRITE(v, p)                        MWRITE_8((uint8_t *)(p), (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_L_READ( wv )                       FIELD_GET( wv, 24, 8 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_L_WRITE( v, wv )                   FIELD_SET( v, 24, 8, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_READ_G(r, g, idx)                     GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 1, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_WRITE_G(v, g, idx)                    GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 1, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_READ(r, p)                            MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_WRITE(v, p)                           MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_L_READ( wv )                          FIELD_GET( wv, 16, 8 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_L_WRITE( v, wv )                      FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 2, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 2, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_READ(r, p)                 MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_L_READ( wv )               FIELD_GET( wv, 8, 8 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_L_WRITE( v, wv )           FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_READ_G(r, g, idx)                     GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 3, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_WRITE_G(v, g, idx)                    GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 3, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_READ(r, p)                            MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_WRITE(v, p)                           MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_L_READ( wv )                          FIELD_GET( wv, 0, 8 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_L_WRITE( v, wv )                      FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_READ(r, p)                       MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_L_READ( wv )                     FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_L_WRITE( v, wv )                 FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 8, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 8, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_READ(r, p)                           MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_L_READ( wv )                         FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_STATUS_L_WRITE( v, wv )                     FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 10, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 10, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_READ(r, p)                     MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_L_READ( wv )                   FIELD_GET( wv, 0, 16 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_L_WRITE( v, wv )               FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_READ(r, p)                    MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_L_READ( wv )                  FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_L_WRITE( v, wv )              FIELD_SET( v, 0, 32, wv )
/* <<<DHD_TX_COMPLETE_DESCRIPTOR_STRUCT */


#define RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_SIZE     3
typedef struct
{
	DHD_TX_COMPLETE_DESCRIPTOR_STRUCT	entry[ RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_COMPLETE_FLOW_RING_BUFFER_STRUCT;

extern uint32_t RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_PTR(core_id)	( DHD_TX_COMPLETE_FLOW_RING_BUFFER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_FLOW_RING_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_FLOW_RING_BUFFER */


/* >>>FPM_POOL_NUMBER_MAPPING_TABLE */

/* >>>FPM_POOL_NUMBER_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	reserved   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	pool_number	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	pool_number	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} FPM_POOL_NUMBER_STRUCT;

#define RDD_FPM_POOL_NUMBER_POOL_NUMBER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_POOL_NUMBER_STRUCT), 0, 2, (r))
#define RDD_FPM_POOL_NUMBER_POOL_NUMBER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_POOL_NUMBER_STRUCT), 0, 2, (v))
#define RDD_FPM_POOL_NUMBER_POOL_NUMBER_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 0, 2, (r))
#define RDD_FPM_POOL_NUMBER_POOL_NUMBER_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 0, 2, (v))
/* <<<FPM_POOL_NUMBER_STRUCT */


#define RDD_FPM_POOL_NUMBER_MAPPING_TABLE_SIZE     16
typedef struct
{
	FPM_POOL_NUMBER_STRUCT	entry[ RDD_FPM_POOL_NUMBER_MAPPING_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ FPM_POOL_NUMBER_MAPPING_TABLE_STRUCT;

extern uint32_t RDD_FPM_POOL_NUMBER_MAPPING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_FPM_POOL_NUMBER_MAPPING_TABLE_PTR(core_id)	( FPM_POOL_NUMBER_MAPPING_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_FPM_POOL_NUMBER_MAPPING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<FPM_POOL_NUMBER_MAPPING_TABLE */


/* >>>DHD_RX_POST_FLOW_RING_BUFFER */

/* >>>DHD_RX_POST_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[8];
    uint64_t dword_64[4];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	msg_type             	;
        uint8_t	if_id                	;
        uint8_t	common_hdr_flags     	;
        uint8_t	epoch                	;
        uint32_t	request_id           	;
        uint16_t	meta_buf_len         	;
        uint16_t	data_len             	;
        uint32_t	reserved             	;
        uint32_t	metadata_buf_addr_low	;
        uint32_t	metadata_buf_addr_hi 	;
        uint32_t	data_buf_addr_low    	;
        uint32_t	data_buf_addr_hi     	;
#else
        uint8_t	epoch                	;
        uint8_t	common_hdr_flags     	;
        uint8_t	if_id                	;
        uint8_t	msg_type             	;
        uint32_t	request_id           	;
        uint16_t	data_len             	;
        uint16_t	meta_buf_len         	;
        uint32_t	reserved             	;
        uint32_t	metadata_buf_addr_low	;
        uint32_t	metadata_buf_addr_hi 	;
        uint32_t	data_buf_addr_low    	;
        uint32_t	data_buf_addr_hi     	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_RX_POST_DESCRIPTOR_STRUCT;

#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_READ_G(r, g, idx)                       GROUP_MREAD_8((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT), (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_WRITE_G(v, g, idx)                      GROUP_MWRITE_8((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT), (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_READ(r, p)                              MREAD_8((uint8_t *)(p), (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_WRITE(v, p)                             MWRITE_8((uint8_t *)(p), (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_L_READ( wv )                            FIELD_GET( wv, 24, 8 )
#define RDD_DHD_RX_POST_DESCRIPTOR_MSG_TYPE_L_WRITE( v, wv )                        FIELD_SET( v, 24, 8, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 1, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 1, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_L_READ( wv )                               FIELD_GET( wv, 16, 8 )
#define RDD_DHD_RX_POST_DESCRIPTOR_IF_ID_L_WRITE( v, wv )                           FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 2, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 2, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_READ(r, p)                      MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_L_READ( wv )                    FIELD_GET( wv, 8, 8 )
#define RDD_DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_L_WRITE( v, wv )                FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 3, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 3, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_L_READ( wv )                               FIELD_GET( wv, 0, 8 )
#define RDD_DHD_RX_POST_DESCRIPTOR_EPOCH_L_WRITE( v, wv )                           FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_READ(r, p)                            MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_L_READ( wv )                          FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_REQUEST_ID_L_WRITE( v, wv )                      FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 8, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 8, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_READ(r, p)                          MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_L_READ( wv )                        FIELD_GET( wv, 16, 16 )
#define RDD_DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_L_WRITE( v, wv )                    FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 10, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 10, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_READ(r, p)                              MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_L_READ( wv )                            FIELD_GET( wv, 0, 16 )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_LEN_L_WRITE( v, wv )                        FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 16, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 16, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_READ(r, p)                 MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 20, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 20, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_READ(r, p)                  MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 24, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 24, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_READ(r, p)                     MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_L_READ( wv )                   FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_L_WRITE( v, wv )               FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 28, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_STRUCT) + 28, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_READ(r, p)                      MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_L_READ( wv )                    FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_L_WRITE( v, wv )                FIELD_SET( v, 0, 32, wv )
/* <<<DHD_RX_POST_DESCRIPTOR_STRUCT */


#define RDD_DHD_RX_POST_FLOW_RING_BUFFER_SIZE     3
typedef struct
{
	DHD_RX_POST_DESCRIPTOR_STRUCT	entry[ RDD_DHD_RX_POST_FLOW_RING_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_RX_POST_FLOW_RING_BUFFER_STRUCT;

extern uint32_t RDD_DHD_RX_POST_FLOW_RING_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_POST_FLOW_RING_BUFFER_PTR(core_id)	( DHD_RX_POST_FLOW_RING_BUFFER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_POST_FLOW_RING_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_POST_FLOW_RING_BUFFER */


/* >>>RUNNER_GLOBAL_REGISTERS_INIT */

/* >>>BYTES_4_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	bits      	;
#else
        uint32_t	bits      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) BYTES_4_STRUCT;

#define RDD_BYTES_4_BITS_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(BYTES_4_STRUCT), (r))
#define RDD_BYTES_4_BITS_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(BYTES_4_STRUCT), (v))
#define RDD_BYTES_4_BITS_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_BYTES_4_BITS_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
/* <<<BYTES_4_STRUCT */


#define RDD_RUNNER_GLOBAL_REGISTERS_INIT_SIZE     8
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_RUNNER_GLOBAL_REGISTERS_INIT_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RUNNER_GLOBAL_REGISTERS_INIT_STRUCT;

extern uint32_t RDD_RUNNER_GLOBAL_REGISTERS_INIT_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RUNNER_GLOBAL_REGISTERS_INIT_PTR(core_id)	( RUNNER_GLOBAL_REGISTERS_INIT_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RUNNER_GLOBAL_REGISTERS_INIT_ADDRESS_ARR[core_id] ))

/* <<<RUNNER_GLOBAL_REGISTERS_INIT */


/* >>>PROCESSING_8_TASKS_PACKET_BUFFER */

/* >>>PACKET_BUFFER_STRUCT */
#define RDD_PACKET_BUFFER_PACKET_HEADER_NUMBER	112
#define RDD_PACKET_BUFFER_PARSER_RESULT_NUMBER	104
#define RDD_PACKET_BUFFER_SCRATCH_NUMBER	112
#define RDD_PACKET_BUFFER_SCRATCH_REPLY_NUMBER	16
#define RDD_PACKET_BUFFER_PD_NUMBER	16
#define RDD_PACKET_BUFFER_TCAM_RESULT_NUMBER	20
#define RDD_PACKET_BUFFER_RESERVED1_NUMBER	4
#define RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_NUMBER	128
typedef union
{
    uint32_t word_32[128];
    uint64_t dword_64[64];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	packet_header[RDD_PACKET_BUFFER_PACKET_HEADER_NUMBER];
        uint8_t	parser_result[RDD_PACKET_BUFFER_PARSER_RESULT_NUMBER];
        uint8_t	scratch[RDD_PACKET_BUFFER_SCRATCH_NUMBER];
        uint8_t	scratch_reply[RDD_PACKET_BUFFER_SCRATCH_REPLY_NUMBER];
        uint8_t	pd[RDD_PACKET_BUFFER_PD_NUMBER];
        uint8_t	tcam_result[RDD_PACKET_BUFFER_TCAM_RESULT_NUMBER];
        uint8_t	reserved1[RDD_PACKET_BUFFER_RESERVED1_NUMBER];
        uint8_t	classification_contexts_list[RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_NUMBER];
#else
        uint8_t	packet_header[RDD_PACKET_BUFFER_PACKET_HEADER_NUMBER];
        uint8_t	parser_result[RDD_PACKET_BUFFER_PARSER_RESULT_NUMBER];
        uint8_t	scratch[RDD_PACKET_BUFFER_SCRATCH_NUMBER];
        uint8_t	scratch_reply[RDD_PACKET_BUFFER_SCRATCH_REPLY_NUMBER];
        uint8_t	pd[RDD_PACKET_BUFFER_PD_NUMBER];
        uint8_t	tcam_result[RDD_PACKET_BUFFER_TCAM_RESULT_NUMBER];
        uint8_t	reserved1[RDD_PACKET_BUFFER_RESERVED1_NUMBER];
        uint8_t	classification_contexts_list[RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PACKET_BUFFER_STRUCT;

#define RDD_PACKET_BUFFER_PACKET_HEADER_READ_G(r, g, idx, i)                      GROUP_MREAD_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT), i, (r))
#define RDD_PACKET_BUFFER_PACKET_HEADER_WRITE_G(v, g, idx, i)                     GROUP_MWRITE_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT), i, (v))
#define RDD_PACKET_BUFFER_PACKET_HEADER_READ(r, p, i)                             MREAD_I_8((uint8_t *)(p), i, (r))
#define RDD_PACKET_BUFFER_PACKET_HEADER_WRITE(v, p, i)                            MWRITE_I_8((uint8_t *)(p), i, (v))
#define RDD_PACKET_BUFFER_PARSER_RESULT_READ_G(r, g, idx, i)                      GROUP_MREAD_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 112, i, (r))
#define RDD_PACKET_BUFFER_PARSER_RESULT_WRITE_G(v, g, idx, i)                     GROUP_MWRITE_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 112, i, (v))
#define RDD_PACKET_BUFFER_PARSER_RESULT_READ(r, p, i)                             MREAD_I_8((uint8_t *)(p) + 112, i, (r))
#define RDD_PACKET_BUFFER_PARSER_RESULT_WRITE(v, p, i)                            MWRITE_I_8((uint8_t *)(p) + 112, i, (v))
#define RDD_PACKET_BUFFER_SCRATCH_READ_G(r, g, idx, i)                            GROUP_MREAD_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 216, i, (r))
#define RDD_PACKET_BUFFER_SCRATCH_WRITE_G(v, g, idx, i)                           GROUP_MWRITE_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 216, i, (v))
#define RDD_PACKET_BUFFER_SCRATCH_READ(r, p, i)                                   MREAD_I_8((uint8_t *)(p) + 216, i, (r))
#define RDD_PACKET_BUFFER_SCRATCH_WRITE(v, p, i)                                  MWRITE_I_8((uint8_t *)(p) + 216, i, (v))
#define RDD_PACKET_BUFFER_SCRATCH_REPLY_READ_G(r, g, idx, i)                      GROUP_MREAD_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 328, i, (r))
#define RDD_PACKET_BUFFER_SCRATCH_REPLY_WRITE_G(v, g, idx, i)                     GROUP_MWRITE_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 328, i, (v))
#define RDD_PACKET_BUFFER_SCRATCH_REPLY_READ(r, p, i)                             MREAD_I_8((uint8_t *)(p) + 328, i, (r))
#define RDD_PACKET_BUFFER_SCRATCH_REPLY_WRITE(v, p, i)                            MWRITE_I_8((uint8_t *)(p) + 328, i, (v))
#define RDD_PACKET_BUFFER_PD_READ_G(r, g, idx, i)                                 GROUP_MREAD_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 344, i, (r))
#define RDD_PACKET_BUFFER_PD_WRITE_G(v, g, idx, i)                                GROUP_MWRITE_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 344, i, (v))
#define RDD_PACKET_BUFFER_PD_READ(r, p, i)                                        MREAD_I_8((uint8_t *)(p) + 344, i, (r))
#define RDD_PACKET_BUFFER_PD_WRITE(v, p, i)                                       MWRITE_I_8((uint8_t *)(p) + 344, i, (v))
#define RDD_PACKET_BUFFER_TCAM_RESULT_READ_G(r, g, idx, i)                        GROUP_MREAD_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 360, i, (r))
#define RDD_PACKET_BUFFER_TCAM_RESULT_WRITE_G(v, g, idx, i)                       GROUP_MWRITE_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 360, i, (v))
#define RDD_PACKET_BUFFER_TCAM_RESULT_READ(r, p, i)                               MREAD_I_8((uint8_t *)(p) + 360, i, (r))
#define RDD_PACKET_BUFFER_TCAM_RESULT_WRITE(v, p, i)                              MWRITE_I_8((uint8_t *)(p) + 360, i, (v))
#define RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_READ_G(r, g, idx, i)       GROUP_MREAD_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 384, i, (r))
#define RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8((g), (idx)*sizeof(PACKET_BUFFER_STRUCT) + 384, i, (v))
#define RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_READ(r, p, i)              MREAD_I_8((uint8_t *)(p) + 384, i, (r))
#define RDD_PACKET_BUFFER_CLASSIFICATION_CONTEXTS_LIST_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)(p) + 384, i, (v))
/* <<<PACKET_BUFFER_STRUCT */


#define RDD_PROCESSING_8_TASKS_PACKET_BUFFER_SIZE     8
typedef struct
{
	PACKET_BUFFER_STRUCT	entry[ RDD_PROCESSING_8_TASKS_PACKET_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PROCESSING_8_TASKS_PACKET_BUFFER_STRUCT;

extern uint32_t RDD_PROCESSING_8_TASKS_PACKET_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING_8_TASKS_PACKET_BUFFER_PTR(core_id)	( PROCESSING_8_TASKS_PACKET_BUFFER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING_8_TASKS_PACKET_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING_8_TASKS_PACKET_BUFFER */


/* >>>PROCESSING4_STACK */

#define RDD_PROCESSING4_STACK_SIZE     320
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_PROCESSING4_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PROCESSING4_STACK_STRUCT;

extern uint32_t RDD_PROCESSING4_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING4_STACK_PTR(core_id)	( PROCESSING4_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING4_STACK_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING4_STACK */


/* >>>DHD_RX_COMPLETE_DISPATCHER_CREDIT_TABLE */

#define RDD_DHD_RX_COMPLETE_DISPATCHER_CREDIT_TABLE_SIZE     12
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DHD_RX_COMPLETE_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_RX_COMPLETE_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_DHD_RX_COMPLETE_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( DHD_RX_COMPLETE_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_DISPATCHER_CREDIT_TABLE */


/* >>>DHD_HW_CFG */

/* >>>DHD_HW_CONFIGURATION_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	aggr_timer_period  	;
        uint32_t	reserved0          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ddr_sop_offset     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	rx_post_fpm_pool   	;
        uint8_t	reserved1          	;
        uint16_t	fpm_thresholds_low 	;
        uint16_t	fpm_thresholds_high	;
        uint16_t	fpm_thresholds_excl	;
        uint16_t	reserved2          	;
#else
        uint32_t	aggr_timer_period  	;
        uint8_t	reserved1          	;
        uint8_t	rx_post_fpm_pool   	;
        uint32_t	ddr_sop_offset     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	fpm_thresholds_high	;
        uint16_t	fpm_thresholds_low 	;
        uint16_t	reserved2          	;
        uint16_t	fpm_thresholds_excl	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_HW_CONFIGURATION_STRUCT;

#define RDD_DHD_HW_CONFIGURATION_AGGR_TIMER_PERIOD_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT), (r))
#define RDD_DHD_HW_CONFIGURATION_AGGR_TIMER_PERIOD_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT), (v))
#define RDD_DHD_HW_CONFIGURATION_AGGR_TIMER_PERIOD_READ(r, p)                   MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_HW_CONFIGURATION_AGGR_TIMER_PERIOD_WRITE(v, p)                  MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_HW_CONFIGURATION_DDR_SOP_OFFSET_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT) + 4, 0, 11, (r))
#define RDD_DHD_HW_CONFIGURATION_DDR_SOP_OFFSET_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT) + 4, 0, 11, (v))
#define RDD_DHD_HW_CONFIGURATION_DDR_SOP_OFFSET_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 4, 0, 11, (r))
#define RDD_DHD_HW_CONFIGURATION_DDR_SOP_OFFSET_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 4, 0, 11, (v))
#define RDD_DHD_HW_CONFIGURATION_RX_POST_FPM_POOL_READ_G(r, g, idx)             GROUP_MREAD_8((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT) + 6, (r))
#define RDD_DHD_HW_CONFIGURATION_RX_POST_FPM_POOL_WRITE_G(v, g, idx)            GROUP_MWRITE_8((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT) + 6, (v))
#define RDD_DHD_HW_CONFIGURATION_RX_POST_FPM_POOL_READ(r, p)                    MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_DHD_HW_CONFIGURATION_RX_POST_FPM_POOL_WRITE(v, p)                   MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_LOW_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT) + 8, (r))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT) + 8, (v))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_LOW_READ(r, p)                  MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_LOW_WRITE(v, p)                 MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_HIGH_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT) + 10, (r))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT) + 10, (v))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_HIGH_READ(r, p)                 MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_HIGH_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_EXCL_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT) + 12, (r))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_EXCL_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(DHD_HW_CONFIGURATION_STRUCT) + 12, (v))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_EXCL_READ(r, p)                 MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_DHD_HW_CONFIGURATION_FPM_THRESHOLDS_EXCL_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 12, (v))
/* <<<DHD_HW_CONFIGURATION_STRUCT */


#define RDD_DHD_HW_CFG_SIZE     1
typedef struct
{
	DHD_HW_CONFIGURATION_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_HW_CFG_STRUCT;

extern uint32_t RDD_DHD_HW_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_HW_CFG_PTR(core_id)	( DHD_HW_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_HW_CFG_ADDRESS_ARR[core_id] ))

/* <<<DHD_HW_CFG */


/* >>>POLICER_PARAMS_TABLE */

/* >>>POLICER_PARAMS_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	factor_bytes	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	dei_mode    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	reserved    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	dei_mode    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	factor_bytes	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} POLICER_PARAMS_ENTRY_STRUCT;

#define RDD_POLICER_PARAMS_ENTRY_FACTOR_BYTES_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(POLICER_PARAMS_ENTRY_STRUCT), 5, 3, (r))
#define RDD_POLICER_PARAMS_ENTRY_FACTOR_BYTES_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(POLICER_PARAMS_ENTRY_STRUCT), 5, 3, (v))
#define RDD_POLICER_PARAMS_ENTRY_FACTOR_BYTES_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 5, 3, (r))
#define RDD_POLICER_PARAMS_ENTRY_FACTOR_BYTES_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 5, 3, (v))
#define RDD_POLICER_PARAMS_ENTRY_DEI_MODE_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(POLICER_PARAMS_ENTRY_STRUCT), 4, 1, (r))
#define RDD_POLICER_PARAMS_ENTRY_DEI_MODE_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(POLICER_PARAMS_ENTRY_STRUCT), 4, 1, (v))
#define RDD_POLICER_PARAMS_ENTRY_DEI_MODE_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_POLICER_PARAMS_ENTRY_DEI_MODE_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
/* <<<POLICER_PARAMS_ENTRY_STRUCT */


#define RDD_POLICER_PARAMS_TABLE_SIZE     80
typedef struct
{
	POLICER_PARAMS_ENTRY_STRUCT	entry[ RDD_POLICER_PARAMS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ POLICER_PARAMS_TABLE_STRUCT;

extern uint32_t RDD_POLICER_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_POLICER_PARAMS_TABLE_PTR(core_id)	( POLICER_PARAMS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_POLICER_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<POLICER_PARAMS_TABLE */


/* >>>DEBUG_SCRATCHPAD */

#define RDD_DEBUG_SCRATCHPAD_SIZE     12
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DEBUG_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DEBUG_SCRATCHPAD_STRUCT;

extern uint32_t RDD_DEBUG_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DEBUG_SCRATCHPAD_PTR(core_id)	( DEBUG_SCRATCHPAD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DEBUG_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<DEBUG_SCRATCHPAD */


/* >>>PROCESSING5_STACK */

#define RDD_PROCESSING5_STACK_SIZE     320
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_PROCESSING5_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PROCESSING5_STACK_STRUCT;

extern uint32_t RDD_PROCESSING5_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING5_STACK_PTR(core_id)	( PROCESSING5_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING5_STACK_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING5_STACK */


/* >>>DHD_TX_COMPLETE_DISPATCHER_CREDIT_TABLE */

#define RDD_DHD_TX_COMPLETE_DISPATCHER_CREDIT_TABLE_SIZE     12
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DHD_TX_COMPLETE_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_COMPLETE_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_DHD_TX_COMPLETE_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( DHD_TX_COMPLETE_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_DISPATCHER_CREDIT_TABLE */


/* >>>SPDSVC_ANALYZER_PARAMS_TABLE */

/* >>>SPDSVC_ANALYZER_PARAMS_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	stream    	;
        uint32_t	stream1   	;
        uint32_t	stream2   	;
        uint32_t	stream3   	;
#else
        uint32_t	stream    	;
        uint32_t	stream1   	;
        uint32_t	stream2   	;
        uint32_t	stream3   	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SPDSVC_ANALYZER_PARAMS_STRUCT;

#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_ANALYZER_PARAMS_STRUCT), (r))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_ANALYZER_PARAMS_STRUCT), (v))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM_READ(r, p)                  MREAD_32((uint8_t *)(p), (r))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM_WRITE(v, p)                 MWRITE_32((uint8_t *)(p), (v))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM1_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_ANALYZER_PARAMS_STRUCT) + 4, (r))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM1_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_ANALYZER_PARAMS_STRUCT) + 4, (v))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM1_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM1_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM2_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_ANALYZER_PARAMS_STRUCT) + 8, (r))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM2_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_ANALYZER_PARAMS_STRUCT) + 8, (v))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM2_READ(r, p)                 MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM2_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM3_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_ANALYZER_PARAMS_STRUCT) + 12, (r))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM3_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_ANALYZER_PARAMS_STRUCT) + 12, (v))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM3_READ(r, p)                 MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_SPDSVC_ANALYZER_PARAMS_STREAM3_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 12, (v))
/* <<<SPDSVC_ANALYZER_PARAMS_STRUCT */


#define RDD_SPDSVC_ANALYZER_PARAMS_TABLE_SIZE     1
typedef struct
{
	SPDSVC_ANALYZER_PARAMS_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_ANALYZER_PARAMS_TABLE_STRUCT;

extern uint32_t RDD_SPDSVC_ANALYZER_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_ANALYZER_PARAMS_TABLE_PTR(core_id)	( SPDSVC_ANALYZER_PARAMS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_ANALYZER_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_ANALYZER_PARAMS_TABLE */


/* >>>SPDSVC_ANALYZER_PD_FIFO_TABLE */

/* >>>PROCESSING_TX_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	headroom       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_copy        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reprocess      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	force_copy     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	second_level_q_codel_ts	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	first_level_q  	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	coherent       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hn             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_headroom     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_dont_agg     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mc_copy      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reprocess    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_force_copy   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	second_level_q           	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_q_codel_ts union */
        uint32_t	reservedSU1_first_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_flag_1588    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_coherent     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_hn           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_headroom     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_dont_agg     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mc_copy      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reprocess    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_force_copy   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	codel_timestamp          	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_q_codel_ts union */
        uint32_t	reservedSU2_first_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_flag_1588    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_coherent     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_hn           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	serial_num     	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_length  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	drop           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cong_state_stream	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	lan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_port   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	union3         	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_drop         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cong_state               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cong_state_stream union */
        uint32_t	reservedSU1_lan          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow                     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	bn1_first                	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_drop         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	stream_id                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cong_state_stream union */
        uint32_t	reservedSU2_lan          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	source_port              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	reserved1                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
        uint32_t	abs_1                    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_drop         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_cong_state_stream	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_lan          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lag_port                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	lan_vport                	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	from_feed_ring           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
        uint32_t	data_1588                	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reservedSU4_drop         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_target_mem_1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_cong_state_stream	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_lan          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_vport                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	flow_id                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	reservedSU4_union3       	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	agg_pd         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	payload_offset_sop	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_agg_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sop_fpm                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm                   	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_agg_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3                	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm_pool              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm_num               	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_agg_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn_num                   	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop                      	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint16_t	bn0_first                	; /* Member of payload_offset_sop union */
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reservedSU4_agg_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_target_mem_0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	viq                      	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved4                	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 5 */
		struct{
        uint32_t	reservedSU5_agg_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU5_target_mem_0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved5                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	abs_0                    	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	hn             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	coherent       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q  	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	second_level_q_codel_ts	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	force_copy     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reprocess      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_copy        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	headroom       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_hn           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_coherent     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_flag_1588    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_first_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	second_level_q           	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_q_codel_ts union */
        uint32_t	reservedSU1_force_copy   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reprocess    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mc_copy      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_dont_agg     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_headroom     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_hn           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_coherent     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_flag_1588    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_first_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	codel_timestamp          	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_q_codel_ts union */
        uint32_t	reservedSU2_force_copy   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reprocess    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mc_copy      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_dont_agg     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_headroom     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_length  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	serial_num     	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	union3         	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	ingress_port   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	lan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cong_state_stream	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	target_mem_1   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drop           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn1_first                	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
        uint32_t	flow                     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	reservedSU1_lan          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cong_state               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cong_state_stream union */
        uint32_t	reservedSU1_target_mem_1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_drop         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	abs_1                    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
        uint32_t	reserved1                	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
        uint32_t	source_port              	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	reservedSU2_lan          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	stream_id                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cong_state_stream union */
        uint32_t	reservedSU2_target_mem_1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_drop         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	data_1588                	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
        uint32_t	from_feed_ring           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of union3 union */
        uint32_t	lan_vport                	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	lag_port                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	reservedSU3_lan          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_cong_state_stream	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_drop         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reservedSU4_union3       	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow_id                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	is_vport                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	reservedSU4_lan          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_cong_state_stream	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_target_mem_1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_drop         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	payload_offset_sop	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	target_mem_0   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg_pd         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn_fpm                   	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop_fpm                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU1_target_mem_0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_agg_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	bn_fpm_num               	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm_pool              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved3                	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU2_target_mem_0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_agg_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint16_t	bn0_first                	; /* Member of payload_offset_sop union */
        uint32_t	sop                      	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_num                   	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU3_target_mem_0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_agg_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reserved4                	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	viq                      	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU4_target_mem_0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_agg_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 5 */
		struct{
        uint32_t	abs_0                    	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved5                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU5_target_mem_0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU5_agg_pd       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PROCESSING_TX_DESCRIPTOR_STRUCT;

#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_L_READ( wv )                         FIELD_GET( wv, 31, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_VALID_L_WRITE( v, wv )                     FIELD_SET( v, 31, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 6, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 6, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_L_READ( wv )                      FIELD_GET( wv, 30, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_HEADROOM_L_WRITE( v, wv )                  FIELD_SET( v, 30, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 5, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 5, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_L_READ( wv )                      FIELD_GET( wv, 29, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_DONT_AGG_L_WRITE( v, wv )                  FIELD_SET( v, 29, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 4, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 4, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_L_READ( wv )                       FIELD_GET( wv, 28, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_MC_COPY_L_WRITE( v, wv )                   FIELD_SET( v, 28, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 3, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 3, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_L_READ( wv )                     FIELD_GET( wv, 27, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_REPROCESS_L_WRITE( v, wv )                 FIELD_SET( v, 27, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 2, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 2, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_L_READ( wv )                         FIELD_GET( wv, 26, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_COLOR_L_WRITE( v, wv )                     FIELD_SET( v, 26, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 1, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 1, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_L_READ( wv )                    FIELD_GET( wv, 25, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FORCE_COPY_L_WRITE( v, wv )                FIELD_SET( v, 25, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_CODEL_TS_READ_G(r, g, idx)  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 0, 9, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_CODEL_TS_WRITE_G(v, g, idx) GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 0, 9, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_CODEL_TS_READ(r, p)         FIELD_MREAD_16((uint8_t *)(p), 0, 9, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_CODEL_TS_WRITE(v, p)        FIELD_MWRITE_16((uint8_t *)(p), 0, 9, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_CODEL_TS_L_READ( wv )       FIELD_GET( wv, 16, 9 )
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_CODEL_TS_L_WRITE( v, wv )   FIELD_SET( v, 16, 9, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 0, 9, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 0, 9, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_READ(r, p)                  FIELD_MREAD_16((uint8_t *)(p), 0, 9, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)(p), 0, 9, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_L_READ( wv )                FIELD_GET( wv, 16, 9 )
#define RDD_PROCESSING_TX_DESCRIPTOR_SECOND_LEVEL_Q_L_WRITE( v, wv )            FIELD_SET( v, 16, 9, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_CODEL_TIMESTAMP_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 0, 9, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_CODEL_TIMESTAMP_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT), 0, 9, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_CODEL_TIMESTAMP_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p), 0, 9, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_CODEL_TIMESTAMP_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p), 0, 9, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_CODEL_TIMESTAMP_L_READ( wv )               FIELD_GET( wv, 16, 9 )
#define RDD_PROCESSING_TX_DESCRIPTOR_CODEL_TIMESTAMP_L_WRITE( v, wv )           FIELD_SET( v, 16, 9, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 2, 7, 9, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 2, 7, 9, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p) + 2, 7, 9, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p) + 2, 7, 9, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_L_READ( wv )                 FIELD_GET( wv, 7, 9 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FIRST_LEVEL_Q_L_WRITE( v, wv )             FIELD_SET( v, 7, 9, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 3, 6, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 3, 6, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_L_READ( wv )                     FIELD_GET( wv, 6, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLAG_1588_L_WRITE( v, wv )                 FIELD_SET( v, 6, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 3, 5, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 3, 5, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 3, 5, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 3, 5, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_L_READ( wv )                      FIELD_GET( wv, 5, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_COHERENT_L_WRITE( v, wv )                  FIELD_SET( v, 5, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 3, 0, 5, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 3, 0, 5, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 5, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 5, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_L_READ( wv )                            FIELD_GET( wv, 0, 5 )
#define RDD_PROCESSING_TX_DESCRIPTOR_HN_L_WRITE( v, wv )                        FIELD_SET( v, 0, 5, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 4, 6, 10, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 4, 6, 10, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 4, 6, 10, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 4, 6, 10, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_L_READ( wv )                    FIELD_GET( wv, 22, 10 )
#define RDD_PROCESSING_TX_DESCRIPTOR_SERIAL_NUM_L_WRITE( v, wv )                FIELD_SET( v, 22, 10, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 5, 5, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 5, 5, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 5, 5, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 5, 5, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_L_READ( wv )                      FIELD_GET( wv, 21, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_PRIORITY_L_WRITE( v, wv )                  FIELD_SET( v, 21, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 5, 4, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 5, 4, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 5, 4, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 5, 4, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_L_READ( wv )                  FIELD_GET( wv, 20, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_CONG_L_WRITE( v, wv )              FIELD_SET( v, 20, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 5, 3, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 5, 3, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 5, 3, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 5, 3, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_L_READ( wv )                           FIELD_GET( wv, 19, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_L_WRITE( v, wv )                       FIELD_SET( v, 19, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 6, 0, 14, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 6, 0, 14, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_L_READ( wv )                 FIELD_GET( wv, 0, 14 )
#define RDD_PROCESSING_TX_DESCRIPTOR_PACKET_LENGTH_L_WRITE( v, wv )             FIELD_SET( v, 0, 14, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 7, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 7, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_L_READ( wv )                          FIELD_GET( wv, 31, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_DROP_L_WRITE( v, wv )                      FIELD_SET( v, 31, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 6, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 6, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_L_READ( wv )                  FIELD_GET( wv, 30, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_1_L_WRITE( v, wv )              FIELD_SET( v, 30, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_STREAM_READ_G(r, g, idx)        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 4, 2, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_STREAM_WRITE_G(v, g, idx)       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 4, 2, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_STREAM_READ(r, p)               FIELD_MREAD_8((uint8_t *)(p) + 8, 4, 2, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_STREAM_WRITE(v, p)              FIELD_MWRITE_8((uint8_t *)(p) + 8, 4, 2, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_STREAM_L_READ( wv )             FIELD_GET( wv, 28, 2 )
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_STREAM_L_WRITE( v, wv )         FIELD_SET( v, 28, 2, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 4, 2, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 4, 2, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 8, 4, 2, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 8, 4, 2, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_L_READ( wv )                    FIELD_GET( wv, 28, 2 )
#define RDD_PROCESSING_TX_DESCRIPTOR_CONG_STATE_L_WRITE( v, wv )                FIELD_SET( v, 28, 2, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 4, 2, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 4, 2, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 8, 4, 2, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 8, 4, 2, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_L_READ( wv )                     FIELD_GET( wv, 28, 2 )
#define RDD_PROCESSING_TX_DESCRIPTOR_STREAM_ID_L_WRITE( v, wv )                 FIELD_SET( v, 28, 2, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 8, 3, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 8, 3, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_L_READ( wv )                           FIELD_GET( wv, 27, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_L_WRITE( v, wv )                       FIELD_SET( v, 27, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 8, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 8, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_READ(r, p)                    FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 8, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 8, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_L_READ( wv )                  FIELD_GET( wv, 19, 8 )
#define RDD_PROCESSING_TX_DESCRIPTOR_INGRESS_PORT_L_WRITE( v, wv )              FIELD_SET( v, 19, 8, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 8, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 8, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_READ(r, p)                            FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 8, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 8, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_L_READ( wv )                          FIELD_GET( wv, 19, 8 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_L_WRITE( v, wv )                      FIELD_SET( v, 19, 8, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_READ_G(r, g, idx)              GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 8, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 8, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_READ(r, p)                     FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 8, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_WRITE(v, p)                    FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 8, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_L_READ( wv )                   FIELD_GET( wv, 19, 8 )
#define RDD_PROCESSING_TX_DESCRIPTOR_SOURCE_PORT_L_WRITE( v, wv )               FIELD_SET( v, 19, 8, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 1, 2, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 1, 2, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 8, 1, 2, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 8, 1, 2, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_L_READ( wv )                      FIELD_GET( wv, 25, 2 )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAG_PORT_L_WRITE( v, wv )                  FIELD_SET( v, 25, 2, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 6, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 6, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 6, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 6, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_L_READ( wv )                     FIELD_GET( wv, 19, 6 )
#define RDD_PROCESSING_TX_DESCRIPTOR_LAN_VPORT_L_WRITE( v, wv )                 FIELD_SET( v, 19, 6, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 2, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 2, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 8, 2, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 8, 2, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_L_READ( wv )                      FIELD_GET( wv, 26, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_IS_VPORT_L_WRITE( v, wv )                  FIELD_SET( v, 26, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 7, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 3, 7, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 7, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 7, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_L_READ( wv )                       FIELD_GET( wv, 19, 7 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FLOW_ID_L_WRITE( v, wv )                   FIELD_SET( v, 19, 7, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 0, 19, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 0, 19, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_READ(r, p)                          FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 19, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 19, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_L_READ( wv )                        FIELD_GET( wv, 0, 19 )
#define RDD_PROCESSING_TX_DESCRIPTOR_UNION3_L_WRITE( v, wv )                    FIELD_SET( v, 0, 19, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_READ_G(r, g, idx)                GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 0, 19, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 0, 19, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_READ(r, p)                       FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 19, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_WRITE(v, p)                      FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 19, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_L_READ( wv )                     FIELD_GET( wv, 0, 19 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN1_FIRST_L_WRITE( v, wv )                 FIELD_SET( v, 0, 19, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_1_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 10, 0, 11, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_1_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 10, 0, 11, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_1_READ(r, p)                           FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 11, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_1_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 11, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_1_L_READ( wv )                         FIELD_GET( wv, 0, 11 )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_1_L_WRITE( v, wv )                     FIELD_SET( v, 0, 11, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_FROM_FEED_RING_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 9, 2, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FROM_FEED_RING_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 9, 2, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FROM_FEED_RING_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 9, 2, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_FROM_FEED_RING_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 9, 2, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_FROM_FEED_RING_L_READ( wv )                FIELD_GET( wv, 18, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_FROM_FEED_RING_L_WRITE( v, wv )            FIELD_SET( v, 18, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_DATA_1588_READ_G(r, g, idx)                GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 0, 18, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_DATA_1588_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 8, 0, 18, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_DATA_1588_READ(r, p)                       FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 18, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_DATA_1588_WRITE(v, p)                      FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 18, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_DATA_1588_L_READ( wv )                     FIELD_GET( wv, 0, 18 )
#define RDD_PROCESSING_TX_DESCRIPTOR_DATA_1588_L_WRITE( v, wv )                 FIELD_SET( v, 0, 18, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 7, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 7, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_L_READ( wv )                        FIELD_GET( wv, 31, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_AGG_PD_L_WRITE( v, wv )                    FIELD_SET( v, 31, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 6, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 6, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_L_READ( wv )                  FIELD_GET( wv, 30, 1 )
#define RDD_PROCESSING_TX_DESCRIPTOR_TARGET_MEM_0_L_WRITE( v, wv )              FIELD_SET( v, 30, 1, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ_G(r, g, idx)       GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 0, 30, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE_G(v, g, idx)      GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 0, 30, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ(r, p)              FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 30, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE(v, p)             FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 30, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_L_READ( wv )            FIELD_GET( wv, 0, 30 )
#define RDD_PROCESSING_TX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_L_WRITE( v, wv )        FIELD_SET( v, 0, 30, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_FPM_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 3, 11, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_FPM_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 3, 11, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_FPM_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 12, 3, 11, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_FPM_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 12, 3, 11, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_FPM_L_READ( wv )                       FIELD_GET( wv, 19, 11 )
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_FPM_L_WRITE( v, wv )                   FIELD_SET( v, 19, 11, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 0, 19, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 0, 19, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_READ(r, p)                          FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 19, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 19, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_L_READ( wv )                        FIELD_GET( wv, 0, 19 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_L_WRITE( v, wv )                    FIELD_SET( v, 0, 19, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_POOL_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 13, 1, 2, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_POOL_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 13, 1, 2, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_POOL_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 13, 1, 2, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_POOL_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 13, 1, 2, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_POOL_L_READ( wv )                   FIELD_GET( wv, 17, 2 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_POOL_L_WRITE( v, wv )               FIELD_SET( v, 17, 2, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_NUM_READ_G(r, g, idx)               GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 0, 17, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_NUM_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 0, 17, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_NUM_READ(r, p)                      FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 17, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_NUM_WRITE(v, p)                     FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 17, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_NUM_L_READ( wv )                    FIELD_GET( wv, 0, 17 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_FPM_NUM_L_WRITE( v, wv )                FIELD_SET( v, 0, 17, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 7, 7, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 7, 7, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_READ(r, p)                          FIELD_MREAD_16((uint8_t *)(p) + 12, 7, 7, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_WRITE(v, p)                         FIELD_MWRITE_16((uint8_t *)(p) + 12, 7, 7, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_L_READ( wv )                        FIELD_GET( wv, 23, 7 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN_NUM_L_WRITE( v, wv )                    FIELD_SET( v, 23, 7, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 13, 0, 7, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 13, 0, 7, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 7, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 7, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_L_READ( wv )                           FIELD_GET( wv, 16, 7 )
#define RDD_PROCESSING_TX_DESCRIPTOR_SOP_L_WRITE( v, wv )                       FIELD_SET( v, 16, 7, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_READ(r, p)                       MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_L_READ( wv )                     FIELD_GET( wv, 0, 16 )
#define RDD_PROCESSING_TX_DESCRIPTOR_BN0_FIRST_L_WRITE( v, wv )                 FIELD_SET( v, 0, 16, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_VIQ_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 7, 7, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_VIQ_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 7, 7, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_VIQ_READ(r, p)                             FIELD_MREAD_16((uint8_t *)(p) + 12, 7, 7, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_VIQ_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)(p) + 12, 7, 7, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_VIQ_L_READ( wv )                           FIELD_GET( wv, 23, 7 )
#define RDD_PROCESSING_TX_DESCRIPTOR_VIQ_L_WRITE( v, wv )                       FIELD_SET( v, 23, 7, wv )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_0_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 0, 29, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_0_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_TX_DESCRIPTOR_STRUCT) + 12, 0, 29, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_0_READ(r, p)                           FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 29, (r))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_0_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 29, (v))
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_0_L_READ( wv )                         FIELD_GET( wv, 0, 29 )
#define RDD_PROCESSING_TX_DESCRIPTOR_ABS_0_L_WRITE( v, wv )                     FIELD_SET( v, 0, 29, wv )
/* <<<PROCESSING_TX_DESCRIPTOR_STRUCT */


#define RDD_SPDSVC_ANALYZER_PD_FIFO_TABLE_SIZE     4
typedef struct
{
	PROCESSING_TX_DESCRIPTOR_STRUCT	entry[ RDD_SPDSVC_ANALYZER_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_ANALYZER_PD_FIFO_TABLE_STRUCT;

extern uint32_t RDD_SPDSVC_ANALYZER_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_ANALYZER_PD_FIFO_TABLE_PTR(core_id)	( SPDSVC_ANALYZER_PD_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_ANALYZER_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_ANALYZER_PD_FIFO_TABLE */


/* >>>VLAN_ACTION_GPE_HANDLER_PTR_TABLE */

/* >>>BYTES_2_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	bits      	;
#else
        uint16_t	bits      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) BYTES_2_STRUCT;

#define RDD_BYTES_2_BITS_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(BYTES_2_STRUCT), (r))
#define RDD_BYTES_2_BITS_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(BYTES_2_STRUCT), (v))
#define RDD_BYTES_2_BITS_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_BYTES_2_BITS_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
/* <<<BYTES_2_STRUCT */


#define RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_SIZE     17
typedef struct
{
	BYTES_2_STRUCT	entry[ RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ VLAN_ACTION_GPE_HANDLER_PTR_TABLE_STRUCT;

extern uint32_t RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_PTR(core_id)	( VLAN_ACTION_GPE_HANDLER_PTR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VLAN_ACTION_GPE_HANDLER_PTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<VLAN_ACTION_GPE_HANDLER_PTR_TABLE */


/* >>>CODEL_NUM_QUEUES */

#define RDD_CODEL_NUM_QUEUES_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CODEL_NUM_QUEUES_STRUCT;

extern uint32_t RDD_CODEL_NUM_QUEUES_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CODEL_NUM_QUEUES_PTR(core_id)	( CODEL_NUM_QUEUES_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CODEL_NUM_QUEUES_ADDRESS_ARR[core_id] ))

/* <<<CODEL_NUM_QUEUES */


/* >>>MUTEX_TABLE */

#define RDD_MUTEX_TABLE_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ MUTEX_TABLE_STRUCT;

extern uint32_t RDD_MUTEX_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_MUTEX_TABLE_PTR(core_id)	( MUTEX_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_MUTEX_TABLE_ADDRESS_ARR[core_id] ))

/* <<<MUTEX_TABLE */


/* >>>SYSTEM_CONFIGURATION */

/* >>>SYSTEM_CONFIGURATION_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	ds_drop_precedence_eligibility_vector	;
        uint16_t	us_drop_precedence_eligibility_vector	;
        uint32_t	full_flow_cache_mode                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_flow_cache_mode                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	iptv_lookup_miss_action              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vlan_stats_enable                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	g9991_skip_parser_error              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dp_eligibility_vector_used           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_packet_based_mapping_ds_or_us	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcp_pure_ack_flows                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	us_drop_precedence_eligibility_vector	;
        uint16_t	ds_drop_precedence_eligibility_vector	;
        uint32_t	tcp_pure_ack_flows                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_packet_based_mapping_ds_or_us	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dp_eligibility_vector_used           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	g9991_skip_parser_error              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vlan_stats_enable                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	iptv_lookup_miss_action              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_flow_cache_mode                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	full_flow_cache_mode                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} SYSTEM_CONFIGURATION_ENTRY_STRUCT;

#define RDD_SYSTEM_CONFIGURATION_ENTRY_DS_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT), (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_DS_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT), (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_DS_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_DS_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_US_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 2, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_US_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 2, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_US_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_US_DROP_PRECEDENCE_ELIGIBILITY_VECTOR_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_FULL_FLOW_CACHE_MODE_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 7, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_FULL_FLOW_CACHE_MODE_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 7, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_FULL_FLOW_CACHE_MODE_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 4, 7, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_FULL_FLOW_CACHE_MODE_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 4, 7, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_L2_FLOW_CACHE_MODE_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 6, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_L2_FLOW_CACHE_MODE_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 6, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_L2_FLOW_CACHE_MODE_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 4, 6, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_L2_FLOW_CACHE_MODE_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 4, 6, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_IPTV_LOOKUP_MISS_ACTION_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 5, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_IPTV_LOOKUP_MISS_ACTION_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 5, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_IPTV_LOOKUP_MISS_ACTION_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 4, 5, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_IPTV_LOOKUP_MISS_ACTION_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 4, 5, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_VLAN_STATS_ENABLE_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 4, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_VLAN_STATS_ENABLE_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 4, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_VLAN_STATS_ENABLE_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p) + 4, 4, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_VLAN_STATS_ENABLE_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p) + 4, 4, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_G9991_SKIP_PARSER_ERROR_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 3, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_G9991_SKIP_PARSER_ERROR_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 3, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_G9991_SKIP_PARSER_ERROR_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 4, 3, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_G9991_SKIP_PARSER_ERROR_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 4, 3, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_DP_ELIGIBILITY_VECTOR_USED_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 2, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_DP_ELIGIBILITY_VECTOR_USED_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 2, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_DP_ELIGIBILITY_VECTOR_USED_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 4, 2, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_DP_ELIGIBILITY_VECTOR_USED_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 4, 2, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_INGRESS_PACKET_BASED_MAPPING_DS_OR_US_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 1, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_INGRESS_PACKET_BASED_MAPPING_DS_OR_US_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 1, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_INGRESS_PACKET_BASED_MAPPING_DS_OR_US_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 4, 1, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_INGRESS_PACKET_BASED_MAPPING_DS_OR_US_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 4, 1, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_TCP_PURE_ACK_FLOWS_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 0, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_TCP_PURE_ACK_FLOWS_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SYSTEM_CONFIGURATION_ENTRY_STRUCT) + 4, 0, 1, (v))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_TCP_PURE_ACK_FLOWS_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 4, 0, 1, (r))
#define RDD_SYSTEM_CONFIGURATION_ENTRY_TCP_PURE_ACK_FLOWS_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 4, 0, 1, (v))
/* <<<SYSTEM_CONFIGURATION_ENTRY_STRUCT */


#define RDD_SYSTEM_CONFIGURATION_SIZE     1
typedef struct
{
	SYSTEM_CONFIGURATION_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SYSTEM_CONFIGURATION_STRUCT;

extern uint32_t RDD_SYSTEM_CONFIGURATION_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SYSTEM_CONFIGURATION_PTR(core_id)	( SYSTEM_CONFIGURATION_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SYSTEM_CONFIGURATION_ADDRESS_ARR[core_id] ))

/* <<<SYSTEM_CONFIGURATION */


/* >>>SPDTEST_NUM_OF_UDP_RX_FLOWS */

#define RDD_SPDTEST_NUM_OF_UDP_RX_FLOWS_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDTEST_NUM_OF_UDP_RX_FLOWS_STRUCT;

extern uint32_t RDD_SPDTEST_NUM_OF_UDP_RX_FLOWS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDTEST_NUM_OF_UDP_RX_FLOWS_PTR(core_id)	( SPDTEST_NUM_OF_UDP_RX_FLOWS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDTEST_NUM_OF_UDP_RX_FLOWS_ADDRESS_ARR[core_id] ))

/* <<<SPDTEST_NUM_OF_UDP_RX_FLOWS */


/* >>>MCAST_MAX_REPLICATION_FLAG_TABLE */

#define RDD_MCAST_MAX_REPLICATION_FLAG_TABLE_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ MCAST_MAX_REPLICATION_FLAG_TABLE_STRUCT;

extern uint32_t RDD_MCAST_MAX_REPLICATION_FLAG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_MCAST_MAX_REPLICATION_FLAG_TABLE_PTR(core_id)	( MCAST_MAX_REPLICATION_FLAG_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_MCAST_MAX_REPLICATION_FLAG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<MCAST_MAX_REPLICATION_FLAG_TABLE */


/* >>>BRIDGE_CFG_TABLE */

/* >>>BRIDGE_CFG_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	hit                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bridge_fw_failed        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vlan_aggregation        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bridge_results_available	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	res_offset              	;
        uint16_t	context_offset          	;
        uint16_t	reserved                	;
#else
        uint16_t	res_offset              	;
        uint32_t	bridge_results_available	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vlan_aggregation        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bridge_fw_failed        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hit                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved                	;
        uint16_t	context_offset          	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BRIDGE_CFG_STRUCT;

#define RDD_BRIDGE_CFG_HIT_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_CFG_STRUCT), 7, 1, (r))
#define RDD_BRIDGE_CFG_HIT_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_CFG_STRUCT), 7, 1, (v))
#define RDD_BRIDGE_CFG_HIT_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_BRIDGE_CFG_HIT_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_BRIDGE_CFG_BRIDGE_FW_FAILED_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_CFG_STRUCT), 6, 1, (r))
#define RDD_BRIDGE_CFG_BRIDGE_FW_FAILED_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_CFG_STRUCT), 6, 1, (v))
#define RDD_BRIDGE_CFG_BRIDGE_FW_FAILED_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_BRIDGE_CFG_BRIDGE_FW_FAILED_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_BRIDGE_CFG_VLAN_AGGREGATION_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_CFG_STRUCT), 5, 1, (r))
#define RDD_BRIDGE_CFG_VLAN_AGGREGATION_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_CFG_STRUCT), 5, 1, (v))
#define RDD_BRIDGE_CFG_VLAN_AGGREGATION_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_BRIDGE_CFG_VLAN_AGGREGATION_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_BRIDGE_CFG_BRIDGE_RESULTS_AVAILABLE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_CFG_STRUCT) + 1, 0, 1, (r))
#define RDD_BRIDGE_CFG_BRIDGE_RESULTS_AVAILABLE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_CFG_STRUCT) + 1, 0, 1, (v))
#define RDD_BRIDGE_CFG_BRIDGE_RESULTS_AVAILABLE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 1, (r))
#define RDD_BRIDGE_CFG_BRIDGE_RESULTS_AVAILABLE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 1, (v))
#define RDD_BRIDGE_CFG_RES_OFFSET_READ_G(r, g, idx)                        GROUP_MREAD_16((g), (idx)*sizeof(BRIDGE_CFG_STRUCT) + 2, (r))
#define RDD_BRIDGE_CFG_RES_OFFSET_WRITE_G(v, g, idx)                       GROUP_MWRITE_16((g), (idx)*sizeof(BRIDGE_CFG_STRUCT) + 2, (v))
#define RDD_BRIDGE_CFG_RES_OFFSET_READ(r, p)                               MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_BRIDGE_CFG_RES_OFFSET_WRITE(v, p)                              MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_BRIDGE_CFG_CONTEXT_OFFSET_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(BRIDGE_CFG_STRUCT) + 4, (r))
#define RDD_BRIDGE_CFG_CONTEXT_OFFSET_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(BRIDGE_CFG_STRUCT) + 4, (v))
#define RDD_BRIDGE_CFG_CONTEXT_OFFSET_READ(r, p)                           MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_BRIDGE_CFG_CONTEXT_OFFSET_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 4, (v))
/* <<<BRIDGE_CFG_STRUCT */


#define RDD_BRIDGE_CFG_TABLE_SIZE     2
typedef struct
{
	BRIDGE_CFG_STRUCT	entry[ RDD_BRIDGE_CFG_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BRIDGE_CFG_TABLE_STRUCT;

extern uint32_t RDD_BRIDGE_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BRIDGE_CFG_TABLE_PTR(core_id)	( BRIDGE_CFG_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BRIDGE_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BRIDGE_CFG_TABLE */


/* >>>PROCESSING6_STACK */

#define RDD_PROCESSING6_STACK_SIZE     320
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_PROCESSING6_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PROCESSING6_STACK_STRUCT;

extern uint32_t RDD_PROCESSING6_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING6_STACK_PTR(core_id)	( PROCESSING6_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING6_STACK_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING6_STACK */


/* >>>REGISTERS_BUFFER */

#define RDD_REGISTERS_BUFFER_SIZE     32
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_REGISTERS_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ REGISTERS_BUFFER_STRUCT;

extern uint32_t RDD_REGISTERS_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REGISTERS_BUFFER_PTR(core_id)	( REGISTERS_BUFFER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REGISTERS_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<REGISTERS_BUFFER */


/* >>>SPDSVC_ANALYZER_UPDATE_FIFO_TABLE */

/* >>>UPDATE_FIFO_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	valid            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pd_fifo_write_ptr	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	queue_number     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	queue_number     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0        	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pd_fifo_write_ptr	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) UPDATE_FIFO_ENTRY_STRUCT;

#define RDD_UPDATE_FIFO_ENTRY_VALID_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(UPDATE_FIFO_ENTRY_STRUCT), 7, 1, (r))
#define RDD_UPDATE_FIFO_ENTRY_VALID_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(UPDATE_FIFO_ENTRY_STRUCT), 7, 1, (v))
#define RDD_UPDATE_FIFO_ENTRY_VALID_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_UPDATE_FIFO_ENTRY_VALID_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_UPDATE_FIFO_ENTRY_PD_FIFO_WRITE_PTR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(UPDATE_FIFO_ENTRY_STRUCT), 0, 14, (r))
#define RDD_UPDATE_FIFO_ENTRY_PD_FIFO_WRITE_PTR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(UPDATE_FIFO_ENTRY_STRUCT), 0, 14, (v))
#define RDD_UPDATE_FIFO_ENTRY_PD_FIFO_WRITE_PTR_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p), 0, 14, (r))
#define RDD_UPDATE_FIFO_ENTRY_PD_FIFO_WRITE_PTR_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p), 0, 14, (v))
#define RDD_UPDATE_FIFO_ENTRY_QUEUE_NUMBER_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(UPDATE_FIFO_ENTRY_STRUCT) + 2, 0, 9, (r))
#define RDD_UPDATE_FIFO_ENTRY_QUEUE_NUMBER_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(UPDATE_FIFO_ENTRY_STRUCT) + 2, 0, 9, (v))
#define RDD_UPDATE_FIFO_ENTRY_QUEUE_NUMBER_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 9, (r))
#define RDD_UPDATE_FIFO_ENTRY_QUEUE_NUMBER_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 9, (v))
/* <<<UPDATE_FIFO_ENTRY_STRUCT */


#define RDD_SPDSVC_ANALYZER_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	UPDATE_FIFO_ENTRY_STRUCT	entry[ RDD_SPDSVC_ANALYZER_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_ANALYZER_UPDATE_FIFO_TABLE_STRUCT;

extern uint32_t RDD_SPDSVC_ANALYZER_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_ANALYZER_UPDATE_FIFO_TABLE_PTR(core_id)	( SPDSVC_ANALYZER_UPDATE_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_ANALYZER_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_ANALYZER_UPDATE_FIFO_TABLE */


/* >>>CODEL_ENABLE_TABLE */

#define RDD_CODEL_ENABLE_TABLE_SIZE     5
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_CODEL_ENABLE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CODEL_ENABLE_TABLE_STRUCT;

extern uint32_t RDD_CODEL_ENABLE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CODEL_ENABLE_TABLE_PTR(core_id)	( CODEL_ENABLE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CODEL_ENABLE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CODEL_ENABLE_TABLE */


/* >>>TASK_IDX */

#define RDD_TASK_IDX_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ TASK_IDX_STRUCT;

extern uint32_t RDD_TASK_IDX_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TASK_IDX_PTR(core_id)	( TASK_IDX_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TASK_IDX_ADDRESS_ARR[core_id] ))

/* <<<TASK_IDX */


/* >>>TUNNELS_PARSING_CFG */

/* >>>TUNNELS_PARSING_CFG_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	reserved0       	;
        uint8_t	tunneling_enable	;
        uint16_t	res_offset      	;
        uint32_t	reserved1       	;
#else
        uint16_t	res_offset      	;
        uint8_t	tunneling_enable	;
        uint8_t	reserved0       	;
        uint32_t	reserved1       	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) TUNNELS_PARSING_CFG_STRUCT;

#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(TUNNELS_PARSING_CFG_STRUCT) + 1, (r))
#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(TUNNELS_PARSING_CFG_STRUCT) + 1, (v))
#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_L_READ( wv )               FIELD_GET( wv, 16, 8 )
#define RDD_TUNNELS_PARSING_CFG_TUNNELING_ENABLE_L_WRITE( v, wv )           FIELD_SET( v, 16, 8, wv )
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(TUNNELS_PARSING_CFG_STRUCT) + 2, (r))
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(TUNNELS_PARSING_CFG_STRUCT) + 2, (v))
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_READ(r, p)                       MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_L_READ( wv )                     FIELD_GET( wv, 0, 16 )
#define RDD_TUNNELS_PARSING_CFG_RES_OFFSET_L_WRITE( v, wv )                 FIELD_SET( v, 0, 16, wv )
/* <<<TUNNELS_PARSING_CFG_STRUCT */


#define RDD_TUNNELS_PARSING_CFG_SIZE     1
typedef struct
{
	TUNNELS_PARSING_CFG_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ TUNNELS_PARSING_CFG_TABLE_STRUCT;

extern uint32_t RDD_TUNNELS_PARSING_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TUNNELS_PARSING_CFG_PTR(core_id)	( TUNNELS_PARSING_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TUNNELS_PARSING_CFG_ADDRESS_ARR[core_id] ))

/* <<<TUNNELS_PARSING_CFG */


/* >>>PROCESSING7_STACK */

#define RDD_PROCESSING7_STACK_SIZE     320
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_PROCESSING7_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PROCESSING7_STACK_STRUCT;

extern uint32_t RDD_PROCESSING7_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING7_STACK_PTR(core_id)	( PROCESSING7_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING7_STACK_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING7_STACK */


/* >>>DHD_FPM_REPLY */

#define RDD_DHD_FPM_REPLY_SIZE     24
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_FPM_REPLY_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_FPM_REPLY_STRUCT;

extern uint32_t RDD_DHD_FPM_REPLY_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_FPM_REPLY_PTR(core_id)	( DHD_FPM_REPLY_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_FPM_REPLY_ADDRESS_ARR[core_id] ))

/* <<<DHD_FPM_REPLY */


/* >>>IPTV_CFG_TABLE */

/* >>>IPTV_CFG_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	res_offset    	;
        uint16_t	context_offset	;
        uint16_t	key_offset    	;
        uint8_t	hash_tbl_idx  	;
        uint8_t	l2_mcast      	;
#else
        uint16_t	context_offset	;
        uint16_t	res_offset    	;
        uint8_t	l2_mcast      	;
        uint8_t	hash_tbl_idx  	;
        uint16_t	key_offset    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) IPTV_CFG_STRUCT;

#define RDD_IPTV_CFG_RES_OFFSET_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(IPTV_CFG_STRUCT), (r))
#define RDD_IPTV_CFG_RES_OFFSET_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(IPTV_CFG_STRUCT), (v))
#define RDD_IPTV_CFG_RES_OFFSET_READ(r, p)                     MREAD_16((uint8_t *)(p), (r))
#define RDD_IPTV_CFG_RES_OFFSET_WRITE(v, p)                    MWRITE_16((uint8_t *)(p), (v))
#define RDD_IPTV_CFG_CONTEXT_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(IPTV_CFG_STRUCT) + 2, (r))
#define RDD_IPTV_CFG_CONTEXT_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(IPTV_CFG_STRUCT) + 2, (v))
#define RDD_IPTV_CFG_CONTEXT_OFFSET_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_IPTV_CFG_CONTEXT_OFFSET_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_IPTV_CFG_KEY_OFFSET_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(IPTV_CFG_STRUCT) + 4, (r))
#define RDD_IPTV_CFG_KEY_OFFSET_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(IPTV_CFG_STRUCT) + 4, (v))
#define RDD_IPTV_CFG_KEY_OFFSET_READ(r, p)                     MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_IPTV_CFG_KEY_OFFSET_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_IPTV_CFG_HASH_TBL_IDX_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(IPTV_CFG_STRUCT) + 6, (r))
#define RDD_IPTV_CFG_HASH_TBL_IDX_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(IPTV_CFG_STRUCT) + 6, (v))
#define RDD_IPTV_CFG_HASH_TBL_IDX_READ(r, p)                   MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_IPTV_CFG_HASH_TBL_IDX_WRITE(v, p)                  MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_IPTV_CFG_L2_MCAST_READ_G(r, g, idx)                GROUP_MREAD_8((g), (idx)*sizeof(IPTV_CFG_STRUCT) + 7, (r))
#define RDD_IPTV_CFG_L2_MCAST_WRITE_G(v, g, idx)               GROUP_MWRITE_8((g), (idx)*sizeof(IPTV_CFG_STRUCT) + 7, (v))
#define RDD_IPTV_CFG_L2_MCAST_READ(r, p)                       MREAD_8((uint8_t *)(p) + 7, (r))
#define RDD_IPTV_CFG_L2_MCAST_WRITE(v, p)                      MWRITE_8((uint8_t *)(p) + 7, (v))
/* <<<IPTV_CFG_STRUCT */


#define RDD_IPTV_CFG_TABLE_SIZE     1
typedef struct
{
	IPTV_CFG_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ IPTV_CFG_TABLE_STRUCT;

extern uint32_t RDD_IPTV_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPTV_CFG_TABLE_PTR(core_id)	( IPTV_CFG_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPTV_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<IPTV_CFG_TABLE */


/* >>>INGRESS_FILTER_L2_REASON_TABLE */

#define RDD_INGRESS_FILTER_L2_REASON_TABLE_SIZE     16
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_INGRESS_FILTER_L2_REASON_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ INGRESS_FILTER_L2_REASON_TABLE_STRUCT;

extern uint32_t RDD_INGRESS_FILTER_L2_REASON_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_INGRESS_FILTER_L2_REASON_TABLE_PTR(core_id)	( INGRESS_FILTER_L2_REASON_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_INGRESS_FILTER_L2_REASON_TABLE_ADDRESS_ARR[core_id] ))

/* <<<INGRESS_FILTER_L2_REASON_TABLE */


/* >>>SPDSVC_ANALYZER_DISPATCHER_CREDIT_TABLE */

#define RDD_SPDSVC_ANALYZER_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_SPDSVC_ANALYZER_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_ANALYZER_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_SPDSVC_ANALYZER_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_ANALYZER_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( SPDSVC_ANALYZER_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_ANALYZER_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_ANALYZER_DISPATCHER_CREDIT_TABLE */


/* >>>ENABLE_VPORT_MASK */

#define RDD_ENABLE_VPORT_MASK_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ ENABLE_VPORT_MASK_STRUCT;

extern uint32_t RDD_ENABLE_VPORT_MASK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_ENABLE_VPORT_MASK_PTR(core_id)	( ENABLE_VPORT_MASK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_ENABLE_VPORT_MASK_ADDRESS_ARR[core_id] ))

/* <<<ENABLE_VPORT_MASK */


/* >>>DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE */

/* >>>CPU_RING_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	size_of_entry    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	number_of_entries	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	interrupt_id     	;
        uint16_t	drop_counter     	;
        uint16_t	write_idx        	;
        uint32_t	base_addr_low    	;
        uint16_t	read_idx         	;
        uint8_t	reserved0        	;
        uint8_t	base_addr_high   	;
#else
        uint16_t	interrupt_id     	;
        uint32_t	number_of_entries	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	size_of_entry    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	write_idx        	;
        uint16_t	drop_counter     	;
        uint32_t	base_addr_low    	;
        uint8_t	base_addr_high   	;
        uint8_t	reserved0        	;
        uint16_t	read_idx         	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CPU_RING_DESCRIPTOR_STRUCT;

#define RDD_CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT), 3, 5, (r))
#define RDD_CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT), 3, 5, (v))
#define RDD_CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 3, 5, (r))
#define RDD_CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 3, 5, (v))
#define RDD_CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT), 0, 11, (r))
#define RDD_CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT), 0, 11, (v))
#define RDD_CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p), 0, 11, (r))
#define RDD_CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p), 0, 11, (v))
#define RDD_CPU_RING_DESCRIPTOR_INTERRUPT_ID_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 2, (r))
#define RDD_CPU_RING_DESCRIPTOR_INTERRUPT_ID_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 2, (v))
#define RDD_CPU_RING_DESCRIPTOR_INTERRUPT_ID_READ(r, p)                      MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_CPU_RING_DESCRIPTOR_INTERRUPT_ID_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_CPU_RING_DESCRIPTOR_DROP_COUNTER_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_CPU_RING_DESCRIPTOR_DROP_COUNTER_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_CPU_RING_DESCRIPTOR_DROP_COUNTER_READ(r, p)                      MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_CPU_RING_DESCRIPTOR_DROP_COUNTER_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_CPU_RING_DESCRIPTOR_WRITE_IDX_READ_G(r, g, idx)                  GROUP_MREAD_16((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 6, (r))
#define RDD_CPU_RING_DESCRIPTOR_WRITE_IDX_WRITE_G(v, g, idx)                 GROUP_MWRITE_16((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 6, (v))
#define RDD_CPU_RING_DESCRIPTOR_WRITE_IDX_READ(r, p)                         MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_CPU_RING_DESCRIPTOR_WRITE_IDX_WRITE(v, p)                        MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 8, (r))
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 8, (v))
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_READ(r, p)                     MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_CPU_RING_DESCRIPTOR_READ_IDX_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_CPU_RING_DESCRIPTOR_READ_IDX_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_CPU_RING_DESCRIPTOR_READ_IDX_READ(r, p)                          MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_CPU_RING_DESCRIPTOR_READ_IDX_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_READ_G(r, g, idx)             GROUP_MREAD_8((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 15, (r))
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_WRITE_G(v, g, idx)            GROUP_MWRITE_8((g), (idx)*sizeof(CPU_RING_DESCRIPTOR_STRUCT) + 15, (v))
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_READ(r, p)                    MREAD_8((uint8_t *)(p) + 15, (r))
#define RDD_CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_WRITE(v, p)                   MWRITE_8((uint8_t *)(p) + 15, (v))
/* <<<CPU_RING_DESCRIPTOR_STRUCT */


#define RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_SIZE     3
typedef struct
{
	CPU_RING_DESCRIPTOR_STRUCT	entry[ RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_STRUCT;

extern uint32_t RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_PTR(core_id)	( DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE */


/* >>>IPTV_CONFIGURATION_TABLE */

/* >>>HW_IPTV_CONFIGURATION_STRUCT */
typedef union
{
    uint32_t word_32[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	fpm_base_token_size 	;
        uint32_t	reserved0           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hn_size1            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hn_size0            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ddr_sop_offset0     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ddr_sop_offset1     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fpm_pool1_stat2_addr	;
#else
        uint32_t	hn_size0            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hn_size1            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	fpm_base_token_size 	;
        uint32_t	ddr_sop_offset1     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ddr_sop_offset0     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fpm_pool1_stat2_addr	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) HW_IPTV_CONFIGURATION_STRUCT;

#define RDD_HW_IPTV_CONFIGURATION_FPM_BASE_TOKEN_SIZE_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT), (r))
#define RDD_HW_IPTV_CONFIGURATION_FPM_BASE_TOKEN_SIZE_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT), (v))
#define RDD_HW_IPTV_CONFIGURATION_FPM_BASE_TOKEN_SIZE_READ(r, p)                  MREAD_16((uint8_t *)(p), (r))
#define RDD_HW_IPTV_CONFIGURATION_FPM_BASE_TOKEN_SIZE_WRITE(v, p)                 MWRITE_16((uint8_t *)(p), (v))
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE1_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT) + 2, 0, 7, (r))
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE1_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT) + 2, 0, 7, (v))
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE1_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 7, (r))
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE1_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 7, (v))
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE0_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT) + 3, 0, 7, (r))
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE0_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT) + 3, 0, 7, (v))
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE0_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 7, (r))
#define RDD_HW_IPTV_CONFIGURATION_HN_SIZE0_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 7, (v))
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET0_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT) + 4, 0, 11, (r))
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET0_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT) + 4, 0, 11, (v))
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET0_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 4, 0, 11, (r))
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET0_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 4, 0, 11, (v))
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET1_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT) + 6, 0, 11, (r))
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET1_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT) + 6, 0, 11, (v))
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET1_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 11, (r))
#define RDD_HW_IPTV_CONFIGURATION_DDR_SOP_OFFSET1_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 11, (v))
#define RDD_HW_IPTV_CONFIGURATION_FPM_POOL1_STAT2_ADDR_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT) + 8, (r))
#define RDD_HW_IPTV_CONFIGURATION_FPM_POOL1_STAT2_ADDR_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(HW_IPTV_CONFIGURATION_STRUCT) + 8, (v))
#define RDD_HW_IPTV_CONFIGURATION_FPM_POOL1_STAT2_ADDR_READ(r, p)                 MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_HW_IPTV_CONFIGURATION_FPM_POOL1_STAT2_ADDR_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 8, (v))
/* <<<HW_IPTV_CONFIGURATION_STRUCT */


#define RDD_IPTV_CONFIGURATION_TABLE_SIZE     1
typedef struct
{
	HW_IPTV_CONFIGURATION_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ IPTV_CONFIGURATION_TABLE_STRUCT;

extern uint32_t RDD_IPTV_CONFIGURATION_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPTV_CONFIGURATION_TABLE_PTR(core_id)	( IPTV_CONFIGURATION_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPTV_CONFIGURATION_TABLE_ADDRESS_ARR[core_id] ))

/* <<<IPTV_CONFIGURATION_TABLE */


/* >>>LOOPBACK_WAN_FLOW_TABLE */

#define RDD_LOOPBACK_WAN_FLOW_TABLE_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ LOOPBACK_WAN_FLOW_TABLE_STRUCT;

extern uint32_t RDD_LOOPBACK_WAN_FLOW_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_LOOPBACK_WAN_FLOW_TABLE_PTR(core_id)	( LOOPBACK_WAN_FLOW_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_LOOPBACK_WAN_FLOW_TABLE_ADDRESS_ARR[core_id] ))

/* <<<LOOPBACK_WAN_FLOW_TABLE */


/* >>>FORCE_DSCP */

#define RDD_FORCE_DSCP_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ FORCE_DSCP_STRUCT;

extern uint32_t RDD_FORCE_DSCP_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_FORCE_DSCP_PTR(core_id)	( FORCE_DSCP_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_FORCE_DSCP_ADDRESS_ARR[core_id] ))

/* <<<FORCE_DSCP */


/* >>>CORE_ID_TABLE */

#define RDD_CORE_ID_TABLE_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CORE_ID_TABLE_STRUCT;

extern uint32_t RDD_CORE_ID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CORE_ID_TABLE_PTR(core_id)	( CORE_ID_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CORE_ID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CORE_ID_TABLE */


/* >>>CPU_REDIRECT_MODE */

/* >>>CPU_REDIRECT_MODE_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	mode      	;
#else
        uint8_t	mode      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} CPU_REDIRECT_MODE_ENTRY_STRUCT;

#define RDD_CPU_REDIRECT_MODE_ENTRY_MODE_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(CPU_REDIRECT_MODE_ENTRY_STRUCT), (r))
#define RDD_CPU_REDIRECT_MODE_ENTRY_MODE_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(CPU_REDIRECT_MODE_ENTRY_STRUCT), (v))
#define RDD_CPU_REDIRECT_MODE_ENTRY_MODE_READ(r, p)                 MREAD_8((uint8_t *)(p), (r))
#define RDD_CPU_REDIRECT_MODE_ENTRY_MODE_WRITE(v, p)                MWRITE_8((uint8_t *)(p), (v))
/* <<<CPU_REDIRECT_MODE_ENTRY_STRUCT */


#define RDD_CPU_REDIRECT_MODE_SIZE     1
typedef struct
{
	CPU_REDIRECT_MODE_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_REDIRECT_MODE_STRUCT;

extern uint32_t RDD_CPU_REDIRECT_MODE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_REDIRECT_MODE_PTR(core_id)	( CPU_REDIRECT_MODE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_REDIRECT_MODE_ADDRESS_ARR[core_id] ))

/* <<<CPU_REDIRECT_MODE */


/* >>>BITS_CALC_MASKS_TABLE */

#define RDD_BITS_CALC_MASKS_TABLE_SIZE     4
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_BITS_CALC_MASKS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BITS_CALC_MASKS_TABLE_STRUCT;

extern uint32_t RDD_BITS_CALC_MASKS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BITS_CALC_MASKS_TABLE_PTR(core_id)	( BITS_CALC_MASKS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BITS_CALC_MASKS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BITS_CALC_MASKS_TABLE */


/* >>>DHD_FPM_THRESHOLDS */

#define RDD_DHD_FPM_THRESHOLDS_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DHD_FPM_THRESHOLDS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_FPM_THRESHOLDS_STRUCT;

extern uint32_t RDD_DHD_FPM_THRESHOLDS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_FPM_THRESHOLDS_PTR(core_id)	( DHD_FPM_THRESHOLDS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_FPM_THRESHOLDS_ADDRESS_ARR[core_id] ))

/* <<<DHD_FPM_THRESHOLDS */


/* >>>DHD_RX_POST_RING_SIZE */

/* >>>DHD_RING_SIZE_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	value     	;
#else
        uint16_t	value     	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) DHD_RING_SIZE_STRUCT;

#define RDD_DHD_RING_SIZE_VALUE_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(DHD_RING_SIZE_STRUCT), (r))
#define RDD_DHD_RING_SIZE_VALUE_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(DHD_RING_SIZE_STRUCT), (v))
#define RDD_DHD_RING_SIZE_VALUE_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_DHD_RING_SIZE_VALUE_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
/* <<<DHD_RING_SIZE_STRUCT */


#define RDD_DHD_RX_POST_RING_SIZE_SIZE     1
typedef struct
{
	DHD_RING_SIZE_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_RX_POST_RING_SIZE_STRUCT;

extern uint32_t RDD_DHD_RX_POST_RING_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_POST_RING_SIZE_PTR(core_id)	( DHD_RX_POST_RING_SIZE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_POST_RING_SIZE_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_POST_RING_SIZE */


/* >>>DHD_RX_COMPLETE_RING_SIZE */

#define RDD_DHD_RX_COMPLETE_RING_SIZE_SIZE     1
typedef struct
{
	DHD_RING_SIZE_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_RX_COMPLETE_RING_SIZE_STRUCT;

extern uint32_t RDD_DHD_RX_COMPLETE_RING_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_RX_COMPLETE_RING_SIZE_PTR(core_id)	( DHD_RX_COMPLETE_RING_SIZE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_RX_COMPLETE_RING_SIZE_ADDRESS_ARR[core_id] ))

/* <<<DHD_RX_COMPLETE_RING_SIZE */


/* >>>DHD_DOORBELL_TX_COMPLETE_VALUE */

/* >>>DHD_DOORBELL_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	doorbell_value	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	value                  	; /* Member of doorbell_value union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	dma_type               	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
        uint32_t	frg_id                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
        uint8_t	reg_index_num          	; /* Member of doorbell_value union */
        uint16_t	index_val              	; /* Member of doorbell_value union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	doorbell_value	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	value                  	; /* Member of doorbell_value union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	index_val              	; /* Member of doorbell_value union */
        uint8_t	reg_index_num          	; /* Member of doorbell_value union */
        uint32_t	frg_id                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
        uint32_t	dma_type               	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of doorbell_value union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) DHD_DOORBELL_STRUCT;

#define RDD_DHD_DOORBELL_DOORBELL_VALUE_READ_G(r, g, idx)         GROUP_MREAD_32((g), (idx)*sizeof(DHD_DOORBELL_STRUCT), (r))
#define RDD_DHD_DOORBELL_DOORBELL_VALUE_WRITE_G(v, g, idx)        GROUP_MWRITE_32((g), (idx)*sizeof(DHD_DOORBELL_STRUCT), (v))
#define RDD_DHD_DOORBELL_DOORBELL_VALUE_READ(r, p)                MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_DOORBELL_DOORBELL_VALUE_WRITE(v, p)               MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_DOORBELL_DOORBELL_VALUE_L_READ( wv )              FIELD_GET( wv, 0, 32 )
#define RDD_DHD_DOORBELL_DOORBELL_VALUE_L_WRITE( v, wv )          FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_DOORBELL_VALUE_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(DHD_DOORBELL_STRUCT), (r))
#define RDD_DHD_DOORBELL_VALUE_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(DHD_DOORBELL_STRUCT), (v))
#define RDD_DHD_DOORBELL_VALUE_READ(r, p)                         MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_DOORBELL_VALUE_WRITE(v, p)                        MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_DOORBELL_VALUE_L_READ( wv )                       FIELD_GET( wv, 0, 32 )
#define RDD_DHD_DOORBELL_VALUE_L_WRITE( v, wv )                   FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_DOORBELL_DMA_TYPE_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_DOORBELL_STRUCT), 4, 4, (r))
#define RDD_DHD_DOORBELL_DMA_TYPE_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_DOORBELL_STRUCT), 4, 4, (v))
#define RDD_DHD_DOORBELL_DMA_TYPE_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 4, 4, (r))
#define RDD_DHD_DOORBELL_DMA_TYPE_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 4, 4, (v))
#define RDD_DHD_DOORBELL_DMA_TYPE_L_READ( wv )                    FIELD_GET( wv, 28, 4 )
#define RDD_DHD_DOORBELL_DMA_TYPE_L_WRITE( v, wv )                FIELD_SET( v, 28, 4, wv )
#define RDD_DHD_DOORBELL_FRG_ID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_DOORBELL_STRUCT), 0, 4, (r))
#define RDD_DHD_DOORBELL_FRG_ID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_DOORBELL_STRUCT), 0, 4, (v))
#define RDD_DHD_DOORBELL_FRG_ID_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 0, 4, (r))
#define RDD_DHD_DOORBELL_FRG_ID_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 0, 4, (v))
#define RDD_DHD_DOORBELL_FRG_ID_L_READ( wv )                      FIELD_GET( wv, 24, 4 )
#define RDD_DHD_DOORBELL_FRG_ID_L_WRITE( v, wv )                  FIELD_SET( v, 24, 4, wv )
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(DHD_DOORBELL_STRUCT) + 1, (r))
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_DOORBELL_STRUCT) + 1, (v))
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_L_READ( wv )               FIELD_GET( wv, 16, 8 )
#define RDD_DHD_DOORBELL_REG_INDEX_NUM_L_WRITE( v, wv )           FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_DOORBELL_INDEX_VAL_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(DHD_DOORBELL_STRUCT) + 2, (r))
#define RDD_DHD_DOORBELL_INDEX_VAL_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(DHD_DOORBELL_STRUCT) + 2, (v))
#define RDD_DHD_DOORBELL_INDEX_VAL_READ(r, p)                     MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_DHD_DOORBELL_INDEX_VAL_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_DHD_DOORBELL_INDEX_VAL_L_READ( wv )                   FIELD_GET( wv, 0, 16 )
#define RDD_DHD_DOORBELL_INDEX_VAL_L_WRITE( v, wv )               FIELD_SET( v, 0, 16, wv )
/* <<<DHD_DOORBELL_STRUCT */


#define RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_SIZE     3
typedef struct
{
	DHD_DOORBELL_STRUCT	entry[ RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_DOORBELL_TX_COMPLETE_VALUE_STRUCT;

extern uint32_t RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_PTR(core_id)	( DHD_DOORBELL_TX_COMPLETE_VALUE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_DOORBELL_TX_COMPLETE_VALUE_ADDRESS_ARR[core_id] ))

/* <<<DHD_DOORBELL_TX_COMPLETE_VALUE */


/* >>>DHD_TX_COMPLETE_RING_SIZE */

#define RDD_DHD_TX_COMPLETE_RING_SIZE_SIZE     1
typedef struct
{
	DHD_RING_SIZE_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_COMPLETE_RING_SIZE_STRUCT;

extern uint32_t RDD_DHD_TX_COMPLETE_RING_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_COMPLETE_RING_SIZE_PTR(core_id)	( DHD_TX_COMPLETE_RING_SIZE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_COMPLETE_RING_SIZE_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_COMPLETE_RING_SIZE */


/* >>>RX_MIRRORING_CONFIGURATION */

/* >>>MIRRORING_DESCRIPTOR_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	mirror_en 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	dst_vport 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	dst_queue 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	dst_queue 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	dst_vport 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	mirror_en 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) MIRRORING_DESCRIPTOR_STRUCT;

#define RDD_MIRRORING_DESCRIPTOR_MIRROR_EN_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MIRRORING_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_MIRRORING_DESCRIPTOR_MIRROR_EN_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MIRRORING_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_MIRRORING_DESCRIPTOR_MIRROR_EN_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_MIRRORING_DESCRIPTOR_MIRROR_EN_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_MIRRORING_DESCRIPTOR_DST_VPORT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MIRRORING_DESCRIPTOR_STRUCT), 1, 6, (r))
#define RDD_MIRRORING_DESCRIPTOR_DST_VPORT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MIRRORING_DESCRIPTOR_STRUCT), 1, 6, (v))
#define RDD_MIRRORING_DESCRIPTOR_DST_VPORT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 1, 6, (r))
#define RDD_MIRRORING_DESCRIPTOR_DST_VPORT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 1, 6, (v))
#define RDD_MIRRORING_DESCRIPTOR_DST_QUEUE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(MIRRORING_DESCRIPTOR_STRUCT), 0, 9, (r))
#define RDD_MIRRORING_DESCRIPTOR_DST_QUEUE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(MIRRORING_DESCRIPTOR_STRUCT), 0, 9, (v))
#define RDD_MIRRORING_DESCRIPTOR_DST_QUEUE_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p), 0, 9, (r))
#define RDD_MIRRORING_DESCRIPTOR_DST_QUEUE_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p), 0, 9, (v))
/* <<<MIRRORING_DESCRIPTOR_STRUCT */


#define RDD_RX_MIRRORING_CONFIGURATION_SIZE     1
typedef struct
{
	MIRRORING_DESCRIPTOR_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RX_MIRRORING_CONFIGURATION_STRUCT;

extern uint32_t RDD_RX_MIRRORING_CONFIGURATION_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RX_MIRRORING_CONFIGURATION_PTR(core_id)	( RX_MIRRORING_CONFIGURATION_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RX_MIRRORING_CONFIGURATION_ADDRESS_ARR[core_id] ))

/* <<<RX_MIRRORING_CONFIGURATION */


/* >>>DHD_DOORBELL_RX_COMPLETE_VALUE */

#define RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_SIZE     3
typedef struct
{
	DHD_DOORBELL_STRUCT	entry[ RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_DOORBELL_RX_COMPLETE_VALUE_STRUCT;

extern uint32_t RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_PTR(core_id)	( DHD_DOORBELL_RX_COMPLETE_VALUE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_DOORBELL_RX_COMPLETE_VALUE_ADDRESS_ARR[core_id] ))

/* <<<DHD_DOORBELL_RX_COMPLETE_VALUE */


/* >>>DEBUG_PRINT_CORE_LOCK */

#define RDD_DEBUG_PRINT_CORE_LOCK_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DEBUG_PRINT_CORE_LOCK_STRUCT;

extern uint32_t RDD_DEBUG_PRINT_CORE_LOCK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DEBUG_PRINT_CORE_LOCK_PTR(core_id)	( DEBUG_PRINT_CORE_LOCK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DEBUG_PRINT_CORE_LOCK_ADDRESS_ARR[core_id] ))

/* <<<DEBUG_PRINT_CORE_LOCK */


/* >>>SRAM_DUMMY_STORE */

#define RDD_SRAM_DUMMY_STORE_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SRAM_DUMMY_STORE_STRUCT;

extern uint32_t RDD_SRAM_DUMMY_STORE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SRAM_DUMMY_STORE_PTR(core_id)	( SRAM_DUMMY_STORE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SRAM_DUMMY_STORE_ADDRESS_ARR[core_id] ))

/* <<<SRAM_DUMMY_STORE */


/* >>>RATE_LIMIT_OVERHEAD */

#define RDD_RATE_LIMIT_OVERHEAD_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RATE_LIMIT_OVERHEAD_STRUCT;

extern uint32_t RDD_RATE_LIMIT_OVERHEAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RATE_LIMIT_OVERHEAD_PTR(core_id)	( RATE_LIMIT_OVERHEAD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RATE_LIMIT_OVERHEAD_ADDRESS_ARR[core_id] ))

/* <<<RATE_LIMIT_OVERHEAD */


/* >>>IPTV_CLASSIFICATION_CFG_TABLE */

/* >>>IPTV_CLASSIFICATION_CFG_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	da_prefix_mode_mac	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	da_prefix_mode_ip 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	iptv_en           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved1         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	reserved1         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	iptv_en           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	da_prefix_mode_ip 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	da_prefix_mode_mac	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} IPTV_CLASSIFICATION_CFG_ENTRY_STRUCT;

#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_CLASSIFICATION_CFG_ENTRY_STRUCT), 7, 1, (r))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_CLASSIFICATION_CFG_ENTRY_STRUCT), 7, 1, (v))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_CLASSIFICATION_CFG_ENTRY_STRUCT), 6, 1, (r))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_CLASSIFICATION_CFG_ENTRY_STRUCT), 6, 1, (v))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_CLASSIFICATION_CFG_ENTRY_STRUCT), 5, 1, (r))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_CLASSIFICATION_CFG_ENTRY_STRUCT), 5, 1, (v))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
/* <<<IPTV_CLASSIFICATION_CFG_ENTRY_STRUCT */


#define RDD_IPTV_CLASSIFICATION_CFG_TABLE_SIZE     1
typedef struct
{
	IPTV_CLASSIFICATION_CFG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ IPTV_CLASSIFICATION_CFG_TABLE_STRUCT;

extern uint32_t RDD_IPTV_CLASSIFICATION_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPTV_CLASSIFICATION_CFG_TABLE_PTR(core_id)	( IPTV_CLASSIFICATION_CFG_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPTV_CLASSIFICATION_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<IPTV_CLASSIFICATION_CFG_TABLE */


/* >>>TX_FLOW_TABLE */

/* >>>TX_FLOW_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	qos_table_ptr	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	qos_table_ptr	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} TX_FLOW_ENTRY_STRUCT;

#define RDD_TX_FLOW_ENTRY_VALID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TX_FLOW_ENTRY_STRUCT), 7, 1, (r))
#define RDD_TX_FLOW_ENTRY_VALID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TX_FLOW_ENTRY_STRUCT), 7, 1, (v))
#define RDD_TX_FLOW_ENTRY_VALID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_TX_FLOW_ENTRY_VALID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_TX_FLOW_ENTRY_QOS_TABLE_PTR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TX_FLOW_ENTRY_STRUCT), 0, 5, (r))
#define RDD_TX_FLOW_ENTRY_QOS_TABLE_PTR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TX_FLOW_ENTRY_STRUCT), 0, 5, (v))
#define RDD_TX_FLOW_ENTRY_QOS_TABLE_PTR_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 0, 5, (r))
#define RDD_TX_FLOW_ENTRY_QOS_TABLE_PTR_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 0, 5, (v))
/* <<<TX_FLOW_ENTRY_STRUCT */


#define RDD_TX_FLOW_TABLE_SIZE     212
typedef struct
{
	TX_FLOW_ENTRY_STRUCT	entry[ RDD_TX_FLOW_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TX_FLOW_TABLE_STRUCT;

extern uint32_t RDD_TX_FLOW_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TX_FLOW_TABLE_PTR(core_id)	( TX_FLOW_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TX_FLOW_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TX_FLOW_TABLE */


/* >>>INGRESS_FILTER_1588_CFG */

#define RDD_INGRESS_FILTER_1588_CFG_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ INGRESS_FILTER_1588_CFG_STRUCT;

extern uint32_t RDD_INGRESS_FILTER_1588_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_INGRESS_FILTER_1588_CFG_PTR(core_id)	( INGRESS_FILTER_1588_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_INGRESS_FILTER_1588_CFG_ADDRESS_ARR[core_id] ))

/* <<<INGRESS_FILTER_1588_CFG */


/* >>>RX_MIRRORING_DIRECT_ENABLE */

#define RDD_RX_MIRRORING_DIRECT_ENABLE_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ RX_MIRRORING_DIRECT_ENABLE_STRUCT;

extern uint32_t RDD_RX_MIRRORING_DIRECT_ENABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RX_MIRRORING_DIRECT_ENABLE_PTR(core_id)	( RX_MIRRORING_DIRECT_ENABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RX_MIRRORING_DIRECT_ENABLE_ADDRESS_ARR[core_id] ))

/* <<<RX_MIRRORING_DIRECT_ENABLE */


/* >>>IPTV_DDR_CTX_TABLE_ADDRESS */

/* >>>IPTV_DDR_CTX_TABLE_ADDRESS_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	low       	;
        uint32_t	high      	;
#else
        uint32_t	low       	;
        uint32_t	high      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) IPTV_DDR_CTX_TABLE_ADDRESS_STRUCT;

#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(IPTV_DDR_CTX_TABLE_ADDRESS_STRUCT), (r))
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(IPTV_DDR_CTX_TABLE_ADDRESS_STRUCT), (v))
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p), (r))
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p), (v))
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(IPTV_DDR_CTX_TABLE_ADDRESS_STRUCT) + 4, (r))
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(IPTV_DDR_CTX_TABLE_ADDRESS_STRUCT) + 4, (v))
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_HIGH_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<IPTV_DDR_CTX_TABLE_ADDRESS_STRUCT */


#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_SIZE     1
typedef struct
{
	IPTV_DDR_CTX_TABLE_ADDRESS_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ IPTV_DDR_CTX_TABLE_ADDRESS_TABLE_STRUCT;

extern uint32_t RDD_IPTV_DDR_CTX_TABLE_ADDRESS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPTV_DDR_CTX_TABLE_ADDRESS_PTR(core_id)	( IPTV_DDR_CTX_TABLE_ADDRESS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPTV_DDR_CTX_TABLE_ADDRESS_ADDRESS_ARR[core_id] ))

/* <<<IPTV_DDR_CTX_TABLE_ADDRESS */


/* >>>DHD_DOORBELL_RX_POST_VALUE */

#define RDD_DHD_DOORBELL_RX_POST_VALUE_SIZE     3
typedef struct
{
	DHD_DOORBELL_STRUCT	entry[ RDD_DHD_DOORBELL_RX_POST_VALUE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_DOORBELL_RX_POST_VALUE_STRUCT;

extern uint32_t RDD_DHD_DOORBELL_RX_POST_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_DOORBELL_RX_POST_VALUE_PTR(core_id)	( DHD_DOORBELL_RX_POST_VALUE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_DOORBELL_RX_POST_VALUE_ADDRESS_ARR[core_id] ))

/* <<<DHD_DOORBELL_RX_POST_VALUE */


/* >>>DHD_CPU_INT_ID */

#define RDD_DHD_CPU_INT_ID_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DHD_CPU_INT_ID_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_CPU_INT_ID_STRUCT;

extern uint32_t RDD_DHD_CPU_INT_ID_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_CPU_INT_ID_PTR(core_id)	( DHD_CPU_INT_ID_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_CPU_INT_ID_ADDRESS_ARR[core_id] ))

/* <<<DHD_CPU_INT_ID */


/* >>>INGRESS_FILTER_PROFILE_TABLE */

/* >>>INGRESS_FILTER_CTRL_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	enable_vector	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_bypass   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	action_vector	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	enable_vector	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	action_vector	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_bypass   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) INGRESS_FILTER_CTRL_STRUCT;

#define RDD_INGRESS_FILTER_CTRL_ENABLE_VECTOR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(INGRESS_FILTER_CTRL_STRUCT), 0, 31, (r))
#define RDD_INGRESS_FILTER_CTRL_ENABLE_VECTOR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(INGRESS_FILTER_CTRL_STRUCT), 0, 31, (v))
#define RDD_INGRESS_FILTER_CTRL_ENABLE_VECTOR_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p), 0, 31, (r))
#define RDD_INGRESS_FILTER_CTRL_ENABLE_VECTOR_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p), 0, 31, (v))
#define RDD_INGRESS_FILTER_CTRL_CPU_BYPASS_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(INGRESS_FILTER_CTRL_STRUCT) + 4, 7, 1, (r))
#define RDD_INGRESS_FILTER_CTRL_CPU_BYPASS_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(INGRESS_FILTER_CTRL_STRUCT) + 4, 7, 1, (v))
#define RDD_INGRESS_FILTER_CTRL_CPU_BYPASS_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 4, 7, 1, (r))
#define RDD_INGRESS_FILTER_CTRL_CPU_BYPASS_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 4, 7, 1, (v))
#define RDD_INGRESS_FILTER_CTRL_ACTION_VECTOR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(INGRESS_FILTER_CTRL_STRUCT) + 4, 0, 31, (r))
#define RDD_INGRESS_FILTER_CTRL_ACTION_VECTOR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(INGRESS_FILTER_CTRL_STRUCT) + 4, 0, 31, (v))
#define RDD_INGRESS_FILTER_CTRL_ACTION_VECTOR_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 4, 0, 31, (r))
#define RDD_INGRESS_FILTER_CTRL_ACTION_VECTOR_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 4, 0, 31, (v))
/* <<<INGRESS_FILTER_CTRL_STRUCT */


#define RDD_INGRESS_FILTER_PROFILE_TABLE_SIZE     16
typedef struct
{
	INGRESS_FILTER_CTRL_STRUCT	entry[ RDD_INGRESS_FILTER_PROFILE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ INGRESS_FILTER_PROFILE_TABLE_STRUCT;

extern uint32_t RDD_INGRESS_FILTER_PROFILE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_INGRESS_FILTER_PROFILE_TABLE_PTR(core_id)	( INGRESS_FILTER_PROFILE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_INGRESS_FILTER_PROFILE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<INGRESS_FILTER_PROFILE_TABLE */


/* >>>SPDSVC_WLAN_GEN_PARAMS_TABLE */

/* >>>SPDSVC_WLAN_GEN_PARAMS_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	complete_tracked	;
        uint32_t	tx_copies       	;
        uint16_t	spdsvc_free_idx 	;
#else
        uint32_t	complete_tracked	;
        uint32_t	tx_copies       	;
        uint16_t	spdsvc_free_idx 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) SPDSVC_WLAN_GEN_PARAMS_STRUCT;

#define RDD_SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_WLAN_GEN_PARAMS_STRUCT), (r))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_WLAN_GEN_PARAMS_STRUCT), (v))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_WLAN_GEN_PARAMS_STRUCT) + 4, (r))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_WLAN_GEN_PARAMS_STRUCT) + 4, (v))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_READ(r, p)                        MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_WRITE(v, p)                       MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(SPDSVC_WLAN_GEN_PARAMS_STRUCT) + 8, (r))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(SPDSVC_WLAN_GEN_PARAMS_STRUCT) + 8, (v))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_READ(r, p)                  MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_WRITE(v, p)                 MWRITE_16((uint8_t *)(p) + 8, (v))
/* <<<SPDSVC_WLAN_GEN_PARAMS_STRUCT */


#define RDD_SPDSVC_WLAN_GEN_PARAMS_TABLE_SIZE     1
typedef struct
{
	SPDSVC_WLAN_GEN_PARAMS_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_WLAN_GEN_PARAMS_TABLE_STRUCT;

extern uint32_t RDD_SPDSVC_WLAN_GEN_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_WLAN_GEN_PARAMS_TABLE_PTR(core_id)	( SPDSVC_WLAN_GEN_PARAMS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_WLAN_GEN_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_WLAN_GEN_PARAMS_TABLE */


/* >>>CPU_FEED_RING_DESCRIPTOR_TABLE */

#define RDD_CPU_FEED_RING_DESCRIPTOR_TABLE_SIZE     1
typedef struct
{
	CPU_RING_DESCRIPTOR_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_FEED_RING_DESCRIPTOR_TABLE_STRUCT;

extern uint32_t RDD_CPU_FEED_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_DESCRIPTOR_TABLE_PTR(core_id)	( CPU_FEED_RING_DESCRIPTOR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_DESCRIPTOR_TABLE */


/* >>>UDPSPDT_SCRATCH_TABLE */

/* >>>UDPSPDT_SCRATCH_IPERF3_RX_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	rx_packets_0	;
        uint32_t	rx_packets_1	;
#else
        uint32_t	rx_packets_0	;
        uint32_t	rx_packets_1	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) UDPSPDT_SCRATCH_IPERF3_RX_STRUCT;

#define RDD_UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_0_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_SCRATCH_IPERF3_RX_STRUCT), (r))
#define RDD_UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_0_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_SCRATCH_IPERF3_RX_STRUCT), (v))
#define RDD_UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_0_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_0_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_1_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_SCRATCH_IPERF3_RX_STRUCT) + 4, (r))
#define RDD_UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_1_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_SCRATCH_IPERF3_RX_STRUCT) + 4, (v))
#define RDD_UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_1_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_1_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<UDPSPDT_SCRATCH_IPERF3_RX_STRUCT */


#define RDD_UDPSPDT_SCRATCH_TABLE_SIZE     1
typedef struct
{
	UDPSPDT_SCRATCH_IPERF3_RX_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ UDPSPDT_SCRATCH_TABLE_STRUCT;

extern uint32_t RDD_UDPSPDT_SCRATCH_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_UDPSPDT_SCRATCH_TABLE_PTR(core_id)	( UDPSPDT_SCRATCH_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_UDPSPDT_SCRATCH_TABLE_ADDRESS_ARR[core_id] ))

/* <<<UDPSPDT_SCRATCH_TABLE */


/* >>>NAT_CACHE_CFG */

/* >>>NAT_CACHE_CFG_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	res_offset        	;
        uint16_t	context_offset    	;
        uint16_t	key_offset        	;
        uint32_t	reserved          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	three_tuple_enable	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	esp_filter_action 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	esp_filter_enable 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	context_offset    	;
        uint16_t	res_offset        	;
        uint32_t	esp_filter_enable 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	esp_filter_action 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	three_tuple_enable	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	key_offset        	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} NAT_CACHE_CFG_STRUCT;

#define RDD_NAT_CACHE_CFG_RES_OFFSET_READ_G(r, g, idx)                  GROUP_MREAD_16((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT), (r))
#define RDD_NAT_CACHE_CFG_RES_OFFSET_WRITE_G(v, g, idx)                 GROUP_MWRITE_16((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT), (v))
#define RDD_NAT_CACHE_CFG_RES_OFFSET_READ(r, p)                         MREAD_16((uint8_t *)(p), (r))
#define RDD_NAT_CACHE_CFG_RES_OFFSET_WRITE(v, p)                        MWRITE_16((uint8_t *)(p), (v))
#define RDD_NAT_CACHE_CFG_RES_OFFSET_L_READ( wv )                       FIELD_GET( wv, 16, 16 )
#define RDD_NAT_CACHE_CFG_RES_OFFSET_L_WRITE( v, wv )                   FIELD_SET( v, 16, 16, wv )
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT) + 2, (r))
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT) + 2, (v))
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_READ(r, p)                     MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_L_READ( wv )                   FIELD_GET( wv, 0, 16 )
#define RDD_NAT_CACHE_CFG_CONTEXT_OFFSET_L_WRITE( v, wv )               FIELD_SET( v, 0, 16, wv )
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_READ_G(r, g, idx)                  GROUP_MREAD_16((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT) + 4, (r))
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_WRITE_G(v, g, idx)                 GROUP_MWRITE_16((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT) + 4, (v))
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_READ(r, p)                         MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_WRITE(v, p)                        MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_L_READ( wv )                       FIELD_GET( wv, 16, 16 )
#define RDD_NAT_CACHE_CFG_KEY_OFFSET_L_WRITE( v, wv )                   FIELD_SET( v, 16, 16, wv )
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT) + 6, 2, 1, (r))
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT) + 6, 2, 1, (v))
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 6, 2, 1, (r))
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 6, 2, 1, (v))
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_L_READ( wv )               FIELD_GET( wv, 10, 1 )
#define RDD_NAT_CACHE_CFG_THREE_TUPLE_ENABLE_L_WRITE( v, wv )           FIELD_SET( v, 10, 1, wv )
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT) + 6, 1, 1, (r))
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT) + 6, 1, 1, (v))
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 6, 1, 1, (r))
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 6, 1, 1, (v))
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_L_READ( wv )                FIELD_GET( wv, 9, 1 )
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ACTION_L_WRITE( v, wv )            FIELD_SET( v, 9, 1, wv )
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT) + 6, 0, 1, (r))
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_CFG_STRUCT) + 6, 0, 1, (v))
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 6, 0, 1, (r))
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 6, 0, 1, (v))
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_L_READ( wv )                FIELD_GET( wv, 8, 1 )
#define RDD_NAT_CACHE_CFG_ESP_FILTER_ENABLE_L_WRITE( v, wv )            FIELD_SET( v, 8, 1, wv )
/* <<<NAT_CACHE_CFG_STRUCT */


#define RDD_NAT_CACHE_CFG_SIZE     1
typedef struct
{
	NAT_CACHE_CFG_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ NAT_CACHE_CFG_TABLE_STRUCT;

extern uint32_t RDD_NAT_CACHE_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NAT_CACHE_CFG_PTR(core_id)	( NAT_CACHE_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NAT_CACHE_CFG_ADDRESS_ARR[core_id] ))

/* <<<NAT_CACHE_CFG */


/* >>>DEBUG_PRINT_TABLE */

/* >>>DEBUG_PRINT_INFO_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	addr_low  	;
        uint32_t	addr_high 	;
        uint32_t	size      	;
        uint8_t	table_id  	;
        uint32_t	reserved  	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	addr_low  	;
        uint32_t	addr_high 	;
        uint32_t	size      	;
        uint32_t	reserved  	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	table_id  	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DEBUG_PRINT_INFO_STRUCT;

#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DEBUG_PRINT_INFO_STRUCT), (r))
#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DEBUG_PRINT_INFO_STRUCT), (v))
#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p), (r))
#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p), (v))
#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DEBUG_PRINT_INFO_ADDR_LOW_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(DEBUG_PRINT_INFO_STRUCT) + 4, (r))
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(DEBUG_PRINT_INFO_STRUCT) + 4, (v))
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_DEBUG_PRINT_INFO_ADDR_HIGH_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
#define RDD_DEBUG_PRINT_INFO_SIZE_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(DEBUG_PRINT_INFO_STRUCT) + 8, (r))
#define RDD_DEBUG_PRINT_INFO_SIZE_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(DEBUG_PRINT_INFO_STRUCT) + 8, (v))
#define RDD_DEBUG_PRINT_INFO_SIZE_READ(r, p)                      MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_DEBUG_PRINT_INFO_SIZE_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_DEBUG_PRINT_INFO_SIZE_L_READ( wv )                    FIELD_GET( wv, 0, 32 )
#define RDD_DEBUG_PRINT_INFO_SIZE_L_WRITE( v, wv )                FIELD_SET( v, 0, 32, wv )
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_READ_G(r, g, idx)           GROUP_MREAD_8((g), (idx)*sizeof(DEBUG_PRINT_INFO_STRUCT) + 12, (r))
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_WRITE_G(v, g, idx)          GROUP_MWRITE_8((g), (idx)*sizeof(DEBUG_PRINT_INFO_STRUCT) + 12, (v))
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_READ(r, p)                  MREAD_8((uint8_t *)(p) + 12, (r))
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_WRITE(v, p)                 MWRITE_8((uint8_t *)(p) + 12, (v))
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_L_READ( wv )                FIELD_GET( wv, 24, 8 )
#define RDD_DEBUG_PRINT_INFO_TABLE_ID_L_WRITE( v, wv )            FIELD_SET( v, 24, 8, wv )
/* <<<DEBUG_PRINT_INFO_STRUCT */


#define RDD_DEBUG_PRINT_TABLE_SIZE     1
typedef struct
{
	DEBUG_PRINT_INFO_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DEBUG_PRINT_TABLE_STRUCT;

extern uint32_t RDD_DEBUG_PRINT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DEBUG_PRINT_TABLE_PTR(core_id)	( DEBUG_PRINT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DEBUG_PRINT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DEBUG_PRINT_TABLE */


/* >>>TCAM_GENERIC_FIELDS */

/* >>>TCAM_GENERIC_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	offset    	;
        uint16_t	reserved  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	layer     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	layer     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	offset    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) TCAM_GENERIC_STRUCT;

#define RDD_TCAM_GENERIC_OFFSET_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(TCAM_GENERIC_STRUCT), (r))
#define RDD_TCAM_GENERIC_OFFSET_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(TCAM_GENERIC_STRUCT), (v))
#define RDD_TCAM_GENERIC_OFFSET_READ(r, p)                   MREAD_8((uint8_t *)(p), (r))
#define RDD_TCAM_GENERIC_OFFSET_WRITE(v, p)                  MWRITE_8((uint8_t *)(p), (v))
#define RDD_TCAM_GENERIC_OFFSET_L_READ( wv )                 FIELD_GET( wv, 8, 8 )
#define RDD_TCAM_GENERIC_OFFSET_L_WRITE( v, wv )             FIELD_SET( v, 8, 8, wv )
#define RDD_TCAM_GENERIC_LAYER_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCAM_GENERIC_STRUCT) + 1, 0, 2, (r))
#define RDD_TCAM_GENERIC_LAYER_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCAM_GENERIC_STRUCT) + 1, 0, 2, (v))
#define RDD_TCAM_GENERIC_LAYER_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 2, (r))
#define RDD_TCAM_GENERIC_LAYER_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 2, (v))
#define RDD_TCAM_GENERIC_LAYER_L_READ( wv )                  FIELD_GET( wv, 0, 2 )
#define RDD_TCAM_GENERIC_LAYER_L_WRITE( v, wv )              FIELD_SET( v, 0, 2, wv )
/* <<<TCAM_GENERIC_STRUCT */


#define RDD_TCAM_GENERIC_FIELDS_SIZE     8
typedef struct
{
	TCAM_GENERIC_STRUCT	entry[ RDD_TCAM_GENERIC_FIELDS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TCAM_GENERIC_FIELDS_STRUCT;

extern uint32_t RDD_TCAM_GENERIC_FIELDS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCAM_GENERIC_FIELDS_PTR(core_id)	( TCAM_GENERIC_FIELDS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCAM_GENERIC_FIELDS_ADDRESS_ARR[core_id] ))

/* <<<TCAM_GENERIC_FIELDS */


/* >>>FPM_GLOBAL_CFG */

/* >>>FPM_GLOBAL_CFG_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	fpm_base_low       	;
        uint32_t	fpm_base_high      	;
        uint16_t	fpm_token_size     	;
        uint8_t	fpm_token_shift    	;
        uint8_t	fpm_token_add_shift	;
        uint16_t	fpm_token_inv_mant 	;
        uint8_t	fpm_token_inv_exp  	;
        uint8_t	reserved1          	;
#else
        uint32_t	fpm_base_low       	;
        uint32_t	fpm_base_high      	;
        uint8_t	fpm_token_add_shift	;
        uint8_t	fpm_token_shift    	;
        uint16_t	fpm_token_size     	;
        uint8_t	reserved1          	;
        uint8_t	fpm_token_inv_exp  	;
        uint16_t	fpm_token_inv_mant 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) FPM_GLOBAL_CFG_STRUCT;

#define RDD_FPM_GLOBAL_CFG_FPM_BASE_LOW_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT), (r))
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_LOW_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT), (v))
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_LOW_READ(r, p)                        MREAD_32((uint8_t *)(p), (r))
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_LOW_WRITE(v, p)                       MWRITE_32((uint8_t *)(p), (v))
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_HIGH_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 4, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_HIGH_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 4, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_HIGH_READ(r, p)                       MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_BASE_HIGH_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 8, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 8, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_READ(r, p)                      MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SHIFT_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 10, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SHIFT_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 10, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SHIFT_READ(r, p)                     MREAD_8((uint8_t *)(p) + 10, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_SHIFT_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 10, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_ADD_SHIFT_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 11, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_ADD_SHIFT_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 11, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_ADD_SHIFT_READ(r, p)                 MREAD_8((uint8_t *)(p) + 11, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_ADD_SHIFT_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 11, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_INV_MANT_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 12, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_INV_MANT_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 12, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_INV_MANT_READ(r, p)                  MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_INV_MANT_WRITE(v, p)                 MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_INV_EXP_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 14, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_INV_EXP_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(FPM_GLOBAL_CFG_STRUCT) + 14, (v))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_INV_EXP_READ(r, p)                   MREAD_8((uint8_t *)(p) + 14, (r))
#define RDD_FPM_GLOBAL_CFG_FPM_TOKEN_INV_EXP_WRITE(v, p)                  MWRITE_8((uint8_t *)(p) + 14, (v))
/* <<<FPM_GLOBAL_CFG_STRUCT */


#define RDD_FPM_GLOBAL_CFG_SIZE     1
typedef struct
{
	FPM_GLOBAL_CFG_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ FPM_GLOBAL_CFG_TABLE_STRUCT;

extern uint32_t RDD_FPM_GLOBAL_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_FPM_GLOBAL_CFG_PTR(core_id)	( FPM_GLOBAL_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_FPM_GLOBAL_CFG_ADDRESS_ARR[core_id] ))

/* <<<FPM_GLOBAL_CFG */


/* >>>MULTICAST_WHITELIST_CFG_TABLE */

/* >>>MULTICAST_WHITELIST_CFG_STRUCT */
typedef union
{
    uint32_t word_32[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	res_offset      	;
        uint16_t	context_offset  	;
        uint16_t	key_offset      	;
        uint8_t	natc_tbl_idx    	;
        uint8_t	ddr_ctx_tbl_high	;
        uint32_t	ddr_ctx_tbl_low 	;
#else
        uint16_t	context_offset  	;
        uint16_t	res_offset      	;
        uint8_t	ddr_ctx_tbl_high	;
        uint8_t	natc_tbl_idx    	;
        uint16_t	key_offset      	;
        uint32_t	ddr_ctx_tbl_low 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) MULTICAST_WHITELIST_CFG_STRUCT;

#define RDD_MULTICAST_WHITELIST_CFG_RES_OFFSET_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT), (r))
#define RDD_MULTICAST_WHITELIST_CFG_RES_OFFSET_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT), (v))
#define RDD_MULTICAST_WHITELIST_CFG_RES_OFFSET_READ(r, p)                       MREAD_16((uint8_t *)(p), (r))
#define RDD_MULTICAST_WHITELIST_CFG_RES_OFFSET_WRITE(v, p)                      MWRITE_16((uint8_t *)(p), (v))
#define RDD_MULTICAST_WHITELIST_CFG_CONTEXT_OFFSET_READ_G(r, g, idx)            GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT) + 2, (r))
#define RDD_MULTICAST_WHITELIST_CFG_CONTEXT_OFFSET_WRITE_G(v, g, idx)           GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT) + 2, (v))
#define RDD_MULTICAST_WHITELIST_CFG_CONTEXT_OFFSET_READ(r, p)                   MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_MULTICAST_WHITELIST_CFG_CONTEXT_OFFSET_WRITE(v, p)                  MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_MULTICAST_WHITELIST_CFG_KEY_OFFSET_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT) + 4, (r))
#define RDD_MULTICAST_WHITELIST_CFG_KEY_OFFSET_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT) + 4, (v))
#define RDD_MULTICAST_WHITELIST_CFG_KEY_OFFSET_READ(r, p)                       MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_MULTICAST_WHITELIST_CFG_KEY_OFFSET_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_MULTICAST_WHITELIST_CFG_NATC_TBL_IDX_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT) + 6, (r))
#define RDD_MULTICAST_WHITELIST_CFG_NATC_TBL_IDX_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT) + 6, (v))
#define RDD_MULTICAST_WHITELIST_CFG_NATC_TBL_IDX_READ(r, p)                     MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_MULTICAST_WHITELIST_CFG_NATC_TBL_IDX_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_HIGH_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT) + 7, (r))
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT) + 7, (v))
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_HIGH_READ(r, p)                 MREAD_8((uint8_t *)(p) + 7, (r))
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_HIGH_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 7, (v))
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT) + 8, (r))
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(MULTICAST_WHITELIST_CFG_STRUCT) + 8, (v))
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_MULTICAST_WHITELIST_CFG_DDR_CTX_TBL_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 8, (v))
/* <<<MULTICAST_WHITELIST_CFG_STRUCT */


#define RDD_MULTICAST_WHITELIST_CFG_TABLE_SIZE     1
typedef struct
{
	MULTICAST_WHITELIST_CFG_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ MULTICAST_WHITELIST_CFG_TABLE_STRUCT;

extern uint32_t RDD_MULTICAST_WHITELIST_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_MULTICAST_WHITELIST_CFG_TABLE_PTR(core_id)	( MULTICAST_WHITELIST_CFG_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_MULTICAST_WHITELIST_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<MULTICAST_WHITELIST_CFG_TABLE */


/* >>>NAT_CACHE_KEY0_MASK */

#define RDD_NAT_CACHE_KEY0_MASK_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ NAT_CACHE_KEY0_MASK_STRUCT;

extern uint32_t RDD_NAT_CACHE_KEY0_MASK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NAT_CACHE_KEY0_MASK_PTR(core_id)	( NAT_CACHE_KEY0_MASK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NAT_CACHE_KEY0_MASK_ADDRESS_ARR[core_id] ))

/* <<<NAT_CACHE_KEY0_MASK */


/* >>>TCAM_TABLE_CFG_TABLE */

/* >>>TCAM_TABLE_CFG_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	all_fields   	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	generic_1              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	generic_2              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	generic_3              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	generic_4              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	ingress_port           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	gem                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	network_layer          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	ssid                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	all_fields   	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	ssid                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	network_layer          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	gem                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	ingress_port           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	generic_4              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	generic_3              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	generic_2              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
        uint8_t	generic_1              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of all_fields union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} TCAM_TABLE_CFG_STRUCT;

#define RDD_TCAM_TABLE_CFG_ALL_FIELDS_READ_G(r, g, idx)             GROUP_MREAD_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), (r))
#define RDD_TCAM_TABLE_CFG_ALL_FIELDS_WRITE_G(v, g, idx)            GROUP_MWRITE_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), (v))
#define RDD_TCAM_TABLE_CFG_ALL_FIELDS_READ(r, p)                    MREAD_8((uint8_t *)(p), (r))
#define RDD_TCAM_TABLE_CFG_ALL_FIELDS_WRITE(v, p)                   MWRITE_8((uint8_t *)(p), (v))
#define RDD_TCAM_TABLE_CFG_GENERIC_1_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 7, 1, (r))
#define RDD_TCAM_TABLE_CFG_GENERIC_1_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 7, 1, (v))
#define RDD_TCAM_TABLE_CFG_GENERIC_1_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_TCAM_TABLE_CFG_GENERIC_1_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_TCAM_TABLE_CFG_GENERIC_2_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 6, 1, (r))
#define RDD_TCAM_TABLE_CFG_GENERIC_2_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 6, 1, (v))
#define RDD_TCAM_TABLE_CFG_GENERIC_2_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_TCAM_TABLE_CFG_GENERIC_2_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_TCAM_TABLE_CFG_GENERIC_3_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 5, 1, (r))
#define RDD_TCAM_TABLE_CFG_GENERIC_3_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 5, 1, (v))
#define RDD_TCAM_TABLE_CFG_GENERIC_3_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_TCAM_TABLE_CFG_GENERIC_3_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_TCAM_TABLE_CFG_GENERIC_4_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 4, 1, (r))
#define RDD_TCAM_TABLE_CFG_GENERIC_4_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 4, 1, (v))
#define RDD_TCAM_TABLE_CFG_GENERIC_4_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_TCAM_TABLE_CFG_GENERIC_4_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_TCAM_TABLE_CFG_INGRESS_PORT_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 3, 1, (r))
#define RDD_TCAM_TABLE_CFG_INGRESS_PORT_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 3, 1, (v))
#define RDD_TCAM_TABLE_CFG_INGRESS_PORT_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_TCAM_TABLE_CFG_INGRESS_PORT_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_TCAM_TABLE_CFG_GEM_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 2, 1, (r))
#define RDD_TCAM_TABLE_CFG_GEM_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 2, 1, (v))
#define RDD_TCAM_TABLE_CFG_GEM_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_TCAM_TABLE_CFG_GEM_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_TCAM_TABLE_CFG_NETWORK_LAYER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 1, 1, (r))
#define RDD_TCAM_TABLE_CFG_NETWORK_LAYER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 1, 1, (v))
#define RDD_TCAM_TABLE_CFG_NETWORK_LAYER_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_TCAM_TABLE_CFG_NETWORK_LAYER_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_TCAM_TABLE_CFG_SSID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 0, 1, (r))
#define RDD_TCAM_TABLE_CFG_SSID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCAM_TABLE_CFG_STRUCT), 0, 1, (v))
#define RDD_TCAM_TABLE_CFG_SSID_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 0, 1, (r))
#define RDD_TCAM_TABLE_CFG_SSID_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 0, 1, (v))
/* <<<TCAM_TABLE_CFG_STRUCT */


#define RDD_TCAM_TABLE_CFG_TABLE_SIZE     2
typedef struct
{
	TCAM_TABLE_CFG_STRUCT	entry[ RDD_TCAM_TABLE_CFG_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TCAM_TABLE_CFG_TABLE_STRUCT;

extern uint32_t RDD_TCAM_TABLE_CFG_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCAM_TABLE_CFG_TABLE_PTR(core_id)	( TCAM_TABLE_CFG_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCAM_TABLE_CFG_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCAM_TABLE_CFG_TABLE */


/* >>>UDPSPDT_STREAM_RX_STAT_TABLE */

/* >>>UDPSPDT_STREAM_RX_STAT_STRUCT */
typedef union
{
    uint32_t word_32[12];
    uint64_t dword_64[6];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	rx_bytes_1              	;
        uint32_t	rx_bytes_0              	;
        uint32_t	rx_packets_1            	;
        uint32_t	rx_packets_0            	;
        uint32_t	ts_first                	;
        uint32_t	ts_last_1               	;
        uint32_t	ts_last_0               	;
        uint32_t	ts_first_set            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved                	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	bad_proto_cntr          	;
        uint32_t	iperf3_rx_packet_lost_1 	;
        uint32_t	iperf3_rx_packet_lost_0 	;
        uint32_t	iperf3_rx_out_of_order_1	;
        uint32_t	iperf3_rx_out_of_order_0	;
#else
        uint32_t	rx_bytes_1              	;
        uint32_t	rx_bytes_0              	;
        uint32_t	rx_packets_1            	;
        uint32_t	rx_packets_0            	;
        uint32_t	ts_first                	;
        uint32_t	ts_last_1               	;
        uint32_t	ts_last_0               	;
        uint16_t	bad_proto_cntr          	;
        uint32_t	reserved                	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ts_first_set            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	iperf3_rx_packet_lost_1 	;
        uint32_t	iperf3_rx_packet_lost_0 	;
        uint32_t	iperf3_rx_out_of_order_1	;
        uint32_t	iperf3_rx_out_of_order_0	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) UDPSPDT_STREAM_RX_STAT_STRUCT;

#define RDD_UDPSPDT_STREAM_RX_STAT_RX_BYTES_1_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT), (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_BYTES_1_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT), (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_BYTES_1_READ(r, p)                               MREAD_32((uint8_t *)(p), (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_BYTES_1_WRITE(v, p)                              MWRITE_32((uint8_t *)(p), (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_BYTES_0_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 4, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_BYTES_0_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 4, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_BYTES_0_READ(r, p)                               MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_BYTES_0_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_PACKETS_1_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 8, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_PACKETS_1_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 8, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_PACKETS_1_READ(r, p)                             MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_PACKETS_1_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_PACKETS_0_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 12, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_PACKETS_0_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 12, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_PACKETS_0_READ(r, p)                             MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_RX_PACKETS_0_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_FIRST_READ_G(r, g, idx)                          GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 16, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_FIRST_WRITE_G(v, g, idx)                         GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 16, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_FIRST_READ(r, p)                                 MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_FIRST_WRITE(v, p)                                MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_LAST_1_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 20, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_LAST_1_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 20, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_LAST_1_READ(r, p)                                MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_LAST_1_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_LAST_0_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 24, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_LAST_0_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 24, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_LAST_0_READ(r, p)                                MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_LAST_0_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_FIRST_SET_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 28, 7, 1, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_FIRST_SET_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 28, 7, 1, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_FIRST_SET_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 28, 7, 1, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_TS_FIRST_SET_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 28, 7, 1, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_BAD_PROTO_CNTR_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 30, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_BAD_PROTO_CNTR_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 30, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_BAD_PROTO_CNTR_READ(r, p)                           MREAD_16((uint8_t *)(p) + 30, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_BAD_PROTO_CNTR_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 30, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_1_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 32, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_1_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 32, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_1_READ(r, p)                  MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_1_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_0_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 36, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_0_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 36, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_0_READ(r, p)                  MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_0_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_1_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 40, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_1_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 40, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_1_READ(r, p)                 MREAD_32((uint8_t *)(p) + 40, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_1_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 40, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_0_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 44, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_0_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_RX_STAT_STRUCT) + 44, (v))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_0_READ(r, p)                 MREAD_32((uint8_t *)(p) + 44, (r))
#define RDD_UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_0_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 44, (v))
/* <<<UDPSPDT_STREAM_RX_STAT_STRUCT */


#define RDD_UDPSPDT_STREAM_RX_STAT_TABLE_SIZE     4
typedef struct
{
	UDPSPDT_STREAM_RX_STAT_STRUCT	entry[ RDD_UDPSPDT_STREAM_RX_STAT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ UDPSPDT_STREAM_RX_STAT_TABLE_STRUCT;

extern uint32_t RDD_UDPSPDT_STREAM_RX_STAT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_UDPSPDT_STREAM_RX_STAT_TABLE_PTR(core_id)	( UDPSPDT_STREAM_RX_STAT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_UDPSPDT_STREAM_RX_STAT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<UDPSPDT_STREAM_RX_STAT_TABLE */


/* >>>MULTICAST_KEY_MASK */

/* >>>MULTICAST_KEY_MASK_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	vlan_mask 	;
        uint16_t	etype_mask	;
#else
        uint16_t	etype_mask	;
        uint16_t	vlan_mask 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) MULTICAST_KEY_MASK_ENTRY_STRUCT;

#define RDD_MULTICAST_KEY_MASK_ENTRY_VLAN_MASK_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_KEY_MASK_ENTRY_STRUCT), (r))
#define RDD_MULTICAST_KEY_MASK_ENTRY_VLAN_MASK_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_KEY_MASK_ENTRY_STRUCT), (v))
#define RDD_MULTICAST_KEY_MASK_ENTRY_VLAN_MASK_READ(r, p)                  MREAD_16((uint8_t *)(p), (r))
#define RDD_MULTICAST_KEY_MASK_ENTRY_VLAN_MASK_WRITE(v, p)                 MWRITE_16((uint8_t *)(p), (v))
#define RDD_MULTICAST_KEY_MASK_ENTRY_ETYPE_MASK_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_KEY_MASK_ENTRY_STRUCT) + 2, (r))
#define RDD_MULTICAST_KEY_MASK_ENTRY_ETYPE_MASK_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_KEY_MASK_ENTRY_STRUCT) + 2, (v))
#define RDD_MULTICAST_KEY_MASK_ENTRY_ETYPE_MASK_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_MULTICAST_KEY_MASK_ENTRY_ETYPE_MASK_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
/* <<<MULTICAST_KEY_MASK_ENTRY_STRUCT */


#define RDD_MULTICAST_KEY_MASK_SIZE     1
typedef struct
{
	MULTICAST_KEY_MASK_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ MULTICAST_KEY_MASK_STRUCT;

extern uint32_t RDD_MULTICAST_KEY_MASK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_MULTICAST_KEY_MASK_PTR(core_id)	( MULTICAST_KEY_MASK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_MULTICAST_KEY_MASK_ADDRESS_ARR[core_id] ))

/* <<<MULTICAST_KEY_MASK */


/* >>>NATC_L2_VLAN_KEY_MASK */

#define RDD_NATC_L2_VLAN_KEY_MASK_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ NATC_L2_VLAN_KEY_MASK_STRUCT;

extern uint32_t RDD_NATC_L2_VLAN_KEY_MASK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NATC_L2_VLAN_KEY_MASK_PTR(core_id)	( NATC_L2_VLAN_KEY_MASK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NATC_L2_VLAN_KEY_MASK_ADDRESS_ARR[core_id] ))

/* <<<NATC_L2_VLAN_KEY_MASK */


/* >>>INGRESS_FILTER_CFG */

/* >>>INGRESS_FILTER_CFG_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	res_offset	;
#else
        uint16_t	res_offset	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) INGRESS_FILTER_CFG_STRUCT;

#define RDD_INGRESS_FILTER_CFG_RES_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(INGRESS_FILTER_CFG_STRUCT), (r))
#define RDD_INGRESS_FILTER_CFG_RES_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(INGRESS_FILTER_CFG_STRUCT), (v))
#define RDD_INGRESS_FILTER_CFG_RES_OFFSET_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_INGRESS_FILTER_CFG_RES_OFFSET_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
/* <<<INGRESS_FILTER_CFG_STRUCT */


#define RDD_INGRESS_FILTER_CFG_SIZE     1
typedef struct
{
	INGRESS_FILTER_CFG_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ INGRESS_FILTER_CFG_TABLE_STRUCT;

extern uint32_t RDD_INGRESS_FILTER_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_INGRESS_FILTER_CFG_PTR(core_id)	( INGRESS_FILTER_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_INGRESS_FILTER_CFG_ADDRESS_ARR[core_id] ))

/* <<<INGRESS_FILTER_CFG */


/* >>>NATC_L2_TOS_MASK */

#define RDD_NATC_L2_TOS_MASK_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ NATC_L2_TOS_MASK_STRUCT;

extern uint32_t RDD_NATC_L2_TOS_MASK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NATC_L2_TOS_MASK_PTR(core_id)	( NATC_L2_TOS_MASK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NATC_L2_TOS_MASK_ADDRESS_ARR[core_id] ))

/* <<<NATC_L2_TOS_MASK */


/* >>>NATC_TBL_CFG */

/* >>>NATC_TBL_CONFIGURATION_STRUCT */
#define RDD_NATC_TBL_CONFIGURATION_RESERVED1_NUMBER	4
typedef union
{
    uint32_t word_32[6];
    uint64_t dword_64[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	key_addr_low                                             	;
        uint32_t	key_addr_high                                            	;
        uint32_t	res_addr_low                                             	;
        uint32_t	res_addr_high                                            	;
        uint32_t	reserved                                                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	miss_cache_enable                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	key_size                                                 	;
        uint8_t	context_size                                             	;
        uint8_t	reserved0                                                	;
        uint8_t	reserved1[RDD_NATC_TBL_CONFIGURATION_RESERVED1_NUMBER];
#else
        uint32_t	key_addr_low                                             	;
        uint32_t	key_addr_high                                            	;
        uint32_t	res_addr_low                                             	;
        uint32_t	res_addr_high                                            	;
        uint8_t	reserved0                                                	;
        uint8_t	context_size                                             	;
        uint8_t	key_size                                                 	;
        uint32_t	miss_cache_enable                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved                                                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved1[RDD_NATC_TBL_CONFIGURATION_RESERVED1_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) NATC_TBL_CONFIGURATION_STRUCT;

#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_LOW_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT), (r))
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT), (v))
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_LOW_READ(r, p)                      MREAD_32((uint8_t *)(p), (r))
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)(p), (v))
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_HIGH_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 4, (r))
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 4, (v))
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_HIGH_READ(r, p)                     MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_NATC_TBL_CONFIGURATION_KEY_ADDR_HIGH_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_LOW_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 8, (r))
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 8, (v))
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_LOW_READ(r, p)                      MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_HIGH_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 12, (r))
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 12, (v))
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_HIGH_READ(r, p)                     MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_NATC_TBL_CONFIGURATION_RES_ADDR_HIGH_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_NATC_TBL_CONFIGURATION_MISS_CACHE_ENABLE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 16, 0, 1, (r))
#define RDD_NATC_TBL_CONFIGURATION_MISS_CACHE_ENABLE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 16, 0, 1, (v))
#define RDD_NATC_TBL_CONFIGURATION_MISS_CACHE_ENABLE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 16, 0, 1, (r))
#define RDD_NATC_TBL_CONFIGURATION_MISS_CACHE_ENABLE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 16, 0, 1, (v))
#define RDD_NATC_TBL_CONFIGURATION_KEY_SIZE_READ_G(r, g, idx)                   GROUP_MREAD_8((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 17, (r))
#define RDD_NATC_TBL_CONFIGURATION_KEY_SIZE_WRITE_G(v, g, idx)                  GROUP_MWRITE_8((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 17, (v))
#define RDD_NATC_TBL_CONFIGURATION_KEY_SIZE_READ(r, p)                          MREAD_8((uint8_t *)(p) + 17, (r))
#define RDD_NATC_TBL_CONFIGURATION_KEY_SIZE_WRITE(v, p)                         MWRITE_8((uint8_t *)(p) + 17, (v))
#define RDD_NATC_TBL_CONFIGURATION_CONTEXT_SIZE_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 18, (r))
#define RDD_NATC_TBL_CONFIGURATION_CONTEXT_SIZE_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(NATC_TBL_CONFIGURATION_STRUCT) + 18, (v))
#define RDD_NATC_TBL_CONFIGURATION_CONTEXT_SIZE_READ(r, p)                      MREAD_8((uint8_t *)(p) + 18, (r))
#define RDD_NATC_TBL_CONFIGURATION_CONTEXT_SIZE_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 18, (v))
/* <<<NATC_TBL_CONFIGURATION_STRUCT */


#define RDD_NATC_TBL_CFG_SIZE     4
typedef struct
{
	NATC_TBL_CONFIGURATION_STRUCT	entry[ RDD_NATC_TBL_CFG_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ NATC_TBL_CFG_STRUCT;

extern uint32_t RDD_NATC_TBL_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_NATC_TBL_CFG_PTR(core_id)	( NATC_TBL_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_NATC_TBL_CFG_ADDRESS_ARR[core_id] ))

/* <<<NATC_TBL_CFG */


/* >>>FC_FLOW_IP_ADDRESSES_TABLE */

/* >>>FC_FLOW_IP_ADDRESSES_ENTRY_STRUCT */
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_NUMBER	32
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED0_NUMBER	4
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED1_NUMBER	4
typedef union
{
    uint32_t word_32[12];
    uint64_t dword_64[6];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	sa_da_addresses[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_NUMBER];
        uint8_t	reserved0[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED0_NUMBER];
        uint32_t	reference_count                                                           	;
        uint8_t	reserved1[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED1_NUMBER];
        uint32_t	is_ipv6_address                                                           	;
#else
        uint8_t	sa_da_addresses[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_NUMBER];
        uint8_t	reserved0[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED0_NUMBER];
        uint32_t	reference_count                                                           	;
        uint8_t	reserved1[RDD_FC_FLOW_IP_ADDRESSES_ENTRY_RESERVED1_NUMBER];
        uint32_t	is_ipv6_address                                                           	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) FC_FLOW_IP_ADDRESSES_ENTRY_STRUCT;

#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_READ_G(r, g, idx, i)       GROUP_MREAD_I_8((g), (idx)*sizeof(FC_FLOW_IP_ADDRESSES_ENTRY_STRUCT), i, (r))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8((g), (idx)*sizeof(FC_FLOW_IP_ADDRESSES_ENTRY_STRUCT), i, (v))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_READ(r, p, i)              MREAD_I_8((uint8_t *)(p), i, (r))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_SA_DA_ADDRESSES_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)(p), i, (v))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_REFERENCE_COUNT_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(FC_FLOW_IP_ADDRESSES_ENTRY_STRUCT) + 36, (r))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_REFERENCE_COUNT_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(FC_FLOW_IP_ADDRESSES_ENTRY_STRUCT) + 36, (v))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_REFERENCE_COUNT_READ(r, p)                 MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_REFERENCE_COUNT_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_IS_IPV6_ADDRESS_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(FC_FLOW_IP_ADDRESSES_ENTRY_STRUCT) + 44, (r))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_IS_IPV6_ADDRESS_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(FC_FLOW_IP_ADDRESSES_ENTRY_STRUCT) + 44, (v))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_IS_IPV6_ADDRESS_READ(r, p)                 MREAD_32((uint8_t *)(p) + 44, (r))
#define RDD_FC_FLOW_IP_ADDRESSES_ENTRY_IS_IPV6_ADDRESS_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 44, (v))
/* <<<FC_FLOW_IP_ADDRESSES_ENTRY_STRUCT */


#define RDD_FC_FLOW_IP_ADDRESSES_TABLE_SIZE     4
typedef struct
{
	FC_FLOW_IP_ADDRESSES_ENTRY_STRUCT	entry[ RDD_FC_FLOW_IP_ADDRESSES_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ FC_FLOW_IP_ADDRESSES_TABLE_STRUCT;

extern uint32_t RDD_FC_FLOW_IP_ADDRESSES_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_FC_FLOW_IP_ADDRESSES_TABLE_PTR(core_id)	( FC_FLOW_IP_ADDRESSES_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_FC_FLOW_IP_ADDRESSES_TABLE_ADDRESS_ARR[core_id] ))

/* <<<FC_FLOW_IP_ADDRESSES_TABLE */

/* CORE_1 */

/* >>>CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR */

#define RDD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_SIZE     1
typedef struct
{
	DDR_ADDRESS_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_PTR(core_id)	( CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_INTERRUPT_ID_DDR_ADDR */


/* >>>CPU_RECYCLE_INTERRUPT_COALESCING_TABLE */

/* >>>CPU_INTERRUPT_COALESCING_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	timer_period        	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	not_empty_or_int_vec	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	not_empty                     	; /* Member of not_empty_or_int_vec union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	int_vec                       	; /* Member of not_empty_or_int_vec union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	scratch             	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	recycle_timer_cnt   	;
        uint16_t	recycle_timer_factor	;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	timer_period        	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	not_empty_or_int_vec	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	not_empty                     	; /* Member of not_empty_or_int_vec union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	int_vec                       	; /* Member of not_empty_or_int_vec union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	scratch             	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	recycle_timer_factor	;
        uint16_t	recycle_timer_cnt   	;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CPU_INTERRUPT_COALESCING_ENTRY_STRUCT;

#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_TIMER_PERIOD_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT), (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_TIMER_PERIOD_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT), (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_TIMER_PERIOD_READ(r, p)                         MREAD_32((uint8_t *)(p), (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_TIMER_PERIOD_WRITE(v, p)                        MWRITE_32((uint8_t *)(p), (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_OR_INT_VEC_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 4, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_OR_INT_VEC_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 4, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_OR_INT_VEC_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_OR_INT_VEC_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 4, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 4, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_READ(r, p)                            MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_NOT_EMPTY_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_INT_VEC_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 4, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_INT_VEC_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 4, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_INT_VEC_READ(r, p)                              MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_INT_VEC_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_SCRATCH_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 8, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_SCRATCH_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 8, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_SCRATCH_READ(r, p)                              MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_SCRATCH_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_CNT_READ_G(r, g, idx)             GROUP_MREAD_16((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 12, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_CNT_WRITE_G(v, g, idx)            GROUP_MWRITE_16((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 12, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_CNT_READ(r, p)                    MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_CNT_WRITE(v, p)                   MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_FACTOR_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 14, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_FACTOR_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(CPU_INTERRUPT_COALESCING_ENTRY_STRUCT) + 14, (v))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_FACTOR_READ(r, p)                 MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_CPU_INTERRUPT_COALESCING_ENTRY_RECYCLE_TIMER_FACTOR_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 14, (v))
/* <<<CPU_INTERRUPT_COALESCING_ENTRY_STRUCT */


#define RDD_CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_SIZE     1
typedef struct
{
	CPU_INTERRUPT_COALESCING_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_PTR(core_id)	( CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_INTERRUPT_COALESCING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_INTERRUPT_COALESCING_TABLE */


/* >>>DS_CPU_REASON_TO_METER_TABLE */

#define RDD_DS_CPU_REASON_TO_METER_TABLE_SIZE     64
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DS_CPU_REASON_TO_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_CPU_REASON_TO_METER_TABLE_STRUCT;

extern uint32_t RDD_DS_CPU_REASON_TO_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_CPU_REASON_TO_METER_TABLE_PTR(core_id)	( DS_CPU_REASON_TO_METER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_CPU_REASON_TO_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_CPU_REASON_TO_METER_TABLE */


/* >>>CPU_INT_INTERRUPT_SCRATCH */

#define RDD_CPU_INT_INTERRUPT_SCRATCH_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_INT_INTERRUPT_SCRATCH_STRUCT;

extern uint32_t RDD_CPU_INT_INTERRUPT_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_INT_INTERRUPT_SCRATCH_PTR(core_id)	( CPU_INT_INTERRUPT_SCRATCH_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_INT_INTERRUPT_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<CPU_INT_INTERRUPT_SCRATCH */


/* >>>CPU_RX_INTERRUPT_ID_DDR_ADDR */

#define RDD_CPU_RX_INTERRUPT_ID_DDR_ADDR_SIZE     1
typedef struct
{
	DDR_ADDRESS_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_INTERRUPT_ID_DDR_ADDR_STRUCT;

extern uint32_t RDD_CPU_RX_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_INTERRUPT_ID_DDR_ADDR_PTR(core_id)	( CPU_RX_INTERRUPT_ID_DDR_ADDR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_INTERRUPT_ID_DDR_ADDR_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_INTERRUPT_ID_DDR_ADDR */


/* >>>CPU_FEED_RING_RSV_TABLE */

#define RDD_CPU_FEED_RING_RSV_TABLE_SIZE     16
typedef struct
{
	BYTES_2_STRUCT	entry[ RDD_CPU_FEED_RING_RSV_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_FEED_RING_RSV_TABLE_STRUCT;

extern uint32_t RDD_CPU_FEED_RING_RSV_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_RSV_TABLE_PTR(core_id)	( CPU_FEED_RING_RSV_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_RSV_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_RSV_TABLE */


/* >>>CPU_RX_SCRATCHPAD */

/* >>>BYTES_8_STRUCT */
#define RDD_BYTES_8_BITS_NUMBER	2
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	bits[RDD_BYTES_8_BITS_NUMBER];
#else
        uint32_t	bits[RDD_BYTES_8_BITS_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BYTES_8_STRUCT;

#define RDD_BYTES_8_BITS_READ_G(r, g, idx, i)       GROUP_MREAD_I_32((g), (idx)*sizeof(BYTES_8_STRUCT), i, (r))
#define RDD_BYTES_8_BITS_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_32((g), (idx)*sizeof(BYTES_8_STRUCT), i, (v))
#define RDD_BYTES_8_BITS_READ(r, p, i)              MREAD_I_32((uint8_t *)(p), i, (r))
#define RDD_BYTES_8_BITS_WRITE(v, p, i)             MWRITE_I_32((uint8_t *)(p), i, (v))
/* <<<BYTES_8_STRUCT */


#define RDD_CPU_RX_SCRATCHPAD_SIZE     128
typedef struct
{
	BYTES_8_STRUCT	entry[ RDD_CPU_RX_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_SCRATCHPAD_STRUCT;

extern uint32_t RDD_CPU_RX_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_SCRATCHPAD_PTR(core_id)	( CPU_RX_SCRATCHPAD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_SCRATCHPAD */


/* >>>TCPSPDTEST_STREAM_TABLE */

/* >>>TCPSPDTEST_STREAM_STRUCT */
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER	32
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_NUMBER	8
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_NUMBER	16
typedef union
{
    uint32_t word_32[96];
    uint64_t dword_64[48];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	tcpspdtest_engine_conn_info_cpu_rx_rdd_queue                                                                                   	;
        uint8_t	tcpspdtest_engine_conn_info_up_pppoe_hdr_ofs                                                                                   	;
        uint8_t	tcpspdtest_engine_conn_info_up_peer_rx_scale                                                                                   	;
        uint8_t	tcpspdtest_engine_conn_info_sack_permitted                                                                                     	;
        uint16_t	tcpspdtest_engine_conn_info_up_tx_mss                                                                                          	;
        uint16_t	tcpspdtest_engine_conn_info_up_tx_max_pd_len                                                                                   	;
        uint32_t	tcpspdtest_engine_tcb_rx_pkts                                                                                                  	;
        uint32_t	tcpspdtest_engine_tcb_txed_pkts                                                                                                	;
        uint32_t	tcpspdtest_engine_tcb_freed_pkts                                                                                               	;
        uint32_t	tcpspdtest_engine_tcb_ack_seq                                                                                                  	;
        uint32_t	tcpspdtest_engine_tcb_tx_seq                                                                                                   	;
        uint32_t	tcpspdtest_engine_tcb_bad_pkts                                                                                                 	;
        uint32_t	tcpspdtest_engine_tcb_bad_bytes                                                                                                	;
        uint32_t	tcpspdtest_engine_tcb_bad_bytes_1                                                                                              	;
        uint32_t	tcpspdtest_engine_tcb_rx_bytes                                                                                                 	;
        uint32_t	tcpspdtest_engine_tcb_rx_bytes_1                                                                                               	;
        uint32_t	tcpspdtest_engine_tcb_expected_bytes                                                                                           	;
        uint32_t	tcpspdtest_engine_tcb_expected_bytes_1                                                                                         	;
        uint32_t	tcpspdtest_engine_tcb_up_to_send_bytes                                                                                         	;
        uint32_t	tcpspdtest_engine_tcb_up_to_send_bytes_1                                                                                       	;
        uint32_t	tcpspdtest_engine_tcb_no_credits                                                                                               	;
        uint32_t	tcpspdtest_engine_tcb_up_cwnd                                                                                                  	;
        uint32_t	tcpspdtest_engine_tcb_up_cwnd_thr                                                                                              	;
        uint32_t	tcpspdtest_engine_tcb_up_cwnd_budget                                                                                           	;
        uint32_t	tcpspdtest_engine_tcb_up_last_ack_seq                                                                                          	;
        uint32_t	tcpspdtest_engine_tcb_up_last_ack_time                                                                                         	;
        uint32_t	tcpspdtest_engine_tcb_up_dup_ack_cnt                                                                                           	;
        uint32_t	tcpspdtest_engine_tcb_up_dup_ack_seq_done                                                                                      	;
        uint16_t	tcpspdtest_engine_tcb_up_dup_ack_total_pkts_cnt                                                                                	;
        uint16_t	tcpspdtest_engine_tcb_up_fast_retrans_cnt                                                                                      	;
        uint16_t	tcpspdtest_engine_tcb_reserved1                                                                                                	;
        uint8_t	tcpspdtest_engine_tcb_up_dup_ack_state                                                                                         	;
        uint32_t	tcpspdtest_engine_tcb_reserved2                                                                                                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcpspdtest_engine_tcb_up_is_rx_win_stop                                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcpspdtest_engine_tcb_up_is_timeout                                                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcpspdtest_engine_tcb_up_is_active                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	tcpspdtest_engine_pkt_drop_is_drop                                                                                             	;
        uint8_t	tcpspdtest_engine_pkt_drop_is_win_full                                                                                         	;
        uint16_t	tcpspdtest_engine_pkt_drop_num_errs                                                                                            	;
        uint16_t	tcpspdtest_engine_pkt_drop_wr_ofs                                                                                              	;
        uint16_t	tcpspdtest_engine_pkt_drop_rd_ofs                                                                                              	;
        uint32_t	tcpspdtest_engine_pkt_drop_seq[RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER];
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_addr_low                                                                                     	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_addr_high                                                                                    	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_send_cnt                                                                                     	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_drop_cnt                                                                                     	;
        uint32_t	tcpspdtest_engine_rto_ring_retrans_addr_low                                                                                    	;
        uint32_t	tcpspdtest_engine_rto_ring_retrans_addr_high                                                                                   	;
        uint32_t	tcpspdtest_engine_rto_ring_retrans_receive_cnt                                                                                 	;
        uint16_t	tcpspdtest_engine_rto_ring_scratchpad_metadata_wr_ofs                                                                          	;
        uint16_t	tcpspdtest_engine_rto_reserved1                                                                                                	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_coalescing_timeout_cnt                                                                       	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_coalescing_fill_pkt_cnt                                                                      	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_coalescing_last_time                                                                         	;
        uint32_t	tcpspdtest_engine_rto_reserved2                                                                                                	;
        uint32_t	tcpspdtest_engine_rto_ring_scratchpad[RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_NUMBER];
        uint32_t	tcpspdtest_engine_rto_ring_scratchpad_metadata[RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_NUMBER];
#else
        uint8_t	tcpspdtest_engine_conn_info_sack_permitted                                                                                     	;
        uint8_t	tcpspdtest_engine_conn_info_up_peer_rx_scale                                                                                   	;
        uint8_t	tcpspdtest_engine_conn_info_up_pppoe_hdr_ofs                                                                                   	;
        uint8_t	tcpspdtest_engine_conn_info_cpu_rx_rdd_queue                                                                                   	;
        uint16_t	tcpspdtest_engine_conn_info_up_tx_max_pd_len                                                                                   	;
        uint16_t	tcpspdtest_engine_conn_info_up_tx_mss                                                                                          	;
        uint32_t	tcpspdtest_engine_tcb_rx_pkts                                                                                                  	;
        uint32_t	tcpspdtest_engine_tcb_txed_pkts                                                                                                	;
        uint32_t	tcpspdtest_engine_tcb_freed_pkts                                                                                               	;
        uint32_t	tcpspdtest_engine_tcb_ack_seq                                                                                                  	;
        uint32_t	tcpspdtest_engine_tcb_tx_seq                                                                                                   	;
        uint32_t	tcpspdtest_engine_tcb_bad_pkts                                                                                                 	;
        uint32_t	tcpspdtest_engine_tcb_bad_bytes                                                                                                	;
        uint32_t	tcpspdtest_engine_tcb_bad_bytes_1                                                                                              	;
        uint32_t	tcpspdtest_engine_tcb_rx_bytes                                                                                                 	;
        uint32_t	tcpspdtest_engine_tcb_rx_bytes_1                                                                                               	;
        uint32_t	tcpspdtest_engine_tcb_expected_bytes                                                                                           	;
        uint32_t	tcpspdtest_engine_tcb_expected_bytes_1                                                                                         	;
        uint32_t	tcpspdtest_engine_tcb_up_to_send_bytes                                                                                         	;
        uint32_t	tcpspdtest_engine_tcb_up_to_send_bytes_1                                                                                       	;
        uint32_t	tcpspdtest_engine_tcb_no_credits                                                                                               	;
        uint32_t	tcpspdtest_engine_tcb_up_cwnd                                                                                                  	;
        uint32_t	tcpspdtest_engine_tcb_up_cwnd_thr                                                                                              	;
        uint32_t	tcpspdtest_engine_tcb_up_cwnd_budget                                                                                           	;
        uint32_t	tcpspdtest_engine_tcb_up_last_ack_seq                                                                                          	;
        uint32_t	tcpspdtest_engine_tcb_up_last_ack_time                                                                                         	;
        uint32_t	tcpspdtest_engine_tcb_up_dup_ack_cnt                                                                                           	;
        uint32_t	tcpspdtest_engine_tcb_up_dup_ack_seq_done                                                                                      	;
        uint16_t	tcpspdtest_engine_tcb_up_fast_retrans_cnt                                                                                      	;
        uint16_t	tcpspdtest_engine_tcb_up_dup_ack_total_pkts_cnt                                                                                	;
        uint32_t	tcpspdtest_engine_tcb_up_is_active                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcpspdtest_engine_tcb_up_is_timeout                                                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcpspdtest_engine_tcb_up_is_rx_win_stop                                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcpspdtest_engine_tcb_reserved2                                                                                                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	tcpspdtest_engine_tcb_up_dup_ack_state                                                                                         	;
        uint16_t	tcpspdtest_engine_tcb_reserved1                                                                                                	;
        uint16_t	tcpspdtest_engine_pkt_drop_num_errs                                                                                            	;
        uint8_t	tcpspdtest_engine_pkt_drop_is_win_full                                                                                         	;
        uint8_t	tcpspdtest_engine_pkt_drop_is_drop                                                                                             	;
        uint16_t	tcpspdtest_engine_pkt_drop_rd_ofs                                                                                              	;
        uint16_t	tcpspdtest_engine_pkt_drop_wr_ofs                                                                                              	;
        uint32_t	tcpspdtest_engine_pkt_drop_seq[RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER];
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_addr_low                                                                                     	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_addr_high                                                                                    	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_send_cnt                                                                                     	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_drop_cnt                                                                                     	;
        uint32_t	tcpspdtest_engine_rto_ring_retrans_addr_low                                                                                    	;
        uint32_t	tcpspdtest_engine_rto_ring_retrans_addr_high                                                                                   	;
        uint32_t	tcpspdtest_engine_rto_ring_retrans_receive_cnt                                                                                 	;
        uint16_t	tcpspdtest_engine_rto_reserved1                                                                                                	;
        uint16_t	tcpspdtest_engine_rto_ring_scratchpad_metadata_wr_ofs                                                                          	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_coalescing_timeout_cnt                                                                       	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_coalescing_fill_pkt_cnt                                                                      	;
        uint32_t	tcpspdtest_engine_rto_ring_tx_seq_coalescing_last_time                                                                         	;
        uint32_t	tcpspdtest_engine_rto_reserved2                                                                                                	;
        uint32_t	tcpspdtest_engine_rto_ring_scratchpad[RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_NUMBER];
        uint32_t	tcpspdtest_engine_rto_ring_scratchpad_metadata[RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) TCPSPDTEST_STREAM_STRUCT;

#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_READ_G(r, g, idx)                       GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT), (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WRITE_G(v, g, idx)                      GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT), (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_READ(r, p)                              MREAD_8((uint8_t *)(p), (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WRITE(v, p)                             MWRITE_8((uint8_t *)(p), (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_READ_G(r, g, idx)                       GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 1, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WRITE_G(v, g, idx)                      GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 1, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_READ(r, p)                              MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WRITE(v, p)                             MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_READ_G(r, g, idx)                       GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 2, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WRITE_G(v, g, idx)                      GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 2, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_READ(r, p)                              MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WRITE(v, p)                             MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_READ_G(r, g, idx)                         GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 3, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_WRITE_G(v, g, idx)                        GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 3, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_READ(r, p)                                MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_WRITE(v, p)                               MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_READ_G(r, g, idx)                              GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 4, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WRITE_G(v, g, idx)                             GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 4, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_READ(r, p)                                     MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WRITE(v, p)                                    MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 6, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 6, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_READ(r, p)                              MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_READ_G(r, g, idx)                                      GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 8, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_WRITE_G(v, g, idx)                                     GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 8, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_READ(r, p)                                             MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_WRITE(v, p)                                            MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_READ_G(r, g, idx)                                    GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 12, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WRITE_G(v, g, idx)                                   GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 12, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_READ(r, p)                                           MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WRITE(v, p)                                          MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_READ_G(r, g, idx)                                   GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 16, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WRITE_G(v, g, idx)                                  GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 16, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_READ(r, p)                                          MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WRITE(v, p)                                         MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_READ_G(r, g, idx)                                      GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 20, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WRITE_G(v, g, idx)                                     GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 20, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_READ(r, p)                                             MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WRITE(v, p)                                            MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_READ_G(r, g, idx)                                       GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 24, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_WRITE_G(v, g, idx)                                      GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 24, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_READ(r, p)                                              MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_WRITE(v, p)                                             MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_READ_G(r, g, idx)                                     GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 28, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WRITE_G(v, g, idx)                                    GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 28, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_READ(r, p)                                            MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WRITE(v, p)                                           MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_READ_G(r, g, idx)                                    GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 32, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WRITE_G(v, g, idx)                                   GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 32, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_READ(r, p)                                           MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WRITE(v, p)                                          MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_READ_G(r, g, idx)                                  GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 36, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WRITE_G(v, g, idx)                                 GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 36, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_READ(r, p)                                         MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WRITE(v, p)                                        MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_READ_G(r, g, idx)                                     GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 40, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_WRITE_G(v, g, idx)                                    GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 40, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_READ(r, p)                                            MREAD_32((uint8_t *)(p) + 40, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_WRITE(v, p)                                           MWRITE_32((uint8_t *)(p) + 40, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_READ_G(r, g, idx)                                   GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 44, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WRITE_G(v, g, idx)                                  GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 44, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_READ(r, p)                                          MREAD_32((uint8_t *)(p) + 44, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WRITE(v, p)                                         MWRITE_32((uint8_t *)(p) + 44, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_READ_G(r, g, idx)                               GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 48, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WRITE_G(v, g, idx)                              GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 48, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_READ(r, p)                                      MREAD_32((uint8_t *)(p) + 48, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WRITE(v, p)                                     MWRITE_32((uint8_t *)(p) + 48, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_READ_G(r, g, idx)                             GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 52, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WRITE_G(v, g, idx)                            GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 52, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_READ(r, p)                                    MREAD_32((uint8_t *)(p) + 52, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WRITE(v, p)                                   MWRITE_32((uint8_t *)(p) + 52, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_READ_G(r, g, idx)                             GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 56, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WRITE_G(v, g, idx)                            GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 56, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_READ(r, p)                                    MREAD_32((uint8_t *)(p) + 56, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WRITE(v, p)                                   MWRITE_32((uint8_t *)(p) + 56, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_READ_G(r, g, idx)                           GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 60, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WRITE_G(v, g, idx)                          GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 60, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_READ(r, p)                                  MREAD_32((uint8_t *)(p) + 60, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WRITE(v, p)                                 MWRITE_32((uint8_t *)(p) + 60, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_READ_G(r, g, idx)                                   GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 64, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WRITE_G(v, g, idx)                                  GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 64, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_READ(r, p)                                          MREAD_32((uint8_t *)(p) + 64, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WRITE(v, p)                                         MWRITE_32((uint8_t *)(p) + 64, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_READ_G(r, g, idx)                                      GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 68, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_WRITE_G(v, g, idx)                                     GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 68, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_READ(r, p)                                             MREAD_32((uint8_t *)(p) + 68, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_WRITE(v, p)                                            MWRITE_32((uint8_t *)(p) + 68, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_READ_G(r, g, idx)                                  GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 72, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WRITE_G(v, g, idx)                                 GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 72, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_READ(r, p)                                         MREAD_32((uint8_t *)(p) + 72, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WRITE(v, p)                                        MWRITE_32((uint8_t *)(p) + 72, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_READ_G(r, g, idx)                               GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 76, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WRITE_G(v, g, idx)                              GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 76, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_READ(r, p)                                      MREAD_32((uint8_t *)(p) + 76, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WRITE(v, p)                                     MWRITE_32((uint8_t *)(p) + 76, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_READ_G(r, g, idx)                              GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 80, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WRITE_G(v, g, idx)                             GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 80, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_READ(r, p)                                     MREAD_32((uint8_t *)(p) + 80, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WRITE(v, p)                                    MWRITE_32((uint8_t *)(p) + 80, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_READ_G(r, g, idx)                             GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 84, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WRITE_G(v, g, idx)                            GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 84, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_READ(r, p)                                    MREAD_32((uint8_t *)(p) + 84, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WRITE(v, p)                                   MWRITE_32((uint8_t *)(p) + 84, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_READ_G(r, g, idx)                               GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 88, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WRITE_G(v, g, idx)                              GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 88, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_READ(r, p)                                      MREAD_32((uint8_t *)(p) + 88, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WRITE(v, p)                                     MWRITE_32((uint8_t *)(p) + 88, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_READ_G(r, g, idx)                          GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 92, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WRITE_G(v, g, idx)                         GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 92, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_READ(r, p)                                 MREAD_32((uint8_t *)(p) + 92, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WRITE(v, p)                                MWRITE_32((uint8_t *)(p) + 92, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 96, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 96, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_READ(r, p)                           MREAD_16((uint8_t *)(p) + 96, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 96, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_READ_G(r, g, idx)                          GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 98, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WRITE_G(v, g, idx)                         GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 98, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_READ(r, p)                                 MREAD_16((uint8_t *)(p) + 98, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WRITE(v, p)                                MWRITE_16((uint8_t *)(p) + 98, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_READ_G(r, g, idx)                                    GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 100, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_WRITE_G(v, g, idx)                                   GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 100, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_READ(r, p)                                           MREAD_16((uint8_t *)(p) + 100, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_WRITE(v, p)                                          MWRITE_16((uint8_t *)(p) + 100, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_READ_G(r, g, idx)                             GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 102, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WRITE_G(v, g, idx)                            GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 102, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_READ(r, p)                                    MREAD_8((uint8_t *)(p) + 102, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WRITE(v, p)                                   MWRITE_8((uint8_t *)(p) + 102, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED2_READ_G(r, g, idx)                                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 103, 3, 5, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED2_WRITE_G(v, g, idx)                                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 103, 3, 5, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED2_READ(r, p)                                           FIELD_MREAD_8((uint8_t *)(p) + 103, 3, 5, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED2_WRITE(v, p)                                          FIELD_MWRITE_8((uint8_t *)(p) + 103, 3, 5, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 103, 2, 1, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 103, 2, 1, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 103, 2, 1, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 103, 2, 1, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 103, 1, 1, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 103, 1, 1, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p) + 103, 1, 1, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p) + 103, 1, 1, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 103, 0, 1, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 103, 0, 1, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_READ(r, p)                                        FIELD_MREAD_8((uint8_t *)(p) + 103, 0, 1, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WRITE(v, p)                                       FIELD_MWRITE_8((uint8_t *)(p) + 103, 0, 1, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_READ_G(r, g, idx)                                 GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 104, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WRITE_G(v, g, idx)                                GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 104, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_READ(r, p)                                        MREAD_8((uint8_t *)(p) + 104, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WRITE(v, p)                                       MWRITE_8((uint8_t *)(p) + 104, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_READ_G(r, g, idx)                             GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 105, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WRITE_G(v, g, idx)                            GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 105, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_READ(r, p)                                    MREAD_8((uint8_t *)(p) + 105, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WRITE(v, p)                                   MWRITE_8((uint8_t *)(p) + 105, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_READ_G(r, g, idx)                                GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 106, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WRITE_G(v, g, idx)                               GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 106, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_READ(r, p)                                       MREAD_16((uint8_t *)(p) + 106, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WRITE(v, p)                                      MWRITE_16((uint8_t *)(p) + 106, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_READ_G(r, g, idx)                                  GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 108, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WRITE_G(v, g, idx)                                 GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 108, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_READ(r, p)                                         MREAD_16((uint8_t *)(p) + 108, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WRITE(v, p)                                        MWRITE_16((uint8_t *)(p) + 108, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_READ_G(r, g, idx)                                  GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 110, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WRITE_G(v, g, idx)                                 GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 110, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_READ(r, p)                                         MREAD_16((uint8_t *)(p) + 110, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WRITE(v, p)                                        MWRITE_16((uint8_t *)(p) + 110, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_READ_G(r, g, idx, i)                                  GROUP_MREAD_I_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 112, i, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WRITE_G(v, g, idx, i)                                 GROUP_MWRITE_I_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 112, i, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_READ(r, p, i)                                         MREAD_I_32((uint8_t *)(p) + 112, i, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WRITE(v, p, i)                                        MWRITE_I_32((uint8_t *)(p) + 112, i, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 240, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 240, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_READ(r, p)                                MREAD_32((uint8_t *)(p) + 240, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 240, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 244, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 244, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_READ(r, p)                               MREAD_32((uint8_t *)(p) + 244, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 244, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 248, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 248, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_READ(r, p)                                MREAD_32((uint8_t *)(p) + 248, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 248, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 252, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 252, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_READ(r, p)                                MREAD_32((uint8_t *)(p) + 252, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 252, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 256, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 256, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_READ(r, p)                               MREAD_32((uint8_t *)(p) + 256, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 256, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 260, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 260, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_READ(r, p)                              MREAD_32((uint8_t *)(p) + 260, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 260, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 264, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 264, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_READ(r, p)                            MREAD_32((uint8_t *)(p) + 264, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 264, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 268, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 268, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_READ(r, p)                     MREAD_16((uint8_t *)(p) + 268, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 268, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED1_READ_G(r, g, idx)                                    GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 270, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED1_WRITE_G(v, g, idx)                                   GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 270, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED1_READ(r, p)                                           MREAD_16((uint8_t *)(p) + 270, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED1_WRITE(v, p)                                          MWRITE_16((uint8_t *)(p) + 270, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 272, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 272, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_READ(r, p)                  MREAD_32((uint8_t *)(p) + 272, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 272, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 276, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 276, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_READ(r, p)                 MREAD_32((uint8_t *)(p) + 276, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 276, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 280, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 280, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_READ(r, p)                    MREAD_32((uint8_t *)(p) + 280, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 280, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED2_READ_G(r, g, idx)                                    GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 284, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED2_WRITE_G(v, g, idx)                                   GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 284, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED2_READ(r, p)                                           MREAD_32((uint8_t *)(p) + 284, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED2_WRITE(v, p)                                          MWRITE_32((uint8_t *)(p) + 284, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_READ_G(r, g, idx, i)                           GROUP_MREAD_I_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 288, i, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_WRITE_G(v, g, idx, i)                          GROUP_MWRITE_I_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 288, i, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_READ(r, p, i)                                  MREAD_I_32((uint8_t *)(p) + 288, i, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_WRITE(v, p, i)                                 MWRITE_I_32((uint8_t *)(p) + 288, i, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_READ_G(r, g, idx, i)                  GROUP_MREAD_I_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 320, i, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WRITE_G(v, g, idx, i)                 GROUP_MWRITE_I_32((g), (idx)*sizeof(TCPSPDTEST_STREAM_STRUCT) + 320, i, (v))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_READ(r, p, i)                         MREAD_I_32((uint8_t *)(p) + 320, i, (r))
#define RDD_TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WRITE(v, p, i)                        MWRITE_I_32((uint8_t *)(p) + 320, i, (v))
/* <<<TCPSPDTEST_STREAM_STRUCT */


#define RDD_TCPSPDTEST_STREAM_TABLE_SIZE     4
typedef struct
{
	TCPSPDTEST_STREAM_STRUCT	entry[ RDD_TCPSPDTEST_STREAM_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TCPSPDTEST_STREAM_TABLE_STRUCT;

extern uint32_t RDD_TCPSPDTEST_STREAM_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCPSPDTEST_STREAM_TABLE_PTR(core_id)	( TCPSPDTEST_STREAM_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCPSPDTEST_STREAM_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCPSPDTEST_STREAM_TABLE */


/* >>>US_CPU_REASON_TO_METER_TABLE */

#define RDD_US_CPU_REASON_TO_METER_TABLE_SIZE     64
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_US_CPU_REASON_TO_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_CPU_REASON_TO_METER_TABLE_STRUCT;

extern uint32_t RDD_US_CPU_REASON_TO_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_CPU_REASON_TO_METER_TABLE_PTR(core_id)	( US_CPU_REASON_TO_METER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_CPU_REASON_TO_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_CPU_REASON_TO_METER_TABLE */


/* >>>CPU_FEED_RING_CACHE_TABLE */

#define RDD_CPU_FEED_RING_CACHE_TABLE_SIZE     16
typedef struct
{
	BYTES_8_STRUCT	entry[ RDD_CPU_FEED_RING_CACHE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_FEED_RING_CACHE_TABLE_STRUCT;

extern uint32_t RDD_CPU_FEED_RING_CACHE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_CACHE_TABLE_PTR(core_id)	( CPU_FEED_RING_CACHE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_CACHE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_CACHE_TABLE */


/* >>>PKTGEN_TX_STREAM_TABLE */

/* >>>PKTGEN_TX_STREAM_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[34];
    uint64_t dword_64[17];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	ref_pkt_hdr_size              	;
        uint16_t	ref_pkt_hdr_offset            	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_reserved          	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr               	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_1             	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_2             	;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_3             	;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_4             	;
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_5             	;
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_6             	;
		};
	};
	/* Union WORD 9 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_7             	;
		};
	};
	/* Union WORD 10 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_8             	;
		};
	};
	/* Union WORD 11 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_9             	;
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_10            	;
		};
	};
	/* Union WORD 13 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_11            	;
		};
	};
	/* Union WORD 14 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_12            	;
		};
	};
	/* Union WORD 15 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_13            	;
		};
	};
	/* Union WORD 16 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_14            	;
		};
	};
	/* Union WORD 17 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_15            	;
		};
	};
	/* Union WORD 18 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_16            	;
		};
	};
	/* Union WORD 19 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_17            	;
		};
	};
	/* Union WORD 20 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_18            	;
		};
	};
	/* Union WORD 21 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_19            	;
		};
	};
	/* Union WORD 22 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_20            	;
		};
	};
	/* Union WORD 23 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_21            	;
		};
	};
	/* Union WORD 24 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_22            	;
		};
	};
	/* Union WORD 25 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_23            	;
		};
	};
	/* Union WORD 26 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_24            	;
		};
	};
	/* Union WORD 27 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_25            	;
		};
	};
	/* Union WORD 28 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_26            	;
		};
	};
	/* Union WORD 29 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_27            	;
		};
	};
	/* Union WORD 30 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_28            	;
		};
	};
	/* Union WORD 31 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_29            	;
		};
	};
	/* Union WORD 32 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	entry_parms_wan_flow          	;
        uint16_t	entry_parms_tx_qm_queue       	;
		};
	};
	/* Union WORD 33 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	entry_parms_tcp_udp_parms     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	entry_parms_l2_hdr_len                  	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
        uint8_t	entry_parms_l3_hdr_len                  	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
        uint8_t	entry_parms_l3_protocol                 	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
        uint8_t	entry_parms_tx_hdr_len                  	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	entry_parms_udp_payload_offset          	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
        uint16_t	entry_parms_udp_csum                    	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	ref_pkt_hdr_offset            	;
        uint16_t	ref_pkt_hdr_size              	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_reserved          	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr               	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_1             	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_2             	;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_3             	;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_4             	;
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_5             	;
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_6             	;
		};
	};
	/* Union WORD 9 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_7             	;
		};
	};
	/* Union WORD 10 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_8             	;
		};
	};
	/* Union WORD 11 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_9             	;
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_10            	;
		};
	};
	/* Union WORD 13 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_11            	;
		};
	};
	/* Union WORD 14 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_12            	;
		};
	};
	/* Union WORD 15 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_13            	;
		};
	};
	/* Union WORD 16 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_14            	;
		};
	};
	/* Union WORD 17 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_15            	;
		};
	};
	/* Union WORD 18 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_16            	;
		};
	};
	/* Union WORD 19 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_17            	;
		};
	};
	/* Union WORD 20 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_18            	;
		};
	};
	/* Union WORD 21 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_19            	;
		};
	};
	/* Union WORD 22 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_20            	;
		};
	};
	/* Union WORD 23 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_21            	;
		};
	};
	/* Union WORD 24 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_22            	;
		};
	};
	/* Union WORD 25 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_23            	;
		};
	};
	/* Union WORD 26 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_24            	;
		};
	};
	/* Union WORD 27 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_25            	;
		};
	};
	/* Union WORD 28 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_26            	;
		};
	};
	/* Union WORD 29 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_27            	;
		};
	};
	/* Union WORD 30 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_28            	;
		};
	};
	/* Union WORD 31 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ref_pkt_hdr_hdr_29            	;
		};
	};
	/* Union WORD 32 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	entry_parms_tx_qm_queue       	;
        uint16_t	entry_parms_wan_flow          	;
		};
	};
	/* Union WORD 33 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	entry_parms_tcp_udp_parms     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	entry_parms_tx_hdr_len                  	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
        uint8_t	entry_parms_l3_protocol                 	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
        uint8_t	entry_parms_l3_hdr_len                  	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
        uint8_t	entry_parms_l2_hdr_len                  	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	entry_parms_udp_csum                    	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
        uint16_t	entry_parms_udp_payload_offset          	; /* Member of ENTRY_PARMS_tcp_udp_parms union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PKTGEN_TX_STREAM_ENTRY_STRUCT;

#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_SIZE_READ_G(r, g, idx)                        GROUP_MREAD_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT), (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_SIZE_WRITE_G(v, g, idx)                       GROUP_MWRITE_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT), (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_SIZE_READ(r, p)                               MREAD_16((uint8_t *)(p), (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_SIZE_WRITE(v, p)                              MWRITE_16((uint8_t *)(p), (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_OFFSET_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 2, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_OFFSET_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 2, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_OFFSET_READ(r, p)                             MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_OFFSET_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_RESERVED_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 4, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_RESERVED_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 4, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_RESERVED_READ(r, p)                           MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_RESERVED_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 8, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 8, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_READ(r, p)                                MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_1_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 12, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_1_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 12, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_1_READ(r, p)                              MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_1_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_2_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 16, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_2_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 16, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_2_READ(r, p)                              MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_2_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_3_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 20, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_3_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 20, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_3_READ(r, p)                              MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_3_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_4_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 24, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_4_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 24, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_4_READ(r, p)                              MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_4_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_5_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 28, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_5_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 28, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_5_READ(r, p)                              MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_5_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_6_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 32, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_6_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 32, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_6_READ(r, p)                              MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_6_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_7_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 36, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_7_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 36, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_7_READ(r, p)                              MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_7_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_8_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 40, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_8_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 40, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_8_READ(r, p)                              MREAD_32((uint8_t *)(p) + 40, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_8_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 40, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_9_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 44, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_9_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 44, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_9_READ(r, p)                              MREAD_32((uint8_t *)(p) + 44, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_9_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 44, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_10_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 48, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_10_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 48, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_10_READ(r, p)                             MREAD_32((uint8_t *)(p) + 48, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_10_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 48, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_11_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 52, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_11_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 52, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_11_READ(r, p)                             MREAD_32((uint8_t *)(p) + 52, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_11_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 52, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_12_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 56, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_12_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 56, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_12_READ(r, p)                             MREAD_32((uint8_t *)(p) + 56, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_12_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 56, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_13_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 60, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_13_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 60, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_13_READ(r, p)                             MREAD_32((uint8_t *)(p) + 60, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_13_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 60, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_14_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 64, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_14_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 64, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_14_READ(r, p)                             MREAD_32((uint8_t *)(p) + 64, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_14_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 64, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_15_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 68, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_15_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 68, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_15_READ(r, p)                             MREAD_32((uint8_t *)(p) + 68, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_15_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 68, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_16_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 72, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_16_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 72, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_16_READ(r, p)                             MREAD_32((uint8_t *)(p) + 72, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_16_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 72, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_17_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 76, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_17_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 76, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_17_READ(r, p)                             MREAD_32((uint8_t *)(p) + 76, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_17_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 76, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_18_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 80, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_18_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 80, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_18_READ(r, p)                             MREAD_32((uint8_t *)(p) + 80, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_18_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 80, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_19_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 84, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_19_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 84, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_19_READ(r, p)                             MREAD_32((uint8_t *)(p) + 84, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_19_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 84, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_20_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 88, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_20_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 88, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_20_READ(r, p)                             MREAD_32((uint8_t *)(p) + 88, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_20_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 88, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_21_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 92, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_21_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 92, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_21_READ(r, p)                             MREAD_32((uint8_t *)(p) + 92, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_21_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 92, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_22_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 96, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_22_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 96, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_22_READ(r, p)                             MREAD_32((uint8_t *)(p) + 96, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_22_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 96, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_23_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 100, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_23_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 100, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_23_READ(r, p)                             MREAD_32((uint8_t *)(p) + 100, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_23_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 100, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_24_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 104, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_24_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 104, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_24_READ(r, p)                             MREAD_32((uint8_t *)(p) + 104, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_24_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 104, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_25_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 108, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_25_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 108, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_25_READ(r, p)                             MREAD_32((uint8_t *)(p) + 108, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_25_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 108, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_26_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 112, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_26_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 112, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_26_READ(r, p)                             MREAD_32((uint8_t *)(p) + 112, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_26_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 112, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_27_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 116, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_27_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 116, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_27_READ(r, p)                             MREAD_32((uint8_t *)(p) + 116, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_27_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 116, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_28_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 120, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_28_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 120, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_28_READ(r, p)                             MREAD_32((uint8_t *)(p) + 120, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_28_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 120, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_29_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 124, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_29_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 124, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_29_READ(r, p)                             MREAD_32((uint8_t *)(p) + 124, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_29_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 124, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_WAN_FLOW_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 128, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_WAN_FLOW_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 128, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_WAN_FLOW_READ(r, p)                           MREAD_16((uint8_t *)(p) + 128, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_WAN_FLOW_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 128, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_QM_QUEUE_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 130, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_QM_QUEUE_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 130, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_QM_QUEUE_READ(r, p)                        MREAD_16((uint8_t *)(p) + 130, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_QM_QUEUE_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 130, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TCP_UDP_PARMS_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 132, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TCP_UDP_PARMS_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 132, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TCP_UDP_PARMS_READ(r, p)                      MREAD_32((uint8_t *)(p) + 132, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TCP_UDP_PARMS_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 132, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L2_HDR_LEN_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 132, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L2_HDR_LEN_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 132, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L2_HDR_LEN_READ(r, p)                         MREAD_8((uint8_t *)(p) + 132, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L2_HDR_LEN_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 132, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L3_HDR_LEN_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 133, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L3_HDR_LEN_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 133, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L3_HDR_LEN_READ(r, p)                         MREAD_8((uint8_t *)(p) + 133, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L3_HDR_LEN_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 133, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L3_PROTOCOL_READ_G(r, g, idx)                 GROUP_MREAD_8((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 134, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L3_PROTOCOL_WRITE_G(v, g, idx)                GROUP_MWRITE_8((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 134, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L3_PROTOCOL_READ(r, p)                        MREAD_8((uint8_t *)(p) + 134, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_L3_PROTOCOL_WRITE(v, p)                       MWRITE_8((uint8_t *)(p) + 134, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_HDR_LEN_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 135, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_HDR_LEN_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 135, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_HDR_LEN_READ(r, p)                         MREAD_8((uint8_t *)(p) + 135, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_HDR_LEN_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 135, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_UDP_PAYLOAD_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 132, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_UDP_PAYLOAD_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 132, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_UDP_PAYLOAD_OFFSET_READ(r, p)                 MREAD_16((uint8_t *)(p) + 132, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_UDP_PAYLOAD_OFFSET_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 132, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_UDP_CSUM_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 134, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_UDP_CSUM_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_ENTRY_STRUCT) + 134, (v))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_UDP_CSUM_READ(r, p)                           MREAD_16((uint8_t *)(p) + 134, (r))
#define RDD_PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_UDP_CSUM_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 134, (v))
/* <<<PKTGEN_TX_STREAM_ENTRY_STRUCT */


#define RDD_PKTGEN_TX_STREAM_TABLE_SIZE     4
typedef struct
{
	PKTGEN_TX_STREAM_ENTRY_STRUCT	entry[ RDD_PKTGEN_TX_STREAM_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_TX_STREAM_TABLE_STRUCT;

extern uint32_t RDD_PKTGEN_TX_STREAM_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_TX_STREAM_TABLE_PTR(core_id)	( PKTGEN_TX_STREAM_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_TX_STREAM_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_TX_STREAM_TABLE */


/* >>>IPV4_HOST_ADDRESS_TABLE */

#define RDD_IPV4_HOST_ADDRESS_TABLE_SIZE     8
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_IPV4_HOST_ADDRESS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ IPV4_HOST_ADDRESS_TABLE_STRUCT;

extern uint32_t RDD_IPV4_HOST_ADDRESS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPV4_HOST_ADDRESS_TABLE_PTR(core_id)	( IPV4_HOST_ADDRESS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPV4_HOST_ADDRESS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<IPV4_HOST_ADDRESS_TABLE */


/* >>>IPV6_HOST_ADDRESS_CRC_TABLE */

#define RDD_IPV6_HOST_ADDRESS_CRC_TABLE_SIZE     16
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_IPV6_HOST_ADDRESS_CRC_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ IPV6_HOST_ADDRESS_CRC_TABLE_STRUCT;

extern uint32_t RDD_IPV6_HOST_ADDRESS_CRC_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_IPV6_HOST_ADDRESS_CRC_TABLE_PTR(core_id)	( IPV6_HOST_ADDRESS_CRC_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_IPV6_HOST_ADDRESS_CRC_TABLE_ADDRESS_ARR[core_id] ))

/* <<<IPV6_HOST_ADDRESS_CRC_TABLE */


/* >>>DS_CPU_RX_METER_TABLE */

/* >>>CPU_RX_METER_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	current_budget  	;
        uint16_t	budget_limit    	;
        uint16_t	allocated_budget	;
        uint8_t	budget_residue  	;
        uint8_t	current_cycle   	;
#else
        uint16_t	budget_limit    	;
        uint16_t	current_budget  	;
        uint8_t	current_cycle   	;
        uint8_t	budget_residue  	;
        uint16_t	allocated_budget	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CPU_RX_METER_ENTRY_STRUCT;

#define RDD_CPU_RX_METER_ENTRY_CURRENT_BUDGET_READ_G(r, g, idx)            GROUP_MREAD_16((g), (idx)*sizeof(CPU_RX_METER_ENTRY_STRUCT), (r))
#define RDD_CPU_RX_METER_ENTRY_CURRENT_BUDGET_WRITE_G(v, g, idx)           GROUP_MWRITE_16((g), (idx)*sizeof(CPU_RX_METER_ENTRY_STRUCT), (v))
#define RDD_CPU_RX_METER_ENTRY_CURRENT_BUDGET_READ(r, p)                   MREAD_16((uint8_t *)(p), (r))
#define RDD_CPU_RX_METER_ENTRY_CURRENT_BUDGET_WRITE(v, p)                  MWRITE_16((uint8_t *)(p), (v))
#define RDD_CPU_RX_METER_ENTRY_BUDGET_LIMIT_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(CPU_RX_METER_ENTRY_STRUCT) + 2, (r))
#define RDD_CPU_RX_METER_ENTRY_BUDGET_LIMIT_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(CPU_RX_METER_ENTRY_STRUCT) + 2, (v))
#define RDD_CPU_RX_METER_ENTRY_BUDGET_LIMIT_READ(r, p)                     MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_CPU_RX_METER_ENTRY_BUDGET_LIMIT_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(CPU_RX_METER_ENTRY_STRUCT) + 4, (r))
#define RDD_CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(CPU_RX_METER_ENTRY_STRUCT) + 4, (v))
#define RDD_CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_READ(r, p)                 MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_CPU_RX_METER_ENTRY_BUDGET_RESIDUE_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(CPU_RX_METER_ENTRY_STRUCT) + 6, (r))
#define RDD_CPU_RX_METER_ENTRY_BUDGET_RESIDUE_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(CPU_RX_METER_ENTRY_STRUCT) + 6, (v))
#define RDD_CPU_RX_METER_ENTRY_BUDGET_RESIDUE_READ(r, p)                   MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_CPU_RX_METER_ENTRY_BUDGET_RESIDUE_WRITE(v, p)                  MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_CPU_RX_METER_ENTRY_CURRENT_CYCLE_READ_G(r, g, idx)             GROUP_MREAD_8((g), (idx)*sizeof(CPU_RX_METER_ENTRY_STRUCT) + 7, (r))
#define RDD_CPU_RX_METER_ENTRY_CURRENT_CYCLE_WRITE_G(v, g, idx)            GROUP_MWRITE_8((g), (idx)*sizeof(CPU_RX_METER_ENTRY_STRUCT) + 7, (v))
#define RDD_CPU_RX_METER_ENTRY_CURRENT_CYCLE_READ(r, p)                    MREAD_8((uint8_t *)(p) + 7, (r))
#define RDD_CPU_RX_METER_ENTRY_CURRENT_CYCLE_WRITE(v, p)                   MWRITE_8((uint8_t *)(p) + 7, (v))
/* <<<CPU_RX_METER_ENTRY_STRUCT */


#define RDD_DS_CPU_RX_METER_TABLE_SIZE     16
typedef struct
{
	CPU_RX_METER_ENTRY_STRUCT	entry[ RDD_DS_CPU_RX_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_CPU_RX_METER_TABLE_STRUCT;

extern uint32_t RDD_DS_CPU_RX_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_CPU_RX_METER_TABLE_PTR(core_id)	( DS_CPU_RX_METER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_CPU_RX_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_CPU_RX_METER_TABLE */


/* >>>CSO_CONTEXT_TABLE */

/* >>>CSO_CONTEXT_ENTRY_STRUCT */
#define RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_NUMBER	24
typedef union
{
    uint32_t word_32[38];
    uint64_t dword_64[19];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved                                                     	;
        uint16_t	reserved1                                                    	;
        uint16_t	csum_value                                                   	;
        uint16_t	cam_result                                                   	;
        uint16_t	reserved2                                                    	;
        uint32_t	crc_result                                                   	;
        uint32_t	saved_pkt_desc_0                                             	;
        uint32_t	saved_pkt_desc_1                                             	;
        uint32_t	saved_pkt_desc_2                                             	;
        uint32_t	saved_pkt_desc_3                                             	;
        uint32_t	parser_result[RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_NUMBER];
        uint32_t	saved_ret_address                                            	;
        uint32_t	good_csum_packets                                            	;
        uint32_t	no_cso_support_packets                                       	;
        uint32_t	bad_ipv4_hdr_csum_packets                                    	;
        uint32_t	bad_tcp_udp_csum_packets                                     	;
        uint16_t	saved_buffer_number                                          	;
        uint16_t	saved_packet_length                                          	;
#else
        uint32_t	reserved                                                     	;
        uint16_t	csum_value                                                   	;
        uint16_t	reserved1                                                    	;
        uint16_t	reserved2                                                    	;
        uint16_t	cam_result                                                   	;
        uint32_t	crc_result                                                   	;
        uint32_t	saved_pkt_desc_0                                             	;
        uint32_t	saved_pkt_desc_1                                             	;
        uint32_t	saved_pkt_desc_2                                             	;
        uint32_t	saved_pkt_desc_3                                             	;
        uint32_t	parser_result[RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_NUMBER];
        uint32_t	saved_ret_address                                            	;
        uint32_t	good_csum_packets                                            	;
        uint32_t	no_cso_support_packets                                       	;
        uint32_t	bad_ipv4_hdr_csum_packets                                    	;
        uint32_t	bad_tcp_udp_csum_packets                                     	;
        uint16_t	saved_packet_length                                          	;
        uint16_t	saved_buffer_number                                          	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CSO_CONTEXT_ENTRY_STRUCT;

#define RDD_CSO_CONTEXT_ENTRY_CSUM_VALUE_READ_G(r, g, idx)                         GROUP_MREAD_16((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 6, (r))
#define RDD_CSO_CONTEXT_ENTRY_CSUM_VALUE_WRITE_G(v, g, idx)                        GROUP_MWRITE_16((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 6, (v))
#define RDD_CSO_CONTEXT_ENTRY_CSUM_VALUE_READ(r, p)                                MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_CSO_CONTEXT_ENTRY_CSUM_VALUE_WRITE(v, p)                               MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_CSO_CONTEXT_ENTRY_CAM_RESULT_READ_G(r, g, idx)                         GROUP_MREAD_16((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 8, (r))
#define RDD_CSO_CONTEXT_ENTRY_CAM_RESULT_WRITE_G(v, g, idx)                        GROUP_MWRITE_16((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 8, (v))
#define RDD_CSO_CONTEXT_ENTRY_CAM_RESULT_READ(r, p)                                MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_CSO_CONTEXT_ENTRY_CAM_RESULT_WRITE(v, p)                               MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_CSO_CONTEXT_ENTRY_CRC_RESULT_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 12, (r))
#define RDD_CSO_CONTEXT_ENTRY_CRC_RESULT_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 12, (v))
#define RDD_CSO_CONTEXT_ENTRY_CRC_RESULT_READ(r, p)                                MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_CSO_CONTEXT_ENTRY_CRC_RESULT_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 16, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 16, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_READ(r, p)                          MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 20, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 20, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_READ(r, p)                          MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 24, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 24, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_READ(r, p)                          MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 28, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 28, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_READ(r, p)                          MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_READ_G(r, g, idx, i)                   GROUP_MREAD_I_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 32, i, (r))
#define RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_WRITE_G(v, g, idx, i)                  GROUP_MWRITE_I_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 32, i, (v))
#define RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_READ(r, p, i)                          MREAD_I_32((uint8_t *)(p) + 32, i, (r))
#define RDD_CSO_CONTEXT_ENTRY_PARSER_RESULT_WRITE(v, p, i)                         MWRITE_I_32((uint8_t *)(p) + 32, i, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 128, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 128, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_READ(r, p)                         MREAD_32((uint8_t *)(p) + 128, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 128, (v))
#define RDD_CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 132, (r))
#define RDD_CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 132, (v))
#define RDD_CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_READ(r, p)                         MREAD_32((uint8_t *)(p) + 132, (r))
#define RDD_CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 132, (v))
#define RDD_CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 136, (r))
#define RDD_CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 136, (v))
#define RDD_CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_READ(r, p)                    MREAD_32((uint8_t *)(p) + 136, (r))
#define RDD_CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 136, (v))
#define RDD_CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 140, (r))
#define RDD_CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 140, (v))
#define RDD_CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_READ(r, p)                 MREAD_32((uint8_t *)(p) + 140, (r))
#define RDD_CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 140, (v))
#define RDD_CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 144, (r))
#define RDD_CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 144, (v))
#define RDD_CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_READ(r, p)                  MREAD_32((uint8_t *)(p) + 144, (r))
#define RDD_CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 144, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 148, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 148, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_READ(r, p)                       MREAD_16((uint8_t *)(p) + 148, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 148, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 150, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(CSO_CONTEXT_ENTRY_STRUCT) + 150, (v))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_READ(r, p)                       MREAD_16((uint8_t *)(p) + 150, (r))
#define RDD_CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 150, (v))
/* <<<CSO_CONTEXT_ENTRY_STRUCT */


#define RDD_CSO_CONTEXT_TABLE_SIZE     1
typedef struct
{
	CSO_CONTEXT_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CSO_CONTEXT_TABLE_STRUCT;

extern uint32_t RDD_CSO_CONTEXT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CSO_CONTEXT_TABLE_PTR(core_id)	( CSO_CONTEXT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CSO_CONTEXT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CSO_CONTEXT_TABLE */


/* >>>CPU_RX_STACK */

#define RDD_CPU_RX_STACK_SIZE     32
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_CPU_RX_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_STACK_STRUCT;

extern uint32_t RDD_CPU_RX_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_STACK_PTR(core_id)	( CPU_RX_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_STACK_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_STACK */


/* >>>SPDSVC_GEN_PARAMS_TABLE */

/* >>>SPDSVC_GEN_PARAMS_STRUCT */
typedef union
{
    uint32_t word_32[15];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	processing_tx_pd_0	;
        uint32_t	processing_tx_pd_1	;
        uint32_t	reserved0         	;
        uint32_t	reserved1         	;
        uint32_t	reserved2         	;
        uint32_t	reserved3         	;
        uint32_t	processing_tx_pd_2	;
        uint32_t	processing_tx_pd_3	;
        uint32_t	total_copies      	;
        uint32_t	bucket            	;
        uint16_t	timer_period      	;
        uint16_t	total_length      	;
        uint32_t	tx_packets        	;
        uint32_t	tx_dropped        	;
        uint32_t	tokens            	;
        uint32_t	bucket_size       	;
#else
        uint32_t	processing_tx_pd_0	;
        uint32_t	processing_tx_pd_1	;
        uint32_t	reserved0         	;
        uint32_t	reserved1         	;
        uint32_t	reserved2         	;
        uint32_t	reserved3         	;
        uint32_t	processing_tx_pd_2	;
        uint32_t	processing_tx_pd_3	;
        uint32_t	total_copies      	;
        uint32_t	bucket            	;
        uint16_t	total_length      	;
        uint16_t	timer_period      	;
        uint32_t	tx_packets        	;
        uint32_t	tx_dropped        	;
        uint32_t	tokens            	;
        uint32_t	bucket_size       	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) SPDSVC_GEN_PARAMS_STRUCT;

#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT), (r))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT), (v))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 4, (r))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 4, (v))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 24, (r))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 24, (v))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_READ(r, p)                 MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 28, (r))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 28, (v))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_READ(r, p)                 MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_COPIES_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 32, (r))
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_COPIES_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 32, (v))
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_COPIES_READ(r, p)                       MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_COPIES_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 36, (r))
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 36, (v))
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_READ(r, p)                             MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_SPDSVC_GEN_PARAMS_TIMER_PERIOD_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 40, (r))
#define RDD_SPDSVC_GEN_PARAMS_TIMER_PERIOD_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 40, (v))
#define RDD_SPDSVC_GEN_PARAMS_TIMER_PERIOD_READ(r, p)                       MREAD_16((uint8_t *)(p) + 40, (r))
#define RDD_SPDSVC_GEN_PARAMS_TIMER_PERIOD_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 40, (v))
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_LENGTH_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 42, (r))
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_LENGTH_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 42, (v))
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_LENGTH_READ(r, p)                       MREAD_16((uint8_t *)(p) + 42, (r))
#define RDD_SPDSVC_GEN_PARAMS_TOTAL_LENGTH_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 42, (v))
#define RDD_SPDSVC_GEN_PARAMS_TX_PACKETS_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 44, (r))
#define RDD_SPDSVC_GEN_PARAMS_TX_PACKETS_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 44, (v))
#define RDD_SPDSVC_GEN_PARAMS_TX_PACKETS_READ(r, p)                         MREAD_32((uint8_t *)(p) + 44, (r))
#define RDD_SPDSVC_GEN_PARAMS_TX_PACKETS_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 44, (v))
#define RDD_SPDSVC_GEN_PARAMS_TX_DROPPED_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 48, (r))
#define RDD_SPDSVC_GEN_PARAMS_TX_DROPPED_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 48, (v))
#define RDD_SPDSVC_GEN_PARAMS_TX_DROPPED_READ(r, p)                         MREAD_32((uint8_t *)(p) + 48, (r))
#define RDD_SPDSVC_GEN_PARAMS_TX_DROPPED_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 48, (v))
#define RDD_SPDSVC_GEN_PARAMS_TOKENS_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 52, (r))
#define RDD_SPDSVC_GEN_PARAMS_TOKENS_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 52, (v))
#define RDD_SPDSVC_GEN_PARAMS_TOKENS_READ(r, p)                             MREAD_32((uint8_t *)(p) + 52, (r))
#define RDD_SPDSVC_GEN_PARAMS_TOKENS_WRITE(v, p)                            MWRITE_32((uint8_t *)(p) + 52, (v))
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_SIZE_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 56, (r))
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_SIZE_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_GEN_PARAMS_STRUCT) + 56, (v))
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_SIZE_READ(r, p)                        MREAD_32((uint8_t *)(p) + 56, (r))
#define RDD_SPDSVC_GEN_PARAMS_BUCKET_SIZE_WRITE(v, p)                       MWRITE_32((uint8_t *)(p) + 56, (v))
/* <<<SPDSVC_GEN_PARAMS_STRUCT */


#define RDD_SPDSVC_GEN_PARAMS_TABLE_SIZE     1
typedef struct
{
	SPDSVC_GEN_PARAMS_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_GEN_PARAMS_TABLE_STRUCT;

extern uint32_t RDD_SPDSVC_GEN_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_GEN_PARAMS_TABLE_PTR(core_id)	( SPDSVC_GEN_PARAMS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_GEN_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_GEN_PARAMS_TABLE */


/* >>>PKTGEN_NO_SBPM_HDRS_CNTR */

#define RDD_PKTGEN_NO_SBPM_HDRS_CNTR_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_NO_SBPM_HDRS_CNTR_STRUCT;

extern uint32_t RDD_PKTGEN_NO_SBPM_HDRS_CNTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_NO_SBPM_HDRS_CNTR_PTR(core_id)	( PKTGEN_NO_SBPM_HDRS_CNTR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_NO_SBPM_HDRS_CNTR_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_NO_SBPM_HDRS_CNTR */


/* >>>US_CPU_RX_METER_TABLE */

#define RDD_US_CPU_RX_METER_TABLE_SIZE     16
typedef struct
{
	CPU_RX_METER_ENTRY_STRUCT	entry[ RDD_US_CPU_RX_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_CPU_RX_METER_TABLE_STRUCT;

extern uint32_t RDD_US_CPU_RX_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_CPU_RX_METER_TABLE_PTR(core_id)	( US_CPU_RX_METER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_CPU_RX_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_CPU_RX_METER_TABLE */


/* >>>CPU_REASON_AND_VPORT_TO_METER_TABLE */

#define RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_SIZE     48
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_REASON_AND_VPORT_TO_METER_TABLE_STRUCT;

extern uint32_t RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_PTR(core_id)	( CPU_REASON_AND_VPORT_TO_METER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_REASON_AND_VPORT_TO_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_REASON_AND_VPORT_TO_METER_TABLE */


/* >>>CPU_RX_COPY_INT_SCRATCHPAD */

#define RDD_CPU_RX_COPY_INT_SCRATCHPAD_SIZE     4
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_CPU_RX_COPY_INT_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_COPY_INT_SCRATCHPAD_STRUCT;

extern uint32_t RDD_CPU_RX_COPY_INT_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_COPY_INT_SCRATCHPAD_PTR(core_id)	( CPU_RX_COPY_INT_SCRATCHPAD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_COPY_INT_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_COPY_INT_SCRATCHPAD */


/* >>>CPU_RX_COPY_STACK */

#define RDD_CPU_RX_COPY_STACK_SIZE     128
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_CPU_RX_COPY_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_COPY_STACK_STRUCT;

extern uint32_t RDD_CPU_RX_COPY_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_COPY_STACK_PTR(core_id)	( CPU_RX_COPY_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_COPY_STACK_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_COPY_STACK */


/* >>>TX_ABS_RECYCLE_COUNTERS */

/* >>>TX_ABS_RECYCLE_COUNTERS_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	total     	;
        uint32_t	spdsvc    	;
#else
        uint32_t	total     	;
        uint32_t	spdsvc    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) TX_ABS_RECYCLE_COUNTERS_ENTRY_STRUCT;

#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(TX_ABS_RECYCLE_COUNTERS_ENTRY_STRUCT), (r))
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(TX_ABS_RECYCLE_COUNTERS_ENTRY_STRUCT), (v))
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_READ(r, p)                  MREAD_32((uint8_t *)(p), (r))
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_WRITE(v, p)                 MWRITE_32((uint8_t *)(p), (v))
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(TX_ABS_RECYCLE_COUNTERS_ENTRY_STRUCT) + 4, (r))
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(TX_ABS_RECYCLE_COUNTERS_ENTRY_STRUCT) + 4, (v))
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<TX_ABS_RECYCLE_COUNTERS_ENTRY_STRUCT */


#define RDD_TX_ABS_RECYCLE_COUNTERS_SIZE     1
typedef struct
{
	TX_ABS_RECYCLE_COUNTERS_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ TX_ABS_RECYCLE_COUNTERS_STRUCT;

extern uint32_t RDD_TX_ABS_RECYCLE_COUNTERS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TX_ABS_RECYCLE_COUNTERS_PTR(core_id)	( TX_ABS_RECYCLE_COUNTERS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TX_ABS_RECYCLE_COUNTERS_ADDRESS_ARR[core_id] ))

/* <<<TX_ABS_RECYCLE_COUNTERS */


/* >>>CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD */

#define RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_SIZE     4
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_STRUCT;

extern uint32_t RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_PTR(core_id)	( CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_PSRAM_GET_NEXT_SCRATCHPAD */


/* >>>TCPSPDTEST_SCRATCHPAD */

#define RDD_TCPSPDTEST_SCRATCHPAD_SIZE     16
typedef struct
{
	BYTES_8_STRUCT	entry[ RDD_TCPSPDTEST_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TCPSPDTEST_SCRATCHPAD_STRUCT;

extern uint32_t RDD_TCPSPDTEST_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCPSPDTEST_SCRATCHPAD_PTR(core_id)	( TCPSPDTEST_SCRATCHPAD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCPSPDTEST_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<TCPSPDTEST_SCRATCHPAD */


/* >>>CPU_REASON_TO_TC */

#define RDD_CPU_REASON_TO_TC_SIZE     64
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_CPU_REASON_TO_TC_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_REASON_TO_TC_STRUCT;

extern uint32_t RDD_CPU_REASON_TO_TC_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_REASON_TO_TC_PTR(core_id)	( CPU_REASON_TO_TC_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_REASON_TO_TC_ADDRESS_ARR[core_id] ))

/* <<<CPU_REASON_TO_TC */


/* >>>GENERAL_TIMER */

/* >>>GENERAL_TIMER_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	counter   	;
        uint16_t	timeout   	;
        uint16_t	func_ptr  	;
        uint8_t	enable    	;
        uint8_t	reserved  	;
#else
        uint16_t	timeout   	;
        uint16_t	counter   	;
        uint8_t	reserved  	;
        uint8_t	enable    	;
        uint16_t	func_ptr  	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) GENERAL_TIMER_ENTRY_STRUCT;

#define RDD_GENERAL_TIMER_ENTRY_COUNTER_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(GENERAL_TIMER_ENTRY_STRUCT), (r))
#define RDD_GENERAL_TIMER_ENTRY_COUNTER_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(GENERAL_TIMER_ENTRY_STRUCT), (v))
#define RDD_GENERAL_TIMER_ENTRY_COUNTER_READ(r, p)                  MREAD_16((uint8_t *)(p), (r))
#define RDD_GENERAL_TIMER_ENTRY_COUNTER_WRITE(v, p)                 MWRITE_16((uint8_t *)(p), (v))
#define RDD_GENERAL_TIMER_ENTRY_TIMEOUT_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(GENERAL_TIMER_ENTRY_STRUCT) + 2, (r))
#define RDD_GENERAL_TIMER_ENTRY_TIMEOUT_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(GENERAL_TIMER_ENTRY_STRUCT) + 2, (v))
#define RDD_GENERAL_TIMER_ENTRY_TIMEOUT_READ(r, p)                  MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_GENERAL_TIMER_ENTRY_TIMEOUT_WRITE(v, p)                 MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_GENERAL_TIMER_ENTRY_FUNC_PTR_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(GENERAL_TIMER_ENTRY_STRUCT) + 4, (r))
#define RDD_GENERAL_TIMER_ENTRY_FUNC_PTR_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(GENERAL_TIMER_ENTRY_STRUCT) + 4, (v))
#define RDD_GENERAL_TIMER_ENTRY_FUNC_PTR_READ(r, p)                 MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_GENERAL_TIMER_ENTRY_FUNC_PTR_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_GENERAL_TIMER_ENTRY_ENABLE_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(GENERAL_TIMER_ENTRY_STRUCT) + 6, (r))
#define RDD_GENERAL_TIMER_ENTRY_ENABLE_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(GENERAL_TIMER_ENTRY_STRUCT) + 6, (v))
#define RDD_GENERAL_TIMER_ENTRY_ENABLE_READ(r, p)                   MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_GENERAL_TIMER_ENTRY_ENABLE_WRITE(v, p)                  MWRITE_8((uint8_t *)(p) + 6, (v))
/* <<<GENERAL_TIMER_ENTRY_STRUCT */


#define RDD_GENERAL_TIMER_SIZE     16
typedef struct
{
	GENERAL_TIMER_ENTRY_STRUCT	entry[ RDD_GENERAL_TIMER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ GENERAL_TIMER_STRUCT;

extern uint32_t RDD_GENERAL_TIMER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GENERAL_TIMER_PTR(core_id)	( GENERAL_TIMER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GENERAL_TIMER_ADDRESS_ARR[core_id] ))

/* <<<GENERAL_TIMER */


/* >>>TC_TO_CPU_RXQ */

#define RDD_TC_TO_CPU_RXQ_SIZE     64
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_TC_TO_CPU_RXQ_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TC_TO_CPU_RXQ_STRUCT;

extern uint32_t RDD_TC_TO_CPU_RXQ_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TC_TO_CPU_RXQ_PTR(core_id)	( TC_TO_CPU_RXQ_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TC_TO_CPU_RXQ_ADDRESS_ARR[core_id] ))

/* <<<TC_TO_CPU_RXQ */


/* >>>SPDSVC_GEN_STACK */

#define RDD_SPDSVC_GEN_STACK_SIZE     128
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_SPDSVC_GEN_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_GEN_STACK_STRUCT;

extern uint32_t RDD_SPDSVC_GEN_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_GEN_STACK_PTR(core_id)	( SPDSVC_GEN_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_GEN_STACK_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_GEN_STACK */


/* >>>CPU_RING_DESCRIPTORS_TABLE */

#define RDD_CPU_RING_DESCRIPTORS_TABLE_SIZE     16
typedef struct
{
	CPU_RING_DESCRIPTOR_STRUCT	entry[ RDD_CPU_RING_DESCRIPTORS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RING_DESCRIPTORS_TABLE_STRUCT;

extern uint32_t RDD_CPU_RING_DESCRIPTORS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RING_DESCRIPTORS_TABLE_PTR(core_id)	( CPU_RING_DESCRIPTORS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RING_DESCRIPTORS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RING_DESCRIPTORS_TABLE */


/* >>>CPU_RING_INTERRUPT_COUNTER_TABLE */

/* >>>CPU_RING_INTERRUPT_COUNTER_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	counter   	;
        uint32_t	max_size  	;
#else
        uint32_t	counter   	;
        uint32_t	max_size  	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CPU_RING_INTERRUPT_COUNTER_ENTRY_STRUCT;

#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(CPU_RING_INTERRUPT_COUNTER_ENTRY_STRUCT), (r))
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(CPU_RING_INTERRUPT_COUNTER_ENTRY_STRUCT), (v))
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_READ(r, p)                  MREAD_32((uint8_t *)(p), (r))
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_WRITE(v, p)                 MWRITE_32((uint8_t *)(p), (v))
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(CPU_RING_INTERRUPT_COUNTER_ENTRY_STRUCT) + 4, (r))
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(CPU_RING_INTERRUPT_COUNTER_ENTRY_STRUCT) + 4, (v))
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<CPU_RING_INTERRUPT_COUNTER_ENTRY_STRUCT */


#define RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_SIZE     18
typedef struct
{
	CPU_RING_INTERRUPT_COUNTER_ENTRY_STRUCT	entry[ RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RING_INTERRUPT_COUNTER_TABLE_STRUCT;

extern uint32_t RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_PTR(core_id)	( CPU_RING_INTERRUPT_COUNTER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RING_INTERRUPT_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RING_INTERRUPT_COUNTER_TABLE */


/* >>>EXC_TC_TO_CPU_RXQ */

#define RDD_EXC_TC_TO_CPU_RXQ_SIZE     64
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_EXC_TC_TO_CPU_RXQ_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ EXC_TC_TO_CPU_RXQ_STRUCT;

extern uint32_t RDD_EXC_TC_TO_CPU_RXQ_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_EXC_TC_TO_CPU_RXQ_PTR(core_id)	( EXC_TC_TO_CPU_RXQ_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_EXC_TC_TO_CPU_RXQ_ADDRESS_ARR[core_id] ))

/* <<<EXC_TC_TO_CPU_RXQ */


/* >>>PKTGEN_SESSION_DATA */

/* >>>PKTGEN_TX_PARAMS_STRUCT */
typedef union
{
    uint32_t word_32[8];
    uint64_t dword_64[4];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	bbmsg_sbpm_mcast_inc_req_0	;
        uint32_t	bbmsg_sbpm_mcast_inc_req_1	;
        uint32_t	ref_pd_0                  	;
        uint32_t	ref_pd_1                  	;
        uint32_t	ref_pd_2                  	;
        uint32_t	ref_pd_3                  	;
        uint32_t	task_num                  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                 	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved2                 	;
        uint16_t	bad_tx_num_of_bns         	;
#else
        uint32_t	bbmsg_sbpm_mcast_inc_req_0	;
        uint32_t	bbmsg_sbpm_mcast_inc_req_1	;
        uint32_t	ref_pd_0                  	;
        uint32_t	ref_pd_1                  	;
        uint32_t	ref_pd_2                  	;
        uint32_t	ref_pd_3                  	;
        uint32_t	reserved1                 	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num                  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	bad_tx_num_of_bns         	;
        uint16_t	reserved2                 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PKTGEN_TX_PARAMS_STRUCT;

#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT), (r))
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT), (v))
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 4, (r))
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 4, (v))
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_0_READ_G(r, g, idx)                            GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 8, (r))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_0_WRITE_G(v, g, idx)                           GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 8, (v))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_0_READ(r, p)                                   MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_0_WRITE(v, p)                                  MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_1_READ_G(r, g, idx)                            GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 12, (r))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_1_WRITE_G(v, g, idx)                           GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 12, (v))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_1_READ(r, p)                                   MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_1_WRITE(v, p)                                  MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_2_READ_G(r, g, idx)                            GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 16, (r))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_2_WRITE_G(v, g, idx)                           GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 16, (v))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_2_READ(r, p)                                   MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_2_WRITE(v, p)                                  MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_3_READ_G(r, g, idx)                            GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 20, (r))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_3_WRITE_G(v, g, idx)                           GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 20, (v))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_3_READ(r, p)                                   MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_PKTGEN_TX_PARAMS_REF_PD_3_WRITE(v, p)                                  MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_PKTGEN_TX_PARAMS_TASK_NUM_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 24, 4, 4, (r))
#define RDD_PKTGEN_TX_PARAMS_TASK_NUM_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 24, 4, 4, (v))
#define RDD_PKTGEN_TX_PARAMS_TASK_NUM_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 24, 4, 4, (r))
#define RDD_PKTGEN_TX_PARAMS_TASK_NUM_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 24, 4, 4, (v))
#define RDD_PKTGEN_TX_PARAMS_BAD_TX_NUM_OF_BNS_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 30, (r))
#define RDD_PKTGEN_TX_PARAMS_BAD_TX_NUM_OF_BNS_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(PKTGEN_TX_PARAMS_STRUCT) + 30, (v))
#define RDD_PKTGEN_TX_PARAMS_BAD_TX_NUM_OF_BNS_READ(r, p)                          MREAD_16((uint8_t *)(p) + 30, (r))
#define RDD_PKTGEN_TX_PARAMS_BAD_TX_NUM_OF_BNS_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 30, (v))
/* <<<PKTGEN_TX_PARAMS_STRUCT */


#define RDD_PKTGEN_SESSION_DATA_SIZE     1
typedef struct
{
	PKTGEN_TX_PARAMS_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_SESSION_DATA_STRUCT;

extern uint32_t RDD_PKTGEN_SESSION_DATA_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_SESSION_DATA_PTR(core_id)	( PKTGEN_SESSION_DATA_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_SESSION_DATA_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_SESSION_DATA */


/* >>>GENERAL_TIMER_STACK */

#define RDD_GENERAL_TIMER_STACK_SIZE     32
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_GENERAL_TIMER_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ GENERAL_TIMER_STACK_STRUCT;

extern uint32_t RDD_GENERAL_TIMER_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GENERAL_TIMER_STACK_PTR(core_id)	( GENERAL_TIMER_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GENERAL_TIMER_STACK_ADDRESS_ARR[core_id] ))

/* <<<GENERAL_TIMER_STACK */


/* >>>CPU_RECYCLE_STACK */

#define RDD_CPU_RECYCLE_STACK_SIZE     32
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_CPU_RECYCLE_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_STACK_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_STACK_PTR(core_id)	( CPU_RECYCLE_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_STACK_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_STACK */


/* >>>COMMON_REPROCESSING_STACK */

#define RDD_COMMON_REPROCESSING_STACK_SIZE     32
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_COMMON_REPROCESSING_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ COMMON_REPROCESSING_STACK_STRUCT;

extern uint32_t RDD_COMMON_REPROCESSING_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_COMMON_REPROCESSING_STACK_PTR(core_id)	( COMMON_REPROCESSING_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_COMMON_REPROCESSING_STACK_ADDRESS_ARR[core_id] ))

/* <<<COMMON_REPROCESSING_STACK */


/* >>>CPU_RECYCLE_SRAM_PD_FIFO */

#define RDD_CPU_RECYCLE_SRAM_PD_FIFO_SIZE     16
typedef struct
{
	PROCESSING_TX_DESCRIPTOR_STRUCT	entry[ RDD_CPU_RECYCLE_SRAM_PD_FIFO_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_SRAM_PD_FIFO_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_SRAM_PD_FIFO_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_SRAM_PD_FIFO_PTR(core_id)	( CPU_RECYCLE_SRAM_PD_FIFO_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_SRAM_PD_FIFO_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_SRAM_PD_FIFO */


/* >>>CPU_RX_COPY_PD_FIFO_TABLE */

#define RDD_CPU_RX_COPY_PD_FIFO_TABLE_SIZE     8
typedef struct
{
	PROCESSING_TX_DESCRIPTOR_STRUCT	entry[ RDD_CPU_RX_COPY_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_COPY_PD_FIFO_TABLE_STRUCT;

extern uint32_t RDD_CPU_RX_COPY_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_COPY_PD_FIFO_TABLE_PTR(core_id)	( CPU_RX_COPY_PD_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_COPY_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_COPY_PD_FIFO_TABLE */


/* >>>TCPSPDTEST_PD_FIFO_TABLE */

#define RDD_TCPSPDTEST_PD_FIFO_TABLE_SIZE     4
typedef struct
{
	PROCESSING_TX_DESCRIPTOR_STRUCT	entry[ RDD_TCPSPDTEST_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TCPSPDTEST_PD_FIFO_TABLE_STRUCT;

extern uint32_t RDD_TCPSPDTEST_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCPSPDTEST_PD_FIFO_TABLE_PTR(core_id)	( TCPSPDTEST_PD_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCPSPDTEST_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCPSPDTEST_PD_FIFO_TABLE */


/* >>>UPDATE_FIFO_TABLE */

#define RDD_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	UPDATE_FIFO_ENTRY_STRUCT	entry[ RDD_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ UPDATE_FIFO_TABLE_STRUCT;

extern uint32_t RDD_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_UPDATE_FIFO_TABLE_PTR(core_id)	( UPDATE_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<UPDATE_FIFO_TABLE */


/* >>>CPU_RX_INTERRUPT_SCRATCH */

#define RDD_CPU_RX_INTERRUPT_SCRATCH_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_INTERRUPT_SCRATCH_STRUCT;

extern uint32_t RDD_CPU_RX_INTERRUPT_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_INTERRUPT_SCRATCH_PTR(core_id)	( CPU_RX_INTERRUPT_SCRATCH_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_INTERRUPT_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_INTERRUPT_SCRATCH */


/* >>>PKTGEN_CURR_SBPM_HDR_PTR */

#define RDD_PKTGEN_CURR_SBPM_HDR_PTR_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_CURR_SBPM_HDR_PTR_STRUCT;

extern uint32_t RDD_PKTGEN_CURR_SBPM_HDR_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_CURR_SBPM_HDR_PTR_PTR(core_id)	( PKTGEN_CURR_SBPM_HDR_PTR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_CURR_SBPM_HDR_PTR_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_CURR_SBPM_HDR_PTR */


/* >>>UDPSPDT_STREAM_TX_STAT_TABLE */

/* >>>UDPSPDT_STREAM_TX_STAT_STRUCT */
typedef union
{
    uint32_t word_32[10];
    uint64_t dword_64[5];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	tx_packets_1               	;
        uint32_t	tx_packets_0               	;
        uint32_t	tx_drops_no_spbm           	;
        uint32_t	first_ts                   	;
        uint32_t	last_ts_1                  	;
        uint32_t	last_ts_0                  	;
        uint32_t	iperf3_ts_sec              	;
        uint32_t	iperf3_ts_usec             	;
        uint16_t	bad_proto_cntr             	;
        uint16_t	time_slice_expire          	;
        uint16_t	tx_drops_no_sbpm_timer_stop	;
        uint32_t	reserved                   	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_ts_set               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	tx_packets_1               	;
        uint32_t	tx_packets_0               	;
        uint32_t	tx_drops_no_spbm           	;
        uint32_t	first_ts                   	;
        uint32_t	last_ts_1                  	;
        uint32_t	last_ts_0                  	;
        uint32_t	iperf3_ts_sec              	;
        uint32_t	iperf3_ts_usec             	;
        uint16_t	time_slice_expire          	;
        uint16_t	bad_proto_cntr             	;
        uint32_t	first_ts_set               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved                   	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	tx_drops_no_sbpm_timer_stop	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) UDPSPDT_STREAM_TX_STAT_STRUCT;

#define RDD_UDPSPDT_STREAM_TX_STAT_TX_PACKETS_1_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT), (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_PACKETS_1_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT), (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_PACKETS_1_READ(r, p)                                MREAD_32((uint8_t *)(p), (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_PACKETS_1_WRITE(v, p)                               MWRITE_32((uint8_t *)(p), (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_PACKETS_0_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 4, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_PACKETS_0_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 4, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_PACKETS_0_READ(r, p)                                MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_PACKETS_0_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SPBM_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 8, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SPBM_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 8, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SPBM_READ(r, p)                            MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SPBM_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_FIRST_TS_READ_G(r, g, idx)                             GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 12, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_FIRST_TS_WRITE_G(v, g, idx)                            GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 12, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_FIRST_TS_READ(r, p)                                    MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_FIRST_TS_WRITE(v, p)                                   MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_LAST_TS_1_READ_G(r, g, idx)                            GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 16, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_LAST_TS_1_WRITE_G(v, g, idx)                           GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 16, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_LAST_TS_1_READ(r, p)                                   MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_LAST_TS_1_WRITE(v, p)                                  MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_LAST_TS_0_READ_G(r, g, idx)                            GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 20, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_LAST_TS_0_WRITE_G(v, g, idx)                           GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 20, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_LAST_TS_0_READ(r, p)                                   MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_LAST_TS_0_WRITE(v, p)                                  MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_IPERF3_TS_SEC_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 24, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_IPERF3_TS_SEC_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 24, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_IPERF3_TS_SEC_READ(r, p)                               MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_IPERF3_TS_SEC_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_IPERF3_TS_USEC_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 28, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_IPERF3_TS_USEC_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 28, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_IPERF3_TS_USEC_READ(r, p)                              MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_IPERF3_TS_USEC_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_BAD_PROTO_CNTR_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 32, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_BAD_PROTO_CNTR_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 32, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_BAD_PROTO_CNTR_READ(r, p)                              MREAD_16((uint8_t *)(p) + 32, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_BAD_PROTO_CNTR_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 32, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_TIME_SLICE_EXPIRE_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 34, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_TIME_SLICE_EXPIRE_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 34, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_TIME_SLICE_EXPIRE_READ(r, p)                           MREAD_16((uint8_t *)(p) + 34, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_TIME_SLICE_EXPIRE_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 34, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SBPM_TIMER_STOP_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 36, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SBPM_TIMER_STOP_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 36, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SBPM_TIMER_STOP_READ(r, p)                 MREAD_16((uint8_t *)(p) + 36, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SBPM_TIMER_STOP_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 36, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_FIRST_TS_SET_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 39, 0, 1, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_FIRST_TS_SET_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(UDPSPDT_STREAM_TX_STAT_STRUCT) + 39, 0, 1, (v))
#define RDD_UDPSPDT_STREAM_TX_STAT_FIRST_TS_SET_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 39, 0, 1, (r))
#define RDD_UDPSPDT_STREAM_TX_STAT_FIRST_TS_SET_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 39, 0, 1, (v))
/* <<<UDPSPDT_STREAM_TX_STAT_STRUCT */


#define RDD_UDPSPDT_STREAM_TX_STAT_TABLE_SIZE     4
typedef struct
{
	UDPSPDT_STREAM_TX_STAT_STRUCT	entry[ RDD_UDPSPDT_STREAM_TX_STAT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ UDPSPDT_STREAM_TX_STAT_TABLE_STRUCT;

extern uint32_t RDD_UDPSPDT_STREAM_TX_STAT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_UDPSPDT_STREAM_TX_STAT_TABLE_PTR(core_id)	( UDPSPDT_STREAM_TX_STAT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_UDPSPDT_STREAM_TX_STAT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<UDPSPDT_STREAM_TX_STAT_TABLE */


/* >>>TCPSPDTEST_ENGINE_GLOBAL_TABLE */

/* >>>TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT */
typedef union
{
    uint32_t word_32[5];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	num_streams               	;
        uint8_t	reserved0                 	;
        uint16_t	num_bns                   	;
        uint32_t	stream_vector             	;
        uint32_t	up_bucket_tokens          	;
        uint32_t	up_bucket_full_tokens     	;
        uint16_t	up_bucket_tokens_fill_rate	;
        uint8_t	up_next_stream_id         	;
        uint32_t	reserved1                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	up_is_timer_active        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	num_bns                   	;
        uint8_t	reserved0                 	;
        uint8_t	num_streams               	;
        uint32_t	stream_vector             	;
        uint32_t	up_bucket_tokens          	;
        uint32_t	up_bucket_full_tokens     	;
        uint32_t	up_is_timer_active        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	up_next_stream_id         	;
        uint16_t	up_bucket_tokens_fill_rate	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT;

#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_READ_G(r, g, idx)                         GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT), (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_WRITE_G(v, g, idx)                        GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT), (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_READ(r, p)                                MREAD_8((uint8_t *)(p), (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_WRITE(v, p)                               MWRITE_8((uint8_t *)(p), (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_BNS_READ_G(r, g, idx)                             GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 2, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_BNS_WRITE_G(v, g, idx)                            GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 2, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_BNS_READ(r, p)                                    MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_BNS_WRITE(v, p)                                   MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 4, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 4, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_READ(r, p)                              MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 8, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 8, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_READ(r, p)                           MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 12, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 12, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_READ(r, p)                      MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 16, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 16, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_READ(r, p)                 MREAD_16((uint8_t *)(p) + 16, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 16, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_READ_G(r, g, idx)                   GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 18, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_WRITE_G(v, g, idx)                  GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 18, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_READ(r, p)                          MREAD_8((uint8_t *)(p) + 18, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_WRITE(v, p)                         MWRITE_8((uint8_t *)(p) + 18, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_IS_TIMER_ACTIVE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 19, 0, 1, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_IS_TIMER_ACTIVE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT) + 19, 0, 1, (v))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_IS_TIMER_ACTIVE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 19, 0, 1, (r))
#define RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_IS_TIMER_ACTIVE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 19, 0, 1, (v))
/* <<<TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT */


#define RDD_TCPSPDTEST_ENGINE_GLOBAL_TABLE_SIZE     1
typedef struct
{
	TCPSPDTEST_ENGINE_GLOBAL_INFO_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ TCPSPDTEST_ENGINE_GLOBAL_TABLE_STRUCT;

extern uint32_t RDD_TCPSPDTEST_ENGINE_GLOBAL_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCPSPDTEST_ENGINE_GLOBAL_TABLE_PTR(core_id)	( TCPSPDTEST_ENGINE_GLOBAL_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCPSPDTEST_ENGINE_GLOBAL_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCPSPDTEST_ENGINE_GLOBAL_TABLE */


/* >>>PKTGEN_NUM_OF_AVAIL_SBPM_HDRS */

#define RDD_PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_STRUCT;

extern uint32_t RDD_PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_PTR(core_id)	( PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_NUM_OF_AVAIL_SBPM_HDRS_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_NUM_OF_AVAIL_SBPM_HDRS */


/* >>>PKTGEN_SBPM_END_PTR */

#define RDD_PKTGEN_SBPM_END_PTR_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_SBPM_END_PTR_STRUCT;

extern uint32_t RDD_PKTGEN_SBPM_END_PTR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_SBPM_END_PTR_PTR(core_id)	( PKTGEN_SBPM_END_PTR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_SBPM_END_PTR_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_SBPM_END_PTR */


/* >>>CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE */

#define RDD_CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_SIZE     1
typedef struct
{
	CPU_RING_INTERRUPT_COUNTER_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_PTR(core_id)	( CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_RING_INTERRUPT_COUNTER_TABLE */


/* >>>CPU_RX_COPY_UPDATE_FIFO_TABLE */

#define RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	UPDATE_FIFO_ENTRY_STRUCT	entry[ RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_COPY_UPDATE_FIFO_TABLE_STRUCT;

extern uint32_t RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_PTR(core_id)	( CPU_RX_COPY_UPDATE_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_COPY_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_COPY_UPDATE_FIFO_TABLE */


/* >>>PKTGEN_SBPM_HDR_BNS */

/* >>>PKTGEN_SBPM_HDR_BN_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	first_bn  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	ext_idx   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	ext_idx   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	first_bn  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) PKTGEN_SBPM_HDR_BN_STRUCT;

#define RDD_PKTGEN_SBPM_HDR_BN_FIRST_BN_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PKTGEN_SBPM_HDR_BN_STRUCT), 2, 14, (r))
#define RDD_PKTGEN_SBPM_HDR_BN_FIRST_BN_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PKTGEN_SBPM_HDR_BN_STRUCT), 2, 14, (v))
#define RDD_PKTGEN_SBPM_HDR_BN_FIRST_BN_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p), 2, 14, (r))
#define RDD_PKTGEN_SBPM_HDR_BN_FIRST_BN_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p), 2, 14, (v))
#define RDD_PKTGEN_SBPM_HDR_BN_EXT_IDX_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PKTGEN_SBPM_HDR_BN_STRUCT) + 1, 0, 2, (r))
#define RDD_PKTGEN_SBPM_HDR_BN_EXT_IDX_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PKTGEN_SBPM_HDR_BN_STRUCT) + 1, 0, 2, (v))
#define RDD_PKTGEN_SBPM_HDR_BN_EXT_IDX_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 2, (r))
#define RDD_PKTGEN_SBPM_HDR_BN_EXT_IDX_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 2, (v))
/* <<<PKTGEN_SBPM_HDR_BN_STRUCT */


#define RDD_PKTGEN_SBPM_HDR_BNS_SIZE     28
typedef struct
{
	PKTGEN_SBPM_HDR_BN_STRUCT	entry[ RDD_PKTGEN_SBPM_HDR_BNS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_SBPM_HDR_BNS_STRUCT;

extern uint32_t RDD_PKTGEN_SBPM_HDR_BNS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_SBPM_HDR_BNS_PTR(core_id)	( PKTGEN_SBPM_HDR_BNS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_SBPM_HDR_BNS_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_SBPM_HDR_BNS */


/* >>>CPU_FEED_RING_INDEX_DDR_ADDR_TABLE */

#define RDD_CPU_FEED_RING_INDEX_DDR_ADDR_TABLE_SIZE     1
typedef struct
{
	DDR_ADDRESS_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_FEED_RING_INDEX_DDR_ADDR_TABLE_STRUCT;

extern uint32_t RDD_CPU_FEED_RING_INDEX_DDR_ADDR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_INDEX_DDR_ADDR_TABLE_PTR(core_id)	( CPU_FEED_RING_INDEX_DDR_ADDR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_INDEX_DDR_ADDR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_INDEX_DDR_ADDR_TABLE */


/* >>>COMMON_REPROCESSING_UPDATE_FIFO_TABLE */

#define RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	UPDATE_FIFO_ENTRY_STRUCT	entry[ RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ COMMON_REPROCESSING_UPDATE_FIFO_TABLE_STRUCT;

extern uint32_t RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_PTR(core_id)	( COMMON_REPROCESSING_UPDATE_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_COMMON_REPROCESSING_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<COMMON_REPROCESSING_UPDATE_FIFO_TABLE */


/* >>>CPU_RX_COPY_DISPATCHER_CREDIT_TABLE */

#define RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_COPY_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_COPY_DISPATCHER_CREDIT_TABLE */


/* >>>PKTGEN_BAD_GET_NEXT */

#define RDD_PKTGEN_BAD_GET_NEXT_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_BAD_GET_NEXT_STRUCT;

extern uint32_t RDD_PKTGEN_BAD_GET_NEXT_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_BAD_GET_NEXT_PTR(core_id)	( PKTGEN_BAD_GET_NEXT_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_BAD_GET_NEXT_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_BAD_GET_NEXT */


/* >>>UDPSPDT_TX_PARAMS_TABLE */

/* >>>UDPSPDT_TX_PARAMS_STRUCT */
typedef union
{
    uint32_t word_32[6];
    uint64_t dword_64[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	total_num_of_pkts	;
        uint16_t	packet_size      	;
        uint16_t	reserved1        	;
        uint32_t	curr_bucket      	;
        uint32_t	bucket_budget    	;
        uint32_t	reserved2        	;
        uint32_t	max_bucket_size  	;
#else
        uint32_t	total_num_of_pkts	;
        uint16_t	reserved1        	;
        uint16_t	packet_size      	;
        uint32_t	curr_bucket      	;
        uint32_t	bucket_budget    	;
        uint32_t	reserved2        	;
        uint32_t	max_bucket_size  	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) UDPSPDT_TX_PARAMS_STRUCT;

#define RDD_UDPSPDT_TX_PARAMS_TOTAL_NUM_OF_PKTS_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_TX_PARAMS_STRUCT), (r))
#define RDD_UDPSPDT_TX_PARAMS_TOTAL_NUM_OF_PKTS_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_TX_PARAMS_STRUCT), (v))
#define RDD_UDPSPDT_TX_PARAMS_TOTAL_NUM_OF_PKTS_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_UDPSPDT_TX_PARAMS_TOTAL_NUM_OF_PKTS_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_UDPSPDT_TX_PARAMS_PACKET_SIZE_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(UDPSPDT_TX_PARAMS_STRUCT) + 4, (r))
#define RDD_UDPSPDT_TX_PARAMS_PACKET_SIZE_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(UDPSPDT_TX_PARAMS_STRUCT) + 4, (v))
#define RDD_UDPSPDT_TX_PARAMS_PACKET_SIZE_READ(r, p)                       MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_UDPSPDT_TX_PARAMS_PACKET_SIZE_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_UDPSPDT_TX_PARAMS_CURR_BUCKET_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_TX_PARAMS_STRUCT) + 8, (r))
#define RDD_UDPSPDT_TX_PARAMS_CURR_BUCKET_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_TX_PARAMS_STRUCT) + 8, (v))
#define RDD_UDPSPDT_TX_PARAMS_CURR_BUCKET_READ(r, p)                       MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_UDPSPDT_TX_PARAMS_CURR_BUCKET_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_UDPSPDT_TX_PARAMS_BUCKET_BUDGET_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_TX_PARAMS_STRUCT) + 12, (r))
#define RDD_UDPSPDT_TX_PARAMS_BUCKET_BUDGET_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_TX_PARAMS_STRUCT) + 12, (v))
#define RDD_UDPSPDT_TX_PARAMS_BUCKET_BUDGET_READ(r, p)                     MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_UDPSPDT_TX_PARAMS_BUCKET_BUDGET_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_UDPSPDT_TX_PARAMS_MAX_BUCKET_SIZE_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(UDPSPDT_TX_PARAMS_STRUCT) + 20, (r))
#define RDD_UDPSPDT_TX_PARAMS_MAX_BUCKET_SIZE_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(UDPSPDT_TX_PARAMS_STRUCT) + 20, (v))
#define RDD_UDPSPDT_TX_PARAMS_MAX_BUCKET_SIZE_READ(r, p)                   MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_UDPSPDT_TX_PARAMS_MAX_BUCKET_SIZE_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 20, (v))
/* <<<UDPSPDT_TX_PARAMS_STRUCT */


#define RDD_UDPSPDT_TX_PARAMS_TABLE_SIZE     4
typedef struct
{
	UDPSPDT_TX_PARAMS_STRUCT	entry[ RDD_UDPSPDT_TX_PARAMS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ UDPSPDT_TX_PARAMS_TABLE_STRUCT;

extern uint32_t RDD_UDPSPDT_TX_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_UDPSPDT_TX_PARAMS_TABLE_PTR(core_id)	( UDPSPDT_TX_PARAMS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_UDPSPDT_TX_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<UDPSPDT_TX_PARAMS_TABLE */


/* >>>SPDSVC_GEN_DISPATCHER_CREDIT_TABLE */

#define RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_GEN_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_GEN_DISPATCHER_CREDIT_TABLE */


/* >>>PKTGEN_MAX_UT_PKTS */

#define RDD_PKTGEN_MAX_UT_PKTS_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_MAX_UT_PKTS_STRUCT;

extern uint32_t RDD_PKTGEN_MAX_UT_PKTS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_MAX_UT_PKTS_PTR(core_id)	( PKTGEN_MAX_UT_PKTS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_MAX_UT_PKTS_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_MAX_UT_PKTS */


/* >>>TCPSPDTEST_DISPATCHER_CREDIT_TABLE */

#define RDD_TCPSPDTEST_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_TCPSPDTEST_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TCPSPDTEST_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_TCPSPDTEST_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCPSPDTEST_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( TCPSPDTEST_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCPSPDTEST_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCPSPDTEST_DISPATCHER_CREDIT_TABLE */


/* >>>PKTGEN_UT_TRIGGER */

#define RDD_PKTGEN_UT_TRIGGER_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_UT_TRIGGER_STRUCT;

extern uint32_t RDD_PKTGEN_UT_TRIGGER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_UT_TRIGGER_PTR(core_id)	( PKTGEN_UT_TRIGGER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_UT_TRIGGER_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_UT_TRIGGER */


/* >>>CPU_VPORT_TO_METER_TABLE */

#define RDD_CPU_VPORT_TO_METER_TABLE_SIZE     40
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_CPU_VPORT_TO_METER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_VPORT_TO_METER_TABLE_STRUCT;

extern uint32_t RDD_CPU_VPORT_TO_METER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_VPORT_TO_METER_TABLE_PTR(core_id)	( CPU_VPORT_TO_METER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_VPORT_TO_METER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_VPORT_TO_METER_TABLE */


/* >>>COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE */

#define RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<COMMON_REPROCESSING_DISPATCHER_CREDIT_TABLE */


/* >>>TCPSPDTEST_UPDATE_FIFO_TABLE */

#define RDD_TCPSPDTEST_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	UPDATE_FIFO_ENTRY_STRUCT	entry[ RDD_TCPSPDTEST_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TCPSPDTEST_UPDATE_FIFO_TABLE_STRUCT;

extern uint32_t RDD_TCPSPDTEST_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCPSPDTEST_UPDATE_FIFO_TABLE_PTR(core_id)	( TCPSPDTEST_UPDATE_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCPSPDTEST_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCPSPDTEST_UPDATE_FIFO_TABLE */


/* >>>TCPSPDTEST_GEN_DISPATCHER_CREDIT_TABLE */

#define RDD_TCPSPDTEST_GEN_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_TCPSPDTEST_GEN_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TCPSPDTEST_GEN_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_TCPSPDTEST_GEN_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TCPSPDTEST_GEN_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( TCPSPDTEST_GEN_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TCPSPDTEST_GEN_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TCPSPDTEST_GEN_DISPATCHER_CREDIT_TABLE */


/* >>>GENERAL_TIMER_ACTION_VEC */

#define RDD_GENERAL_TIMER_ACTION_VEC_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ GENERAL_TIMER_ACTION_VEC_STRUCT;

extern uint32_t RDD_GENERAL_TIMER_ACTION_VEC_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GENERAL_TIMER_ACTION_VEC_PTR(core_id)	( GENERAL_TIMER_ACTION_VEC_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GENERAL_TIMER_ACTION_VEC_ADDRESS_ARR[core_id] ))

/* <<<GENERAL_TIMER_ACTION_VEC */


/* >>>CPU_FEED_RING_INTERRUPT_THRESHOLD */

#define RDD_CPU_FEED_RING_INTERRUPT_THRESHOLD_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_FEED_RING_INTERRUPT_THRESHOLD_STRUCT;

extern uint32_t RDD_CPU_FEED_RING_INTERRUPT_THRESHOLD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_INTERRUPT_THRESHOLD_PTR(core_id)	( CPU_FEED_RING_INTERRUPT_THRESHOLD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_INTERRUPT_THRESHOLD_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_INTERRUPT_THRESHOLD */


/* >>>CPU_FEED_RING_INTERRUPT_COUNTER */

#define RDD_CPU_FEED_RING_INTERRUPT_COUNTER_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_FEED_RING_INTERRUPT_COUNTER_STRUCT;

extern uint32_t RDD_CPU_FEED_RING_INTERRUPT_COUNTER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_INTERRUPT_COUNTER_PTR(core_id)	( CPU_FEED_RING_INTERRUPT_COUNTER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_INTERRUPT_COUNTER_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_INTERRUPT_COUNTER */


/* >>>CPU_RECYCLE_RING_DESCRIPTOR_TABLE */

#define RDD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_SIZE     1
typedef struct
{
	CPU_RING_DESCRIPTOR_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_RING_DESCRIPTOR_TABLE_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_PTR(core_id)	( CPU_RECYCLE_RING_DESCRIPTOR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_RING_DESCRIPTOR_TABLE */


/* >>>PD_FIFO_TABLE */

#define RDD_PD_FIFO_TABLE_SIZE     2
typedef struct
{
	PROCESSING_TX_DESCRIPTOR_STRUCT	entry[ RDD_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PD_FIFO_TABLE_STRUCT;

extern uint32_t RDD_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PD_FIFO_TABLE_PTR(core_id)	( PD_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PD_FIFO_TABLE */


/* >>>CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE */

#define RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_SIZE     2
typedef struct
{
	DDR_ADDRESS_STRUCT	entry[ RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_PTR(core_id)	( CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_RING_INDEX_DDR_ADDR_TABLE */


/* >>>CPU_INTERRUPT_COALESCING_TABLE */

#define RDD_CPU_INTERRUPT_COALESCING_TABLE_SIZE     1
typedef struct
{
	CPU_INTERRUPT_COALESCING_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_INTERRUPT_COALESCING_TABLE_STRUCT;

extern uint32_t RDD_CPU_INTERRUPT_COALESCING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_INTERRUPT_COALESCING_TABLE_PTR(core_id)	( CPU_INTERRUPT_COALESCING_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_INTERRUPT_COALESCING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_INTERRUPT_COALESCING_TABLE */


/* >>>COMMON_REPROCESSING_PD_FIFO_TABLE */

#define RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_SIZE     2
typedef struct
{
	PROCESSING_TX_DESCRIPTOR_STRUCT	entry[ RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ COMMON_REPROCESSING_PD_FIFO_TABLE_STRUCT;

extern uint32_t RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_PTR(core_id)	( COMMON_REPROCESSING_PD_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_COMMON_REPROCESSING_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<COMMON_REPROCESSING_PD_FIFO_TABLE */


/* >>>CPU_RECYCLE_INTERRUPT_SCRATCH */

#define RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_SIZE     2
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_INTERRUPT_SCRATCH_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_PTR(core_id)	( CPU_RECYCLE_INTERRUPT_SCRATCH_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_INTERRUPT_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_INTERRUPT_SCRATCH */


/* >>>CPU_RX_LOCAL_SCRATCH */

#define RDD_CPU_RX_LOCAL_SCRATCH_SIZE     2
typedef struct
{
	BYTES_8_STRUCT	entry[ RDD_CPU_RX_LOCAL_SCRATCH_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RX_LOCAL_SCRATCH_STRUCT;

extern uint32_t RDD_CPU_RX_LOCAL_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RX_LOCAL_SCRATCH_PTR(core_id)	( CPU_RX_LOCAL_SCRATCH_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RX_LOCAL_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<CPU_RX_LOCAL_SCRATCH */


/* >>>VPORT_TO_CPU_OBJ */

#define RDD_VPORT_TO_CPU_OBJ_SIZE     40
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_VPORT_TO_CPU_OBJ_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ VPORT_TO_CPU_OBJ_STRUCT;

extern uint32_t RDD_VPORT_TO_CPU_OBJ_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VPORT_TO_CPU_OBJ_PTR(core_id)	( VPORT_TO_CPU_OBJ_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VPORT_TO_CPU_OBJ_ADDRESS_ARR[core_id] ))

/* <<<VPORT_TO_CPU_OBJ */


/* >>>PKTGEN_SBPM_EXTS */

/* >>>PKTGEN_SBPM_EXT_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_of_bns	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn1       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	bn1       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_of_bns	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) PKTGEN_SBPM_EXT_STRUCT;

#define RDD_PKTGEN_SBPM_EXT_NUM_OF_BNS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PKTGEN_SBPM_EXT_STRUCT) + 0, 14, 4, (r))
#define RDD_PKTGEN_SBPM_EXT_NUM_OF_BNS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PKTGEN_SBPM_EXT_STRUCT) + 0, 14, 4, (v))
#define RDD_PKTGEN_SBPM_EXT_NUM_OF_BNS_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 0, 14, 4, (r))
#define RDD_PKTGEN_SBPM_EXT_NUM_OF_BNS_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 0, 14, 4, (v))
#define RDD_PKTGEN_SBPM_EXT_BN1_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PKTGEN_SBPM_EXT_STRUCT) + 2, 0, 14, (r))
#define RDD_PKTGEN_SBPM_EXT_BN1_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PKTGEN_SBPM_EXT_STRUCT) + 2, 0, 14, (v))
#define RDD_PKTGEN_SBPM_EXT_BN1_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 14, (r))
#define RDD_PKTGEN_SBPM_EXT_BN1_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 14, (v))
/* <<<PKTGEN_SBPM_EXT_STRUCT */


#define RDD_PKTGEN_SBPM_EXTS_SIZE     4
typedef struct
{
	PKTGEN_SBPM_EXT_STRUCT	entry[ RDD_PKTGEN_SBPM_EXTS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_SBPM_EXTS_STRUCT;

extern uint32_t RDD_PKTGEN_SBPM_EXTS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_SBPM_EXTS_PTR(core_id)	( PKTGEN_SBPM_EXTS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_SBPM_EXTS_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_SBPM_EXTS */


/* >>>PKTGEN_FPM_UG_MGMT */

/* >>>PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[5];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	fpm_ug_cnt_dummy   	;
        uint32_t	fpm_ug_cnt         	;
        uint32_t	fpm_ug_cnt_reg_addr	;
        uint32_t	fpm_ug_threshold   	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fpm_tokens_quantum 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	budget             	;
#else
        uint32_t	fpm_ug_cnt_dummy   	;
        uint32_t	fpm_ug_cnt         	;
        uint32_t	fpm_ug_cnt_reg_addr	;
        uint32_t	fpm_tokens_quantum 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fpm_ug_threshold   	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	budget             	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT;

#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT), (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT), (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_READ(r, p)                    MREAD_32((uint8_t *)(p), (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_WRITE(v, p)                   MWRITE_32((uint8_t *)(p), (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT) + 4, (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT) + 4, (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_READ(r, p)                          MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT) + 8, (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT) + 8, (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_READ(r, p)                 MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_READ_G(r, g, idx)             GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT) + 12, 4, 28, (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT) + 12, 4, 28, (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_READ(r, p)                    FIELD_MREAD_32((uint8_t *)(p) + 12, 4, 28, (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_WRITE(v, p)                   FIELD_MWRITE_32((uint8_t *)(p) + 12, 4, 28, (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_TOKENS_QUANTUM_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT) + 15, 0, 4, (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_TOKENS_QUANTUM_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT) + 15, 0, 4, (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_TOKENS_QUANTUM_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 15, 0, 4, (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_FPM_TOKENS_QUANTUM_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 15, 0, 4, (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT) + 16, (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT) + 16, (v))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_READ(r, p)                              MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 16, (v))
/* <<<PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT */


#define RDD_PKTGEN_FPM_UG_MGMT_SIZE     1
typedef struct
{
	PKTGEN_FPM_UG_MGMT_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_FPM_UG_MGMT_STRUCT;

extern uint32_t RDD_PKTGEN_FPM_UG_MGMT_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_FPM_UG_MGMT_PTR(core_id)	( PKTGEN_FPM_UG_MGMT_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_FPM_UG_MGMT_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_FPM_UG_MGMT */


/* >>>SPDSVC_TCPSPDTEST_COMMON_TABLE */

/* >>>SPDSVC_TCPSPDTEST_COMMON_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	cpu_rx_copy_is_tcpspdtest_timeout_wakeup	;
#else
        uint8_t	cpu_rx_copy_is_tcpspdtest_timeout_wakeup	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} SPDSVC_TCPSPDTEST_COMMON_ENTRY_STRUCT;

#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_CPU_RX_COPY_IS_TCPSPDTEST_TIMEOUT_WAKEUP_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(SPDSVC_TCPSPDTEST_COMMON_ENTRY_STRUCT), (r))
#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_CPU_RX_COPY_IS_TCPSPDTEST_TIMEOUT_WAKEUP_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(SPDSVC_TCPSPDTEST_COMMON_ENTRY_STRUCT), (v))
#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_CPU_RX_COPY_IS_TCPSPDTEST_TIMEOUT_WAKEUP_READ(r, p)                 MREAD_8((uint8_t *)(p), (r))
#define RDD_SPDSVC_TCPSPDTEST_COMMON_ENTRY_CPU_RX_COPY_IS_TCPSPDTEST_TIMEOUT_WAKEUP_WRITE(v, p)                MWRITE_8((uint8_t *)(p), (v))
/* <<<SPDSVC_TCPSPDTEST_COMMON_ENTRY_STRUCT */


#define RDD_SPDSVC_TCPSPDTEST_COMMON_TABLE_SIZE     1
typedef struct
{
	SPDSVC_TCPSPDTEST_COMMON_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_TCPSPDTEST_COMMON_TABLE_STRUCT;

extern uint32_t RDD_SPDSVC_TCPSPDTEST_COMMON_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_TCPSPDTEST_COMMON_TABLE_PTR(core_id)	( SPDSVC_TCPSPDTEST_COMMON_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_TCPSPDTEST_COMMON_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_TCPSPDTEST_COMMON_TABLE */


/* >>>CPU_FEED_RING_CACHE_OFFSET */

#define RDD_CPU_FEED_RING_CACHE_OFFSET_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_FEED_RING_CACHE_OFFSET_STRUCT;

extern uint32_t RDD_CPU_FEED_RING_CACHE_OFFSET_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_FEED_RING_CACHE_OFFSET_PTR(core_id)	( CPU_FEED_RING_CACHE_OFFSET_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_FEED_RING_CACHE_OFFSET_ADDRESS_ARR[core_id] ))

/* <<<CPU_FEED_RING_CACHE_OFFSET */


/* >>>PKTGEN_BBMSG_REPLY_SCRATCH */

#define RDD_PKTGEN_BBMSG_REPLY_SCRATCH_SIZE     2
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_PKTGEN_BBMSG_REPLY_SCRATCH_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_BBMSG_REPLY_SCRATCH_STRUCT;

extern uint32_t RDD_PKTGEN_BBMSG_REPLY_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_BBMSG_REPLY_SCRATCH_PTR(core_id)	( PKTGEN_BBMSG_REPLY_SCRATCH_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_BBMSG_REPLY_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_BBMSG_REPLY_SCRATCH */


/* >>>CPU_RECYCLE_SHADOW_RD_IDX */

#define RDD_CPU_RECYCLE_SHADOW_RD_IDX_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_SHADOW_RD_IDX_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_SHADOW_RD_IDX_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_SHADOW_RD_IDX_PTR(core_id)	( CPU_RECYCLE_SHADOW_RD_IDX_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_SHADOW_RD_IDX_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_SHADOW_RD_IDX */


/* >>>CSO_DISABLE */

#define RDD_CSO_DISABLE_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CSO_DISABLE_STRUCT;

extern uint32_t RDD_CSO_DISABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CSO_DISABLE_PTR(core_id)	( CSO_DISABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CSO_DISABLE_ADDRESS_ARR[core_id] ))

/* <<<CSO_DISABLE */


/* >>>CPU_RECYCLE_SHADOW_WR_IDX */

#define RDD_CPU_RECYCLE_SHADOW_WR_IDX_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_SHADOW_WR_IDX_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_SHADOW_WR_IDX_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_SHADOW_WR_IDX_PTR(core_id)	( CPU_RECYCLE_SHADOW_WR_IDX_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_SHADOW_WR_IDX_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_SHADOW_WR_IDX */


/* >>>CPU_RECYCLE_NEXT_PTR_TABLE */

#define RDD_CPU_RECYCLE_NEXT_PTR_TABLE_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_RECYCLE_NEXT_PTR_TABLE_STRUCT;

extern uint32_t RDD_CPU_RECYCLE_NEXT_PTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_RECYCLE_NEXT_PTR_TABLE_PTR(core_id)	( CPU_RECYCLE_NEXT_PTR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_RECYCLE_NEXT_PTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_RECYCLE_NEXT_PTR_TABLE */


/* >>>PKTGEN_TX_STREAM_SCRATCH_TABLE */

/* >>>PKTGEN_TX_STREAM_SCRATCH_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0 	;
        uint16_t	csum_value	;
        uint16_t	reserved1 	;
#else
        uint32_t	reserved0 	;
        uint16_t	reserved1 	;
        uint16_t	csum_value	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PKTGEN_TX_STREAM_SCRATCH_ENTRY_STRUCT;

#define RDD_PKTGEN_TX_STREAM_SCRATCH_ENTRY_CSUM_VALUE_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_SCRATCH_ENTRY_STRUCT) + 4, (r))
#define RDD_PKTGEN_TX_STREAM_SCRATCH_ENTRY_CSUM_VALUE_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(PKTGEN_TX_STREAM_SCRATCH_ENTRY_STRUCT) + 4, (v))
#define RDD_PKTGEN_TX_STREAM_SCRATCH_ENTRY_CSUM_VALUE_READ(r, p)                 MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_PKTGEN_TX_STREAM_SCRATCH_ENTRY_CSUM_VALUE_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 4, (v))
/* <<<PKTGEN_TX_STREAM_SCRATCH_ENTRY_STRUCT */


#define RDD_PKTGEN_TX_STREAM_SCRATCH_TABLE_SIZE     1
typedef struct
{
	PKTGEN_TX_STREAM_SCRATCH_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ PKTGEN_TX_STREAM_SCRATCH_TABLE_STRUCT;

extern uint32_t RDD_PKTGEN_TX_STREAM_SCRATCH_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PKTGEN_TX_STREAM_SCRATCH_TABLE_PTR(core_id)	( PKTGEN_TX_STREAM_SCRATCH_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PKTGEN_TX_STREAM_SCRATCH_TABLE_ADDRESS_ARR[core_id] ))

/* <<<PKTGEN_TX_STREAM_SCRATCH_TABLE */

/* CORE_2 */

/* >>>SERVICE_QUEUES_RATE_LIMITER_TABLE */

/* >>>BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	rl_type       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:21	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	block_type    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	block_index   	;
        uint32_t	current_budget	;
        uint32_t	alloc_mantissa	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	alloc_exponent	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	limit_mantissa	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	limit_exponent	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	;
#else
        uint8_t	block_index   	;
        uint32_t	block_type    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:21	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rl_type       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	current_budget	;
        uint32_t	limit_exponent	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	limit_mantissa	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	alloc_exponent	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	alloc_mantissa	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT;

#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_RL_TYPE_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_RL_TYPE_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_RL_TYPE_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_RL_TYPE_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 2, 0, 2, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 2, 0, 2, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 2, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 2, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_READ_G(r, g, idx)             GROUP_MREAD_8((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 3, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_WRITE_G(v, g, idx)            GROUP_MWRITE_8((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 3, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_READ(r, p)                    MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_WRITE(v, p)                   MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 8, 2, 14, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 8, 2, 14, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 8, 2, 14, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 8, 2, 14, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 9, 0, 2, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 9, 0, 2, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 2, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 2, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 10, 2, 14, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 10, 2, 14, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 10, 2, 14, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 10, 2, 14, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 11, 0, 2, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT) + 11, 0, 2, (v))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 11, 0, 2, (r))
#define RDD_BASIC_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 11, 0, 2, (v))
/* <<<BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT */


#define RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_SIZE     66
typedef struct
{
	BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT	entry[ RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_RATE_LIMITER_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_PTR(core_id)	( SERVICE_QUEUES_RATE_LIMITER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_RATE_LIMITER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_RATE_LIMITER_TABLE */


/* >>>CPU_TX_DBG_CNTRS_TABLE */

/* >>>CPU_TX_DBG_CNTRS_STRUCT */
#define RDD_CPU_TX_DBG_CNTRS_RESERVED_NUMBER	5
typedef union
{
    uint32_t word_32[16];
    uint64_t dword_64[8];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	sbpm_no_next                                     	;
        uint32_t	sbpm_no_first                                    	;
        uint32_t	tx_flow_disable                                  	;
        uint32_t	no_fpm                                           	;
        uint32_t	task_exit                                        	;
        uint32_t	sync_wait                                        	;
        uint32_t	no_dispatcher_scheduler                          	;
        uint32_t	recycle_fifo_full                                	;
        uint32_t	drop_pkt                                         	;
        uint32_t	task_start                                       	;
        uint32_t	no_fwd                                           	;
        uint32_t	reserved[RDD_CPU_TX_DBG_CNTRS_RESERVED_NUMBER];
#else
        uint32_t	sbpm_no_next                                     	;
        uint32_t	sbpm_no_first                                    	;
        uint32_t	tx_flow_disable                                  	;
        uint32_t	no_fpm                                           	;
        uint32_t	task_exit                                        	;
        uint32_t	sync_wait                                        	;
        uint32_t	no_dispatcher_scheduler                          	;
        uint32_t	recycle_fifo_full                                	;
        uint32_t	drop_pkt                                         	;
        uint32_t	task_start                                       	;
        uint32_t	no_fwd                                           	;
        uint32_t	reserved[RDD_CPU_TX_DBG_CNTRS_RESERVED_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CPU_TX_DBG_CNTRS_STRUCT;

#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT), (r))
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT), (v))
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_READ(r, p)                            MREAD_32((uint8_t *)(p), (r))
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_WRITE(v, p)                           MWRITE_32((uint8_t *)(p), (v))
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 4, (r))
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 4, (v))
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_READ(r, p)                           MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 8, (r))
#define RDD_CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 8, (v))
#define RDD_CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_READ(r, p)                         MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_CPU_TX_DBG_CNTRS_NO_FPM_READ_G(r, g, idx)                           GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 12, (r))
#define RDD_CPU_TX_DBG_CNTRS_NO_FPM_WRITE_G(v, g, idx)                          GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 12, (v))
#define RDD_CPU_TX_DBG_CNTRS_NO_FPM_READ(r, p)                                  MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_CPU_TX_DBG_CNTRS_NO_FPM_WRITE(v, p)                                 MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_CPU_TX_DBG_CNTRS_TASK_EXIT_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 16, (r))
#define RDD_CPU_TX_DBG_CNTRS_TASK_EXIT_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 16, (v))
#define RDD_CPU_TX_DBG_CNTRS_TASK_EXIT_READ(r, p)                               MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_CPU_TX_DBG_CNTRS_TASK_EXIT_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_CPU_TX_DBG_CNTRS_SYNC_WAIT_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 20, (r))
#define RDD_CPU_TX_DBG_CNTRS_SYNC_WAIT_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 20, (v))
#define RDD_CPU_TX_DBG_CNTRS_SYNC_WAIT_READ(r, p)                               MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_CPU_TX_DBG_CNTRS_SYNC_WAIT_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 24, (r))
#define RDD_CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 24, (v))
#define RDD_CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_READ(r, p)                 MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 28, (r))
#define RDD_CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 28, (v))
#define RDD_CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_READ(r, p)                       MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_CPU_TX_DBG_CNTRS_DROP_PKT_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 32, (r))
#define RDD_CPU_TX_DBG_CNTRS_DROP_PKT_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 32, (v))
#define RDD_CPU_TX_DBG_CNTRS_DROP_PKT_READ(r, p)                                MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_CPU_TX_DBG_CNTRS_DROP_PKT_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_CPU_TX_DBG_CNTRS_TASK_START_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 36, (r))
#define RDD_CPU_TX_DBG_CNTRS_TASK_START_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 36, (v))
#define RDD_CPU_TX_DBG_CNTRS_TASK_START_READ(r, p)                              MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_CPU_TX_DBG_CNTRS_TASK_START_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_CPU_TX_DBG_CNTRS_NO_FWD_READ_G(r, g, idx)                           GROUP_MREAD_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 40, (r))
#define RDD_CPU_TX_DBG_CNTRS_NO_FWD_WRITE_G(v, g, idx)                          GROUP_MWRITE_32((g), (idx)*sizeof(CPU_TX_DBG_CNTRS_STRUCT) + 40, (v))
#define RDD_CPU_TX_DBG_CNTRS_NO_FWD_READ(r, p)                                  MREAD_32((uint8_t *)(p) + 40, (r))
#define RDD_CPU_TX_DBG_CNTRS_NO_FWD_WRITE(v, p)                                 MWRITE_32((uint8_t *)(p) + 40, (v))
/* <<<CPU_TX_DBG_CNTRS_STRUCT */


#define RDD_CPU_TX_DBG_CNTRS_TABLE_SIZE     2
typedef struct
{
	CPU_TX_DBG_CNTRS_STRUCT	entry[ RDD_CPU_TX_DBG_CNTRS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_TX_DBG_CNTRS_TABLE_STRUCT;

extern uint32_t RDD_CPU_TX_DBG_CNTRS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_DBG_CNTRS_TABLE_PTR(core_id)	( CPU_TX_DBG_CNTRS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_DBG_CNTRS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_DBG_CNTRS_TABLE */


/* >>>SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE */

/* >>>SCHEDULING_QUEUE_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	prefetch_pd           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	codel_dropped_recently	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bbh_queue_index       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	block_type            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	enable                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rate_limit_enable     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	codel_enable          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1             	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	codel_dropping        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	scheduler_index       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	queue_bit_mask        	;
        uint8_t	rate_limiter_index    	;
        uint8_t	quantum_number        	;
        uint16_t	deficit_counter       	;
#else
        uint8_t	queue_bit_mask        	;
        uint32_t	scheduler_index       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	codel_dropping        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1             	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	codel_enable          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rate_limit_enable     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	enable                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	block_type            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bbh_queue_index       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	codel_dropped_recently	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	prefetch_pd           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	deficit_counter       	;
        uint8_t	quantum_number        	;
        uint8_t	rate_limiter_index    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SCHEDULING_QUEUE_DESCRIPTOR_STRUCT;

#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_PREFETCH_PD_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_PREFETCH_PD_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_PREFETCH_PD_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_PREFETCH_PD_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_DROPPED_RECENTLY_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT), 6, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_DROPPED_RECENTLY_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT), 6, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_DROPPED_RECENTLY_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_DROPPED_RECENTLY_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BBH_QUEUE_INDEX_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT), 0, 6, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BBH_QUEUE_INDEX_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT), 0, 6, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BBH_QUEUE_INDEX_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 0, 6, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BBH_QUEUE_INDEX_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 0, 6, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BLOCK_TYPE_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 1, 7, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BLOCK_TYPE_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 1, 7, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BLOCK_TYPE_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 1, 7, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_BLOCK_TYPE_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 1, 7, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_ENABLE_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 1, 6, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_ENABLE_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 1, 6, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_ENABLE_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 1, 6, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_ENABLE_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 1, 6, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMIT_ENABLE_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 1, 5, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 1, 5, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMIT_ENABLE_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 1, 5, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 1, 5, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_ENABLE_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 1, 4, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_ENABLE_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 1, 4, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_ENABLE_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 1, 4, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_ENABLE_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 1, 4, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_DROPPING_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 2, 7, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_DROPPING_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 2, 7, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_DROPPING_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 2, 7, 1, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_CODEL_DROPPING_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 2, 7, 1, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 2, 0, 7, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 2, 0, 7, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 7, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 7, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUEUE_BIT_MASK_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 3, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUEUE_BIT_MASK_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 3, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUEUE_BIT_MASK_READ(r, p)                         MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUEUE_BIT_MASK_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMITER_INDEX_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMITER_INDEX_READ(r, p)                     MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUANTUM_NUMBER_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 5, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUANTUM_NUMBER_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 5, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUANTUM_NUMBER_READ(r, p)                         MREAD_8((uint8_t *)(p) + 5, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_QUANTUM_NUMBER_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 5, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_DEFICIT_COUNTER_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 6, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_DEFICIT_COUNTER_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(SCHEDULING_QUEUE_DESCRIPTOR_STRUCT) + 6, (v))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_DEFICIT_COUNTER_READ(r, p)                        MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_SCHEDULING_QUEUE_DESCRIPTOR_DEFICIT_COUNTER_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 6, (v))
/* <<<SCHEDULING_QUEUE_DESCRIPTOR_STRUCT */


#define RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_SIZE     32
typedef struct
{
	SCHEDULING_QUEUE_DESCRIPTOR_STRUCT	entry[ RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_PTR(core_id)	( SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_SCHEDULING_QUEUE_TABLE */


/* >>>CODEL_SQ_TABLE */

/* >>>CODEL_SQ_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	ts        	;
#else
        uint16_t	ts        	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) CODEL_SQ_ENTRY_STRUCT;

#define RDD_CODEL_SQ_ENTRY_TS_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(CODEL_SQ_ENTRY_STRUCT), (r))
#define RDD_CODEL_SQ_ENTRY_TS_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(CODEL_SQ_ENTRY_STRUCT), (v))
#define RDD_CODEL_SQ_ENTRY_TS_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_CODEL_SQ_ENTRY_TS_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
/* <<<CODEL_SQ_ENTRY_STRUCT */


#define RDD_CODEL_SQ_TABLE_SIZE     32
typedef struct
{
	CODEL_SQ_ENTRY_STRUCT	entry[ RDD_CODEL_SQ_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CODEL_SQ_TABLE_STRUCT;

extern uint32_t RDD_CODEL_SQ_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CODEL_SQ_TABLE_PTR(core_id)	( CODEL_SQ_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CODEL_SQ_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CODEL_SQ_TABLE */


/* >>>CPU_TX_0_STACK */

#define RDD_CPU_TX_0_STACK_SIZE     128
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_CPU_TX_0_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_TX_0_STACK_STRUCT;

extern uint32_t RDD_CPU_TX_0_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_0_STACK_PTR(core_id)	( CPU_TX_0_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_0_STACK_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_0_STACK */


/* >>>CPU_TX_SCRATCHPAD */

#define RDD_CPU_TX_SCRATCHPAD_SIZE     128
typedef struct
{
	BYTES_8_STRUCT	entry[ RDD_CPU_TX_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_TX_SCRATCHPAD_STRUCT;

extern uint32_t RDD_CPU_TX_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_SCRATCHPAD_PTR(core_id)	( CPU_TX_SCRATCHPAD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_SCRATCHPAD */


/* >>>SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE */

/* >>>COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT */
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RESERVED3_NUMBER	3
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_NUMBER	32
typedef union
{
    uint32_t word_32[16];
    uint64_t dword_64[8];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_positive_budget                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bbh_queue                                                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rate_limiter_index                                                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dwrr_offset_pir                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dwrr_offset_sir                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	last_served_block_pir                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	last_served_block_sir                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	status_bit_vector                                                   	;
        uint32_t	slot_budget_bit_vector_0                                            	;
        uint32_t	slot_budget_bit_vector_1                                            	;
        uint32_t	is_scheduler_slot                                                   	;
        uint32_t	is_scheduler_basic                                                  	;
        uint32_t	ovl_rl_en                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rate_limit_enable                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parent_scheduler_exists                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parent_scheduler_index                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parent_scheduler_slot_index                                         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                           	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	deficit_counter                                                     	;
        uint8_t	quantum_number                                                      	;
        uint8_t	reserved3[RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RESERVED3_NUMBER];
        uint8_t	block_index[RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_NUMBER];
#else
        uint32_t	last_served_block_sir                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	last_served_block_pir                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dwrr_offset_sir                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dwrr_offset_pir                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rate_limiter_index                                                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bbh_queue                                                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_positive_budget                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	status_bit_vector                                                   	;
        uint32_t	slot_budget_bit_vector_0                                            	;
        uint32_t	slot_budget_bit_vector_1                                            	;
        uint32_t	is_scheduler_slot                                                   	;
        uint32_t	is_scheduler_basic                                                  	;
        uint16_t	deficit_counter                                                     	;
        uint32_t	reserved2                                                           	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parent_scheduler_slot_index                                         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parent_scheduler_index                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parent_scheduler_exists                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rate_limit_enable                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ovl_rl_en                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved3[RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RESERVED3_NUMBER];
        uint8_t	quantum_number                                                      	;
        uint8_t	block_index[RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT;

#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT), 6, 1, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT), 6, 1, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BBH_QUEUE_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT), 0, 6, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BBH_QUEUE_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT), 0, 6, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BBH_QUEUE_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p), 0, 6, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BBH_QUEUE_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p), 0, 6, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 1, 0, 7, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 1, 0, 7, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 7, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 7, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_PIR_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 5, 3, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_PIR_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 5, 3, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_PIR_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 2, 5, 3, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_PIR_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 2, 5, 3, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_SIR_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 2, 3, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_SIR_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 2, 3, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_SIR_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 2, 2, 3, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_SIR_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 2, 2, 3, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_PIR_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 5, 5, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_PIR_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 5, 5, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_PIR_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p) + 2, 5, 5, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_PIR_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p) + 2, 5, 5, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_SIR_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 3, 0, 5, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_SIR_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 3, 0, 5, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_SIR_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 5, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_LAST_SERVED_BLOCK_SIR_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 5, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_READ(r, p)                           MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_0_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 8, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_0_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 8, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_0_READ(r, p)                    MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_0_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_1_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_1_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_1_READ(r, p)                    MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_1_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_SLOT_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 16, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_SLOT_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 16, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_SLOT_READ(r, p)                           MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_SLOT_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_BASIC_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 20, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_BASIC_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 20, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_BASIC_READ(r, p)                          MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_IS_SCHEDULER_BASIC_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_OVL_RL_EN_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 24, 7, 1, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_OVL_RL_EN_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 24, 7, 1, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_OVL_RL_EN_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 24, 7, 1, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_OVL_RL_EN_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 24, 7, 1, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 24, 6, 1, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 24, 6, 1, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 24, 6, 1, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 24, 6, 1, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_EXISTS_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 24, 5, 1, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_EXISTS_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 24, 5, 1, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_EXISTS_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 24, 5, 1, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_EXISTS_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 24, 5, 1, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_INDEX_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 24, 1, 4, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_INDEX_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 24, 1, 4, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_INDEX_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 24, 1, 4, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_INDEX_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 24, 1, 4, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_SLOT_INDEX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 24, 4, 5, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_SLOT_INDEX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 24, 4, 5, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_SLOT_INDEX_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 24, 4, 5, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_PARENT_SCHEDULER_SLOT_INDEX_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 24, 4, 5, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 26, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 26, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_READ(r, p)                             MREAD_16((uint8_t *)(p) + 26, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 26, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_READ_G(r, g, idx)                       GROUP_MREAD_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 28, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_WRITE_G(v, g, idx)                      GROUP_MWRITE_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 28, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_READ(r, p)                              MREAD_8((uint8_t *)(p) + 28, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_WRITE(v, p)                             MWRITE_8((uint8_t *)(p) + 28, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_READ_G(r, g, idx, i)                       GROUP_MREAD_I_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 32, i, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_WRITE_G(v, g, idx, i)                      GROUP_MWRITE_I_8((g), (idx)*sizeof(COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT) + 32, i, (v))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_READ(r, p, i)                              MREAD_I_8((uint8_t *)(p) + 32, i, (r))
#define RDD_COMPLEX_SCHEDULER_DESCRIPTOR_BLOCK_INDEX_WRITE(v, p, i)                             MWRITE_I_8((uint8_t *)(p) + 32, i, (v))
/* <<<COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT */


#define RDD_SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_SIZE     1
typedef struct
{
	COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_PTR(core_id)	( SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_COMPLEX_SCHEDULER_TABLE */


/* >>>SERVICE_QUEUES_PD_FIFO_TABLE */

#define RDD_SERVICE_QUEUES_PD_FIFO_TABLE_SIZE     64
typedef struct
{
	PROCESSING_TX_DESCRIPTOR_STRUCT	entry[ RDD_SERVICE_QUEUES_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_PD_FIFO_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_PD_FIFO_TABLE_PTR(core_id)	( SERVICE_QUEUES_PD_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_PD_FIFO_TABLE */


/* >>>CODEL_BIAS_SLOPE_TABLE */

/* >>>CODEL_BIAS_SLOPE_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	bias      	;
        uint16_t	slope     	;
#else
        uint16_t	slope     	;
        uint16_t	bias      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) CODEL_BIAS_SLOPE_STRUCT;

#define RDD_CODEL_BIAS_SLOPE_BIAS_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(CODEL_BIAS_SLOPE_STRUCT), (r))
#define RDD_CODEL_BIAS_SLOPE_BIAS_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(CODEL_BIAS_SLOPE_STRUCT), (v))
#define RDD_CODEL_BIAS_SLOPE_BIAS_READ(r, p)                  MREAD_16((uint8_t *)(p), (r))
#define RDD_CODEL_BIAS_SLOPE_BIAS_WRITE(v, p)                 MWRITE_16((uint8_t *)(p), (v))
#define RDD_CODEL_BIAS_SLOPE_SLOPE_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(CODEL_BIAS_SLOPE_STRUCT) + 2, (r))
#define RDD_CODEL_BIAS_SLOPE_SLOPE_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(CODEL_BIAS_SLOPE_STRUCT) + 2, (v))
#define RDD_CODEL_BIAS_SLOPE_SLOPE_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_CODEL_BIAS_SLOPE_SLOPE_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
/* <<<CODEL_BIAS_SLOPE_STRUCT */


#define RDD_CODEL_BIAS_SLOPE_TABLE_SIZE     11
typedef struct
{
	CODEL_BIAS_SLOPE_STRUCT	entry[ RDD_CODEL_BIAS_SLOPE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CODEL_BIAS_SLOPE_TABLE_STRUCT;

extern uint32_t RDD_CODEL_BIAS_SLOPE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CODEL_BIAS_SLOPE_TABLE_PTR(core_id)	( CODEL_BIAS_SLOPE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CODEL_BIAS_SLOPE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CODEL_BIAS_SLOPE_TABLE */


/* >>>DDR_LATENCY_DBG_USEC */

#define RDD_DDR_LATENCY_DBG_USEC_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DDR_LATENCY_DBG_USEC_STRUCT;

extern uint32_t RDD_DDR_LATENCY_DBG_USEC_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DDR_LATENCY_DBG_USEC_PTR(core_id)	( DDR_LATENCY_DBG_USEC_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DDR_LATENCY_DBG_USEC_ADDRESS_ARR[core_id] ))

/* <<<DDR_LATENCY_DBG_USEC */


/* >>>CPU_TX_1_STACK */

#define RDD_CPU_TX_1_STACK_SIZE     128
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_CPU_TX_1_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_TX_1_STACK_STRUCT;

extern uint32_t RDD_CPU_TX_1_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_1_STACK_PTR(core_id)	( CPU_TX_1_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_1_STACK_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_1_STACK */


/* >>>QUEUE_THRESHOLD_VECTOR */

#define RDD_QUEUE_THRESHOLD_VECTOR_SIZE     9
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_QUEUE_THRESHOLD_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ QUEUE_THRESHOLD_VECTOR_STRUCT;

extern uint32_t RDD_QUEUE_THRESHOLD_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_QUEUE_THRESHOLD_VECTOR_PTR(core_id)	( QUEUE_THRESHOLD_VECTOR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_QUEUE_THRESHOLD_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<QUEUE_THRESHOLD_VECTOR */


/* >>>DDR_LATENCY_DBG_USEC_MAX */

#define RDD_DDR_LATENCY_DBG_USEC_MAX_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DDR_LATENCY_DBG_USEC_MAX_STRUCT;

extern uint32_t RDD_DDR_LATENCY_DBG_USEC_MAX_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DDR_LATENCY_DBG_USEC_MAX_PTR(core_id)	( DDR_LATENCY_DBG_USEC_MAX_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DDR_LATENCY_DBG_USEC_MAX_ADDRESS_ARR[core_id] ))

/* <<<DDR_LATENCY_DBG_USEC_MAX */


/* >>>BUFFER_ALLOC_REPLY */

#define RDD_BUFFER_ALLOC_REPLY_SIZE     2
typedef struct
{
	BYTES_8_STRUCT	entry[ RDD_BUFFER_ALLOC_REPLY_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BUFFER_ALLOC_REPLY_STRUCT;

extern uint32_t RDD_BUFFER_ALLOC_REPLY_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BUFFER_ALLOC_REPLY_PTR(core_id)	( BUFFER_ALLOC_REPLY_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BUFFER_ALLOC_REPLY_ADDRESS_ARR[core_id] ))

/* <<<BUFFER_ALLOC_REPLY */


/* >>>SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR */

#define RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_SIZE     5
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_PTR(core_id)	( SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_SCHEDULING_QUEUE_AGING_VECTOR */


/* >>>SERVICE_QUEUES_CODEL_QUEUE_TABLE */

/* >>>CODEL_QUEUE_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	window_ts    	;
        uint16_t	drop_interval	;
#else
        uint16_t	drop_interval	;
        uint16_t	window_ts    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) CODEL_QUEUE_DESCRIPTOR_STRUCT;

#define RDD_CODEL_QUEUE_DESCRIPTOR_WINDOW_TS_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(CODEL_QUEUE_DESCRIPTOR_STRUCT), (r))
#define RDD_CODEL_QUEUE_DESCRIPTOR_WINDOW_TS_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(CODEL_QUEUE_DESCRIPTOR_STRUCT), (v))
#define RDD_CODEL_QUEUE_DESCRIPTOR_WINDOW_TS_READ(r, p)                     MREAD_16((uint8_t *)(p), (r))
#define RDD_CODEL_QUEUE_DESCRIPTOR_WINDOW_TS_WRITE(v, p)                    MWRITE_16((uint8_t *)(p), (v))
#define RDD_CODEL_QUEUE_DESCRIPTOR_DROP_INTERVAL_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(CODEL_QUEUE_DESCRIPTOR_STRUCT) + 2, (r))
#define RDD_CODEL_QUEUE_DESCRIPTOR_DROP_INTERVAL_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(CODEL_QUEUE_DESCRIPTOR_STRUCT) + 2, (v))
#define RDD_CODEL_QUEUE_DESCRIPTOR_DROP_INTERVAL_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_CODEL_QUEUE_DESCRIPTOR_DROP_INTERVAL_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
/* <<<CODEL_QUEUE_DESCRIPTOR_STRUCT */


#define RDD_SERVICE_QUEUES_CODEL_QUEUE_TABLE_SIZE     32
typedef struct
{
	CODEL_QUEUE_DESCRIPTOR_STRUCT	entry[ RDD_SERVICE_QUEUES_CODEL_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_CODEL_QUEUE_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_CODEL_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_CODEL_QUEUE_TABLE_PTR(core_id)	( SERVICE_QUEUES_CODEL_QUEUE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_CODEL_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_CODEL_QUEUE_TABLE */


/* >>>SERVICE_QUEUES_UPDATE_FIFO_TABLE */

#define RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	UPDATE_FIFO_ENTRY_STRUCT	entry[ RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_UPDATE_FIFO_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_PTR(core_id)	( SERVICE_QUEUES_UPDATE_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_UPDATE_FIFO_TABLE */


/* >>>CPU_TX_RING_INDICES_VALUES_TABLE */

/* >>>CPU_TX_RING_INDICES_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	read_idx  	;
        uint16_t	write_idx 	;
#else
        uint16_t	write_idx 	;
        uint16_t	read_idx  	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) CPU_TX_RING_INDICES_STRUCT;

#define RDD_CPU_TX_RING_INDICES_READ_IDX_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(CPU_TX_RING_INDICES_STRUCT), (r))
#define RDD_CPU_TX_RING_INDICES_READ_IDX_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(CPU_TX_RING_INDICES_STRUCT), (v))
#define RDD_CPU_TX_RING_INDICES_READ_IDX_READ(r, p)                  MREAD_16((uint8_t *)(p), (r))
#define RDD_CPU_TX_RING_INDICES_READ_IDX_WRITE(v, p)                 MWRITE_16((uint8_t *)(p), (v))
#define RDD_CPU_TX_RING_INDICES_WRITE_IDX_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(CPU_TX_RING_INDICES_STRUCT) + 2, (r))
#define RDD_CPU_TX_RING_INDICES_WRITE_IDX_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(CPU_TX_RING_INDICES_STRUCT) + 2, (v))
#define RDD_CPU_TX_RING_INDICES_WRITE_IDX_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_CPU_TX_RING_INDICES_WRITE_IDX_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
/* <<<CPU_TX_RING_INDICES_STRUCT */


#define RDD_CPU_TX_RING_INDICES_VALUES_TABLE_SIZE     2
typedef struct
{
	CPU_TX_RING_INDICES_STRUCT	entry[ RDD_CPU_TX_RING_INDICES_VALUES_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_TX_RING_INDICES_VALUES_TABLE_STRUCT;

extern uint32_t RDD_CPU_TX_RING_INDICES_VALUES_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_RING_INDICES_VALUES_TABLE_PTR(core_id)	( CPU_TX_RING_INDICES_VALUES_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_RING_INDICES_VALUES_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_RING_INDICES_VALUES_TABLE */


/* >>>SERVICE_QUEUES_FLUSH_CFG_FW_TABLE */

/* >>>FLUSH_CFG_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	enable            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drain_q           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hw_flush_en       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_cong_mgt   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	pd_num            	;
        uint8_t	flush_aggr        	;
        uint8_t	qm_queue          	;
        uint32_t	ug_counter_address	;
        uint16_t	reserved1         	;
        uint16_t	ug_threshold_low  	;
        uint32_t	ug_counter        	;
#else
        uint8_t	qm_queue          	;
        uint8_t	flush_aggr        	;
        uint8_t	pd_num            	;
        uint32_t	reserved          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_cong_mgt   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hw_flush_en       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drain_q           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	enable            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ug_counter_address	;
        uint16_t	ug_threshold_low  	;
        uint16_t	reserved1         	;
        uint32_t	ug_counter        	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) FLUSH_CFG_ENTRY_STRUCT;

#define RDD_FLUSH_CFG_ENTRY_ENABLE_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT), 7, 1, (r))
#define RDD_FLUSH_CFG_ENTRY_ENABLE_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT), 7, 1, (v))
#define RDD_FLUSH_CFG_ENTRY_ENABLE_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_FLUSH_CFG_ENTRY_ENABLE_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_FLUSH_CFG_ENTRY_DRAIN_Q_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT), 6, 1, (r))
#define RDD_FLUSH_CFG_ENTRY_DRAIN_Q_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT), 6, 1, (v))
#define RDD_FLUSH_CFG_ENTRY_DRAIN_Q_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_FLUSH_CFG_ENTRY_DRAIN_Q_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_FLUSH_CFG_ENTRY_HW_FLUSH_EN_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT), 5, 1, (r))
#define RDD_FLUSH_CFG_ENTRY_HW_FLUSH_EN_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT), 5, 1, (v))
#define RDD_FLUSH_CFG_ENTRY_HW_FLUSH_EN_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_FLUSH_CFG_ENTRY_HW_FLUSH_EN_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_FLUSH_CFG_ENTRY_BUFFER_CONG_MGT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT), 4, 1, (r))
#define RDD_FLUSH_CFG_ENTRY_BUFFER_CONG_MGT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT), 4, 1, (v))
#define RDD_FLUSH_CFG_ENTRY_BUFFER_CONG_MGT_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_FLUSH_CFG_ENTRY_BUFFER_CONG_MGT_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_FLUSH_CFG_ENTRY_PD_NUM_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 1, (r))
#define RDD_FLUSH_CFG_ENTRY_PD_NUM_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 1, (v))
#define RDD_FLUSH_CFG_ENTRY_PD_NUM_READ(r, p)                             MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_FLUSH_CFG_ENTRY_PD_NUM_WRITE(v, p)                            MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_FLUSH_CFG_ENTRY_FLUSH_AGGR_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 2, (r))
#define RDD_FLUSH_CFG_ENTRY_FLUSH_AGGR_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 2, (v))
#define RDD_FLUSH_CFG_ENTRY_FLUSH_AGGR_READ(r, p)                         MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_FLUSH_CFG_ENTRY_FLUSH_AGGR_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_FLUSH_CFG_ENTRY_QM_QUEUE_READ_G(r, g, idx)                    GROUP_MREAD_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 3, (r))
#define RDD_FLUSH_CFG_ENTRY_QM_QUEUE_WRITE_G(v, g, idx)                   GROUP_MWRITE_8((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 3, (v))
#define RDD_FLUSH_CFG_ENTRY_QM_QUEUE_READ(r, p)                           MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_FLUSH_CFG_ENTRY_QM_QUEUE_WRITE(v, p)                          MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_FLUSH_CFG_ENTRY_UG_COUNTER_ADDRESS_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 4, (r))
#define RDD_FLUSH_CFG_ENTRY_UG_COUNTER_ADDRESS_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 4, (v))
#define RDD_FLUSH_CFG_ENTRY_UG_COUNTER_ADDRESS_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_FLUSH_CFG_ENTRY_UG_COUNTER_ADDRESS_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_FLUSH_CFG_ENTRY_UG_THRESHOLD_LOW_READ_G(r, g, idx)            GROUP_MREAD_16((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 10, (r))
#define RDD_FLUSH_CFG_ENTRY_UG_THRESHOLD_LOW_WRITE_G(v, g, idx)           GROUP_MWRITE_16((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 10, (v))
#define RDD_FLUSH_CFG_ENTRY_UG_THRESHOLD_LOW_READ(r, p)                   MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_FLUSH_CFG_ENTRY_UG_THRESHOLD_LOW_WRITE(v, p)                  MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_FLUSH_CFG_ENTRY_UG_COUNTER_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 12, (r))
#define RDD_FLUSH_CFG_ENTRY_UG_COUNTER_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(FLUSH_CFG_ENTRY_STRUCT) + 12, (v))
#define RDD_FLUSH_CFG_ENTRY_UG_COUNTER_READ(r, p)                         MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_FLUSH_CFG_ENTRY_UG_COUNTER_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 12, (v))
/* <<<FLUSH_CFG_ENTRY_STRUCT */


#define RDD_SERVICE_QUEUES_FLUSH_CFG_FW_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_FLUSH_CFG_FW_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_FLUSH_CFG_FW_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_FLUSH_CFG_FW_TABLE_PTR(core_id)	( SERVICE_QUEUES_FLUSH_CFG_FW_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_FLUSH_CFG_FW_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_FLUSH_CFG_FW_TABLE */


/* >>>RING_CPU_TX_DESCRIPTOR_DATA_TABLE */

/* >>>RING_CPU_TX_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	is_egress           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	sk_buf_ptr_high     	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	sk_buf_ptr_low_or_data_1588	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	sk_buf_ptr_low                	; /* Member of sk_buf_ptr_low_or_data_1588 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	data_1588                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of sk_buf_ptr_low_or_data_1588 union */
        uint32_t	reserved1                     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of sk_buf_ptr_low_or_data_1588 union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_flow_source_port_union	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	fpm_fallback        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sbpm_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lag_index           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ssid                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_dont_drop    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	pkt_buf_ptr_high    	;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_do_not_recycle    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_flow_source_port          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	reservedSU1_fpm_fallback      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_sbpm_copy         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lag_index         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_ssid              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_egress_dont_drop  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reservedSU1_pkt_buf_ptr_high  	;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_do_not_recycle    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_vport                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	flow_or_port_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	reservedSU2_fpm_fallback      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_sbpm_copy         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lag_index         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_ssid              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_egress_dont_drop  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reservedSU2_pkt_buf_ptr_high  	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	pkt_buf_ptr_low_or_fpm_bn0	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	pkt_buf_ptr_low               	; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reserved0                     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
        uint32_t	fpm_sop                       	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
        uint32_t	fpm_bn0                       	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	sk_buf_ptr_high     	;
        uint32_t	packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_egress           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	sk_buf_ptr_low_or_data_1588	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	sk_buf_ptr_low                	; /* Member of sk_buf_ptr_low_or_data_1588 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reserved1                     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of sk_buf_ptr_low_or_data_1588 union */
        uint32_t	data_1588                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of sk_buf_ptr_low_or_data_1588 union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	pkt_buf_ptr_high    	;
        uint32_t	reserved            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_dont_drop    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ssid                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lag_index           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sbpm_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fpm_fallback        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_flow_source_port_union	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reservedSU1_pkt_buf_ptr_high  	;
        uint32_t	reservedSU1_reserved          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_egress_dont_drop  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_ssid              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lag_index         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_sbpm_copy         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_fpm_fallback      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_flow_source_port          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	reservedSU1_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_do_not_recycle    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint8_t	reservedSU2_pkt_buf_ptr_high  	;
        uint32_t	reservedSU2_reserved          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_egress_dont_drop  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_ssid              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lag_index         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_sbpm_copy         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_fpm_fallback      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow_or_port_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	is_vport                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	reservedSU2_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_do_not_recycle    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	pkt_buf_ptr_low_or_fpm_bn0	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	pkt_buf_ptr_low               	; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	fpm_bn0                       	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
        uint32_t	fpm_sop                       	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
        uint32_t	reserved0                     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_buf_ptr_low_or_fpm_bn0 union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) RING_CPU_TX_DESCRIPTOR_STRUCT;

#define RDD_RING_CPU_TX_DESCRIPTOR_IS_EGRESS_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_EGRESS_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_EGRESS_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_EGRESS_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT), 6, 9, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT), 6, 9, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p), 6, 9, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p), 6, 9, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 0, 8, 14, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 0, 8, 14, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                        FIELD_MREAD_32((uint8_t *)(p) + 0, 8, 14, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                       FIELD_MWRITE_32((uint8_t *)(p) + 0, 8, 14, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 3, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 3, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_READ(r, p)                      MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_READ_G(r, g, idx)   GROUP_MREAD_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_WRITE_G(v, g, idx)  GROUP_MWRITE_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_READ(r, p)          MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_WRITE(v, p)         MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_READ(r, p)                       MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_1588_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 4, 14, 18, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_1588_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 4, 14, 18, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_1588_READ(r, p)                            FIELD_MREAD_32((uint8_t *)(p) + 4, 14, 18, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_1588_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)(p) + 4, 14, 18, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 7, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 7, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_COLOR_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_COLOR_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 6, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 6, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 5, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 5, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FLAG_1588_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 8, 5, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FLAG_1588_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 8, 5, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_LAN_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 4, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 4, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_LAN_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 8, 4, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_LAN_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 8, 4, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_READ_G(r, g, idx)    GROUP_FIELD_MREAD_16((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 4, 8, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_WRITE_G(v, g, idx)   GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 4, 8, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_READ(r, p)           FIELD_MREAD_16((uint8_t *)(p) + 8, 4, 8, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_WRITE(v, p)          FIELD_MWRITE_16((uint8_t *)(p) + 8, 4, 8, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 4, 8, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 4, 8, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 8, 4, 8, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 8, 4, 8, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_VPORT_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 3, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_VPORT_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 3, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_VPORT_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 8, 3, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_IS_VPORT_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 8, 3, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 4, 7, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 8, 4, 7, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 8, 4, 7, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 8, 4, 7, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 9, 3, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 9, 3, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 9, 3, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 9, 3, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_SBPM_COPY_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 9, 2, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_SBPM_COPY_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 9, 2, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_SBPM_COPY_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 9, 2, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_SBPM_COPY_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 9, 2, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 9, 1, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 9, 1, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 9, 1, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 9, 1, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_ABS_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 9, 0, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 9, 0, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_ABS_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_ABS_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_LAG_INDEX_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 10, 6, 2, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_LAG_INDEX_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 10, 6, 2, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_LAG_INDEX_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 10, 6, 2, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_LAG_INDEX_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 10, 6, 2, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_SSID_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 10, 2, 4, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_SSID_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 10, 2, 4, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_SSID_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 10, 2, 4, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_SSID_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 10, 2, 4, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 10, 1, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 10, 1, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 10, 1, 1, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 10, 1, 1, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 11, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 11, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_READ(r, p)                     MREAD_8((uint8_t *)(p) + 11, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 11, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_READ_G(r, g, idx)    GROUP_MREAD_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_WRITE_G(v, g, idx)   GROUP_MWRITE_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_READ(r, p)           MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_WRITE(v, p)          MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_READ(r, p)                      MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_SOP_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_16((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 12, 3, 11, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_SOP_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 12, 3, 11, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_SOP_READ(r, p)                              FIELD_MREAD_16((uint8_t *)(p) + 12, 3, 11, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_SOP_WRITE(v, p)                             FIELD_MWRITE_16((uint8_t *)(p) + 12, 3, 11, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_BN0_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 12, 0, 19, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_BN0_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(RING_CPU_TX_DESCRIPTOR_STRUCT) + 12, 0, 19, (v))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_BN0_READ(r, p)                              FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 19, (r))
#define RDD_RING_CPU_TX_DESCRIPTOR_FPM_BN0_WRITE(v, p)                             FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 19, (v))
/* <<<RING_CPU_TX_DESCRIPTOR_STRUCT */


#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_SIZE     2
typedef struct
{
	RING_CPU_TX_DESCRIPTOR_STRUCT	entry[ RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RING_CPU_TX_DESCRIPTOR_DATA_TABLE_STRUCT;

extern uint32_t RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_PTR(core_id)	( RING_CPU_TX_DESCRIPTOR_DATA_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RING_CPU_TX_DESCRIPTOR_DATA_TABLE_ADDRESS_ARR[core_id] ))

/* <<<RING_CPU_TX_DESCRIPTOR_DATA_TABLE */


/* >>>CPU_TX_RING_DESCRIPTOR_TABLE */

#define RDD_CPU_TX_RING_DESCRIPTOR_TABLE_SIZE     2
typedef struct
{
	CPU_RING_DESCRIPTOR_STRUCT	entry[ RDD_CPU_TX_RING_DESCRIPTOR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_TX_RING_DESCRIPTOR_TABLE_STRUCT;

extern uint32_t RDD_CPU_TX_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_RING_DESCRIPTOR_TABLE_PTR(core_id)	( CPU_TX_RING_DESCRIPTOR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_RING_DESCRIPTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_RING_DESCRIPTOR_TABLE */


/* >>>SERVICE_QUEUES_FLUSH_CFG_CURRENT_TABLE */

#define RDD_SERVICE_QUEUES_FLUSH_CFG_CURRENT_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_FLUSH_CFG_CURRENT_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_FLUSH_CFG_CURRENT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_FLUSH_CFG_CURRENT_TABLE_PTR(core_id)	( SERVICE_QUEUES_FLUSH_CFG_CURRENT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_FLUSH_CFG_CURRENT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_FLUSH_CFG_CURRENT_TABLE */


/* >>>SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE */

#define RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_SIZE     4
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_PTR(core_id)	( SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_RATE_LIMITER_VALID_TABLE */


/* >>>SERVICE_QUEUES_CODEL_DROP_DESCRIPTOR */

/* >>>CODEL_DROP_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	max_seq_drops          	;
        uint16_t	flush_task_wakeup_value	;
        uint16_t	flush_cfg_ptr          	;
        uint16_t	flush_enable_ptr       	;
        uint32_t	flush_packet_counter   	;
        uint32_t	flush_enable           	;
#else
        uint16_t	flush_task_wakeup_value	;
        uint16_t	max_seq_drops          	;
        uint16_t	flush_enable_ptr       	;
        uint16_t	flush_cfg_ptr          	;
        uint32_t	flush_packet_counter   	;
        uint32_t	flush_enable           	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CODEL_DROP_DESCRIPTOR_STRUCT;

#define RDD_CODEL_DROP_DESCRIPTOR_MAX_SEQ_DROPS_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT), (r))
#define RDD_CODEL_DROP_DESCRIPTOR_MAX_SEQ_DROPS_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT), (v))
#define RDD_CODEL_DROP_DESCRIPTOR_MAX_SEQ_DROPS_READ(r, p)                           MREAD_16((uint8_t *)(p), (r))
#define RDD_CODEL_DROP_DESCRIPTOR_MAX_SEQ_DROPS_WRITE(v, p)                          MWRITE_16((uint8_t *)(p), (v))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_TASK_WAKEUP_VALUE_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT) + 2, (r))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_TASK_WAKEUP_VALUE_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT) + 2, (v))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_TASK_WAKEUP_VALUE_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_TASK_WAKEUP_VALUE_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_CFG_PTR_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_CFG_PTR_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_CFG_PTR_READ(r, p)                           MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_CFG_PTR_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_ENABLE_PTR_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT) + 6, (r))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_ENABLE_PTR_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT) + 6, (v))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_ENABLE_PTR_READ(r, p)                        MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_ENABLE_PTR_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_PACKET_COUNTER_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT) + 8, (r))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_PACKET_COUNTER_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT) + 8, (v))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_PACKET_COUNTER_READ(r, p)                    MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_PACKET_COUNTER_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_ENABLE_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_ENABLE_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(CODEL_DROP_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_ENABLE_READ(r, p)                            MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_CODEL_DROP_DESCRIPTOR_FLUSH_ENABLE_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 12, (v))
/* <<<CODEL_DROP_DESCRIPTOR_STRUCT */


#define RDD_SERVICE_QUEUES_CODEL_DROP_DESCRIPTOR_SIZE     1
typedef struct
{
	CODEL_DROP_DESCRIPTOR_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_CODEL_DROP_DESCRIPTOR_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_CODEL_DROP_DESCRIPTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_CODEL_DROP_DESCRIPTOR_PTR(core_id)	( SERVICE_QUEUES_CODEL_DROP_DESCRIPTOR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_CODEL_DROP_DESCRIPTOR_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_CODEL_DROP_DESCRIPTOR */


/* >>>CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE */

#define RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_EGRESS_DISPATCHER_CREDIT_TABLE */


/* >>>SERVICE_QUEUES_FLUSH_CFG_ENABLE_TABLE */

/* >>>FLUSH_CFG_ENABLE_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	enable_fw 	;
        uint8_t	enable_cpu	;
#else
        uint8_t	enable_cpu	;
        uint8_t	enable_fw 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) FLUSH_CFG_ENABLE_ENTRY_STRUCT;

#define RDD_FLUSH_CFG_ENABLE_ENTRY_ENABLE_FW_READ_G(r, g, idx)           GROUP_MREAD_8((g), (idx)*sizeof(FLUSH_CFG_ENABLE_ENTRY_STRUCT), (r))
#define RDD_FLUSH_CFG_ENABLE_ENTRY_ENABLE_FW_WRITE_G(v, g, idx)          GROUP_MWRITE_8((g), (idx)*sizeof(FLUSH_CFG_ENABLE_ENTRY_STRUCT), (v))
#define RDD_FLUSH_CFG_ENABLE_ENTRY_ENABLE_FW_READ(r, p)                  MREAD_8((uint8_t *)(p), (r))
#define RDD_FLUSH_CFG_ENABLE_ENTRY_ENABLE_FW_WRITE(v, p)                 MWRITE_8((uint8_t *)(p), (v))
#define RDD_FLUSH_CFG_ENABLE_ENTRY_ENABLE_CPU_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(FLUSH_CFG_ENABLE_ENTRY_STRUCT) + 1, (r))
#define RDD_FLUSH_CFG_ENABLE_ENTRY_ENABLE_CPU_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(FLUSH_CFG_ENABLE_ENTRY_STRUCT) + 1, (v))
#define RDD_FLUSH_CFG_ENABLE_ENTRY_ENABLE_CPU_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_FLUSH_CFG_ENABLE_ENTRY_ENABLE_CPU_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
/* <<<FLUSH_CFG_ENABLE_ENTRY_STRUCT */


#define RDD_SERVICE_QUEUES_FLUSH_CFG_ENABLE_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENABLE_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_FLUSH_CFG_ENABLE_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_FLUSH_CFG_ENABLE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_FLUSH_CFG_ENABLE_TABLE_PTR(core_id)	( SERVICE_QUEUES_FLUSH_CFG_ENABLE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_FLUSH_CFG_ENABLE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_FLUSH_CFG_ENABLE_TABLE */


/* >>>CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE */

#define RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_INGRESS_DISPATCHER_CREDIT_TABLE */


/* >>>SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE */

#define RDD_SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_PTR(core_id)	( SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_BUDGET_ALLOCATION_TIMER_VALUE */


/* >>>CPU_TX_SYNC_FIFO_TABLE */

/* >>>CPU_TX_SYNC_FIFO_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	write_ptr 	;
        uint16_t	read_ptr  	;
        uint16_t	fifo      	;
        uint16_t	reserved  	;
#else
        uint16_t	read_ptr  	;
        uint16_t	write_ptr 	;
        uint16_t	reserved  	;
        uint16_t	fifo      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CPU_TX_SYNC_FIFO_ENTRY_STRUCT;

#define RDD_CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(CPU_TX_SYNC_FIFO_ENTRY_STRUCT), (r))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(CPU_TX_SYNC_FIFO_ENTRY_STRUCT), (v))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(CPU_TX_SYNC_FIFO_ENTRY_STRUCT) + 2, (r))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(CPU_TX_SYNC_FIFO_ENTRY_STRUCT) + 2, (v))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_READ(r, p)                  MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_WRITE(v, p)                 MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_FIFO_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(CPU_TX_SYNC_FIFO_ENTRY_STRUCT) + 4, (r))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_FIFO_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(CPU_TX_SYNC_FIFO_ENTRY_STRUCT) + 4, (v))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_FIFO_READ(r, p)                      MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_CPU_TX_SYNC_FIFO_ENTRY_FIFO_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 4, (v))
/* <<<CPU_TX_SYNC_FIFO_ENTRY_STRUCT */


#define RDD_CPU_TX_SYNC_FIFO_TABLE_SIZE     2
typedef struct
{
	CPU_TX_SYNC_FIFO_ENTRY_STRUCT	entry[ RDD_CPU_TX_SYNC_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ CPU_TX_SYNC_FIFO_TABLE_STRUCT;

extern uint32_t RDD_CPU_TX_SYNC_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_CPU_TX_SYNC_FIFO_TABLE_PTR(core_id)	( CPU_TX_SYNC_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_CPU_TX_SYNC_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<CPU_TX_SYNC_FIFO_TABLE */


/* >>>SERVICE_QUEUES_FIRST_QUEUE_MAPPING */

#define RDD_SERVICE_QUEUES_FIRST_QUEUE_MAPPING_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_FIRST_QUEUE_MAPPING_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_FIRST_QUEUE_MAPPING_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_FIRST_QUEUE_MAPPING_PTR(core_id)	( SERVICE_QUEUES_FIRST_QUEUE_MAPPING_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_FIRST_QUEUE_MAPPING_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_FIRST_QUEUE_MAPPING */


/* >>>SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE */

#define RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SERVICE_QUEUES_DISPATCHER_CREDIT_TABLE */


/* >>>SQ_TX_QUEUE_DROP_TABLE */

/* >>>PACKETS_AND_BYTES_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	packets   	;
        uint32_t	bytes     	;
#else
        uint32_t	packets   	;
        uint32_t	bytes     	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PACKETS_AND_BYTES_STRUCT;

#define RDD_PACKETS_AND_BYTES_PACKETS_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PACKETS_AND_BYTES_STRUCT), (r))
#define RDD_PACKETS_AND_BYTES_PACKETS_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PACKETS_AND_BYTES_STRUCT), (v))
#define RDD_PACKETS_AND_BYTES_PACKETS_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_PACKETS_AND_BYTES_PACKETS_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_PACKETS_AND_BYTES_BYTES_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(PACKETS_AND_BYTES_STRUCT) + 4, (r))
#define RDD_PACKETS_AND_BYTES_BYTES_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(PACKETS_AND_BYTES_STRUCT) + 4, (v))
#define RDD_PACKETS_AND_BYTES_BYTES_READ(r, p)                   MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_PACKETS_AND_BYTES_BYTES_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<PACKETS_AND_BYTES_STRUCT */


#define RDD_SQ_TX_QUEUE_DROP_TABLE_SIZE     32
typedef struct
{
	PACKETS_AND_BYTES_STRUCT	entry[ RDD_SQ_TX_QUEUE_DROP_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ SQ_TX_QUEUE_DROP_TABLE_STRUCT;

extern uint32_t RDD_SQ_TX_QUEUE_DROP_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SQ_TX_QUEUE_DROP_TABLE_PTR(core_id)	( SQ_TX_QUEUE_DROP_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SQ_TX_QUEUE_DROP_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SQ_TX_QUEUE_DROP_TABLE */

/* CORE_3 */

/* >>>DHD_FLOW_RING_CACHE_CTX_TABLE */

/* >>>DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	flow_ring_base_low 	;
        uint8_t	flow_ring_base_high	;
        uint8_t	reserved           	;
        uint16_t	shadow_wr_idx      	;
        uint16_t	size               	;
        uint8_t	ssid               	;
        uint8_t	flags              	;
        uint16_t	rd_idx             	;
        uint16_t	wr_idx             	;
#else
        uint32_t	flow_ring_base_low 	;
        uint16_t	shadow_wr_idx      	;
        uint8_t	reserved           	;
        uint8_t	flow_ring_base_high	;
        uint8_t	flags              	;
        uint8_t	ssid               	;
        uint16_t	size               	;
        uint16_t	wr_idx             	;
        uint16_t	rd_idx             	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT;

#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT), (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT), (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_LOW_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 4, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 4, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_READ(r, p)                 MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_L_READ( wv )               FIELD_GET( wv, 24, 8 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLOW_RING_BASE_HIGH_L_WRITE( v, wv )           FIELD_SET( v, 24, 8, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 6, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 6, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_READ(r, p)                       MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_L_READ( wv )                     FIELD_GET( wv, 0, 16 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SHADOW_WR_IDX_L_WRITE( v, wv )                 FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_READ_G(r, g, idx)                         GROUP_MREAD_16((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 8, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_WRITE_G(v, g, idx)                        GROUP_MWRITE_16((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 8, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_READ(r, p)                                MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_WRITE(v, p)                               MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_L_READ( wv )                              FIELD_GET( wv, 16, 16 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SIZE_L_WRITE( v, wv )                          FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_READ_G(r, g, idx)                         GROUP_MREAD_8((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 10, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_WRITE_G(v, g, idx)                        GROUP_MWRITE_8((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 10, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_READ(r, p)                                MREAD_8((uint8_t *)(p) + 10, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_WRITE(v, p)                               MWRITE_8((uint8_t *)(p) + 10, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_L_READ( wv )                              FIELD_GET( wv, 8, 8 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_SSID_L_WRITE( v, wv )                          FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_READ_G(r, g, idx)                        GROUP_MREAD_8((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 11, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_WRITE_G(v, g, idx)                       GROUP_MWRITE_8((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 11, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_READ(r, p)                               MREAD_8((uint8_t *)(p) + 11, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_WRITE(v, p)                              MWRITE_8((uint8_t *)(p) + 11, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_L_READ( wv )                             FIELD_GET( wv, 0, 8 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_FLAGS_L_WRITE( v, wv )                         FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 12, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 12, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_READ(r, p)                              MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_L_READ( wv )                            FIELD_GET( wv, 16, 16 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_RD_IDX_L_WRITE( v, wv )                        FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 14, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT) + 14, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_READ(r, p)                              MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_L_READ( wv )                            FIELD_GET( wv, 0, 16 )
#define RDD_DHD_FLOW_RING_CACHE_CTX_ENTRY_WR_IDX_L_WRITE( v, wv )                        FIELD_SET( v, 0, 16, wv )
/* <<<DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT */


#define RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_SIZE     48
typedef struct
{
	DHD_FLOW_RING_CACHE_CTX_ENTRY_STRUCT	entry[ RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_FLOW_RING_CACHE_CTX_TABLE_STRUCT;

extern uint32_t RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_PTR(core_id)	( DHD_FLOW_RING_CACHE_CTX_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_FLOW_RING_CACHE_CTX_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_FLOW_RING_CACHE_CTX_TABLE */


/* >>>DHD_AUX_INFO_CACHE_TABLE */

/* >>>DHD_AUX_INFO_CACHE_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	backup_first_index    	;
        uint16_t	backup_last_index     	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	backup_num_entries    	;
        uint16_t	phy_size              	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	window_ts             	;
        uint16_t	drop_interval         	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	codel_control_word    	; /* This is a field union */
        uint16_t	codel_drop_counter    	;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	codel_dropped_recently          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_word union */
        uint32_t	codel_dropping                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_word union */
        uint32_t	codel_constant_drop             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_word union */
        uint32_t	reserved                        	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_word union */
        uint16_t	reservedSU1_codel_drop_counter  	;
		};
		/* Sub Union 2 */
		struct{
        uint16_t	codel_control                   	; /* Member of codel_control_word union */
        uint16_t	reservedSU2_codel_drop_counter  	;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	backup_last_index     	;
        uint16_t	backup_first_index    	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	phy_size              	;
        uint16_t	backup_num_entries    	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	drop_interval         	;
        uint16_t	window_ts             	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	codel_drop_counter    	;
        uint16_t	codel_control_word    	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint16_t	reservedSU1_codel_drop_counter  	;
        uint32_t	reserved                        	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_word union */
        uint32_t	codel_constant_drop             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_word union */
        uint32_t	codel_dropping                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_word union */
        uint32_t	codel_dropped_recently          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_word union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	reservedSU2_codel_drop_counter  	;
        uint16_t	codel_control                   	; /* Member of codel_control_word union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_AUX_INFO_CACHE_ENTRY_STRUCT;

#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT), (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT), (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_READ(r, p)                     MREAD_16((uint8_t *)(p), (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_WRITE(v, p)                    MWRITE_16((uint8_t *)(p), (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_L_READ( wv )                   FIELD_GET( wv, 16, 16 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_FIRST_INDEX_L_WRITE( v, wv )               FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 2, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 2, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_READ(r, p)                      MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_L_READ( wv )                    FIELD_GET( wv, 0, 16 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_LAST_INDEX_L_WRITE( v, wv )                FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 4, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 4, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_READ(r, p)                     MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_L_READ( wv )                   FIELD_GET( wv, 16, 16 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_BACKUP_NUM_ENTRIES_L_WRITE( v, wv )               FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_PHY_SIZE_READ_G(r, g, idx)                        GROUP_MREAD_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 6, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_PHY_SIZE_WRITE_G(v, g, idx)                       GROUP_MWRITE_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 6, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_PHY_SIZE_READ(r, p)                               MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_PHY_SIZE_WRITE(v, p)                              MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_PHY_SIZE_L_READ( wv )                             FIELD_GET( wv, 0, 16 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_PHY_SIZE_L_WRITE( v, wv )                         FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_WINDOW_TS_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 8, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_WINDOW_TS_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 8, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_WINDOW_TS_READ(r, p)                              MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_WINDOW_TS_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_WINDOW_TS_L_READ( wv )                            FIELD_GET( wv, 16, 16 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_WINDOW_TS_L_WRITE( v, wv )                        FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_DROP_INTERVAL_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 10, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_DROP_INTERVAL_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 10, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_DROP_INTERVAL_READ(r, p)                          MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_DROP_INTERVAL_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_DROP_INTERVAL_L_READ( wv )                        FIELD_GET( wv, 0, 16 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_DROP_INTERVAL_L_WRITE( v, wv )                    FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_WORD_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 12, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_WORD_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 12, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_WORD_READ(r, p)                     MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_WORD_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_WORD_L_READ( wv )                   FIELD_GET( wv, 16, 16 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_WORD_L_WRITE( v, wv )               FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPED_RECENTLY_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 12, 7, 1, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPED_RECENTLY_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 12, 7, 1, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPED_RECENTLY_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPED_RECENTLY_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPED_RECENTLY_L_READ( wv )               FIELD_GET( wv, 31, 1 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPED_RECENTLY_L_WRITE( v, wv )           FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPING_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 12, 6, 1, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPING_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 12, 6, 1, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPING_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPING_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPING_L_READ( wv )                       FIELD_GET( wv, 30, 1 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROPPING_L_WRITE( v, wv )                   FIELD_SET( v, 30, 1, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONSTANT_DROP_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 12, 5, 1, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONSTANT_DROP_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 12, 5, 1, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONSTANT_DROP_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 12, 5, 1, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONSTANT_DROP_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 12, 5, 1, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONSTANT_DROP_L_READ( wv )                  FIELD_GET( wv, 29, 1 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONSTANT_DROP_L_WRITE( v, wv )              FIELD_SET( v, 29, 1, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 12, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 12, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_READ(r, p)                          MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_L_READ( wv )                        FIELD_GET( wv, 16, 16 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_CONTROL_L_WRITE( v, wv )                    FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROP_COUNTER_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 14, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROP_COUNTER_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(DHD_AUX_INFO_CACHE_ENTRY_STRUCT) + 14, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROP_COUNTER_READ(r, p)                     MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROP_COUNTER_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROP_COUNTER_L_READ( wv )                   FIELD_GET( wv, 0, 16 )
#define RDD_DHD_AUX_INFO_CACHE_ENTRY_CODEL_DROP_COUNTER_L_WRITE( v, wv )               FIELD_SET( v, 0, 16, wv )
/* <<<DHD_AUX_INFO_CACHE_ENTRY_STRUCT */


#define RDD_DHD_AUX_INFO_CACHE_TABLE_SIZE     48
typedef struct
{
	DHD_AUX_INFO_CACHE_ENTRY_STRUCT	entry[ RDD_DHD_AUX_INFO_CACHE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_AUX_INFO_CACHE_TABLE_STRUCT;

extern uint32_t RDD_DHD_AUX_INFO_CACHE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_AUX_INFO_CACHE_TABLE_PTR(core_id)	( DHD_AUX_INFO_CACHE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_AUX_INFO_CACHE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_AUX_INFO_CACHE_TABLE */


/* >>>DHD_TX_POST_FLOW_RING_BUFFER */

/* >>>DHD_TX_POST_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[12];
    uint64_t dword_64[6];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	msg_type             	;
        uint8_t	if_id                	;
        uint8_t	common_hdr_flags     	;
        uint8_t	epoch                	;
        uint32_t	request_id           	;
        uint32_t	tx_eth_hdr_0         	;
        uint32_t	tx_eth_hdr_1         	;
        uint32_t	tx_eth_hdr_2         	;
        uint16_t	tx_eth_hdr_3         	;
        uint8_t	flags                	;
        uint8_t	seg_cnt              	;
        uint32_t	metadata_buf_addr_low	;
        uint32_t	metadata_buf_addr_hi 	;
        uint32_t	data_buf_addr_low    	;
        uint32_t	data_buf_addr_hi     	;
        uint16_t	meta_buf_len         	;
        uint16_t	data_len             	;
        uint32_t	reserved             	;
#else
        uint8_t	epoch                	;
        uint8_t	common_hdr_flags     	;
        uint8_t	if_id                	;
        uint8_t	msg_type             	;
        uint32_t	request_id           	;
        uint32_t	tx_eth_hdr_0         	;
        uint32_t	tx_eth_hdr_1         	;
        uint32_t	tx_eth_hdr_2         	;
        uint8_t	seg_cnt              	;
        uint8_t	flags                	;
        uint16_t	tx_eth_hdr_3         	;
        uint32_t	metadata_buf_addr_low	;
        uint32_t	metadata_buf_addr_hi 	;
        uint32_t	data_buf_addr_low    	;
        uint32_t	data_buf_addr_hi     	;
        uint16_t	data_len             	;
        uint16_t	meta_buf_len         	;
        uint32_t	reserved             	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_TX_POST_DESCRIPTOR_STRUCT;

#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_READ_G(r, g, idx)                       GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT), (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_WRITE_G(v, g, idx)                      GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT), (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_READ(r, p)                              MREAD_8((uint8_t *)(p), (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_WRITE(v, p)                             MWRITE_8((uint8_t *)(p), (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_L_READ( wv )                            FIELD_GET( wv, 24, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_MSG_TYPE_L_WRITE( v, wv )                        FIELD_SET( v, 24, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 1, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 1, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_L_READ( wv )                               FIELD_GET( wv, 16, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_IF_ID_L_WRITE( v, wv )                           FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 2, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 2, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_READ(r, p)                      MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_L_READ( wv )                    FIELD_GET( wv, 8, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_L_WRITE( v, wv )                FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 3, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 3, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_L_READ( wv )                               FIELD_GET( wv, 0, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_EPOCH_L_WRITE( v, wv )                           FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_READ(r, p)                            MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_L_READ( wv )                          FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_REQUEST_ID_L_WRITE( v, wv )                      FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 8, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 8, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_READ(r, p)                          MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_READ(r, p)                          MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 16, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 16, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_READ(r, p)                          MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 20, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 20, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_READ(r, p)                          MREAD_16((uint8_t *)(p) + 20, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 20, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_L_READ( wv )                        FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_L_WRITE( v, wv )                    FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 22, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 22, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 22, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 22, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_L_READ( wv )                               FIELD_GET( wv, 8, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_FLAGS_L_WRITE( v, wv )                           FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_READ_G(r, g, idx)                        GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 23, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_WRITE_G(v, g, idx)                       GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 23, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_READ(r, p)                               MREAD_8((uint8_t *)(p) + 23, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_WRITE(v, p)                              MWRITE_8((uint8_t *)(p) + 23, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_L_READ( wv )                             FIELD_GET( wv, 0, 8 )
#define RDD_DHD_TX_POST_DESCRIPTOR_SEG_CNT_L_WRITE( v, wv )                         FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 24, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 24, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_READ(r, p)                 MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 28, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 28, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_READ(r, p)                  MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 32, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 32, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_READ(r, p)                     MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_L_READ( wv )                   FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_L_WRITE( v, wv )               FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 36, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 36, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_READ(r, p)                      MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_L_READ( wv )                    FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_L_WRITE( v, wv )                FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 40, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 40, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_READ(r, p)                          MREAD_16((uint8_t *)(p) + 40, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 40, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_L_READ( wv )                        FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_L_WRITE( v, wv )                    FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 42, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_STRUCT) + 42, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_READ(r, p)                              MREAD_16((uint8_t *)(p) + 42, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 42, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_L_READ( wv )                            FIELD_GET( wv, 0, 16 )
#define RDD_DHD_TX_POST_DESCRIPTOR_DATA_LEN_L_WRITE( v, wv )                        FIELD_SET( v, 0, 16, wv )
/* <<<DHD_TX_POST_DESCRIPTOR_STRUCT */


#define RDD_DHD_TX_POST_FLOW_RING_BUFFER_SIZE     3
typedef struct
{
	DHD_TX_POST_DESCRIPTOR_STRUCT	entry[ RDD_DHD_TX_POST_FLOW_RING_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_POST_FLOW_RING_BUFFER_STRUCT;

extern uint32_t RDD_DHD_TX_POST_FLOW_RING_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_POST_FLOW_RING_BUFFER_PTR(core_id)	( DHD_TX_POST_FLOW_RING_BUFFER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_POST_FLOW_RING_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_POST_FLOW_RING_BUFFER */


/* >>>MIRRORING_SCRATCH */

#define RDD_MIRRORING_SCRATCH_SIZE     1
typedef struct
{
	BYTES_8_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ MIRRORING_SCRATCH_STRUCT;

extern uint32_t RDD_MIRRORING_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_MIRRORING_SCRATCH_PTR(core_id)	( MIRRORING_SCRATCH_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_MIRRORING_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<MIRRORING_SCRATCH */


/* >>>DHD_CODEL_BIAS_SLOPE_TABLE */

/* >>>DHD_CODEL_BIAS_SLOPE_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	bias      	;
        uint16_t	slope     	;
#else
        uint16_t	slope     	;
        uint16_t	bias      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) DHD_CODEL_BIAS_SLOPE_STRUCT;

#define RDD_DHD_CODEL_BIAS_SLOPE_BIAS_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(DHD_CODEL_BIAS_SLOPE_STRUCT), (r))
#define RDD_DHD_CODEL_BIAS_SLOPE_BIAS_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(DHD_CODEL_BIAS_SLOPE_STRUCT), (v))
#define RDD_DHD_CODEL_BIAS_SLOPE_BIAS_READ(r, p)                  MREAD_16((uint8_t *)(p), (r))
#define RDD_DHD_CODEL_BIAS_SLOPE_BIAS_WRITE(v, p)                 MWRITE_16((uint8_t *)(p), (v))
#define RDD_DHD_CODEL_BIAS_SLOPE_SLOPE_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(DHD_CODEL_BIAS_SLOPE_STRUCT) + 2, (r))
#define RDD_DHD_CODEL_BIAS_SLOPE_SLOPE_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(DHD_CODEL_BIAS_SLOPE_STRUCT) + 2, (v))
#define RDD_DHD_CODEL_BIAS_SLOPE_SLOPE_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_DHD_CODEL_BIAS_SLOPE_SLOPE_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
/* <<<DHD_CODEL_BIAS_SLOPE_STRUCT */


#define RDD_DHD_CODEL_BIAS_SLOPE_TABLE_SIZE     11
typedef struct
{
	DHD_CODEL_BIAS_SLOPE_STRUCT	entry[ RDD_DHD_CODEL_BIAS_SLOPE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_CODEL_BIAS_SLOPE_TABLE_STRUCT;

extern uint32_t RDD_DHD_CODEL_BIAS_SLOPE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_CODEL_BIAS_SLOPE_TABLE_PTR(core_id)	( DHD_CODEL_BIAS_SLOPE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_CODEL_BIAS_SLOPE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_CODEL_BIAS_SLOPE_TABLE */


/* >>>DHD_TX_POST_0_STACK */

#define RDD_DHD_TX_POST_0_STACK_SIZE     128
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_TX_POST_0_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_POST_0_STACK_STRUCT;

extern uint32_t RDD_DHD_TX_POST_0_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_POST_0_STACK_PTR(core_id)	( DHD_TX_POST_0_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_POST_0_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_POST_0_STACK */


/* >>>DHD_TX_POST_1_STACK */

#define RDD_DHD_TX_POST_1_STACK_SIZE     128
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_TX_POST_1_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_POST_1_STACK_STRUCT;

extern uint32_t RDD_DHD_TX_POST_1_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_POST_1_STACK_PTR(core_id)	( DHD_TX_POST_1_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_POST_1_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_POST_1_STACK */


/* >>>DHD_POST_COMMON_RADIO_DATA */

/* >>>DHD_POST_COMMON_RADIO_ENTRY_STRUCT */
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_NUMBER	4
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_NUMBER	4
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_NUMBER	4
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER	7
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_NUMBER	16
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED5_NUMBER	2
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED6_NUMBER	4
typedef union
{
    uint32_t word_32[38];
    uint64_t dword_64[19];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_mgmt_fr_base_ptr_low                                                                                	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_mgmt_fr_base_ptr_high                                                                               	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_fr_wr_idx_base_ptr_low                                                                              	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_fr_wr_idx_base_ptr_high                                                                             	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_fr_rd_idx_base_ptr_low                                                                              	;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_fr_rd_idx_base_ptr_high                                                                             	;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	backup_index_fifo_base_low                                                                                  	;
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	backup_index_fifo_base_high                                                                                 	;
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dhd_doorbell_low                                                                                            	;
		};
	};
	/* Union WORD 9 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dhd_doorbell_high                                                                                           	;
		};
	};
	/* Union WORD 10 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	tx_post_wr_idx                                                                                              	;
        uint16_t	tx_post_qd                                                                                                  	;
		};
	};
	/* Union WORD 11 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	tx_post_rd_idx                                                                                              	;
        uint16_t	idma_last_group_fr                                                                                          	;
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	cam_rslt                                                                                                    	;
		};
	};
	/* Union WORD 13 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	add_llcsnap_header                                                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	aggregation_bypass_cpu_tx                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	aggregation_bypass_non_udp_tcp                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow_ring_format                                                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	idma_active                                                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	codel_active                                                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	aggregation_bypass_tcp_pktlen                                                                               	;
        uint8_t	cache_ctx_next_write_idx                                                                                    	;
        uint8_t	backup_cache_idx                                                                                            	;
		};
	};
	/* Union WORD 14 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	per_ac_aggregation_thresholds[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_NUMBER];
		};
	};
	/* Union WORD 15 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	per_ac_aggregation_timeouts[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_NUMBER];
		};
	};
	/* Union WORD 16 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	per_ac_aggregation_timeout_cntrs[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_NUMBER];
		};
	};
	/* Union WORD 17 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	doorbell_value_address                                                                                      	;
		};
	};
	/* Union WORD 18 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	scratchpad[RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
		};
	};
	/* Union WORD 25 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	backup_rd_idx                                                                                               	;
        uint16_t	backup_wr_idx                                                                                               	;
		};
	};
	/* Union WORD 26 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_valid                                                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_abs_addr                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_data_len                                                                                             	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_prio                                                                                                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_prio                                                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                                                                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_l4_protocol                                                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	rsv_address_high                                                                                            	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_packet_valid                                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_abs_addr                                                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_data_len                                                                                           	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_prio                                                                                               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_buffer_prio                                                                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved2                                                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_l4_protocol                                                                                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved3                                                                                                             	; /* Member of rsv_address_high union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_packet_valid                                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_abs_addr                                                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_data_len                                                                                           	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_prio                                                                                               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_buffer_prio                                                                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved2                                                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_l4_protocol                                                                                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	packet_data_ptr_high                                                                                                  	; /* Member of rsv_address_high union */
		};
	};
	/* Union WORD 27 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	fpm_address_low                                                                                             	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	packet_fpm_pool                                                                                                       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_packet_sop                                                                                                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	reserved4                                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_bn0                                                                                                            	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	packet_data_ptr_low                                                                                                   	; /* Member of fpm_address_low union */
		};
	};
	/* Union WORD 28 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	request_id                                                                                                  	;
		};
	};
	/* Union WORD 29 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	aggr_timer_scratchpad                                                                                       	;
        uint8_t	cpu_msg_done                                                                                                	;
        uint8_t	coalescing_max_count                                                                                        	;
		};
	};
	/* Union WORD 30 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	doorbell_counters[RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_NUMBER];
		};
	};
	/* Union WORD 34 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	reserved1                                                                                                   	;
        uint8_t	coalescing_timeout                                                                                          	;
        uint8_t	coalescing_timeout_cntr                                                                                     	;
        uint8_t	cur_frg_id                                                                                                  	;
		};
	};
	/* Union WORD 35 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_mirroring_en                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dst_vport                                                                                                   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dst_queue                                                                                                   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	codel_max_seq_drops                                                                                         	;
		};
	};
	/* Union WORD 36 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	fr_ptrs_size_shift                                                                                          	;
        uint8_t	idma_group_shift                                                                                            	;
        uint8_t	reserved5[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED5_NUMBER];
		};
	};
	/* Union WORD 37 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	reserved6[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED6_NUMBER];
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_mgmt_fr_base_ptr_low                                                                                	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_mgmt_fr_base_ptr_high                                                                               	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_fr_wr_idx_base_ptr_low                                                                              	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_fr_wr_idx_base_ptr_high                                                                             	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_fr_rd_idx_base_ptr_low                                                                              	;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tx_post_fr_rd_idx_base_ptr_high                                                                             	;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	backup_index_fifo_base_low                                                                                  	;
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	backup_index_fifo_base_high                                                                                 	;
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dhd_doorbell_low                                                                                            	;
		};
	};
	/* Union WORD 9 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dhd_doorbell_high                                                                                           	;
		};
	};
	/* Union WORD 10 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	tx_post_qd                                                                                                  	;
        uint16_t	tx_post_wr_idx                                                                                              	;
		};
	};
	/* Union WORD 11 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	idma_last_group_fr                                                                                          	;
        uint16_t	tx_post_rd_idx                                                                                              	;
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	cam_rslt                                                                                                    	;
		};
	};
	/* Union WORD 13 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	backup_cache_idx                                                                                            	;
        uint8_t	cache_ctx_next_write_idx                                                                                    	;
        uint8_t	aggregation_bypass_tcp_pktlen                                                                               	;
        uint32_t	codel_active                                                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	idma_active                                                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow_ring_format                                                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	aggregation_bypass_non_udp_tcp                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	aggregation_bypass_cpu_tx                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	add_llcsnap_header                                                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 14 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	per_ac_aggregation_thresholds[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_NUMBER];
		};
	};
	/* Union WORD 15 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	per_ac_aggregation_timeouts[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_NUMBER];
		};
	};
	/* Union WORD 16 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	per_ac_aggregation_timeout_cntrs[RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_NUMBER];
		};
	};
	/* Union WORD 17 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	doorbell_value_address                                                                                      	;
		};
	};
	/* Union WORD 18 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	scratchpad[RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_NUMBER];
		};
	};
	/* Union WORD 25 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	backup_wr_idx                                                                                               	;
        uint16_t	backup_rd_idx                                                                                               	;
		};
	};
	/* Union WORD 26 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	rsv_address_high                                                                                            	; /* This is a field union */
        uint32_t	packet_l4_protocol                                                                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                                                                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_prio                                                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_prio                                                                                                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_data_len                                                                                             	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_abs_addr                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_valid                                                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reserved3                                                                                                             	; /* Member of rsv_address_high union */
        uint32_t	reservedSU1_packet_l4_protocol                                                                                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved2                                                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_buffer_prio                                                                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_prio                                                                                               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_data_len                                                                                           	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_abs_addr                                                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_valid                                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint8_t	packet_data_ptr_high                                                                                                  	; /* Member of rsv_address_high union */
        uint32_t	reservedSU2_packet_l4_protocol                                                                                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved2                                                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_buffer_prio                                                                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_prio                                                                                               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_data_len                                                                                           	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_abs_addr                                                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_valid                                                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 27 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	fpm_address_low                                                                                             	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	packet_bn0                                                                                                            	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	reserved4                                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_packet_sop                                                                                                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_fpm_pool                                                                                                       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	packet_data_ptr_low                                                                                                   	; /* Member of fpm_address_low union */
		};
	};
	/* Union WORD 28 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	request_id                                                                                                  	;
		};
	};
	/* Union WORD 29 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	coalescing_max_count                                                                                        	;
        uint8_t	cpu_msg_done                                                                                                	;
        uint16_t	aggr_timer_scratchpad                                                                                       	;
		};
	};
	/* Union WORD 30 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	doorbell_counters[RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_NUMBER];
		};
	};
	/* Union WORD 34 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	cur_frg_id                                                                                                  	;
        uint8_t	coalescing_timeout_cntr                                                                                     	;
        uint8_t	coalescing_timeout                                                                                          	;
        uint8_t	reserved1                                                                                                   	;
		};
	};
	/* Union WORD 35 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	codel_max_seq_drops                                                                                         	;
        uint32_t	dst_queue                                                                                                   	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dst_vport                                                                                                   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tx_mirroring_en                                                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 36 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	reserved5[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED5_NUMBER];
        uint8_t	idma_group_shift                                                                                            	;
        uint8_t	fr_ptrs_size_shift                                                                                          	;
		};
	};
	/* Union WORD 37 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	reserved6[RDD_DHD_POST_COMMON_RADIO_ENTRY_RESERVED6_NUMBER];
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_POST_COMMON_RADIO_ENTRY_STRUCT;

#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT), (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT), (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_READ(r, p)                     MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_WRITE(v, p)                    MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 4, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 4, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_READ(r, p)                    MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 8, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 8, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_READ(r, p)                   MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 12, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 12, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_READ(r, p)                  MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 16, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 16, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_READ(r, p)                   MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 20, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 20, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_READ(r, p)                  MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 24, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 24, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_READ(r, p)                       MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 28, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 28, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_READ(r, p)                      MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_READ_G(r, g, idx)                          GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 32, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WRITE_G(v, g, idx)                         GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 32, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_READ(r, p)                                 MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WRITE(v, p)                                MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 36, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 36, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_READ(r, p)                                MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_READ_G(r, g, idx)                            GROUP_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 40, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_WRITE_G(v, g, idx)                           GROUP_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 40, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_READ(r, p)                                   MREAD_16((uint8_t *)(p) + 40, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_WRITE(v, p)                                  MWRITE_16((uint8_t *)(p) + 40, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_QD_READ_G(r, g, idx)                                GROUP_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 42, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_QD_WRITE_G(v, g, idx)                               GROUP_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 42, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_QD_READ(r, p)                                       MREAD_16((uint8_t *)(p) + 42, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_QD_WRITE(v, p)                                      MWRITE_16((uint8_t *)(p) + 42, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_READ_G(r, g, idx)                            GROUP_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 44, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_WRITE_G(v, g, idx)                           GROUP_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 44, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_READ(r, p)                                   MREAD_16((uint8_t *)(p) + 44, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_WRITE(v, p)                                  MWRITE_16((uint8_t *)(p) + 44, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_READ_G(r, g, idx)                        GROUP_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 46, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_WRITE_G(v, g, idx)                       GROUP_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 46, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_READ(r, p)                               MREAD_16((uint8_t *)(p) + 46, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_WRITE(v, p)                              MWRITE_16((uint8_t *)(p) + 46, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_READ_G(r, g, idx)                                  GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 48, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_WRITE_G(v, g, idx)                                 GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 48, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_READ(r, p)                                         MREAD_32((uint8_t *)(p) + 48, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_WRITE(v, p)                                        MWRITE_32((uint8_t *)(p) + 48, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 7, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 7, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 52, 7, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 52, 7, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 6, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 6, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 52, 6, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 52, 6, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 5, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 5, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 52, 5, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 52, 5, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 2, 3, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 2, 3, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 52, 2, 3, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 52, 2, 3, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 1, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 1, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p) + 52, 1, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p) + 52, 1, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CODEL_ACTIVE_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 0, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CODEL_ACTIVE_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 52, 0, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CODEL_ACTIVE_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p) + 52, 0, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CODEL_ACTIVE_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p) + 52, 0, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_READ_G(r, g, idx)             GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 53, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_WRITE_G(v, g, idx)            GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 53, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_READ(r, p)                    MREAD_8((uint8_t *)(p) + 53, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_WRITE(v, p)                   MWRITE_8((uint8_t *)(p) + 53, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 54, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 54, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_READ(r, p)                         MREAD_8((uint8_t *)(p) + 54, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 54, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 55, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 55, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 55, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 55, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_READ_G(r, g, idx, i)          GROUP_MREAD_I_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 56, i, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_WRITE_G(v, g, idx, i)         GROUP_MWRITE_I_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 56, i, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_READ(r, p, i)                 MREAD_I_8((uint8_t *)(p) + 56, i, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_WRITE(v, p, i)                MWRITE_I_8((uint8_t *)(p) + 56, i, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_READ_G(r, g, idx, i)            GROUP_MREAD_I_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 60, i, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_WRITE_G(v, g, idx, i)           GROUP_MWRITE_I_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 60, i, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_READ(r, p, i)                   MREAD_I_8((uint8_t *)(p) + 60, i, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_WRITE(v, p, i)                  MWRITE_I_8((uint8_t *)(p) + 60, i, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_READ_G(r, g, idx, i)       GROUP_MREAD_I_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 64, i, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 64, i, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_READ(r, p, i)              MREAD_I_8((uint8_t *)(p) + 64, i, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)(p) + 64, i, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 68, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 68, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_READ(r, p)                           MREAD_32((uint8_t *)(p) + 68, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 68, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_READ_G(r, g, idx, i)                             GROUP_MREAD_I_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 72, i, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_WRITE_G(v, g, idx, i)                            GROUP_MWRITE_I_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 72, i, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_READ(r, p, i)                                    MREAD_I_32((uint8_t *)(p) + 72, i, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_WRITE(v, p, i)                                   MWRITE_I_32((uint8_t *)(p) + 72, i, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_READ_G(r, g, idx)                             GROUP_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 100, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_WRITE_G(v, g, idx)                            GROUP_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 100, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_READ(r, p)                                    MREAD_16((uint8_t *)(p) + 100, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_WRITE(v, p)                                   MWRITE_16((uint8_t *)(p) + 100, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_READ_G(r, g, idx)                             GROUP_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 102, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_WRITE_G(v, g, idx)                            GROUP_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 102, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_READ(r, p)                                    MREAD_16((uint8_t *)(p) + 102, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_WRITE(v, p)                                   MWRITE_16((uint8_t *)(p) + 102, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 104, 7, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 104, 7, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p) + 104, 7, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p) + 104, 7, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 104, 6, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 104, 6, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 104, 6, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 104, 6, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 104, 0, 14, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 104, 0, 14, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_READ(r, p)                                  FIELD_MREAD_16((uint8_t *)(p) + 104, 0, 14, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_WRITE(v, p)                                 FIELD_MWRITE_16((uint8_t *)(p) + 104, 0, 14, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 106, 5, 3, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 106, 5, 3, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p) + 106, 5, 3, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p) + 106, 5, 3, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BUFFER_PRIO_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 106, 4, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BUFFER_PRIO_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 106, 4, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BUFFER_PRIO_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p) + 106, 4, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_BUFFER_PRIO_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p) + 106, 4, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 106, 0, 2, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 106, 0, 2, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 106, 0, 2, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 106, 0, 2, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 107, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 107, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 107, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 107, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_HIGH_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 107, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_HIGH_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 107, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_HIGH_READ(r, p)                             MREAD_8((uint8_t *)(p) + 107, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_HIGH_WRITE(v, p)                            MWRITE_8((uint8_t *)(p) + 107, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_READ_G(r, g, idx)                           GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 108, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_WRITE_G(v, g, idx)                          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 108, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_READ(r, p)                                  MREAD_32((uint8_t *)(p) + 108, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_WRITE(v, p)                                 MWRITE_32((uint8_t *)(p) + 108, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_FPM_POOL_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 108, 6, 2, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_FPM_POOL_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 108, 6, 2, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_FPM_POOL_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 108, 6, 2, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_FPM_POOL_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 108, 6, 2, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PACKET_SOP_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 108, 3, 11, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PACKET_SOP_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 108, 3, 11, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PACKET_SOP_READ(r, p)                                FIELD_MREAD_16((uint8_t *)(p) + 108, 3, 11, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_PACKET_SOP_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)(p) + 108, 3, 11, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_BN0_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 108, 0, 18, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_BN0_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 108, 0, 18, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_BN0_READ(r, p)                                       FIELD_MREAD_32((uint8_t *)(p) + 108, 0, 18, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_BN0_WRITE(v, p)                                      FIELD_MWRITE_32((uint8_t *)(p) + 108, 0, 18, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_LOW_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 108, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_LOW_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 108, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_LOW_READ(r, p)                              MREAD_32((uint8_t *)(p) + 108, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_PTR_LOW_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 108, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_READ_G(r, g, idx)                                GROUP_MREAD_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 112, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_WRITE_G(v, g, idx)                               GROUP_MWRITE_32((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 112, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_READ(r, p)                                       MREAD_32((uint8_t *)(p) + 112, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_WRITE(v, p)                                      MWRITE_32((uint8_t *)(p) + 112, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_READ_G(r, g, idx)                     GROUP_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 116, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_WRITE_G(v, g, idx)                    GROUP_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 116, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_READ(r, p)                            MREAD_16((uint8_t *)(p) + 116, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_WRITE(v, p)                           MWRITE_16((uint8_t *)(p) + 116, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_READ_G(r, g, idx)                              GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 118, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_WRITE_G(v, g, idx)                             GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 118, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_READ(r, p)                                     MREAD_8((uint8_t *)(p) + 118, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_WRITE(v, p)                                    MWRITE_8((uint8_t *)(p) + 118, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 119, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 119, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_READ(r, p)                             MREAD_8((uint8_t *)(p) + 119, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_WRITE(v, p)                            MWRITE_8((uint8_t *)(p) + 119, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_READ_G(r, g, idx, i)                      GROUP_MREAD_I_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 120, i, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_WRITE_G(v, g, idx, i)                     GROUP_MWRITE_I_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 120, i, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_READ(r, p, i)                             MREAD_I_8((uint8_t *)(p) + 120, i, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_WRITE(v, p, i)                            MWRITE_I_8((uint8_t *)(p) + 120, i, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_READ_G(r, g, idx)                        GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 137, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_WRITE_G(v, g, idx)                       GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 137, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_READ(r, p)                               MREAD_8((uint8_t *)(p) + 137, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_WRITE(v, p)                              MWRITE_8((uint8_t *)(p) + 137, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_READ_G(r, g, idx)                   GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 138, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_WRITE_G(v, g, idx)                  GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 138, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_READ(r, p)                          MREAD_8((uint8_t *)(p) + 138, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_WRITE(v, p)                         MWRITE_8((uint8_t *)(p) + 138, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_READ_G(r, g, idx)                                GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 139, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_WRITE_G(v, g, idx)                               GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 139, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_READ(r, p)                                       MREAD_8((uint8_t *)(p) + 139, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_WRITE(v, p)                                      MWRITE_8((uint8_t *)(p) + 139, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 140, 7, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 140, 7, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 140, 7, 1, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 140, 7, 1, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 140, 1, 6, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 140, 1, 6, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_READ(r, p)                                        FIELD_MREAD_8((uint8_t *)(p) + 140, 1, 6, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_WRITE(v, p)                                       FIELD_MWRITE_8((uint8_t *)(p) + 140, 1, 6, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 140, 0, 9, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 140, 0, 9, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_READ(r, p)                                        FIELD_MREAD_16((uint8_t *)(p) + 140, 0, 9, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_WRITE(v, p)                                       FIELD_MWRITE_16((uint8_t *)(p) + 140, 0, 9, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CODEL_MAX_SEQ_DROPS_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 142, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CODEL_MAX_SEQ_DROPS_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 142, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CODEL_MAX_SEQ_DROPS_READ(r, p)                              MREAD_16((uint8_t *)(p) + 142, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_CODEL_MAX_SEQ_DROPS_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 142, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_READ_G(r, g, idx)                        GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 144, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_WRITE_G(v, g, idx)                       GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 144, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_READ(r, p)                               MREAD_8((uint8_t *)(p) + 144, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_WRITE(v, p)                              MWRITE_8((uint8_t *)(p) + 144, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 145, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_POST_COMMON_RADIO_ENTRY_STRUCT) + 145, (v))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 145, (r))
#define RDD_DHD_POST_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 145, (v))
/* <<<DHD_POST_COMMON_RADIO_ENTRY_STRUCT */


#define RDD_DHD_POST_COMMON_RADIO_DATA_SIZE     3
typedef struct
{
	DHD_POST_COMMON_RADIO_ENTRY_STRUCT	entry[ RDD_DHD_POST_COMMON_RADIO_DATA_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_POST_COMMON_RADIO_DATA_STRUCT;

extern uint32_t RDD_DHD_POST_COMMON_RADIO_DATA_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_POST_COMMON_RADIO_DATA_PTR(core_id)	( DHD_POST_COMMON_RADIO_DATA_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_POST_COMMON_RADIO_DATA_ADDRESS_ARR[core_id] ))

/* <<<DHD_POST_COMMON_RADIO_DATA */


/* >>>DHD_FPM_POOL_NUMBER_MAPPING_TABLE */

#define RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_SIZE     16
typedef struct
{
	FPM_POOL_NUMBER_STRUCT	entry[ RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_FPM_POOL_NUMBER_MAPPING_TABLE_STRUCT;

extern uint32_t RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_PTR(core_id)	( DHD_FPM_POOL_NUMBER_MAPPING_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_FPM_POOL_NUMBER_MAPPING_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_FPM_POOL_NUMBER_MAPPING_TABLE */


/* >>>DHD_TIMER_STACK */

#define RDD_DHD_TIMER_STACK_SIZE     32
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_TIMER_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TIMER_STACK_STRUCT;

extern uint32_t RDD_DHD_TIMER_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TIMER_STACK_PTR(core_id)	( DHD_TIMER_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TIMER_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_TIMER_STACK */


/* >>>SPDSVC_WLAN_TXPOST_PARAMS_TABLE */

/* >>>SPDSVC_WLAN_TXPOST_PARAMS_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	spdsvc_free_idx	;
#else
        uint16_t	spdsvc_free_idx	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) SPDSVC_WLAN_TXPOST_PARAMS_STRUCT;

#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(SPDSVC_WLAN_TXPOST_PARAMS_STRUCT), (r))
#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(SPDSVC_WLAN_TXPOST_PARAMS_STRUCT), (v))
#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
/* <<<SPDSVC_WLAN_TXPOST_PARAMS_STRUCT */


#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_TABLE_SIZE     1
typedef struct
{
	SPDSVC_WLAN_TXPOST_PARAMS_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SPDSVC_WLAN_TXPOST_PARAMS_TABLE_STRUCT;

extern uint32_t RDD_SPDSVC_WLAN_TXPOST_PARAMS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SPDSVC_WLAN_TXPOST_PARAMS_TABLE_PTR(core_id)	( SPDSVC_WLAN_TXPOST_PARAMS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SPDSVC_WLAN_TXPOST_PARAMS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<SPDSVC_WLAN_TXPOST_PARAMS_TABLE */


/* >>>DHD_BACKUP_BASE_ADDR */

#define RDD_DHD_BACKUP_BASE_ADDR_SIZE     1
typedef struct
{
	BYTES_8_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_BACKUP_BASE_ADDR_STRUCT;

extern uint32_t RDD_DHD_BACKUP_BASE_ADDR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_BACKUP_BASE_ADDR_PTR(core_id)	( DHD_BACKUP_BASE_ADDR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_BACKUP_BASE_ADDR_ADDRESS_ARR[core_id] ))

/* <<<DHD_BACKUP_BASE_ADDR */


/* >>>DHD_TX_POST_2_STACK */

#define RDD_DHD_TX_POST_2_STACK_SIZE     128
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_TX_POST_2_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_POST_2_STACK_STRUCT;

extern uint32_t RDD_DHD_TX_POST_2_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_POST_2_STACK_PTR(core_id)	( DHD_TX_POST_2_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_POST_2_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_POST_2_STACK */


/* >>>DHD_TX_POST_UPDATE_FIFO_TABLE */

#define RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	UPDATE_FIFO_ENTRY_STRUCT	entry[ RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_POST_UPDATE_FIFO_TABLE_STRUCT;

extern uint32_t RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_PTR(core_id)	( DHD_TX_POST_UPDATE_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_POST_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_POST_UPDATE_FIFO_TABLE */


/* >>>DHD_TX_POST_UPDATE_FIFO_STACK */

#define RDD_DHD_TX_POST_UPDATE_FIFO_STACK_SIZE     32
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_TX_POST_UPDATE_FIFO_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_POST_UPDATE_FIFO_STACK_STRUCT;

extern uint32_t RDD_DHD_TX_POST_UPDATE_FIFO_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_POST_UPDATE_FIFO_STACK_PTR(core_id)	( DHD_TX_POST_UPDATE_FIFO_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_POST_UPDATE_FIFO_STACK_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_POST_UPDATE_FIFO_STACK */


/* >>>DHD_BACKUP_INDEX_CACHE */

/* >>>DHD_BACKUP_IDX_CACHE_TABLE_STRUCT */
#define RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_NUMBER	16
typedef union
{
    uint32_t word_32[8];
    uint64_t dword_64[4];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	indexes[RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_NUMBER];
#else
        uint16_t	indexes[RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_BACKUP_IDX_CACHE_TABLE_STRUCT;

#define RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_READ_G(r, g, idx, i)       GROUP_MREAD_I_16((g), (idx)*sizeof(DHD_BACKUP_IDX_CACHE_TABLE_STRUCT), i, (r))
#define RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_16((g), (idx)*sizeof(DHD_BACKUP_IDX_CACHE_TABLE_STRUCT), i, (v))
#define RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_READ(r, p, i)              MREAD_I_16((uint8_t *)(p), i, (r))
#define RDD_DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_WRITE(v, p, i)             MWRITE_I_16((uint8_t *)(p), i, (v))
/* <<<DHD_BACKUP_IDX_CACHE_TABLE_STRUCT */


#define RDD_DHD_BACKUP_INDEX_CACHE_SIZE     3
typedef struct
{
	DHD_BACKUP_IDX_CACHE_TABLE_STRUCT	entry[ RDD_DHD_BACKUP_INDEX_CACHE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_BACKUP_INDEX_CACHE_STRUCT;

extern uint32_t RDD_DHD_BACKUP_INDEX_CACHE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_BACKUP_INDEX_CACHE_PTR(core_id)	( DHD_BACKUP_INDEX_CACHE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_BACKUP_INDEX_CACHE_ADDRESS_ARR[core_id] ))

/* <<<DHD_BACKUP_INDEX_CACHE */


/* >>>DHD_DOORBELL_TX_POST_VALUE */

#define RDD_DHD_DOORBELL_TX_POST_VALUE_SIZE     16
typedef struct
{
	DHD_DOORBELL_STRUCT	entry[ RDD_DHD_DOORBELL_TX_POST_VALUE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_DOORBELL_TX_POST_VALUE_STRUCT;

extern uint32_t RDD_DHD_DOORBELL_TX_POST_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_DOORBELL_TX_POST_VALUE_PTR(core_id)	( DHD_DOORBELL_TX_POST_VALUE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_DOORBELL_TX_POST_VALUE_ADDRESS_ARR[core_id] ))

/* <<<DHD_DOORBELL_TX_POST_VALUE */


/* >>>DHD_L2_HEADER */

#define RDD_DHD_L2_HEADER_SIZE     72
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DHD_L2_HEADER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_L2_HEADER_STRUCT;

extern uint32_t RDD_DHD_L2_HEADER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_L2_HEADER_PTR(core_id)	( DHD_L2_HEADER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_L2_HEADER_ADDRESS_ARR[core_id] ))

/* <<<DHD_L2_HEADER */


/* >>>DHD_MIRRORING_DISPATCHER_CREDIT_TABLE */

#define RDD_DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_MIRRORING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_MIRRORING_DISPATCHER_CREDIT_TABLE */


/* >>>DHD_TX_POST_PD_FIFO_TABLE */

#define RDD_DHD_TX_POST_PD_FIFO_TABLE_SIZE     12
typedef struct
{
	PROCESSING_TX_DESCRIPTOR_STRUCT	entry[ RDD_DHD_TX_POST_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_TX_POST_PD_FIFO_TABLE_STRUCT;

extern uint32_t RDD_DHD_TX_POST_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_TX_POST_PD_FIFO_TABLE_PTR(core_id)	( DHD_TX_POST_PD_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_TX_POST_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_TX_POST_PD_FIFO_TABLE */


/* >>>DHD_FLOW_RING_CACHE_LKP_TABLE */

/* >>>DHD_FLOW_RING_CACHE_LKP_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	invalid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	flow_ring_id	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	flow_ring_id	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	invalid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) DHD_FLOW_RING_CACHE_LKP_ENTRY_STRUCT;

#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_LKP_ENTRY_STRUCT), 7, 1, (r))
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_LKP_ENTRY_STRUCT), 7, 1, (v))
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_L_READ( wv )                    FIELD_GET( wv, 15, 1 )
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_INVALID_L_WRITE( v, wv )                FIELD_SET( v, 15, 1, wv )
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_LKP_ENTRY_STRUCT), 0, 10, (r))
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_FLOW_RING_CACHE_LKP_ENTRY_STRUCT), 0, 10, (v))
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p), 0, 10, (r))
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p), 0, 10, (v))
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_L_READ( wv )               FIELD_GET( wv, 0, 10 )
#define RDD_DHD_FLOW_RING_CACHE_LKP_ENTRY_FLOW_RING_ID_L_WRITE( v, wv )           FIELD_SET( v, 0, 10, wv )
/* <<<DHD_FLOW_RING_CACHE_LKP_ENTRY_STRUCT */


#define RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_SIZE     48
typedef struct
{
	DHD_FLOW_RING_CACHE_LKP_ENTRY_STRUCT	entry[ RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DHD_FLOW_RING_CACHE_LKP_TABLE_STRUCT;

extern uint32_t RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_PTR(core_id)	( DHD_FLOW_RING_CACHE_LKP_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DHD_FLOW_RING_CACHE_LKP_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DHD_FLOW_RING_CACHE_LKP_TABLE */

/* CORE_4 */

/* >>>DS_TM_PD_FIFO_TABLE */

#define RDD_DS_TM_PD_FIFO_TABLE_SIZE     96
typedef struct
{
	PROCESSING_TX_DESCRIPTOR_STRUCT	entry[ RDD_DS_TM_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_PD_FIFO_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_PD_FIFO_TABLE_PTR(core_id)	( DS_TM_PD_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_PD_FIFO_TABLE */


/* >>>DS_TM_SCHEDULING_QUEUE_TABLE */

#define RDD_DS_TM_SCHEDULING_QUEUE_TABLE_SIZE     48
typedef struct
{
	SCHEDULING_QUEUE_DESCRIPTOR_STRUCT	entry[ RDD_DS_TM_SCHEDULING_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_SCHEDULING_QUEUE_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_SCHEDULING_QUEUE_TABLE_PTR(core_id)	( DS_TM_SCHEDULING_QUEUE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_SCHEDULING_QUEUE_TABLE */


/* >>>BASIC_SCHEDULER_TABLE_DS */

/* >>>BASIC_SCHEDULER_DESCRIPTOR_STRUCT */
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_NUMBER	8
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	rate_limit_enable                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	complex_scheduler_exists                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dwrr_offset                                                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parent_index_2                                                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint8_t	slot_budget_bit_vector                                           	;
        uint32_t	parent_index_1                                                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	last_served_queue                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	status_bit_vector                                                	;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_rate_limit_enable                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_complex_scheduler_exists                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_dwrr_offset                                                    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	complex_scheduler_index                                                    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
        uint8_t	reservedSU1_slot_budget_bit_vector                                         	;
        uint32_t	complex_scheduler_slot_index                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
        uint32_t	reservedSU1_last_served_queue                                              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reservedSU1_status_bit_vector                                              	;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_rate_limit_enable                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_complex_scheduler_exists                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_dwrr_offset                                                    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bbh_queue_msb                                                              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
        uint32_t	ovl_rl_en                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
        uint32_t	reserved1                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
        uint8_t	reservedSU2_slot_budget_bit_vector                                         	;
        uint32_t	is_positive_budget                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
        uint32_t	bbh_queue_lsb                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
        uint32_t	reservedSU2_last_served_queue                                              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reservedSU2_status_bit_vector                                              	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	rate_limiter_index                                               	;
        uint8_t	quantum_number                                                   	;
        uint16_t	deficit_counter                                                  	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	queue_index[RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_NUMBER];
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	status_bit_vector                                                	;
        uint32_t	last_served_queue                                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parent_index_1                                                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint8_t	slot_budget_bit_vector                                           	;
        uint32_t	parent_index_2                                                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	dwrr_offset                                                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	complex_scheduler_exists                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rate_limit_enable                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reservedSU1_status_bit_vector                                              	;
        uint32_t	reservedSU1_last_served_queue                                              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	complex_scheduler_slot_index                                               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
        uint8_t	reservedSU1_slot_budget_bit_vector                                         	;
        uint32_t	complex_scheduler_index                                                    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
        uint32_t	reservedSU1_dwrr_offset                                                    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_complex_scheduler_exists                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_rate_limit_enable                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint8_t	reservedSU2_status_bit_vector                                              	;
        uint32_t	reservedSU2_last_served_queue                                              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bbh_queue_lsb                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
        uint32_t	is_positive_budget                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_1 union */
        uint8_t	reservedSU2_slot_budget_bit_vector                                         	;
        uint32_t	reserved1                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
        uint32_t	ovl_rl_en                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
        uint32_t	bbh_queue_msb                                                              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parent_index_2 union */
        uint32_t	reservedSU2_dwrr_offset                                                    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_complex_scheduler_exists                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_rate_limit_enable                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	deficit_counter                                                  	;
        uint8_t	quantum_number                                                   	;
        uint8_t	rate_limiter_index                                               	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	queue_index[RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_NUMBER];
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BASIC_SCHEDULER_DESCRIPTOR_STRUCT;

#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMIT_ENABLE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_EXISTS_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 6, 1, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_EXISTS_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 6, 1, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_EXISTS_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_EXISTS_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 4, 2, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 4, 2, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p), 4, 2, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DWRR_OFFSET_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p), 4, 2, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_2_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 0, 4, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_2_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 0, 4, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_2_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p), 0, 4, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_2_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p), 0, 4, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_INDEX_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 0, 4, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_INDEX_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 0, 4, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_INDEX_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 0, 4, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_INDEX_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 0, 4, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_MSB_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 2, 2, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_MSB_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 2, 2, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_MSB_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p), 2, 2, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_MSB_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p), 2, 2, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_OVL_RL_EN_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 1, 1, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_OVL_RL_EN_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT), 1, 1, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_OVL_RL_EN_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_OVL_RL_EN_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_READ_G(r, g, idx)                GROUP_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 1, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_WRITE_G(v, g, idx)               GROUP_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 1, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_READ(r, p)                       MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_SLOT_BUDGET_BIT_VECTOR_WRITE(v, p)                      MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_1_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 3, 5, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_1_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 3, 5, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_1_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 5, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_PARENT_INDEX_1_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 5, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_SLOT_INDEX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 3, 5, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_SLOT_INDEX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 3, 5, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_SLOT_INDEX_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 5, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_COMPLEX_SCHEDULER_SLOT_INDEX_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 5, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 7, 1, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 7, 1, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 2, 7, 1, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_IS_POSITIVE_BUDGET_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 2, 7, 1, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_LSB_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 3, 4, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_LSB_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 3, 4, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_LSB_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 4, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_BBH_QUEUE_LSB_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 4, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_LAST_SERVED_QUEUE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 0, 3, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_LAST_SERVED_QUEUE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 2, 0, 3, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_LAST_SERVED_QUEUE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 3, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_LAST_SERVED_QUEUE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 3, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_READ_G(r, g, idx)                     GROUP_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 3, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_WRITE_G(v, g, idx)                    GROUP_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 3, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_READ(r, p)                            MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_STATUS_BIT_VECTOR_WRITE(v, p)                           MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_READ_G(r, g, idx)                    GROUP_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE_G(v, g, idx)                   GROUP_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_READ(r, p)                           MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_RATE_LIMITER_INDEX_WRITE(v, p)                          MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_READ_G(r, g, idx)                        GROUP_MREAD_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 5, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_WRITE_G(v, g, idx)                       GROUP_MWRITE_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 5, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_READ(r, p)                               MREAD_8((uint8_t *)(p) + 5, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUANTUM_NUMBER_WRITE(v, p)                              MWRITE_8((uint8_t *)(p) + 5, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 6, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 6, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_READ(r, p)                              MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_DEFICIT_COUNTER_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_READ_G(r, g, idx, i)                        GROUP_MREAD_I_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 8, i, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_WRITE_G(v, g, idx, i)                       GROUP_MWRITE_I_8((g), (idx)*sizeof(BASIC_SCHEDULER_DESCRIPTOR_STRUCT) + 8, i, (v))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_READ(r, p, i)                               MREAD_I_8((uint8_t *)(p) + 8, i, (r))
#define RDD_BASIC_SCHEDULER_DESCRIPTOR_QUEUE_INDEX_WRITE(v, p, i)                              MWRITE_I_8((uint8_t *)(p) + 8, i, (v))
/* <<<BASIC_SCHEDULER_DESCRIPTOR_STRUCT */


#define RDD_BASIC_SCHEDULER_TABLE_DS_SIZE     6
typedef struct
{
	BASIC_SCHEDULER_DESCRIPTOR_STRUCT	entry[ RDD_BASIC_SCHEDULER_TABLE_DS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BASIC_SCHEDULER_TABLE_DS_STRUCT;

extern uint32_t RDD_BASIC_SCHEDULER_TABLE_DS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BASIC_SCHEDULER_TABLE_DS_PTR(core_id)	( BASIC_SCHEDULER_TABLE_DS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BASIC_SCHEDULER_TABLE_DS_ADDRESS_ARR[core_id] ))

/* <<<BASIC_SCHEDULER_TABLE_DS */


/* >>>REPORTING_QUEUE_DESCRIPTOR_TABLE */

/* >>>REPORTING_QUEUE_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reported_bytes   	;
        uint32_t	reported_overhead	;
#else
        uint32_t	reported_bytes   	;
        uint32_t	reported_overhead	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) REPORTING_QUEUE_DESCRIPTOR_STRUCT;

#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REPORTING_QUEUE_DESCRIPTOR_STRUCT), (r))
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REPORTING_QUEUE_DESCRIPTOR_STRUCT), (v))
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_READ(r, p)                    MREAD_32((uint8_t *)(p), (r))
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_WRITE(v, p)                   MWRITE_32((uint8_t *)(p), (v))
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(REPORTING_QUEUE_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(REPORTING_QUEUE_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<REPORTING_QUEUE_DESCRIPTOR_STRUCT */


#define RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_SIZE     129
typedef struct
{
	REPORTING_QUEUE_DESCRIPTOR_STRUCT	entry[ RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ REPORTING_QUEUE_DESCRIPTOR_TABLE_STRUCT;

extern uint32_t RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_PTR(core_id)	( REPORTING_QUEUE_DESCRIPTOR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REPORTING_QUEUE_DESCRIPTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<REPORTING_QUEUE_DESCRIPTOR_TABLE */


/* >>>DS_TM_CODEL_DROP_DESCRIPTOR */

#define RDD_DS_TM_CODEL_DROP_DESCRIPTOR_SIZE     1
typedef struct
{
	CODEL_DROP_DESCRIPTOR_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_CODEL_DROP_DESCRIPTOR_STRUCT;

extern uint32_t RDD_DS_TM_CODEL_DROP_DESCRIPTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_CODEL_DROP_DESCRIPTOR_PTR(core_id)	( DS_TM_CODEL_DROP_DESCRIPTOR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_CODEL_DROP_DESCRIPTOR_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_CODEL_DROP_DESCRIPTOR */


/* >>>DS_TM_TM_FLOW_CNTR_TABLE */

/* >>>TM_FLOW_CNTR_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	cntr_id   	;
#else
        uint8_t	cntr_id   	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} TM_FLOW_CNTR_ENTRY_STRUCT;

#define RDD_TM_FLOW_CNTR_ENTRY_CNTR_ID_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(TM_FLOW_CNTR_ENTRY_STRUCT), (r))
#define RDD_TM_FLOW_CNTR_ENTRY_CNTR_ID_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(TM_FLOW_CNTR_ENTRY_STRUCT), (v))
#define RDD_TM_FLOW_CNTR_ENTRY_CNTR_ID_READ(r, p)                 MREAD_8((uint8_t *)(p), (r))
#define RDD_TM_FLOW_CNTR_ENTRY_CNTR_ID_WRITE(v, p)                MWRITE_8((uint8_t *)(p), (v))
/* <<<TM_FLOW_CNTR_ENTRY_STRUCT */


#define RDD_DS_TM_TM_FLOW_CNTR_TABLE_SIZE     64
typedef struct
{
	TM_FLOW_CNTR_ENTRY_STRUCT	entry[ RDD_DS_TM_TM_FLOW_CNTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_TM_FLOW_CNTR_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_TM_FLOW_CNTR_TABLE_PTR(core_id)	( DS_TM_TM_FLOW_CNTR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_TM_FLOW_CNTR_TABLE */


/* >>>REPORTING_STACK */

#define RDD_REPORTING_STACK_SIZE     32
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_REPORTING_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ REPORTING_STACK_STRUCT;

extern uint32_t RDD_REPORTING_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REPORTING_STACK_PTR(core_id)	( REPORTING_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REPORTING_STACK_ADDRESS_ARR[core_id] ))

/* <<<REPORTING_STACK */


/* >>>REPORTING_QUEUE_ACCUMULATED_TABLE */

/* >>>QM_QUEUE_COUNTER_DATA_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	packets   	;
        uint32_t	bytes     	;
        uint32_t	reserved0 	;
        uint32_t	reserved1 	;
#else
        uint32_t	packets   	;
        uint32_t	bytes     	;
        uint32_t	reserved0 	;
        uint32_t	reserved1 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) QM_QUEUE_COUNTER_DATA_STRUCT;

#define RDD_QM_QUEUE_COUNTER_DATA_PACKETS_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(QM_QUEUE_COUNTER_DATA_STRUCT), (r))
#define RDD_QM_QUEUE_COUNTER_DATA_PACKETS_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(QM_QUEUE_COUNTER_DATA_STRUCT), (v))
#define RDD_QM_QUEUE_COUNTER_DATA_PACKETS_READ(r, p)                   MREAD_32((uint8_t *)(p), (r))
#define RDD_QM_QUEUE_COUNTER_DATA_PACKETS_WRITE(v, p)                  MWRITE_32((uint8_t *)(p), (v))
#define RDD_QM_QUEUE_COUNTER_DATA_BYTES_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(QM_QUEUE_COUNTER_DATA_STRUCT) + 4, (r))
#define RDD_QM_QUEUE_COUNTER_DATA_BYTES_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(QM_QUEUE_COUNTER_DATA_STRUCT) + 4, (v))
#define RDD_QM_QUEUE_COUNTER_DATA_BYTES_READ(r, p)                     MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_QM_QUEUE_COUNTER_DATA_BYTES_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<QM_QUEUE_COUNTER_DATA_STRUCT */


#define RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_SIZE     16
typedef struct
{
	QM_QUEUE_COUNTER_DATA_STRUCT	entry[ RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ REPORTING_QUEUE_ACCUMULATED_TABLE_STRUCT;

extern uint32_t RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_PTR(core_id)	( REPORTING_QUEUE_ACCUMULATED_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REPORTING_QUEUE_ACCUMULATED_TABLE_ADDRESS_ARR[core_id] ))

/* <<<REPORTING_QUEUE_ACCUMULATED_TABLE */


/* >>>PROCESSING_4_TASKS_PACKET_BUFFER */

#define RDD_PROCESSING_4_TASKS_PACKET_BUFFER_SIZE     4
typedef struct
{
	PACKET_BUFFER_STRUCT	entry[ RDD_PROCESSING_4_TASKS_PACKET_BUFFER_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ PROCESSING_4_TASKS_PACKET_BUFFER_STRUCT;

extern uint32_t RDD_PROCESSING_4_TASKS_PACKET_BUFFER_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_PROCESSING_4_TASKS_PACKET_BUFFER_PTR(core_id)	( PROCESSING_4_TASKS_PACKET_BUFFER_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_PROCESSING_4_TASKS_PACKET_BUFFER_ADDRESS_ARR[core_id] ))

/* <<<PROCESSING_4_TASKS_PACKET_BUFFER */


/* >>>COMPLEX_SCHEDULER_TABLE */

#define RDD_COMPLEX_SCHEDULER_TABLE_SIZE     16
typedef struct
{
	COMPLEX_SCHEDULER_DESCRIPTOR_STRUCT	entry[ RDD_COMPLEX_SCHEDULER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ COMPLEX_SCHEDULER_TABLE_STRUCT;

extern uint32_t RDD_COMPLEX_SCHEDULER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_COMPLEX_SCHEDULER_TABLE_PTR(core_id)	( COMPLEX_SCHEDULER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_COMPLEX_SCHEDULER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<COMPLEX_SCHEDULER_TABLE */


/* >>>DS_TM_BBH_TX_WAKE_UP_DATA_TABLE */

/* >>>BBH_TX_WAKE_UP_DATA_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bytes_in_bbh	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	queue       	;
        uint32_t	reserved1   	;
#else
        uint8_t	queue       	;
        uint32_t	bytes_in_bbh	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1   	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BBH_TX_WAKE_UP_DATA_ENTRY_STRUCT;

#define RDD_BBH_TX_WAKE_UP_DATA_ENTRY_BYTES_IN_BBH_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(BBH_TX_WAKE_UP_DATA_ENTRY_STRUCT), 8, 19, (r))
#define RDD_BBH_TX_WAKE_UP_DATA_ENTRY_BYTES_IN_BBH_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(BBH_TX_WAKE_UP_DATA_ENTRY_STRUCT), 8, 19, (v))
#define RDD_BBH_TX_WAKE_UP_DATA_ENTRY_BYTES_IN_BBH_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p), 8, 19, (r))
#define RDD_BBH_TX_WAKE_UP_DATA_ENTRY_BYTES_IN_BBH_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p), 8, 19, (v))
#define RDD_BBH_TX_WAKE_UP_DATA_ENTRY_QUEUE_READ_G(r, g, idx)                 GROUP_MREAD_8((g), (idx)*sizeof(BBH_TX_WAKE_UP_DATA_ENTRY_STRUCT) + 3, (r))
#define RDD_BBH_TX_WAKE_UP_DATA_ENTRY_QUEUE_WRITE_G(v, g, idx)                GROUP_MWRITE_8((g), (idx)*sizeof(BBH_TX_WAKE_UP_DATA_ENTRY_STRUCT) + 3, (v))
#define RDD_BBH_TX_WAKE_UP_DATA_ENTRY_QUEUE_READ(r, p)                        MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_BBH_TX_WAKE_UP_DATA_ENTRY_QUEUE_WRITE(v, p)                       MWRITE_8((uint8_t *)(p) + 3, (v))
/* <<<BBH_TX_WAKE_UP_DATA_ENTRY_STRUCT */


#define RDD_DS_TM_BBH_TX_WAKE_UP_DATA_TABLE_SIZE     1
typedef struct
{
	BBH_TX_WAKE_UP_DATA_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_BBH_TX_WAKE_UP_DATA_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_BBH_TX_WAKE_UP_DATA_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_BBH_TX_WAKE_UP_DATA_TABLE_PTR(core_id)	( DS_TM_BBH_TX_WAKE_UP_DATA_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_BBH_TX_WAKE_UP_DATA_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_BBH_TX_WAKE_UP_DATA_TABLE */


/* >>>DS_BUFFER_CONG_MGT_CFG */

/* >>>BUFFER_CONG_MGT_STRUCT */
typedef union
{
    uint32_t word_32[16];
    uint64_t dword_64[8];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	dqm_not_empty_address  	;
        uint32_t	dqm_valid_ctr_address  	;
        uint32_t	ug_counter_address     	;
        uint16_t	ug_threshold_high      	;
        uint16_t	ug_threshold_low       	;
        uint8_t	enabled                	;
        uint8_t	start_queue            	;
        uint8_t	end_queue              	;
        uint8_t	fw_state               	;
        uint16_t	timer_duration         	;
        uint16_t	reserved1              	;
        uint8_t	sq_start_queue         	;
        uint8_t	num_pds_to_flush       	;
        uint16_t	flush_wakeup           	;
        uint16_t	flush_cfg_address      	;
        uint16_t	flush_enable_address   	;
        uint32_t	sq_flush_wakeup        	;
        uint32_t	sq_flush_wakeup_value  	;
        uint32_t	sq_flush_cfg_address   	;
        uint32_t	sq_flush_enable_address	;
        uint16_t	cong_queue_idx         	;
        uint16_t	cong_queue_occupancy   	;
        uint32_t	cong_detected          	;
        uint32_t	cong_cleared           	;
        uint32_t	cong_detection_time    	;
#else
        uint32_t	dqm_not_empty_address  	;
        uint32_t	dqm_valid_ctr_address  	;
        uint32_t	ug_counter_address     	;
        uint16_t	ug_threshold_low       	;
        uint16_t	ug_threshold_high      	;
        uint8_t	fw_state               	;
        uint8_t	end_queue              	;
        uint8_t	start_queue            	;
        uint8_t	enabled                	;
        uint16_t	reserved1              	;
        uint16_t	timer_duration         	;
        uint16_t	flush_wakeup           	;
        uint8_t	num_pds_to_flush       	;
        uint8_t	sq_start_queue         	;
        uint16_t	flush_enable_address   	;
        uint16_t	flush_cfg_address      	;
        uint32_t	sq_flush_wakeup        	;
        uint32_t	sq_flush_wakeup_value  	;
        uint32_t	sq_flush_cfg_address   	;
        uint32_t	sq_flush_enable_address	;
        uint16_t	cong_queue_occupancy   	;
        uint16_t	cong_queue_idx         	;
        uint32_t	cong_detected          	;
        uint32_t	cong_cleared           	;
        uint32_t	cong_detection_time    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BUFFER_CONG_MGT_STRUCT;

#define RDD_BUFFER_CONG_MGT_DQM_NOT_EMPTY_ADDRESS_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT), (r))
#define RDD_BUFFER_CONG_MGT_DQM_NOT_EMPTY_ADDRESS_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT), (v))
#define RDD_BUFFER_CONG_MGT_DQM_NOT_EMPTY_ADDRESS_READ(r, p)                   MREAD_32((uint8_t *)(p), (r))
#define RDD_BUFFER_CONG_MGT_DQM_NOT_EMPTY_ADDRESS_WRITE(v, p)                  MWRITE_32((uint8_t *)(p), (v))
#define RDD_BUFFER_CONG_MGT_DQM_VALID_CTR_ADDRESS_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 4, (r))
#define RDD_BUFFER_CONG_MGT_DQM_VALID_CTR_ADDRESS_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 4, (v))
#define RDD_BUFFER_CONG_MGT_DQM_VALID_CTR_ADDRESS_READ(r, p)                   MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_BUFFER_CONG_MGT_DQM_VALID_CTR_ADDRESS_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_BUFFER_CONG_MGT_UG_COUNTER_ADDRESS_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 8, (r))
#define RDD_BUFFER_CONG_MGT_UG_COUNTER_ADDRESS_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 8, (v))
#define RDD_BUFFER_CONG_MGT_UG_COUNTER_ADDRESS_READ(r, p)                      MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_BUFFER_CONG_MGT_UG_COUNTER_ADDRESS_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_BUFFER_CONG_MGT_UG_THRESHOLD_HIGH_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 12, (r))
#define RDD_BUFFER_CONG_MGT_UG_THRESHOLD_HIGH_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 12, (v))
#define RDD_BUFFER_CONG_MGT_UG_THRESHOLD_HIGH_READ(r, p)                       MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_BUFFER_CONG_MGT_UG_THRESHOLD_HIGH_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_BUFFER_CONG_MGT_UG_THRESHOLD_LOW_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 14, (r))
#define RDD_BUFFER_CONG_MGT_UG_THRESHOLD_LOW_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 14, (v))
#define RDD_BUFFER_CONG_MGT_UG_THRESHOLD_LOW_READ(r, p)                        MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_BUFFER_CONG_MGT_UG_THRESHOLD_LOW_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_BUFFER_CONG_MGT_ENABLED_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 16, (r))
#define RDD_BUFFER_CONG_MGT_ENABLED_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 16, (v))
#define RDD_BUFFER_CONG_MGT_ENABLED_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 16, (r))
#define RDD_BUFFER_CONG_MGT_ENABLED_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 16, (v))
#define RDD_BUFFER_CONG_MGT_START_QUEUE_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 17, (r))
#define RDD_BUFFER_CONG_MGT_START_QUEUE_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 17, (v))
#define RDD_BUFFER_CONG_MGT_START_QUEUE_READ(r, p)                             MREAD_8((uint8_t *)(p) + 17, (r))
#define RDD_BUFFER_CONG_MGT_START_QUEUE_WRITE(v, p)                            MWRITE_8((uint8_t *)(p) + 17, (v))
#define RDD_BUFFER_CONG_MGT_END_QUEUE_READ_G(r, g, idx)                        GROUP_MREAD_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 18, (r))
#define RDD_BUFFER_CONG_MGT_END_QUEUE_WRITE_G(v, g, idx)                       GROUP_MWRITE_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 18, (v))
#define RDD_BUFFER_CONG_MGT_END_QUEUE_READ(r, p)                               MREAD_8((uint8_t *)(p) + 18, (r))
#define RDD_BUFFER_CONG_MGT_END_QUEUE_WRITE(v, p)                              MWRITE_8((uint8_t *)(p) + 18, (v))
#define RDD_BUFFER_CONG_MGT_FW_STATE_READ_G(r, g, idx)                         GROUP_MREAD_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 19, (r))
#define RDD_BUFFER_CONG_MGT_FW_STATE_WRITE_G(v, g, idx)                        GROUP_MWRITE_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 19, (v))
#define RDD_BUFFER_CONG_MGT_FW_STATE_READ(r, p)                                MREAD_8((uint8_t *)(p) + 19, (r))
#define RDD_BUFFER_CONG_MGT_FW_STATE_WRITE(v, p)                               MWRITE_8((uint8_t *)(p) + 19, (v))
#define RDD_BUFFER_CONG_MGT_TIMER_DURATION_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 20, (r))
#define RDD_BUFFER_CONG_MGT_TIMER_DURATION_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 20, (v))
#define RDD_BUFFER_CONG_MGT_TIMER_DURATION_READ(r, p)                          MREAD_16((uint8_t *)(p) + 20, (r))
#define RDD_BUFFER_CONG_MGT_TIMER_DURATION_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 20, (v))
#define RDD_BUFFER_CONG_MGT_SQ_START_QUEUE_READ_G(r, g, idx)                   GROUP_MREAD_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 24, (r))
#define RDD_BUFFER_CONG_MGT_SQ_START_QUEUE_WRITE_G(v, g, idx)                  GROUP_MWRITE_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 24, (v))
#define RDD_BUFFER_CONG_MGT_SQ_START_QUEUE_READ(r, p)                          MREAD_8((uint8_t *)(p) + 24, (r))
#define RDD_BUFFER_CONG_MGT_SQ_START_QUEUE_WRITE(v, p)                         MWRITE_8((uint8_t *)(p) + 24, (v))
#define RDD_BUFFER_CONG_MGT_NUM_PDS_TO_FLUSH_READ_G(r, g, idx)                 GROUP_MREAD_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 25, (r))
#define RDD_BUFFER_CONG_MGT_NUM_PDS_TO_FLUSH_WRITE_G(v, g, idx)                GROUP_MWRITE_8((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 25, (v))
#define RDD_BUFFER_CONG_MGT_NUM_PDS_TO_FLUSH_READ(r, p)                        MREAD_8((uint8_t *)(p) + 25, (r))
#define RDD_BUFFER_CONG_MGT_NUM_PDS_TO_FLUSH_WRITE(v, p)                       MWRITE_8((uint8_t *)(p) + 25, (v))
#define RDD_BUFFER_CONG_MGT_FLUSH_WAKEUP_READ_G(r, g, idx)                     GROUP_MREAD_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 26, (r))
#define RDD_BUFFER_CONG_MGT_FLUSH_WAKEUP_WRITE_G(v, g, idx)                    GROUP_MWRITE_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 26, (v))
#define RDD_BUFFER_CONG_MGT_FLUSH_WAKEUP_READ(r, p)                            MREAD_16((uint8_t *)(p) + 26, (r))
#define RDD_BUFFER_CONG_MGT_FLUSH_WAKEUP_WRITE(v, p)                           MWRITE_16((uint8_t *)(p) + 26, (v))
#define RDD_BUFFER_CONG_MGT_FLUSH_CFG_ADDRESS_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 28, (r))
#define RDD_BUFFER_CONG_MGT_FLUSH_CFG_ADDRESS_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 28, (v))
#define RDD_BUFFER_CONG_MGT_FLUSH_CFG_ADDRESS_READ(r, p)                       MREAD_16((uint8_t *)(p) + 28, (r))
#define RDD_BUFFER_CONG_MGT_FLUSH_CFG_ADDRESS_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 28, (v))
#define RDD_BUFFER_CONG_MGT_FLUSH_ENABLE_ADDRESS_READ_G(r, g, idx)             GROUP_MREAD_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 30, (r))
#define RDD_BUFFER_CONG_MGT_FLUSH_ENABLE_ADDRESS_WRITE_G(v, g, idx)            GROUP_MWRITE_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 30, (v))
#define RDD_BUFFER_CONG_MGT_FLUSH_ENABLE_ADDRESS_READ(r, p)                    MREAD_16((uint8_t *)(p) + 30, (r))
#define RDD_BUFFER_CONG_MGT_FLUSH_ENABLE_ADDRESS_WRITE(v, p)                   MWRITE_16((uint8_t *)(p) + 30, (v))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_WAKEUP_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 32, (r))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_WAKEUP_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 32, (v))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_WAKEUP_READ(r, p)                         MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_WAKEUP_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_WAKEUP_VALUE_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 36, (r))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_WAKEUP_VALUE_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 36, (v))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_WAKEUP_VALUE_READ(r, p)                   MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_WAKEUP_VALUE_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_CFG_ADDRESS_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 40, (r))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_CFG_ADDRESS_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 40, (v))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_CFG_ADDRESS_READ(r, p)                    MREAD_32((uint8_t *)(p) + 40, (r))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_CFG_ADDRESS_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 40, (v))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_ENABLE_ADDRESS_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 44, (r))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_ENABLE_ADDRESS_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 44, (v))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_ENABLE_ADDRESS_READ(r, p)                 MREAD_32((uint8_t *)(p) + 44, (r))
#define RDD_BUFFER_CONG_MGT_SQ_FLUSH_ENABLE_ADDRESS_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 44, (v))
#define RDD_BUFFER_CONG_MGT_CONG_QUEUE_IDX_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 48, (r))
#define RDD_BUFFER_CONG_MGT_CONG_QUEUE_IDX_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 48, (v))
#define RDD_BUFFER_CONG_MGT_CONG_QUEUE_IDX_READ(r, p)                          MREAD_16((uint8_t *)(p) + 48, (r))
#define RDD_BUFFER_CONG_MGT_CONG_QUEUE_IDX_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 48, (v))
#define RDD_BUFFER_CONG_MGT_CONG_QUEUE_OCCUPANCY_READ_G(r, g, idx)             GROUP_MREAD_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 50, (r))
#define RDD_BUFFER_CONG_MGT_CONG_QUEUE_OCCUPANCY_WRITE_G(v, g, idx)            GROUP_MWRITE_16((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 50, (v))
#define RDD_BUFFER_CONG_MGT_CONG_QUEUE_OCCUPANCY_READ(r, p)                    MREAD_16((uint8_t *)(p) + 50, (r))
#define RDD_BUFFER_CONG_MGT_CONG_QUEUE_OCCUPANCY_WRITE(v, p)                   MWRITE_16((uint8_t *)(p) + 50, (v))
#define RDD_BUFFER_CONG_MGT_CONG_DETECTED_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 52, (r))
#define RDD_BUFFER_CONG_MGT_CONG_DETECTED_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 52, (v))
#define RDD_BUFFER_CONG_MGT_CONG_DETECTED_READ(r, p)                           MREAD_32((uint8_t *)(p) + 52, (r))
#define RDD_BUFFER_CONG_MGT_CONG_DETECTED_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 52, (v))
#define RDD_BUFFER_CONG_MGT_CONG_CLEARED_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 56, (r))
#define RDD_BUFFER_CONG_MGT_CONG_CLEARED_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 56, (v))
#define RDD_BUFFER_CONG_MGT_CONG_CLEARED_READ(r, p)                            MREAD_32((uint8_t *)(p) + 56, (r))
#define RDD_BUFFER_CONG_MGT_CONG_CLEARED_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 56, (v))
#define RDD_BUFFER_CONG_MGT_CONG_DETECTION_TIME_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 60, (r))
#define RDD_BUFFER_CONG_MGT_CONG_DETECTION_TIME_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_MGT_STRUCT) + 60, (v))
#define RDD_BUFFER_CONG_MGT_CONG_DETECTION_TIME_READ(r, p)                     MREAD_32((uint8_t *)(p) + 60, (r))
#define RDD_BUFFER_CONG_MGT_CONG_DETECTION_TIME_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 60, (v))
/* <<<BUFFER_CONG_MGT_STRUCT */


#define RDD_DS_BUFFER_CONG_MGT_CFG_SIZE     1
typedef struct
{
	BUFFER_CONG_MGT_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_BUFFER_CONG_MGT_CFG_STRUCT;

extern uint32_t RDD_DS_BUFFER_CONG_MGT_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_BUFFER_CONG_MGT_CFG_PTR(core_id)	( DS_BUFFER_CONG_MGT_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_BUFFER_CONG_MGT_CFG_ADDRESS_ARR[core_id] ))

/* <<<DS_BUFFER_CONG_MGT_CFG */


/* >>>BUFFER_CONG_DQM_NOT_EMPTY */

#define RDD_BUFFER_CONG_DQM_NOT_EMPTY_SIZE     8
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_BUFFER_CONG_DQM_NOT_EMPTY_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BUFFER_CONG_DQM_NOT_EMPTY_STRUCT;

extern uint32_t RDD_BUFFER_CONG_DQM_NOT_EMPTY_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BUFFER_CONG_DQM_NOT_EMPTY_PTR(core_id)	( BUFFER_CONG_DQM_NOT_EMPTY_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BUFFER_CONG_DQM_NOT_EMPTY_ADDRESS_ARR[core_id] ))

/* <<<BUFFER_CONG_DQM_NOT_EMPTY */


/* >>>BASIC_RATE_LIMITER_TABLE_DS */

#define RDD_BASIC_RATE_LIMITER_TABLE_DS_SIZE     48
typedef struct
{
	BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT	entry[ RDD_BASIC_RATE_LIMITER_TABLE_DS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BASIC_RATE_LIMITER_TABLE_DS_STRUCT;

extern uint32_t RDD_BASIC_RATE_LIMITER_TABLE_DS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BASIC_RATE_LIMITER_TABLE_DS_PTR(core_id)	( BASIC_RATE_LIMITER_TABLE_DS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BASIC_RATE_LIMITER_TABLE_DS_ADDRESS_ARR[core_id] ))

/* <<<BASIC_RATE_LIMITER_TABLE_DS */


/* >>>VLAN_TX_COUNTERS */

#define RDD_VLAN_TX_COUNTERS_SIZE     129
typedef struct
{
	PACKETS_AND_BYTES_STRUCT	entry[ RDD_VLAN_TX_COUNTERS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ VLAN_TX_COUNTERS_STRUCT;

extern uint32_t RDD_VLAN_TX_COUNTERS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_VLAN_TX_COUNTERS_PTR(core_id)	( VLAN_TX_COUNTERS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_VLAN_TX_COUNTERS_ADDRESS_ARR[core_id] ))

/* <<<VLAN_TX_COUNTERS */


/* >>>DS_TM_CPU_TX_ABS_COUNTERS */

#define RDD_DS_TM_CPU_TX_ABS_COUNTERS_SIZE     32
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DS_TM_CPU_TX_ABS_COUNTERS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_CPU_TX_ABS_COUNTERS_STRUCT;

extern uint32_t RDD_DS_TM_CPU_TX_ABS_COUNTERS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_CPU_TX_ABS_COUNTERS_PTR(core_id)	( DS_TM_CPU_TX_ABS_COUNTERS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_CPU_TX_ABS_COUNTERS_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_CPU_TX_ABS_COUNTERS */


/* >>>REPORT_BBH_TX_QUEUE_ID_TABLE */

#define RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_SIZE     2
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ REPORT_BBH_TX_QUEUE_ID_TABLE_STRUCT;

extern uint32_t RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_PTR(core_id)	( REPORT_BBH_TX_QUEUE_ID_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REPORT_BBH_TX_QUEUE_ID_TABLE_ADDRESS_ARR[core_id] ))

/* <<<REPORT_BBH_TX_QUEUE_ID_TABLE */


/* >>>BUFFER_CONG_SCRATCHPAD */

/* >>>BUFFER_CONG_Q_OCCUPANCY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	packet_cnt	;
        uint32_t	byte_cnt  	;
#else
        uint32_t	packet_cnt	;
        uint32_t	byte_cnt  	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BUFFER_CONG_Q_OCCUPANCY_STRUCT;

#define RDD_BUFFER_CONG_Q_OCCUPANCY_PACKET_CNT_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_Q_OCCUPANCY_STRUCT), (r))
#define RDD_BUFFER_CONG_Q_OCCUPANCY_PACKET_CNT_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_Q_OCCUPANCY_STRUCT), (v))
#define RDD_BUFFER_CONG_Q_OCCUPANCY_PACKET_CNT_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_BUFFER_CONG_Q_OCCUPANCY_PACKET_CNT_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_BUFFER_CONG_Q_OCCUPANCY_BYTE_CNT_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(BUFFER_CONG_Q_OCCUPANCY_STRUCT) + 4, (r))
#define RDD_BUFFER_CONG_Q_OCCUPANCY_BYTE_CNT_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(BUFFER_CONG_Q_OCCUPANCY_STRUCT) + 4, (v))
#define RDD_BUFFER_CONG_Q_OCCUPANCY_BYTE_CNT_READ(r, p)                   MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_BUFFER_CONG_Q_OCCUPANCY_BYTE_CNT_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<BUFFER_CONG_Q_OCCUPANCY_STRUCT */


#define RDD_BUFFER_CONG_SCRATCHPAD_SIZE     8
typedef struct
{
	BUFFER_CONG_Q_OCCUPANCY_STRUCT	entry[ RDD_BUFFER_CONG_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BUFFER_CONG_SCRATCHPAD_STRUCT;

extern uint32_t RDD_BUFFER_CONG_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BUFFER_CONG_SCRATCHPAD_PTR(core_id)	( BUFFER_CONG_SCRATCHPAD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BUFFER_CONG_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<BUFFER_CONG_SCRATCHPAD */


/* >>>GHOST_REPORTING_GLOBAL_CFG */

/* >>>GHOST_REPORTING_GLOBAL_CFG_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	mac_type      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	disable       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	timer_interval	;
#else
        uint16_t	timer_interval	;
        uint32_t	reserved      	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	disable       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mac_type      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) GHOST_REPORTING_GLOBAL_CFG_ENTRY_STRUCT;

#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_MAC_TYPE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(GHOST_REPORTING_GLOBAL_CFG_ENTRY_STRUCT), 5, 3, (r))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_MAC_TYPE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(GHOST_REPORTING_GLOBAL_CFG_ENTRY_STRUCT), 5, 3, (v))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_MAC_TYPE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 5, 3, (r))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_MAC_TYPE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 5, 3, (v))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DISABLE_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(GHOST_REPORTING_GLOBAL_CFG_ENTRY_STRUCT), 4, 1, (r))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DISABLE_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(GHOST_REPORTING_GLOBAL_CFG_ENTRY_STRUCT), 4, 1, (v))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DISABLE_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_DISABLE_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_TIMER_INTERVAL_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(GHOST_REPORTING_GLOBAL_CFG_ENTRY_STRUCT) + 2, (r))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_TIMER_INTERVAL_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(GHOST_REPORTING_GLOBAL_CFG_ENTRY_STRUCT) + 2, (v))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_TIMER_INTERVAL_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_GHOST_REPORTING_GLOBAL_CFG_ENTRY_TIMER_INTERVAL_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
/* <<<GHOST_REPORTING_GLOBAL_CFG_ENTRY_STRUCT */


#define RDD_GHOST_REPORTING_GLOBAL_CFG_SIZE     1
typedef struct
{
	GHOST_REPORTING_GLOBAL_CFG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ GHOST_REPORTING_GLOBAL_CFG_STRUCT;

extern uint32_t RDD_GHOST_REPORTING_GLOBAL_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GHOST_REPORTING_GLOBAL_CFG_PTR(core_id)	( GHOST_REPORTING_GLOBAL_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GHOST_REPORTING_GLOBAL_CFG_ADDRESS_ARR[core_id] ))

/* <<<GHOST_REPORTING_GLOBAL_CFG */


/* >>>BUDGET_ALLOCATION_TIMER_VALUE */

#define RDD_BUDGET_ALLOCATION_TIMER_VALUE_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ BUDGET_ALLOCATION_TIMER_VALUE_STRUCT;

extern uint32_t RDD_BUDGET_ALLOCATION_TIMER_VALUE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BUDGET_ALLOCATION_TIMER_VALUE_PTR(core_id)	( BUDGET_ALLOCATION_TIMER_VALUE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BUDGET_ALLOCATION_TIMER_VALUE_ADDRESS_ARR[core_id] ))

/* <<<BUDGET_ALLOCATION_TIMER_VALUE */


/* >>>DS_TM_FLUSH_CFG_CPU_TABLE */

#define RDD_DS_TM_FLUSH_CFG_CPU_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_FLUSH_CFG_CPU_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_FLUSH_CFG_CPU_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_FLUSH_CFG_CPU_TABLE_PTR(core_id)	( DS_TM_FLUSH_CFG_CPU_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_FLUSH_CFG_CPU_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_FLUSH_CFG_CPU_TABLE */


/* >>>DS_TM_SCHEDULING_QUEUE_AGING_VECTOR */

#define RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_SIZE     5
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_STRUCT;

extern uint32_t RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_PTR(core_id)	( DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_SCHEDULING_QUEUE_AGING_VECTOR */


/* >>>DS_TM_FLUSH_CFG_ENABLE_TABLE */

#define RDD_DS_TM_FLUSH_CFG_ENABLE_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENABLE_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_FLUSH_CFG_ENABLE_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_FLUSH_CFG_ENABLE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_FLUSH_CFG_ENABLE_TABLE_PTR(core_id)	( DS_TM_FLUSH_CFG_ENABLE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_FLUSH_CFG_ENABLE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_FLUSH_CFG_ENABLE_TABLE */


/* >>>GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE */

#define RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_SIZE     5
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_STRUCT;

extern uint32_t RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_PTR(core_id)	( GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<GHOST_REPORTING_QUEUE_STATUS_BIT_VECTOR_TABLE */


/* >>>DS_TM_BB_DESTINATION_TABLE */

#define RDD_DS_TM_BB_DESTINATION_TABLE_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_BB_DESTINATION_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_BB_DESTINATION_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_BB_DESTINATION_TABLE_PTR(core_id)	( DS_TM_BB_DESTINATION_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_BB_DESTINATION_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_BB_DESTINATION_TABLE */


/* >>>QUEUE_TO_REPORT_BIT_VECTOR */

#define RDD_QUEUE_TO_REPORT_BIT_VECTOR_SIZE     5
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_QUEUE_TO_REPORT_BIT_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ QUEUE_TO_REPORT_BIT_VECTOR_STRUCT;

extern uint32_t RDD_QUEUE_TO_REPORT_BIT_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_QUEUE_TO_REPORT_BIT_VECTOR_PTR(core_id)	( QUEUE_TO_REPORT_BIT_VECTOR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_QUEUE_TO_REPORT_BIT_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<QUEUE_TO_REPORT_BIT_VECTOR */


/* >>>SCHEDULING_FLUSH_GLOBAL_CFG */

#define RDD_SCHEDULING_FLUSH_GLOBAL_CFG_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ SCHEDULING_FLUSH_GLOBAL_CFG_STRUCT;

extern uint32_t RDD_SCHEDULING_FLUSH_GLOBAL_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_SCHEDULING_FLUSH_GLOBAL_CFG_PTR(core_id)	( SCHEDULING_FLUSH_GLOBAL_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_SCHEDULING_FLUSH_GLOBAL_CFG_ADDRESS_ARR[core_id] ))

/* <<<SCHEDULING_FLUSH_GLOBAL_CFG */


/* >>>TX_EXCEPTION */

/* >>>TX_EXCEPTION_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	reserved1   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	dbg_stat_en 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	vlan_cntr_en	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	vlan_cntr_en	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	dbg_stat_en 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved1   	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} TX_EXCEPTION_ENTRY_STRUCT;

#define RDD_TX_EXCEPTION_ENTRY_DBG_STAT_EN_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TX_EXCEPTION_ENTRY_STRUCT), 1, 1, (r))
#define RDD_TX_EXCEPTION_ENTRY_DBG_STAT_EN_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TX_EXCEPTION_ENTRY_STRUCT), 1, 1, (v))
#define RDD_TX_EXCEPTION_ENTRY_DBG_STAT_EN_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_TX_EXCEPTION_ENTRY_DBG_STAT_EN_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_TX_EXCEPTION_ENTRY_VLAN_CNTR_EN_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TX_EXCEPTION_ENTRY_STRUCT), 0, 1, (r))
#define RDD_TX_EXCEPTION_ENTRY_VLAN_CNTR_EN_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TX_EXCEPTION_ENTRY_STRUCT), 0, 1, (v))
#define RDD_TX_EXCEPTION_ENTRY_VLAN_CNTR_EN_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 0, 1, (r))
#define RDD_TX_EXCEPTION_ENTRY_VLAN_CNTR_EN_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 0, 1, (v))
/* <<<TX_EXCEPTION_ENTRY_STRUCT */


#define RDD_TX_EXCEPTION_SIZE     1
typedef struct
{
	TX_EXCEPTION_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ TX_EXCEPTION_STRUCT;

extern uint32_t RDD_TX_EXCEPTION_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TX_EXCEPTION_PTR(core_id)	( TX_EXCEPTION_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TX_EXCEPTION_ADDRESS_ARR[core_id] ))

/* <<<TX_EXCEPTION */


/* >>>BBH_TX_EGRESS_REPORT_COUNTER_TABLE */

/* >>>BBH_TX_EGRESS_COUNTER_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	counter   	;
        uint32_t	reserved0 	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1 	;
#else
        uint32_t	reserved0 	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	counter   	;
        uint32_t	reserved1 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BBH_TX_EGRESS_COUNTER_ENTRY_STRUCT;

#define RDD_BBH_TX_EGRESS_COUNTER_ENTRY_COUNTER_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(BBH_TX_EGRESS_COUNTER_ENTRY_STRUCT), (r))
#define RDD_BBH_TX_EGRESS_COUNTER_ENTRY_COUNTER_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(BBH_TX_EGRESS_COUNTER_ENTRY_STRUCT), (v))
#define RDD_BBH_TX_EGRESS_COUNTER_ENTRY_COUNTER_READ(r, p)                   MREAD_8((uint8_t *)(p), (r))
#define RDD_BBH_TX_EGRESS_COUNTER_ENTRY_COUNTER_WRITE(v, p)                  MWRITE_8((uint8_t *)(p), (v))
/* <<<BBH_TX_EGRESS_COUNTER_ENTRY_STRUCT */


#define RDD_BBH_TX_EGRESS_REPORT_COUNTER_TABLE_SIZE     1
typedef struct
{
	BBH_TX_EGRESS_COUNTER_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ BBH_TX_EGRESS_REPORT_COUNTER_TABLE_STRUCT;

extern uint32_t RDD_BBH_TX_EGRESS_REPORT_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BBH_TX_EGRESS_REPORT_COUNTER_TABLE_PTR(core_id)	( BBH_TX_EGRESS_REPORT_COUNTER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BBH_TX_EGRESS_REPORT_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BBH_TX_EGRESS_REPORT_COUNTER_TABLE */


/* >>>DS_TM_FLUSH_CFG_FW_TABLE */

#define RDD_DS_TM_FLUSH_CFG_FW_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_FLUSH_CFG_FW_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_FLUSH_CFG_FW_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_FLUSH_CFG_FW_TABLE_PTR(core_id)	( DS_TM_FLUSH_CFG_FW_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_FLUSH_CFG_FW_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_FLUSH_CFG_FW_TABLE */


/* >>>DS_TM_FLUSH_CFG_CURRENT_TABLE */

#define RDD_DS_TM_FLUSH_CFG_CURRENT_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_FLUSH_CFG_CURRENT_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_FLUSH_CFG_CURRENT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_FLUSH_CFG_CURRENT_TABLE_PTR(core_id)	( DS_TM_FLUSH_CFG_CURRENT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_FLUSH_CFG_CURRENT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_FLUSH_CFG_CURRENT_TABLE */


/* >>>DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE */

#define RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_FLUSH_DISPATCHER_CREDIT_TABLE */


/* >>>TX_MIRRORING_CONFIGURATION */

#define RDD_TX_MIRRORING_CONFIGURATION_SIZE     1
typedef struct
{
	MIRRORING_DESCRIPTOR_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ TX_MIRRORING_CONFIGURATION_STRUCT;

extern uint32_t RDD_TX_MIRRORING_CONFIGURATION_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TX_MIRRORING_CONFIGURATION_PTR(core_id)	( TX_MIRRORING_CONFIGURATION_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TX_MIRRORING_CONFIGURATION_ADDRESS_ARR[core_id] ))

/* <<<TX_MIRRORING_CONFIGURATION */


/* >>>DS_TM_TX_QUEUE_DROP_TABLE */

#define RDD_DS_TM_TX_QUEUE_DROP_TABLE_SIZE     65
typedef struct
{
	PACKETS_AND_BYTES_STRUCT	entry[ RDD_DS_TM_TX_QUEUE_DROP_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_TX_QUEUE_DROP_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_TX_QUEUE_DROP_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_TX_QUEUE_DROP_TABLE_PTR(core_id)	( DS_TM_TX_QUEUE_DROP_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_TX_QUEUE_DROP_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_TX_QUEUE_DROP_TABLE */


/* >>>DS_TM_FIRST_QUEUE_MAPPING */

#define RDD_DS_TM_FIRST_QUEUE_MAPPING_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_FIRST_QUEUE_MAPPING_STRUCT;

extern uint32_t RDD_DS_TM_FIRST_QUEUE_MAPPING_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_FIRST_QUEUE_MAPPING_PTR(core_id)	( DS_TM_FIRST_QUEUE_MAPPING_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_FIRST_QUEUE_MAPPING_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_FIRST_QUEUE_MAPPING */


/* >>>BACKUP_BBH_INGRESS_COUNTERS_TABLE */

#define RDD_BACKUP_BBH_INGRESS_COUNTERS_TABLE_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ BACKUP_BBH_INGRESS_COUNTERS_TABLE_STRUCT;

extern uint32_t RDD_BACKUP_BBH_INGRESS_COUNTERS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BACKUP_BBH_INGRESS_COUNTERS_TABLE_PTR(core_id)	( BACKUP_BBH_INGRESS_COUNTERS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BACKUP_BBH_INGRESS_COUNTERS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BACKUP_BBH_INGRESS_COUNTERS_TABLE */


/* >>>RATE_LIMITER_VALID_TABLE_DS */

#define RDD_RATE_LIMITER_VALID_TABLE_DS_SIZE     4
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_RATE_LIMITER_VALID_TABLE_DS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RATE_LIMITER_VALID_TABLE_DS_STRUCT;

extern uint32_t RDD_RATE_LIMITER_VALID_TABLE_DS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RATE_LIMITER_VALID_TABLE_DS_PTR(core_id)	( RATE_LIMITER_VALID_TABLE_DS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RATE_LIMITER_VALID_TABLE_DS_ADDRESS_ARR[core_id] ))

/* <<<RATE_LIMITER_VALID_TABLE_DS */


/* >>>BACKUP_BBH_EGRESS_COUNTERS_TABLE */

#define RDD_BACKUP_BBH_EGRESS_COUNTERS_TABLE_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ BACKUP_BBH_EGRESS_COUNTERS_TABLE_STRUCT;

extern uint32_t RDD_BACKUP_BBH_EGRESS_COUNTERS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BACKUP_BBH_EGRESS_COUNTERS_TABLE_PTR(core_id)	( BACKUP_BBH_EGRESS_COUNTERS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BACKUP_BBH_EGRESS_COUNTERS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BACKUP_BBH_EGRESS_COUNTERS_TABLE */


/* >>>TX_MIRRORING_DISPATCHER_CREDIT_TABLE */

#define RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ TX_MIRRORING_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( TX_MIRRORING_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_TX_MIRRORING_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<TX_MIRRORING_DISPATCHER_CREDIT_TABLE */


/* >>>BBH_TX_INGRESS_COUNTER_TABLE */

#define RDD_BBH_TX_INGRESS_COUNTER_TABLE_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ BBH_TX_INGRESS_COUNTER_TABLE_STRUCT;

extern uint32_t RDD_BBH_TX_INGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BBH_TX_INGRESS_COUNTER_TABLE_PTR(core_id)	( BBH_TX_INGRESS_COUNTER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BBH_TX_INGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BBH_TX_INGRESS_COUNTER_TABLE */


/* >>>DS_TM_BBH_TX_EGRESS_COUNTER_TABLE */

#define RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_SIZE     8
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_PTR(core_id)	( DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_BBH_TX_EGRESS_COUNTER_TABLE */


/* >>>XGPON_REPORT_ZERO_SENT_TABLE */

#define RDD_XGPON_REPORT_ZERO_SENT_TABLE_SIZE     10
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_XGPON_REPORT_ZERO_SENT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ XGPON_REPORT_ZERO_SENT_TABLE_STRUCT;

extern uint32_t RDD_XGPON_REPORT_ZERO_SENT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_XGPON_REPORT_ZERO_SENT_TABLE_PTR(core_id)	( XGPON_REPORT_ZERO_SENT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_XGPON_REPORT_ZERO_SENT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<XGPON_REPORT_ZERO_SENT_TABLE */


/* >>>REPORTING_QUEUE_COUNTER_TABLE */

/* >>>REPORTING_QUEUE_COUNTER_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	counter_ptr	;
#else
        uint16_t	counter_ptr	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) REPORTING_QUEUE_COUNTER_STRUCT;

#define RDD_REPORTING_QUEUE_COUNTER_COUNTER_PTR_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(REPORTING_QUEUE_COUNTER_STRUCT), (r))
#define RDD_REPORTING_QUEUE_COUNTER_COUNTER_PTR_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(REPORTING_QUEUE_COUNTER_STRUCT), (v))
#define RDD_REPORTING_QUEUE_COUNTER_COUNTER_PTR_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_REPORTING_QUEUE_COUNTER_COUNTER_PTR_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
/* <<<REPORTING_QUEUE_COUNTER_STRUCT */


#define RDD_REPORTING_QUEUE_COUNTER_TABLE_SIZE     129
typedef struct
{
	REPORTING_QUEUE_COUNTER_STRUCT	entry[ RDD_REPORTING_QUEUE_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ REPORTING_QUEUE_COUNTER_TABLE_STRUCT;

extern uint32_t RDD_REPORTING_QUEUE_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REPORTING_QUEUE_COUNTER_TABLE_PTR(core_id)	( REPORTING_QUEUE_COUNTER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REPORTING_QUEUE_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<REPORTING_QUEUE_COUNTER_TABLE */


/* >>>DS_TM_CODEL_QUEUE_TABLE */

#define RDD_DS_TM_CODEL_QUEUE_TABLE_SIZE     48
typedef struct
{
	CODEL_QUEUE_DESCRIPTOR_STRUCT	entry[ RDD_DS_TM_CODEL_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_CODEL_QUEUE_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_CODEL_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_CODEL_QUEUE_TABLE_PTR(core_id)	( DS_TM_CODEL_QUEUE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_CODEL_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_CODEL_QUEUE_TABLE */


/* >>>REPORTING_COUNTER_TABLE */

#define RDD_REPORTING_COUNTER_TABLE_SIZE     40
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_REPORTING_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ REPORTING_COUNTER_TABLE_STRUCT;

extern uint32_t RDD_REPORTING_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_REPORTING_COUNTER_TABLE_PTR(core_id)	( REPORTING_COUNTER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_REPORTING_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<REPORTING_COUNTER_TABLE */


/* >>>DS_TM_BBH_QUEUE_TABLE */

/* >>>BBH_QUEUE_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	wan_type_union 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	mirroring_en   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	scheduler_index	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	scheduler_type 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	bb_destination 	;
        uint8_t	ingress_counter	;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	hw_bbh_qid               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_type_union union */
        uint32_t	reservedSU1_mirroring_en 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_priority     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_scheduler_index	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_scheduler_type	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reservedSU1_bb_destination	;
        uint8_t	reservedSU1_ingress_counter	;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reserved                 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_type_union union */
        uint32_t	reservedSU2_mirroring_en 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_priority     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_scheduler_index	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_scheduler_type	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reservedSU2_bb_destination	;
        uint8_t	reservedSU2_ingress_counter	;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	ingress_counter	;
        uint8_t	bb_destination 	;
        uint32_t	scheduler_type 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	scheduler_index	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mirroring_en   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_type_union 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reservedSU1_ingress_counter	;
        uint8_t	reservedSU1_bb_destination	;
        uint32_t	reservedSU1_scheduler_type	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_scheduler_index	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_priority     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mirroring_en 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hw_bbh_qid               	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_type_union union */
		};
		/* Sub Union 2 */
		struct{
        uint8_t	reservedSU2_ingress_counter	;
        uint8_t	reservedSU2_bb_destination	;
        uint32_t	reservedSU2_scheduler_type	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_scheduler_index	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_priority     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mirroring_en 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved                 	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_type_union union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) BBH_QUEUE_DESCRIPTOR_STRUCT;

#define RDD_BBH_QUEUE_DESCRIPTOR_WAN_TYPE_UNION_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT), 2, 6, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_WAN_TYPE_UNION_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT), 2, 6, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_WAN_TYPE_UNION_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p), 2, 6, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_WAN_TYPE_UNION_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p), 2, 6, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_HW_BBH_QID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT), 2, 6, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_HW_BBH_QID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT), 2, 6, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_HW_BBH_QID_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 2, 6, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_HW_BBH_QID_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 2, 6, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT), 1, 1, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT), 1, 1, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_PRIORITY_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT), 0, 1, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_PRIORITY_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT), 0, 1, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_PRIORITY_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 0, 1, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_PRIORITY_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 0, 1, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT) + 1, 1, 7, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT) + 1, 1, 7, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 1, 7, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 1, 7, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT) + 1, 0, 1, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT) + 1, 0, 1, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 1, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 1, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_READ_G(r, g, idx)           GROUP_MREAD_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT) + 2, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_WRITE_G(v, g, idx)          GROUP_MWRITE_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT) + 2, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_READ(r, p)                  MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_WRITE(v, p)                 MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT) + 3, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(BBH_QUEUE_DESCRIPTOR_STRUCT) + 3, (v))
#define RDD_BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_READ(r, p)                 MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 3, (v))
/* <<<BBH_QUEUE_DESCRIPTOR_STRUCT */


#define RDD_DS_TM_BBH_QUEUE_TABLE_SIZE     8
typedef struct
{
	BBH_QUEUE_DESCRIPTOR_STRUCT	entry[ RDD_DS_TM_BBH_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DS_TM_BBH_QUEUE_TABLE_STRUCT;

extern uint32_t RDD_DS_TM_BBH_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DS_TM_BBH_QUEUE_TABLE_PTR(core_id)	( DS_TM_BBH_QUEUE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DS_TM_BBH_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DS_TM_BBH_QUEUE_TABLE */

/* CORE_5 */

/* >>>US_TM_PD_FIFO_TABLE */

#define RDD_US_TM_PD_FIFO_TABLE_SIZE     264
typedef struct
{
	PROCESSING_TX_DESCRIPTOR_STRUCT	entry[ RDD_US_TM_PD_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_PD_FIFO_TABLE_STRUCT;

extern uint32_t RDD_US_TM_PD_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_PD_FIFO_TABLE_PTR(core_id)	( US_TM_PD_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_PD_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_PD_FIFO_TABLE */


/* >>>US_TM_TX_QUEUE_DROP_TABLE */

#define RDD_US_TM_TX_QUEUE_DROP_TABLE_SIZE     65
typedef struct
{
	PACKETS_AND_BYTES_STRUCT	entry[ RDD_US_TM_TX_QUEUE_DROP_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_TX_QUEUE_DROP_TABLE_STRUCT;

extern uint32_t RDD_US_TM_TX_QUEUE_DROP_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_TX_QUEUE_DROP_TABLE_PTR(core_id)	( US_TM_TX_QUEUE_DROP_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_TX_QUEUE_DROP_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_TX_QUEUE_DROP_TABLE */


/* >>>US_TM_CODEL_DROP_DESCRIPTOR */

#define RDD_US_TM_CODEL_DROP_DESCRIPTOR_SIZE     1
typedef struct
{
	CODEL_DROP_DESCRIPTOR_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_CODEL_DROP_DESCRIPTOR_STRUCT;

extern uint32_t RDD_US_TM_CODEL_DROP_DESCRIPTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_CODEL_DROP_DESCRIPTOR_PTR(core_id)	( US_TM_CODEL_DROP_DESCRIPTOR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_CODEL_DROP_DESCRIPTOR_ADDRESS_ARR[core_id] ))

/* <<<US_TM_CODEL_DROP_DESCRIPTOR */


/* >>>DIRECT_FLOW_RX_MIRRORING_SCRATCHPAD */

#define RDD_DIRECT_FLOW_RX_MIRRORING_SCRATCHPAD_SIZE     136
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DIRECT_FLOW_RX_MIRRORING_SCRATCHPAD_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DIRECT_FLOW_RX_MIRRORING_SCRATCHPAD_STRUCT;

extern uint32_t RDD_DIRECT_FLOW_RX_MIRRORING_SCRATCHPAD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_FLOW_RX_MIRRORING_SCRATCHPAD_PTR(core_id)	( DIRECT_FLOW_RX_MIRRORING_SCRATCHPAD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_FLOW_RX_MIRRORING_SCRATCHPAD_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_FLOW_RX_MIRRORING_SCRATCHPAD */


/* >>>US_TM_WAN_0_BBH_TX_WAKE_UP_DATA_TABLE */

#define RDD_US_TM_WAN_0_BBH_TX_WAKE_UP_DATA_TABLE_SIZE     1
typedef struct
{
	BBH_TX_WAKE_UP_DATA_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_WAN_0_BBH_TX_WAKE_UP_DATA_TABLE_STRUCT;

extern uint32_t RDD_US_TM_WAN_0_BBH_TX_WAKE_UP_DATA_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_WAN_0_BBH_TX_WAKE_UP_DATA_TABLE_PTR(core_id)	( US_TM_WAN_0_BBH_TX_WAKE_UP_DATA_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_WAN_0_BBH_TX_WAKE_UP_DATA_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_WAN_0_BBH_TX_WAKE_UP_DATA_TABLE */


/* >>>DIRECT_FLOW_CNTR_TABLE */

#define RDD_DIRECT_FLOW_CNTR_TABLE_SIZE     32
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DIRECT_FLOW_CNTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DIRECT_FLOW_CNTR_TABLE_STRUCT;

extern uint32_t RDD_DIRECT_FLOW_CNTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_FLOW_CNTR_TABLE_PTR(core_id)	( DIRECT_FLOW_CNTR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_FLOW_CNTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_FLOW_CNTR_TABLE */


/* >>>DIRECT_FLOW_STACK */

#define RDD_DIRECT_FLOW_STACK_SIZE     64
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DIRECT_FLOW_STACK_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DIRECT_FLOW_STACK_STRUCT;

extern uint32_t RDD_DIRECT_FLOW_STACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_FLOW_STACK_PTR(core_id)	( DIRECT_FLOW_STACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_FLOW_STACK_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_FLOW_STACK */


/* >>>US_TM_SCHEDULING_QUEUE_TABLE */

#define RDD_US_TM_SCHEDULING_QUEUE_TABLE_SIZE     132
typedef struct
{
	SCHEDULING_QUEUE_DESCRIPTOR_STRUCT	entry[ RDD_US_TM_SCHEDULING_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_SCHEDULING_QUEUE_TABLE_STRUCT;

extern uint32_t RDD_US_TM_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_SCHEDULING_QUEUE_TABLE_PTR(core_id)	( US_TM_SCHEDULING_QUEUE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_SCHEDULING_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_SCHEDULING_QUEUE_TABLE */


/* >>>US_BUFFER_CONG_MGT_CFG */

#define RDD_US_BUFFER_CONG_MGT_CFG_SIZE     1
typedef struct
{
	BUFFER_CONG_MGT_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_BUFFER_CONG_MGT_CFG_STRUCT;

extern uint32_t RDD_US_BUFFER_CONG_MGT_CFG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_BUFFER_CONG_MGT_CFG_PTR(core_id)	( US_BUFFER_CONG_MGT_CFG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_BUFFER_CONG_MGT_CFG_ADDRESS_ARR[core_id] ))

/* <<<US_BUFFER_CONG_MGT_CFG */


/* >>>US_TM_TM_FLOW_CNTR_TABLE */

#define RDD_US_TM_TM_FLOW_CNTR_TABLE_SIZE     128
typedef struct
{
	TM_FLOW_CNTR_ENTRY_STRUCT	entry[ RDD_US_TM_TM_FLOW_CNTR_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_TM_FLOW_CNTR_TABLE_STRUCT;

extern uint32_t RDD_US_TM_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_TM_FLOW_CNTR_TABLE_PTR(core_id)	( US_TM_TM_FLOW_CNTR_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_TM_FLOW_CNTR_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_TM_FLOW_CNTR_TABLE */


/* >>>DIRECT_FLOW_EPON_CONTROL_SCRATCH */

#define RDD_DIRECT_FLOW_EPON_CONTROL_SCRATCH_SIZE     22
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_DIRECT_FLOW_EPON_CONTROL_SCRATCH_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DIRECT_FLOW_EPON_CONTROL_SCRATCH_STRUCT;

extern uint32_t RDD_DIRECT_FLOW_EPON_CONTROL_SCRATCH_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_FLOW_EPON_CONTROL_SCRATCH_PTR(core_id)	( DIRECT_FLOW_EPON_CONTROL_SCRATCH_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_FLOW_EPON_CONTROL_SCRATCH_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_FLOW_EPON_CONTROL_SCRATCH */


/* >>>BBH_TX_EPON_WAKE_UP_DATA_TABLE */

#define RDD_BBH_TX_EPON_WAKE_UP_DATA_TABLE_SIZE     1
typedef struct
{
	BBH_TX_WAKE_UP_DATA_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ BBH_TX_EPON_WAKE_UP_DATA_TABLE_STRUCT;

extern uint32_t RDD_BBH_TX_EPON_WAKE_UP_DATA_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BBH_TX_EPON_WAKE_UP_DATA_TABLE_PTR(core_id)	( BBH_TX_EPON_WAKE_UP_DATA_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BBH_TX_EPON_WAKE_UP_DATA_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BBH_TX_EPON_WAKE_UP_DATA_TABLE */


/* >>>US_TM_BBH_QUEUE_TABLE */

#define RDD_US_TM_BBH_QUEUE_TABLE_SIZE     40
typedef struct
{
	BBH_QUEUE_DESCRIPTOR_STRUCT	entry[ RDD_US_TM_BBH_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_BBH_QUEUE_TABLE_STRUCT;

extern uint32_t RDD_US_TM_BBH_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_BBH_QUEUE_TABLE_PTR(core_id)	( US_TM_BBH_QUEUE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_BBH_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_BBH_QUEUE_TABLE */


/* >>>US_TM_CPU_TX_ABS_COUNTERS */

#define RDD_US_TM_CPU_TX_ABS_COUNTERS_SIZE     32
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_US_TM_CPU_TX_ABS_COUNTERS_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_CPU_TX_ABS_COUNTERS_STRUCT;

extern uint32_t RDD_US_TM_CPU_TX_ABS_COUNTERS_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_CPU_TX_ABS_COUNTERS_PTR(core_id)	( US_TM_CPU_TX_ABS_COUNTERS_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_CPU_TX_ABS_COUNTERS_ADDRESS_ARR[core_id] ))

/* <<<US_TM_CPU_TX_ABS_COUNTERS */


/* >>>US_TM_SCHEDULING_QUEUE_AGING_VECTOR */

#define RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_SIZE     5
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_SCHEDULING_QUEUE_AGING_VECTOR_STRUCT;

extern uint32_t RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_PTR(core_id)	( US_TM_SCHEDULING_QUEUE_AGING_VECTOR_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_SCHEDULING_QUEUE_AGING_VECTOR_ADDRESS_ARR[core_id] ))

/* <<<US_TM_SCHEDULING_QUEUE_AGING_VECTOR */


/* >>>US_TM_FLUSH_CFG_CPU_TABLE */

#define RDD_US_TM_FLUSH_CFG_CPU_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_FLUSH_CFG_CPU_TABLE_STRUCT;

extern uint32_t RDD_US_TM_FLUSH_CFG_CPU_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_FLUSH_CFG_CPU_TABLE_PTR(core_id)	( US_TM_FLUSH_CFG_CPU_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_FLUSH_CFG_CPU_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_FLUSH_CFG_CPU_TABLE */


/* >>>US_TM_WAN_0_BBH_TX_EGRESS_COUNTER_TABLE */

#define RDD_US_TM_WAN_0_BBH_TX_EGRESS_COUNTER_TABLE_SIZE     40
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_US_TM_WAN_0_BBH_TX_EGRESS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_WAN_0_BBH_TX_EGRESS_COUNTER_TABLE_STRUCT;

extern uint32_t RDD_US_TM_WAN_0_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_WAN_0_BBH_TX_EGRESS_COUNTER_TABLE_PTR(core_id)	( US_TM_WAN_0_BBH_TX_EGRESS_COUNTER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_WAN_0_BBH_TX_EGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_WAN_0_BBH_TX_EGRESS_COUNTER_TABLE */


/* >>>US_TM_FLUSH_CFG_ENABLE_TABLE */

#define RDD_US_TM_FLUSH_CFG_ENABLE_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENABLE_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_FLUSH_CFG_ENABLE_TABLE_STRUCT;

extern uint32_t RDD_US_TM_FLUSH_CFG_ENABLE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_FLUSH_CFG_ENABLE_TABLE_PTR(core_id)	( US_TM_FLUSH_CFG_ENABLE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_FLUSH_CFG_ENABLE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_FLUSH_CFG_ENABLE_TABLE */


/* >>>DIRECT_FLOW_PAUSE_QUANTA */

/* >>>PAUSE_QUANTA_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	ignore    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	time_unit 	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	time_unit 	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	ignore    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) PAUSE_QUANTA_ENTRY_STRUCT;

#define RDD_PAUSE_QUANTA_ENTRY_IGNORE_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PAUSE_QUANTA_ENTRY_STRUCT), 7, 1, (r))
#define RDD_PAUSE_QUANTA_ENTRY_IGNORE_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PAUSE_QUANTA_ENTRY_STRUCT), 7, 1, (v))
#define RDD_PAUSE_QUANTA_ENTRY_IGNORE_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_PAUSE_QUANTA_ENTRY_IGNORE_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_PAUSE_QUANTA_ENTRY_TIME_UNIT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PAUSE_QUANTA_ENTRY_STRUCT), 0, 15, (r))
#define RDD_PAUSE_QUANTA_ENTRY_TIME_UNIT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PAUSE_QUANTA_ENTRY_STRUCT), 0, 15, (v))
#define RDD_PAUSE_QUANTA_ENTRY_TIME_UNIT_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p), 0, 15, (r))
#define RDD_PAUSE_QUANTA_ENTRY_TIME_UNIT_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p), 0, 15, (v))
/* <<<PAUSE_QUANTA_ENTRY_STRUCT */


#define RDD_DIRECT_FLOW_PAUSE_QUANTA_SIZE     1
typedef struct
{
	PAUSE_QUANTA_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DIRECT_FLOW_PAUSE_QUANTA_STRUCT;

extern uint32_t RDD_DIRECT_FLOW_PAUSE_QUANTA_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_FLOW_PAUSE_QUANTA_PTR(core_id)	( DIRECT_FLOW_PAUSE_QUANTA_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_FLOW_PAUSE_QUANTA_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_FLOW_PAUSE_QUANTA */


/* >>>US_TM_BBH_TX_WAN_0_FIFO_BYTES_USED */

#define RDD_US_TM_BBH_TX_WAN_0_FIFO_BYTES_USED_SIZE     1
typedef struct
{
	BYTES_4_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_BBH_TX_WAN_0_FIFO_BYTES_USED_STRUCT;

extern uint32_t RDD_US_TM_BBH_TX_WAN_0_FIFO_BYTES_USED_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_BBH_TX_WAN_0_FIFO_BYTES_USED_PTR(core_id)	( US_TM_BBH_TX_WAN_0_FIFO_BYTES_USED_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_BBH_TX_WAN_0_FIFO_BYTES_USED_ADDRESS_ARR[core_id] ))

/* <<<US_TM_BBH_TX_WAN_0_FIFO_BYTES_USED */


/* >>>US_TM_FLUSH_CFG_FW_TABLE */

#define RDD_US_TM_FLUSH_CFG_FW_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_FLUSH_CFG_FW_TABLE_STRUCT;

extern uint32_t RDD_US_TM_FLUSH_CFG_FW_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_FLUSH_CFG_FW_TABLE_PTR(core_id)	( US_TM_FLUSH_CFG_FW_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_FLUSH_CFG_FW_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_FLUSH_CFG_FW_TABLE */


/* >>>BASIC_RATE_LIMITER_TABLE_US */

#define RDD_BASIC_RATE_LIMITER_TABLE_US_SIZE     128
typedef struct
{
	BASIC_RATE_LIMITER_DESCRIPTOR_STRUCT	entry[ RDD_BASIC_RATE_LIMITER_TABLE_US_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BASIC_RATE_LIMITER_TABLE_US_STRUCT;

extern uint32_t RDD_BASIC_RATE_LIMITER_TABLE_US_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BASIC_RATE_LIMITER_TABLE_US_PTR(core_id)	( BASIC_RATE_LIMITER_TABLE_US_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BASIC_RATE_LIMITER_TABLE_US_ADDRESS_ARR[core_id] ))

/* <<<BASIC_RATE_LIMITER_TABLE_US */


/* >>>US_TM_CODEL_QUEUE_TABLE */

#define RDD_US_TM_CODEL_QUEUE_TABLE_SIZE     132
typedef struct
{
	CODEL_QUEUE_DESCRIPTOR_STRUCT	entry[ RDD_US_TM_CODEL_QUEUE_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_CODEL_QUEUE_TABLE_STRUCT;

extern uint32_t RDD_US_TM_CODEL_QUEUE_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_CODEL_QUEUE_TABLE_PTR(core_id)	( US_TM_CODEL_QUEUE_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_CODEL_QUEUE_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_CODEL_QUEUE_TABLE */


/* >>>BBH_TX_EPON_INGRESS_COUNTER_TABLE */

#define RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_SIZE     40
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BBH_TX_EPON_INGRESS_COUNTER_TABLE_STRUCT;

extern uint32_t RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_PTR(core_id)	( BBH_TX_EPON_INGRESS_COUNTER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BBH_TX_EPON_INGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BBH_TX_EPON_INGRESS_COUNTER_TABLE */


/* >>>US_TM_WAN_0_BB_DESTINATION_TABLE */

#define RDD_US_TM_WAN_0_BB_DESTINATION_TABLE_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_WAN_0_BB_DESTINATION_TABLE_STRUCT;

extern uint32_t RDD_US_TM_WAN_0_BB_DESTINATION_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_WAN_0_BB_DESTINATION_TABLE_PTR(core_id)	( US_TM_WAN_0_BB_DESTINATION_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_WAN_0_BB_DESTINATION_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_WAN_0_BB_DESTINATION_TABLE */


/* >>>QEMU_SYNC_MEM */

/* >>>QEMU_DATA_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	start_runner_trace        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	stop_runner_trace         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	start_capture_waves       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	stop_capture_waves        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	start_send_1_packet_once  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	start_send_infinise_packet	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	data_path_ready           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	reserved                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	data_path_ready           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	start_send_infinise_packet	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	start_send_1_packet_once  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	stop_capture_waves        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	start_capture_waves       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	stop_runner_trace         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	start_runner_trace        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} QEMU_DATA_STRUCT;

#define RDD_QEMU_DATA_START_RUNNER_TRACE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 7, 1, (r))
#define RDD_QEMU_DATA_START_RUNNER_TRACE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 7, 1, (v))
#define RDD_QEMU_DATA_START_RUNNER_TRACE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_QEMU_DATA_START_RUNNER_TRACE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_QEMU_DATA_STOP_RUNNER_TRACE_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 6, 1, (r))
#define RDD_QEMU_DATA_STOP_RUNNER_TRACE_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 6, 1, (v))
#define RDD_QEMU_DATA_STOP_RUNNER_TRACE_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_QEMU_DATA_STOP_RUNNER_TRACE_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_QEMU_DATA_START_CAPTURE_WAVES_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 5, 1, (r))
#define RDD_QEMU_DATA_START_CAPTURE_WAVES_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 5, 1, (v))
#define RDD_QEMU_DATA_START_CAPTURE_WAVES_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_QEMU_DATA_START_CAPTURE_WAVES_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_QEMU_DATA_STOP_CAPTURE_WAVES_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 4, 1, (r))
#define RDD_QEMU_DATA_STOP_CAPTURE_WAVES_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 4, 1, (v))
#define RDD_QEMU_DATA_STOP_CAPTURE_WAVES_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_QEMU_DATA_STOP_CAPTURE_WAVES_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_QEMU_DATA_START_SEND_1_PACKET_ONCE_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 3, 1, (r))
#define RDD_QEMU_DATA_START_SEND_1_PACKET_ONCE_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 3, 1, (v))
#define RDD_QEMU_DATA_START_SEND_1_PACKET_ONCE_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_QEMU_DATA_START_SEND_1_PACKET_ONCE_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_QEMU_DATA_START_SEND_INFINISE_PACKET_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 2, 1, (r))
#define RDD_QEMU_DATA_START_SEND_INFINISE_PACKET_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 2, 1, (v))
#define RDD_QEMU_DATA_START_SEND_INFINISE_PACKET_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_QEMU_DATA_START_SEND_INFINISE_PACKET_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_QEMU_DATA_DATA_PATH_READY_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 1, 1, (r))
#define RDD_QEMU_DATA_DATA_PATH_READY_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(QEMU_DATA_STRUCT), 1, 1, (v))
#define RDD_QEMU_DATA_DATA_PATH_READY_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_QEMU_DATA_DATA_PATH_READY_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
/* <<<QEMU_DATA_STRUCT */


#define RDD_QEMU_SYNC_MEM_SIZE     1
typedef struct
{
	QEMU_DATA_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ QEMU_SYNC_MEM_STRUCT;

extern uint32_t RDD_QEMU_SYNC_MEM_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_QEMU_SYNC_MEM_PTR(core_id)	( QEMU_SYNC_MEM_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_QEMU_SYNC_MEM_ADDRESS_ARR[core_id] ))

/* <<<QEMU_SYNC_MEM */


/* >>>DIRECT_FLOW_WAN_VIQ_EXCLUSIVE */

#define RDD_DIRECT_FLOW_WAN_VIQ_EXCLUSIVE_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DIRECT_FLOW_WAN_VIQ_EXCLUSIVE_STRUCT;

extern uint32_t RDD_DIRECT_FLOW_WAN_VIQ_EXCLUSIVE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_FLOW_WAN_VIQ_EXCLUSIVE_PTR(core_id)	( DIRECT_FLOW_WAN_VIQ_EXCLUSIVE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_FLOW_WAN_VIQ_EXCLUSIVE_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_FLOW_WAN_VIQ_EXCLUSIVE */


/* >>>US_TM_TX_PAUSE_NACK */

#define RDD_US_TM_TX_PAUSE_NACK_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_TX_PAUSE_NACK_STRUCT;

extern uint32_t RDD_US_TM_TX_PAUSE_NACK_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_TX_PAUSE_NACK_PTR(core_id)	( US_TM_TX_PAUSE_NACK_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_TX_PAUSE_NACK_ADDRESS_ARR[core_id] ))

/* <<<US_TM_TX_PAUSE_NACK */


/* >>>BBH_TX_US_WAN_0_FIFO_BYTES_THRESHOLD */

#define RDD_BBH_TX_US_WAN_0_FIFO_BYTES_THRESHOLD_SIZE     1
typedef struct
{
	BYTES_2_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ BBH_TX_US_WAN_0_FIFO_BYTES_THRESHOLD_STRUCT;

extern uint32_t RDD_BBH_TX_US_WAN_0_FIFO_BYTES_THRESHOLD_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BBH_TX_US_WAN_0_FIFO_BYTES_THRESHOLD_PTR(core_id)	( BBH_TX_US_WAN_0_FIFO_BYTES_THRESHOLD_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BBH_TX_US_WAN_0_FIFO_BYTES_THRESHOLD_ADDRESS_ARR[core_id] ))

/* <<<BBH_TX_US_WAN_0_FIFO_BYTES_THRESHOLD */


/* >>>US_TM_FLUSH_CFG_CURRENT_TABLE */

#define RDD_US_TM_FLUSH_CFG_CURRENT_TABLE_SIZE     1
typedef struct
{
	FLUSH_CFG_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_FLUSH_CFG_CURRENT_TABLE_STRUCT;

extern uint32_t RDD_US_TM_FLUSH_CFG_CURRENT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_FLUSH_CFG_CURRENT_TABLE_PTR(core_id)	( US_TM_FLUSH_CFG_CURRENT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_FLUSH_CFG_CURRENT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_FLUSH_CFG_CURRENT_TABLE */


/* >>>BBH_TX_EPON_EGRESS_COUNTER_TABLE */

#define RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_SIZE     32
typedef struct
{
	BYTE_1_STRUCT	entry[ RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BBH_TX_EPON_EGRESS_COUNTER_TABLE_STRUCT;

extern uint32_t RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_PTR(core_id)	( BBH_TX_EPON_EGRESS_COUNTER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BBH_TX_EPON_EGRESS_COUNTER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<BBH_TX_EPON_EGRESS_COUNTER_TABLE */


/* >>>DIRECT_FLOW_PD_TABLE */

/* >>>PROCESSING_RX_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	pd_info           	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	key_index                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	fragment_type               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	options                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	reserved0                   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	ctrl_key_index              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	ctrl_fragment_type          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	sfc                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	reserved1                   	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	g9991_tci_sof               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	g9991_tci_eof               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	g9991_tci_const             	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	g9991_tci_sid_1_0           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint8_t	g9991_tci_sid_9_2           	; /* Member of pd_info union */
        uint16_t	g9991_length_time           	; /* Member of pd_info union */
		};
		/* Sub Union 4 */
		struct{
        uint32_t	timestamp                   	; /* Member of pd_info union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs_or_dsl        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	reserved          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	error_type_or_cpu_tx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_serial_num      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_ploam           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_ingress_cong    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of abs_or_dsl union */
        uint32_t	reservedSU1_reserved        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	error_type                  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
        uint32_t	reservedSU1_packet_length   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_serial_num      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_ploam           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_ingress_cong    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	xdsl                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of abs_or_dsl union */
        uint32_t	reservedSU2_reserved        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_tx                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
        uint32_t	reserved2                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
        uint32_t	reservedSU2_packet_length   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_serial_num      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_ploam           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_ingress_cong    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_abs_or_dsl      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_reserved        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs_25_28                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
        uint32_t	reservedSU3_packet_length   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_port      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	bn1_last_or_abs1  	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_error           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_cong_state      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lan             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	bn1_last                    	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_error           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_cong_state      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lan             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	source_port                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	abs1                        	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_error           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_cong_state      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_lan             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_ingress_port    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
        uint32_t	ssid                        	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
        uint32_t	bn1_last_truncated          	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	payload_offset_sop	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sop_fpm                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm                      	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3                   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm_pool                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm_num                  	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn_num                      	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop                         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint16_t	bn0_first                   	; /* Member of payload_offset_sop union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	pd_info           	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reserved0                   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	options                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	fragment_type               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	key_index                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reserved1                   	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	sfc                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	ctrl_fragment_type          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	ctrl_key_index              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 3 */
		struct{
        uint16_t	g9991_length_time           	; /* Member of pd_info union */
        uint8_t	g9991_tci_sid_9_2           	; /* Member of pd_info union */
        uint32_t	g9991_tci_sid_1_0           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	g9991_tci_const             	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	g9991_tci_eof               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
        uint32_t	g9991_tci_sof               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pd_info union */
		};
		/* Sub Union 4 */
		struct{
        uint32_t	timestamp                   	; /* Member of pd_info union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	error_type_or_cpu_tx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	reserved          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs_or_dsl        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ploam             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	serial_num        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_packet_length   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	error_type                  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
        uint32_t	reservedSU1_reserved        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of abs_or_dsl union */
        uint32_t	reservedSU1_ingress_cong    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_ploam           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_serial_num      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_packet_length   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
        uint32_t	cpu_tx                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
        uint32_t	reservedSU2_reserved        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	xdsl                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of abs_or_dsl union */
        uint32_t	reservedSU2_ingress_cong    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_ploam           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_serial_num      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_packet_length   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs_25_28                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of error_type_or_cpu_tx union */
        uint32_t	reservedSU3_reserved        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_abs_or_dsl      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_ingress_cong    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_ploam           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_serial_num      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	bn1_last_or_abs1  	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	ingress_port      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cong_state        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	error             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn1_last                    	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
        uint32_t	flow                        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	reservedSU1_lan             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_cong_state      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_error           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	abs1                        	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
        uint32_t	source_port                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ingress_port union */
        uint32_t	reservedSU2_lan             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_cong_state      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_error           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	bn1_last_truncated          	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
        uint32_t	ssid                        	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
        uint32_t	reserved4                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_last_or_abs1 union */
        uint32_t	reservedSU3_ingress_port    	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_lan             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_cong_state      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_error           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	payload_offset_sop	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn_fpm                      	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop_fpm                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU1_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	bn_fpm_num                  	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm_pool                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved3                   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU2_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint16_t	bn0_first                   	; /* Member of payload_offset_sop union */
        uint32_t	sop                         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_num                      	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU3_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PROCESSING_RX_DESCRIPTOR_STRUCT;

#define RDD_PROCESSING_RX_DESCRIPTOR_PD_INFO_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_PD_INFO_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_PD_INFO_READ(r, p)                            MREAD_32((uint8_t *)(p), (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_PD_INFO_WRITE(v, p)                           MWRITE_32((uint8_t *)(p), (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_KEY_INDEX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 6, 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_KEY_INDEX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 6, 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_KEY_INDEX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 6, 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_KEY_INDEX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 6, 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_FRAGMENT_TYPE_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 5, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_FRAGMENT_TYPE_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 5, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_FRAGMENT_TYPE_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_FRAGMENT_TYPE_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_OPTIONS_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 11, 18, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_OPTIONS_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 11, 18, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_OPTIONS_READ(r, p)                            FIELD_MREAD_32((uint8_t *)(p), 11, 18, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_OPTIONS_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)(p), 11, 18, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_KEY_INDEX_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 6, 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_KEY_INDEX_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 6, 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_KEY_INDEX_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 6, 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_KEY_INDEX_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 6, 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_FRAGMENT_TYPE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 5, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_FRAGMENT_TYPE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 5, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_FRAGMENT_TYPE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_CTRL_FRAGMENT_TYPE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SFC_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 3, 10, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SFC_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 3, 10, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SFC_READ(r, p)                                FIELD_MREAD_16((uint8_t *)(p), 3, 10, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SFC_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)(p), 3, 10, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SOF_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SOF_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SOF_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SOF_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_EOF_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 6, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_EOF_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 6, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_EOF_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_EOF_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_CONST_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 2, 4, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_CONST_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 2, 4, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_CONST_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p), 2, 4, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_CONST_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p), 2, 4, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_1_0_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 0, 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_1_0_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), 0, 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_1_0_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p), 0, 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_1_0_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p), 0, 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_9_2_READ_G(r, g, idx)           GROUP_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_9_2_WRITE_G(v, g, idx)          GROUP_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_9_2_READ(r, p)                  MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_TCI_SID_9_2_WRITE(v, p)                 MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_LENGTH_TIME_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_LENGTH_TIME_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_LENGTH_TIME_READ(r, p)                  MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_G9991_LENGTH_TIME_WRITE(v, p)                 MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_TIMESTAMP_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_TIMESTAMP_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT), (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_TIMESTAMP_READ(r, p)                          MREAD_32((uint8_t *)(p), (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_TIMESTAMP_WRITE(v, p)                         MWRITE_32((uint8_t *)(p), (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SERIAL_NUM_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 4, 6, 10, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SERIAL_NUM_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 4, 6, 10, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SERIAL_NUM_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 4, 6, 10, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SERIAL_NUM_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 4, 6, 10, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_PLOAM_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 5, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_PLOAM_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 5, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_PLOAM_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 5, 5, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_PLOAM_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 5, 5, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_CONG_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 4, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_CONG_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 4, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_CONG_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 5, 4, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_CONG_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 5, 4, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_OR_DSL_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 3, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_OR_DSL_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 3, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_OR_DSL_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 5, 3, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_OR_DSL_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 5, 3, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 3, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 3, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 5, 3, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 5, 3, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_XDSL_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 3, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_XDSL_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 3, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_XDSL_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 5, 3, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_XDSL_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 5, 3, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_OR_CPU_TX_READ_G(r, g, idx)        GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 4, 14, 4, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_OR_CPU_TX_WRITE_G(v, g, idx)       GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 4, 14, 4, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_OR_CPU_TX_READ(r, p)               FIELD_MREAD_32((uint8_t *)(p) + 4, 14, 4, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_OR_CPU_TX_WRITE(v, p)              FIELD_MWRITE_32((uint8_t *)(p) + 4, 14, 4, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 4, 14, 4, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 4, 14, 4, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_READ(r, p)                         FIELD_MREAD_32((uint8_t *)(p) + 4, 14, 4, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_TYPE_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)(p) + 4, 14, 4, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_CPU_TX_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 1, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_CPU_TX_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 5, 1, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_CPU_TX_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 5, 1, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_CPU_TX_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 5, 1, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_25_28_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 4, 14, 4, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_25_28_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 4, 14, 4, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_25_28_READ(r, p)                          FIELD_MREAD_32((uint8_t *)(p) + 4, 14, 4, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS_25_28_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)(p) + 4, 14, 4, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 6, 0, 14, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 6, 0, 14, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 7, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 7, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ERROR_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 6, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 6, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_CONG_STATE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 4, 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_CONG_STATE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 4, 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_CONG_STATE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 8, 4, 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_CONG_STATE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 8, 4, 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_LAN_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 3, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 3, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_LAN_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 8, 3, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_LAN_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 8, 3, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_PORT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_PORT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_PORT_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 8, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_INGRESS_PORT_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 8, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_FLOW_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_FLOW_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_FLOW_READ(r, p)                               FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 8, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_FLOW_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 8, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOURCE_PORT_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOURCE_PORT_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOURCE_PORT_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 8, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOURCE_PORT_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 8, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_OR_ABS1_READ_G(r, g, idx)            GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 0, 19, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_OR_ABS1_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 0, 19, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_OR_ABS1_READ(r, p)                   FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 19, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_OR_ABS1_WRITE(v, p)                  FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 19, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 0, 19, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 0, 19, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_READ(r, p)                           FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 19, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 19, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS1_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 0, 19, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS1_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 0, 19, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS1_READ(r, p)                               FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 19, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_ABS1_WRITE(v, p)                              FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 19, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SSID_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 14, 4, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SSID_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 8, 14, 4, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SSID_READ(r, p)                               FIELD_MREAD_32((uint8_t *)(p) + 8, 14, 4, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SSID_WRITE(v, p)                              FIELD_MWRITE_32((uint8_t *)(p) + 8, 14, 4, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_TRUNCATED_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 10, 0, 14, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_TRUNCATED_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 10, 0, 14, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_TRUNCATED_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 14, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN1_LAST_TRUNCATED_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 14, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 7, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 7, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_AGG_PD_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_AGG_PD_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 6, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 6, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 0, 30, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 0, 30, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 30, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 30, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_FPM_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 3, 11, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_FPM_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 3, 11, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_FPM_READ(r, p)                            FIELD_MREAD_16((uint8_t *)(p) + 12, 3, 11, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_FPM_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)(p) + 12, 3, 11, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 0, 19, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 0, 19, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_READ(r, p)                             FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 19, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_WRITE(v, p)                            FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 19, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_POOL_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 13, 1, 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_POOL_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 13, 1, 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_POOL_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 13, 1, 2, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_POOL_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 13, 1, 2, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_NUM_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 0, 17, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_NUM_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 0, 17, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_NUM_READ(r, p)                         FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 17, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_FPM_NUM_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 17, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_NUM_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 7, 7, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_NUM_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 12, 7, 7, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_NUM_READ(r, p)                             FIELD_MREAD_16((uint8_t *)(p) + 12, 7, 7, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN_NUM_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)(p) + 12, 7, 7, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 13, 0, 7, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 13, 0, 7, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 7, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_SOP_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 7, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(PROCESSING_RX_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN0_FIRST_READ(r, p)                          MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_PROCESSING_RX_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 14, (v))
/* <<<PROCESSING_RX_DESCRIPTOR_STRUCT */


#define RDD_DIRECT_FLOW_PD_TABLE_SIZE     1
typedef struct
{
	PROCESSING_RX_DESCRIPTOR_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ DIRECT_FLOW_PD_TABLE_STRUCT;

extern uint32_t RDD_DIRECT_FLOW_PD_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_FLOW_PD_TABLE_PTR(core_id)	( DIRECT_FLOW_PD_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_FLOW_PD_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_FLOW_PD_TABLE */


/* >>>OVERALL_RATE_LIMITER_TABLE */

/* >>>OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	bbh_queue_en_vec	;
        uint32_t	current_budget  	;
        uint32_t	alloc_mantissa  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	alloc_exponent  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	limit_mantissa  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	limit_exponent  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1       	;
#else
        uint32_t	bbh_queue_en_vec	;
        uint32_t	current_budget  	;
        uint32_t	limit_exponent  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	limit_mantissa  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	alloc_exponent  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	alloc_mantissa  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1       	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT;

#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_BBH_QUEUE_EN_VEC_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT), (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_BBH_QUEUE_EN_VEC_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT), (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_BBH_QUEUE_EN_VEC_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_BBH_QUEUE_EN_VEC_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_READ(r, p)                   MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_CURRENT_BUDGET_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT) + 8, 2, 14, (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT) + 8, 2, 14, (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p) + 8, 2, 14, (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_MANTISSA_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p) + 8, 2, 14, (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT) + 9, 0, 2, (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT) + 9, 0, 2, (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 2, (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_ALLOC_EXPONENT_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 2, (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT) + 10, 2, 14, (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT) + 10, 2, 14, (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p) + 10, 2, 14, (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_MANTISSA_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p) + 10, 2, 14, (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT) + 11, 0, 2, (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT) + 11, 0, 2, (v))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 11, 0, 2, (r))
#define RDD_OVERALL_RATE_LIMITER_DESCRIPTOR_LIMIT_EXPONENT_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 11, 0, 2, (v))
/* <<<OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT */


#define RDD_OVERALL_RATE_LIMITER_TABLE_SIZE     1
typedef struct
{
	OVERALL_RATE_LIMITER_DESCRIPTOR_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ OVERALL_RATE_LIMITER_TABLE_STRUCT;

extern uint32_t RDD_OVERALL_RATE_LIMITER_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_OVERALL_RATE_LIMITER_TABLE_PTR(core_id)	( OVERALL_RATE_LIMITER_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_OVERALL_RATE_LIMITER_TABLE_ADDRESS_ARR[core_id] ))

/* <<<OVERALL_RATE_LIMITER_TABLE */


/* >>>RATE_LIMITER_VALID_TABLE_US */

#define RDD_RATE_LIMITER_VALID_TABLE_US_SIZE     4
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_RATE_LIMITER_VALID_TABLE_US_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ RATE_LIMITER_VALID_TABLE_US_STRUCT;

extern uint32_t RDD_RATE_LIMITER_VALID_TABLE_US_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_RATE_LIMITER_VALID_TABLE_US_PTR(core_id)	( RATE_LIMITER_VALID_TABLE_US_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_RATE_LIMITER_VALID_TABLE_US_ADDRESS_ARR[core_id] ))

/* <<<RATE_LIMITER_VALID_TABLE_US */


/* >>>US_TM_FLUSH_DISPATCHER_CREDIT_TABLE */

#define RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_FLUSH_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_FLUSH_DISPATCHER_CREDIT_TABLE */


/* >>>EPON_UPDATE_FIFO_TABLE */

#define RDD_EPON_UPDATE_FIFO_TABLE_SIZE     8
typedef struct
{
	UPDATE_FIFO_ENTRY_STRUCT	entry[ RDD_EPON_UPDATE_FIFO_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ EPON_UPDATE_FIFO_TABLE_STRUCT;

extern uint32_t RDD_EPON_UPDATE_FIFO_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_EPON_UPDATE_FIFO_TABLE_PTR(core_id)	( EPON_UPDATE_FIFO_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_EPON_UPDATE_FIFO_TABLE_ADDRESS_ARR[core_id] ))

/* <<<EPON_UPDATE_FIFO_TABLE */


/* >>>US_TM_TX_OCTETS_COUNTERS_TABLE */

#define RDD_US_TM_TX_OCTETS_COUNTERS_TABLE_SIZE     8
typedef struct
{
	PACKETS_AND_BYTES_STRUCT	entry[ RDD_US_TM_TX_OCTETS_COUNTERS_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_TX_OCTETS_COUNTERS_TABLE_STRUCT;

extern uint32_t RDD_US_TM_TX_OCTETS_COUNTERS_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_TX_OCTETS_COUNTERS_TABLE_PTR(core_id)	( US_TM_TX_OCTETS_COUNTERS_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_TX_OCTETS_COUNTERS_TABLE_ADDRESS_ARR[core_id] ))

/* <<<US_TM_TX_OCTETS_COUNTERS_TABLE */


/* >>>DISPATCHER_CREDIT_TABLE */

#define RDD_DISPATCHER_CREDIT_TABLE_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DISPATCHER_CREDIT_TABLE_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DISPATCHER_CREDIT_TABLE_STRUCT;

extern uint32_t RDD_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DISPATCHER_CREDIT_TABLE_PTR(core_id)	( DISPATCHER_CREDIT_TABLE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DISPATCHER_CREDIT_TABLE_ADDRESS_ARR[core_id] ))

/* <<<DISPATCHER_CREDIT_TABLE */


/* >>>DIRECT_FLOW_PAUSE_DEBUG */

#define RDD_DIRECT_FLOW_PAUSE_DEBUG_SIZE     3
typedef struct
{
	BYTES_4_STRUCT	entry[ RDD_DIRECT_FLOW_PAUSE_DEBUG_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ DIRECT_FLOW_PAUSE_DEBUG_STRUCT;

extern uint32_t RDD_DIRECT_FLOW_PAUSE_DEBUG_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_DIRECT_FLOW_PAUSE_DEBUG_PTR(core_id)	( DIRECT_FLOW_PAUSE_DEBUG_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_DIRECT_FLOW_PAUSE_DEBUG_ADDRESS_ARR[core_id] ))

/* <<<DIRECT_FLOW_PAUSE_DEBUG */


/* >>>MAC_TYPE */

/* >>>MAC_TYPE_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	type      	;
#else
        uint8_t	type      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} MAC_TYPE_ENTRY_STRUCT;

#define RDD_MAC_TYPE_ENTRY_TYPE_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(MAC_TYPE_ENTRY_STRUCT), (r))
#define RDD_MAC_TYPE_ENTRY_TYPE_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(MAC_TYPE_ENTRY_STRUCT), (v))
#define RDD_MAC_TYPE_ENTRY_TYPE_READ(r, p)                 MREAD_8((uint8_t *)(p), (r))
#define RDD_MAC_TYPE_ENTRY_TYPE_WRITE(v, p)                MWRITE_8((uint8_t *)(p), (v))
/* <<<MAC_TYPE_ENTRY_STRUCT */


#define RDD_MAC_TYPE_SIZE     1
typedef struct
{
	MAC_TYPE_ENTRY_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ MAC_TYPE_STRUCT;

extern uint32_t RDD_MAC_TYPE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_MAC_TYPE_PTR(core_id)	( MAC_TYPE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_MAC_TYPE_ADDRESS_ARR[core_id] ))

/* <<<MAC_TYPE */


/* >>>US_TM_FIRST_QUEUE_MAPPING */

#define RDD_US_TM_FIRST_QUEUE_MAPPING_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ US_TM_FIRST_QUEUE_MAPPING_STRUCT;

extern uint32_t RDD_US_TM_FIRST_QUEUE_MAPPING_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_US_TM_FIRST_QUEUE_MAPPING_PTR(core_id)	( US_TM_FIRST_QUEUE_MAPPING_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_US_TM_FIRST_QUEUE_MAPPING_ADDRESS_ARR[core_id] ))

/* <<<US_TM_FIRST_QUEUE_MAPPING */


/* >>>WAN_0_BBH_TX_FIFO_SIZE */

#define RDD_WAN_0_BBH_TX_FIFO_SIZE_SIZE     1
typedef struct
{
	BYTE_1_STRUCT	entry;
}
__PACKING_ATTRIBUTE_STRUCT_END__ WAN_0_BBH_TX_FIFO_SIZE_STRUCT;

extern uint32_t RDD_WAN_0_BBH_TX_FIFO_SIZE_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_WAN_0_BBH_TX_FIFO_SIZE_PTR(core_id)	( WAN_0_BBH_TX_FIFO_SIZE_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_WAN_0_BBH_TX_FIFO_SIZE_ADDRESS_ARR[core_id] ))

/* <<<WAN_0_BBH_TX_FIFO_SIZE */


/* >>>BASIC_SCHEDULER_TABLE_US */

#define RDD_BASIC_SCHEDULER_TABLE_US_SIZE     33
typedef struct
{
	BASIC_SCHEDULER_DESCRIPTOR_STRUCT	entry[ RDD_BASIC_SCHEDULER_TABLE_US_SIZE ];
}
__PACKING_ATTRIBUTE_STRUCT_END__ BASIC_SCHEDULER_TABLE_US_STRUCT;

extern uint32_t RDD_BASIC_SCHEDULER_TABLE_US_ADDRESS_ARR[GROUPED_EN_SEGMENTS_NUM];

#define RDD_BASIC_SCHEDULER_TABLE_US_PTR(core_id)	( BASIC_SCHEDULER_TABLE_US_STRUCT * )(DEVICE_ADDRESS( rdp_runner_core_addr[core_id] + RDD_BASIC_SCHEDULER_TABLE_US_ADDRESS_ARR[core_id] ))

/* <<<BASIC_SCHEDULER_TABLE_US */


#ifdef BCM6855

/* >>>RDD_DISP_REOR_VIQ */
typedef enum
{
	DISP_REOR_VIQ_FIRST                  = 0,
	DISP_REOR_VIQ_BBH_RX0_NORMAL         = 0,
	DISP_REOR_VIQ_BBH_RX1_NORMAL         = 1,
	DISP_REOR_VIQ_BBH_RX2_NORMAL         = 2,
	DISP_REOR_VIQ_BBH_RX3_NORMAL         = 3,
	DISP_REOR_VIQ_BBH_RX4_NORMAL         = 4,
	DISP_REOR_VIQ_BBH_RX5_NORMAL         = 5,
	DISP_REOR_VIQ_BBH_RX6_NORMAL         = 6,
	DISP_REOR_VIQ_BBH_RX6_EXCL           = 7,
	DISP_REOR_VIQ_EPON_TM                = 8,
	DISP_REOR_VIQ_CPU_TX_EGRESS          = 9,
	DISP_REOR_VIQ_CPU_TX_FORWARD         = 10,
	DISP_REOR_VIQ_TX_MIRRORING           = 11,
	DISP_REOR_VIQ_CPU_RX_COPY            = 12,
	DISP_REOR_VIQ_WAN_LOOPBACK           = 13,
	DISP_REOR_VIQ_DHD_RX_COMPLETE_0      = 14,
	DISP_REOR_VIQ_DHD_RX_COMPLETE_1      = 15,
	DISP_REOR_VIQ_DHD_RX_COMPLETE_2      = 16,
	DISP_REOR_VIQ_SPDSVC_ANALYZER        = 17,
	DISP_REOR_VIQ_DHD_MIRRORING          = 18,
	DISP_REOR_VIQ_TCPSPDTEST_GEN         = 19,
	DISP_REOR_VIQ_DHD_TX_COMPLETE_0      = 20,
	DISP_REOR_VIQ_DHD_TX_COMPLETE_1      = 21,
	DISP_REOR_VIQ_DHD_TX_COMPLETE_2      = 22,
	DISP_REOR_VIQ_SERVICE_QUEUES         = 23,
	DISP_REOR_VIQ_TX_MIRRORING_DS        = 24,
	DISP_REOR_VIQ_COMMON_REPROCESSING    = 25,
	DISP_REOR_VIQ_TCPSPDTEST             = 26,
	DISP_REOR_VIQ_SPDSVC_GEN             = 27,
	DISP_REOR_VIQ_LAST                   = 27
} rdd_disp_reor_viq;
/* <<<RDD_DISP_REOR_VIQ */


/* >>>RDD_GENERAL_COUNTER */
typedef enum
{
	GENERAL_COUNTER_FIRST                          = 0,
	GENERAL_COUNTER_DHD_TX_POST_PKTS_0             = 0,
	GENERAL_COUNTER_DHD_TX_POST_PKTS_1             = 1,
	GENERAL_COUNTER_DHD_TX_POST_PKTS_2             = 2,
	GENERAL_COUNTER_DHD_TX_COMPLETE_PKTS_0         = 3,
	GENERAL_COUNTER_DHD_TX_COMPLETE_PKTS_1         = 4,
	GENERAL_COUNTER_DHD_TX_COMPLETE_PKTS_2         = 5,
	GENERAL_COUNTER_DHD_RX_COMPLETE_PKTS_0         = 6,
	GENERAL_COUNTER_DHD_RX_COMPLETE_PKTS_1         = 7,
	GENERAL_COUNTER_DHD_RX_COMPLETE_PKTS_2         = 8,
	GENERAL_COUNTER_DHD_TX_DROP_PKTS_0             = 9,
	GENERAL_COUNTER_DHD_TX_DROP_PKTS_1             = 10,
	GENERAL_COUNTER_DHD_TX_DROP_PKTS_2             = 11,
	GENERAL_COUNTER_RX_IPTV_VALID_PKT              = 12,
	GENERAL_COUNTER_RX_IPTV_VALID_BYTES            = 13,
	GENERAL_COUNTER_IPTV_TOTAL_DROP_PKT            = 14,
	GENERAL_COUNTER_IPTV_TOTAL_DROP_BYTES          = 15,
	GENERAL_COUNTER_RX_64_OCTETS_PKTS              = 16,
	GENERAL_COUNTER_RX_65_TO_127_OCTETS_PKTS       = 17,
	GENERAL_COUNTER_RX_128_TO_255_OCTETS_PKTS      = 18,
	GENERAL_COUNTER_RX_256_TO_511_OCTETS_PKTS      = 19,
	GENERAL_COUNTER_RX_512_TO_1023_OCTETS_PKTS     = 20,
	GENERAL_COUNTER_RX_1024_TO_1522_OCTETS_PKTS    = 21,
	GENERAL_COUNTER_RX_1523_TO_MTU_OCTETS_PKTS     = 22,
	GENERAL_COUNTER_DHD_SPDSVC_TX_DROPS_0          = 23,
	GENERAL_COUNTER_DHD_SPDSVC_TX_DROPS_1          = 24,
	GENERAL_COUNTER_DHD_SPDSVC_TX_DROPS_2          = 25,
	GENERAL_COUNTER_LAST                           = 25
} rdd_general_counter;
/* <<<RDD_GENERAL_COUNTER */


/* >>>RDD_RDD_WAN_FLOW */
typedef enum
{
	RDD_WAN_FLOW_FIRST  = 255,
	RDD_WAN_FLOW_MAX    = 255,
	RDD_WAN_FLOW_NUM    = 256,
	RDD_WAN_FLOW_LAST   = 256
} rdd_rdd_wan_flow;
/* <<<RDD_RDD_WAN_FLOW */


/* >>>RDD_IMAGE_1_CPU_IF_1_TIMER_INDEX */
typedef enum
{
	IMAGE_1_CPU_IF_1_TIMER_INDEX_FIRST = 1,
	IMAGE_1_CPU_IF_1_TIMER_INDEX_SPDSVC = 1,
	IMAGE_1_CPU_IF_1_TIMER_INDEX_LAST = 1
} rdd_cpu_if_1_timer_index;
/* <<<RDD_IMAGE_1_CPU_IF_1_TIMER_INDEX */


/* >>>RDD_IMAGE_1_SPDSVC_TIMER_INDEX */
typedef enum
{
	IMAGE_1_SPDSVC_TIMER_INDEX_FIRST = 2,
	IMAGE_1_SPDSVC_TIMER_INDEX_GEN = 2,
	IMAGE_1_SPDSVC_TIMER_INDEX_LAST = 2
} rdd_spdsvc_timer_index;
/* <<<RDD_IMAGE_1_SPDSVC_TIMER_INDEX */


/* >>>RDD_IMAGE_2_SERVICE_QUEUES_TIMER_INDEX */
typedef enum
{
	IMAGE_2_SERVICE_QUEUES_TIMER_INDEX_FIRST                      = 1,
	IMAGE_2_SERVICE_QUEUES_TIMER_INDEX_SERVICE_QUEUES_BUDGET_ALLOCATOR = 1,
	IMAGE_2_SERVICE_QUEUES_TIMER_INDEX_LAST                       = 1
} rdd_service_queues_timer_index;
/* <<<RDD_IMAGE_2_SERVICE_QUEUES_TIMER_INDEX */


/* >>>RDD_IMAGE_3_DHD_TIMER_INDEX */
typedef enum
{
	IMAGE_3_DHD_TIMER_INDEX_FIRST = 1,
	IMAGE_3_DHD_TIMER_INDEX_DHD_AGGR = 1,
	IMAGE_3_DHD_TIMER_INDEX_LAST = 1
} rdd_dhd_timer_index;
/* <<<RDD_IMAGE_3_DHD_TIMER_INDEX */


/* >>>RDD_IMAGE_4_DS_TM_TIMER_INDEX */
typedef enum
{
	IMAGE_4_DS_TM_TIMER_INDEX_FIRST       = 1,
	IMAGE_4_DS_TM_TIMER_INDEX_FLUSH       = 1,
	IMAGE_4_DS_TM_TIMER_INDEX_BUDGET_ALLOCATOR = 2,
	IMAGE_4_DS_TM_TIMER_INDEX_REPORTING   = 3,
	IMAGE_4_DS_TM_TIMER_INDEX_BUFFER_CONG_MGT = 4,
	IMAGE_4_DS_TM_TIMER_INDEX_LAST        = 4
} rdd_ds_tm_timer_index;
/* <<<RDD_IMAGE_4_DS_TM_TIMER_INDEX */


/* >>>RDD_IMAGE_5_US_TM_TIMER_INDEX */
typedef enum
{
	IMAGE_5_US_TM_TIMER_INDEX_FIRST           = 1,
	IMAGE_5_US_TM_TIMER_INDEX_FLUSH           = 1,
	IMAGE_5_US_TM_TIMER_INDEX_OVL_BUDGET_ALLOCATOR = 2,
	IMAGE_5_US_TM_TIMER_INDEX_BUDGET_ALLOCATOR = 3,
	IMAGE_5_US_TM_TIMER_INDEX_PAUSE_FRAME     = 4,
	IMAGE_5_US_TM_TIMER_INDEX_BUFFER_CONG_MGT = 5,
	IMAGE_5_US_TM_TIMER_INDEX_LAST            = 5
} rdd_us_tm_timer_index;
/* <<<RDD_IMAGE_5_US_TM_TIMER_INDEX */


/* >>>RDD_QM_QUEUE */
typedef enum
{
	QM_QUEUE_FIRST                         = 8,
	QM_QUEUE_DYNAMIC_EPON                  = 8,
	QM_QUEUE_SERVICE_Q_DEFAULT_QUANTITY    = 16,
	QM_QUEUE_SERVICE_Q_MAX_QUANTITY        = 32,
	QM_QUEUE_DS_DEFAULT_QUANTITY           = 48,
	QM_QUEUE_US_DEFAULT_QUANTITY           = 64,
	QM_QUEUE_TX_ABS_RECYCLE                = 145,
	QM_QUEUE_MAX_DYNAMIC_QUANTITY          = 145,
	QM_QUEUE_PKTGEN_REPROCESSING           = 146,
	QM_QUEUE_CPU_RX                        = 147,
	QM_QUEUE_CPU_RX_COPY_NORMAL            = 148,
	QM_QUEUE_CPU_RX_COPY_EXCLUSIVE         = 149,
	QM_QUEUE_DHD_CPU_TX_POST_0             = 150,
	QM_QUEUE_DHD_TX_POST_0                 = 151,
	QM_QUEUE_DHD_CPU_TX_POST_1             = 152,
	QM_QUEUE_DHD_TX_POST_1                 = 153,
	QM_QUEUE_DHD_CPU_TX_POST_2             = 154,
	QM_QUEUE_DHD_TX_POST_2                 = 155,
	QM_QUEUE_SPDSVC_ANALYZER               = 156,
	QM_QUEUE_TCPSPDTEST                    = 157,
	QM_QUEUE_LAST                          = 157
} rdd_qm_queue;
/* <<<RDD_QM_QUEUE */


/* >>>RDD_IMAGE_0_IMAGE_0 */
typedef enum
{
	IMAGE_0_IMAGE_0_FIRST                      = 0,
	IMAGE_0_IMAGE_0_DHD_TX_COMPLETE_0_THREAD_NUMBER = 0,
	IMAGE_0_IMAGE_0_DHD_TX_COMPLETE_1_THREAD_NUMBER = 1,
	IMAGE_0_IMAGE_0_DHD_TX_COMPLETE_2_THREAD_NUMBER = 2,
	IMAGE_0_IMAGE_0_DHD_RX_COMPLETE_0_THREAD_NUMBER = 3,
	IMAGE_0_IMAGE_0_DHD_RX_COMPLETE_1_THREAD_NUMBER = 4,
	IMAGE_0_IMAGE_0_DHD_RX_COMPLETE_2_THREAD_NUMBER = 5,
	IMAGE_0_IMAGE_0_SPDSVC_ANALYZER_THREAD_NUMBER = 6,
	IMAGE_0_IMAGE_0_PROCESSING0_THREAD_NUMBER  = 8,
	IMAGE_0_IMAGE_0_PROCESSING1_THREAD_NUMBER  = 9,
	IMAGE_0_IMAGE_0_PROCESSING2_THREAD_NUMBER  = 10,
	IMAGE_0_IMAGE_0_PROCESSING3_THREAD_NUMBER  = 11,
	IMAGE_0_IMAGE_0_PROCESSING4_THREAD_NUMBER  = 12,
	IMAGE_0_IMAGE_0_PROCESSING5_THREAD_NUMBER  = 13,
	IMAGE_0_IMAGE_0_PROCESSING6_THREAD_NUMBER  = 14,
	IMAGE_0_IMAGE_0_PROCESSING7_THREAD_NUMBER  = 15,
	IMAGE_0_IMAGE_0_LAST                       = 15
} rdd_image_0;
/* <<<RDD_IMAGE_0_IMAGE_0 */


/* >>>RDD_IMAGE_1_IMAGE_1 */
typedef enum
{
	IMAGE_1_IMAGE_1_FIRST                        = 0,
	IMAGE_1_IMAGE_1_GENERAL_TIMER_THREAD_NUMBER  = 0,
	IMAGE_1_IMAGE_1_COMMON_REPROCESSING_THREAD_NUMBER = 1,
	IMAGE_1_IMAGE_1_CPU_RX_THREAD_NUMBER         = 2,
	IMAGE_1_IMAGE_1_CPU_RECYCLE_THREAD_NUMBER    = 3,
	IMAGE_1_IMAGE_1_CPU_RX_COPY_THREAD_NUMBER    = 4,
	IMAGE_1_IMAGE_1_SPDSVC_GEN_THREAD_NUMBER     = 5,
	IMAGE_1_IMAGE_1_TCPSPDTEST_THREAD_NUMBER     = 6,
	IMAGE_1_IMAGE_1_TCPSPDTEST_GEN_THREAD_NUMBER = 7,
	IMAGE_1_IMAGE_1_PROCESSING0_THREAD_NUMBER    = 8,
	IMAGE_1_IMAGE_1_PROCESSING1_THREAD_NUMBER    = 9,
	IMAGE_1_IMAGE_1_PROCESSING2_THREAD_NUMBER    = 10,
	IMAGE_1_IMAGE_1_PROCESSING3_THREAD_NUMBER    = 11,
	IMAGE_1_IMAGE_1_PROCESSING4_THREAD_NUMBER    = 12,
	IMAGE_1_IMAGE_1_PROCESSING5_THREAD_NUMBER    = 13,
	IMAGE_1_IMAGE_1_PROCESSING6_THREAD_NUMBER    = 14,
	IMAGE_1_IMAGE_1_PROCESSING7_THREAD_NUMBER    = 15,
	IMAGE_1_IMAGE_1_LAST                         = 15
} rdd_image_1;
/* <<<RDD_IMAGE_1_IMAGE_1 */


/* >>>RDD_IMAGE_2_IMAGE_2 */
typedef enum
{
	IMAGE_2_IMAGE_2_FIRST                                     = 0,
	IMAGE_2_IMAGE_2_GENERAL_TIMER_THREAD_NUMBER               = 0,
	IMAGE_2_IMAGE_2_CPU_RECYCLE_THREAD_NUMBER                 = 2,
	IMAGE_2_IMAGE_2_CPU_TX_0_THREAD_NUMBER                    = 3,
	IMAGE_2_IMAGE_2_CPU_TX_1_THREAD_NUMBER                    = 4,
	IMAGE_2_IMAGE_2_SERVICE_QUEUES_UPDATE_FIFO_THREAD_NUMBER  = 5,
	IMAGE_2_IMAGE_2_SERVICE_QUEUES_TX_THREAD_NUMBER           = 6,
	IMAGE_2_IMAGE_2_BUDGET_ALLOCATION_SERVICE_QUEUES_THREAD_NUMBER = 7,
	IMAGE_2_IMAGE_2_PROCESSING0_THREAD_NUMBER                 = 8,
	IMAGE_2_IMAGE_2_PROCESSING1_THREAD_NUMBER                 = 9,
	IMAGE_2_IMAGE_2_PROCESSING2_THREAD_NUMBER                 = 10,
	IMAGE_2_IMAGE_2_PROCESSING3_THREAD_NUMBER                 = 11,
	IMAGE_2_IMAGE_2_PROCESSING4_THREAD_NUMBER                 = 12,
	IMAGE_2_IMAGE_2_PROCESSING5_THREAD_NUMBER                 = 13,
	IMAGE_2_IMAGE_2_PROCESSING6_THREAD_NUMBER                 = 14,
	IMAGE_2_IMAGE_2_PROCESSING7_THREAD_NUMBER                 = 15,
	IMAGE_2_IMAGE_2_LAST                                      = 15
} rdd_image_2;
/* <<<RDD_IMAGE_2_IMAGE_2 */


/* >>>RDD_IMAGE_3_IMAGE_3 */
typedef enum
{
	IMAGE_3_IMAGE_3_FIRST                            = 0,
	IMAGE_3_IMAGE_3_DHD_TIMER_THREAD_NUMBER          = 0,
	IMAGE_3_IMAGE_3_DHD_TX_POST_UPDATE_FIFO_THREAD_NUMBER = 1,
	IMAGE_3_IMAGE_3_DHD_TX_POST_0_THREAD_NUMBER      = 2,
	IMAGE_3_IMAGE_3_DHD_TX_POST_1_THREAD_NUMBER      = 3,
	IMAGE_3_IMAGE_3_DHD_TX_POST_2_THREAD_NUMBER      = 4,
	IMAGE_3_IMAGE_3_PROCESSING0_THREAD_NUMBER        = 8,
	IMAGE_3_IMAGE_3_PROCESSING1_THREAD_NUMBER        = 9,
	IMAGE_3_IMAGE_3_PROCESSING2_THREAD_NUMBER        = 10,
	IMAGE_3_IMAGE_3_PROCESSING3_THREAD_NUMBER        = 11,
	IMAGE_3_IMAGE_3_PROCESSING4_THREAD_NUMBER        = 12,
	IMAGE_3_IMAGE_3_PROCESSING5_THREAD_NUMBER        = 13,
	IMAGE_3_IMAGE_3_PROCESSING6_THREAD_NUMBER        = 14,
	IMAGE_3_IMAGE_3_PROCESSING7_THREAD_NUMBER        = 15,
	IMAGE_3_IMAGE_3_LAST                             = 15
} rdd_image_3;
/* <<<RDD_IMAGE_3_IMAGE_3 */


/* >>>RDD_IMAGE_4_DS_TM */
typedef enum
{
	IMAGE_4_DS_TM_FIRST                      = 0,
	IMAGE_4_DS_TM_BUDGET_ALLOCATION_THREAD_NUMBER = 0,
	IMAGE_4_DS_TM_BUFFER_CONG_MGT_THREAD_NUMBER = 1,
	IMAGE_4_DS_TM_UPDATE_FIFO_THREAD_NUMBER  = 2,
	IMAGE_4_DS_TM_TX_TASK_THREAD_NUMBER      = 3,
	IMAGE_4_DS_TM_REPORTING_THREAD_NUMBER    = 4,
	IMAGE_4_DS_TM_PROCESSING0_THREAD_NUMBER  = 8,
	IMAGE_4_DS_TM_PROCESSING1_THREAD_NUMBER  = 9,
	IMAGE_4_DS_TM_PROCESSING2_THREAD_NUMBER  = 10,
	IMAGE_4_DS_TM_PROCESSING3_THREAD_NUMBER  = 11,
	IMAGE_4_DS_TM_LAST                       = 11
} rdd_ds_tm;
/* <<<RDD_IMAGE_4_DS_TM */


/* >>>RDD_IMAGE_5_US_TM */
typedef enum
{
	IMAGE_5_US_TM_FIRST                          = 0,
	IMAGE_5_US_TM_DIRECT_FLOW_THREAD_NUMBER      = 0,
	IMAGE_5_US_TM_BUDGET_ALLOCATION_THREAD_NUMBER = 1,
	IMAGE_5_US_TM_OVL_BUDGET_ALLOCATION_THREAD_NUMBER = 2,
	IMAGE_5_US_TM_BUFFER_CONG_MGT_THREAD_NUMBER  = 3,
	IMAGE_5_US_TM_UPDATE_FIFO_EPON_THREAD_NUMBER = 4,
	IMAGE_5_US_TM_WAN_EPON_THREAD_NUMBER         = 5,
	IMAGE_5_US_TM_UPDATE_FIFO_THREAD_NUMBER      = 6,
	IMAGE_5_US_TM_WAN_THREAD_NUMBER              = 7,
	IMAGE_5_US_TM_LAST                           = 7
} rdd_us_tm;
/* <<<RDD_IMAGE_5_US_TM */


/* >>>RDD_PROJ_DEFS */
typedef enum
{
	PROJ_DEFS_FIRST                                = 4,
	PROJ_DEFS_NUMBER_OF_NATC_TABLES                = 4,
	PROJ_DEFS_NUMBER_OF_SPDTEST_STREAMS            = 4,
	PROJ_DEFS_NUMBER_OF_EMACS                      = 6,
	PROJ_DEFS_FIRST_PROCESSING_THREAD_ID           = 8,
	PROJ_DEFS_RDD_VPORT_LAST                       = 16,
	PROJ_DEFS_NUMBER_OF_VPORTS                     = 16,
	PROJ_DEFS_NUMBER_OF_CPU_RX_METERS              = 16,
	PROJ_DEFS_DBG_DUMP_TABLE_SIZE                  = 16,
	PROJ_DEFS_NUMBER_OF_VPORTS_MULT_3              = 48,
	PROJ_DEFS_NUMBER_OF_VLANS                      = 128,
	PROJ_DEFS_NUMBER_OF_VLANS_PLUS_1               = 129,
	PROJ_DEFS_NUMBER_OF_SHARED_IC_VLAN_COUNTERS    = 512,
	PROJ_DEFS_NUMBER_OF_IC_COUNTERS                = 512,
	PROJ_DEFS_HASH_NUM_OF_ENTRIES_IN_RAM           = 2048,
	PROJ_DEFS_LAST                                 = 2048
} rdd_proj_defs;
/* <<<RDD_PROJ_DEFS */


/* >>>RDD_RNR */
typedef enum
{
	RNR_FIRST       = 0,
	RNR_CORE0_ID    = 0,
	RNR_CORE1_ID    = 1,
	RNR_CORE2_ID    = 2,
	RNR_CORE3_ID    = 3,
	RNR_CORE4_ID    = 4,
	RNR_CORE5_ID    = 5,
	RNR_LAST        = 5
} rdd_rnr;
/* <<<RDD_RNR */


/* >>>RDD_BB_ID */
typedef enum
{
	BB_ID_FIRST                 = 0,
	BB_ID_RNR0                  = 0,
	BB_ID_RNR1                  = 1,
	BB_ID_RNR2                  = 2,
	BB_ID_RNR3                  = 3,
	BB_ID_RNR4                  = 4,
	BB_ID_RNR5                  = 5,
	BB_ID_BBHLB                 = 16,
	BB_ID_CNPL_0                = 17,
	BB_ID_DISPATCHER_REORDER    = 18,
	BB_ID_SDMA_COPY             = 20,
	BB_ID_QM_CP_SDMA            = 20,
	BB_ID_SDMA0                 = 21,
	BB_ID_SDMA1                 = 22,
	BB_ID_FPM                   = 23,
	BB_ID_HASH_0                = 24,
	BB_ID_NATC_0                = 25,
	BB_ID_QM_RNR_GRID           = 27,
	BB_ID_QM_BBHTX              = 28,
	BB_ID_QM_TOP                = 29,
	BB_ID_QM_CP_MACHINE         = 30,
	BB_ID_RX_BBH_0              = 31,
	BB_ID_TX_LAN                = 32,
	BB_ID_RX_BBH_1              = 33,
	BB_ID_TX_LAN_1              = 34,
	BB_ID_RX_BBH_2              = 35,
	BB_ID_TX_COPY               = 36,
	BB_ID_RX_BBH_3              = 37,
	BB_ID_RX_BBH_4              = 39,
	BB_ID_RX_BBH_5              = 41,
	BB_ID_RX_PON                = 53,
	BB_ID_TX_PON_ETH_PD         = 54,
	BB_ID_TX_PON_ETH_STAT       = 55,
	BB_ID_SBPM                  = 56,
	BB_ID_TCAM_0                = 57,
	BB_ID_TCAM_1                = 58,
	BB_ID_HASH_1                = 59,
	BB_ID_NATC_1                = 60,
	BB_ID_CNPL_1                = 61,
	BB_ID_LAST                  = 61
} rdd_bb_id;
/* <<<RDD_BB_ID */


/* >>>RDD_ACTION */
typedef enum
{
	ACTION_FIRST           = 0,
	ACTION_FORWARD         = 0,
	ACTION_TRAP            = 1,
	ACTION_DROP            = 2,
	ACTION_MULTICAST       = 3,
	ACTION_DROP_LOW_PRI    = 4,
	ACTION_LAST            = 4
} rdd_action;
/* <<<RDD_ACTION */


/* >>>RDD_ENET_HEADER */
typedef enum
{
	ENET_HEADER_FIRST                = 0,
	ENET_HEADER_DA_OFFSET            = 0,
	ENET_HEADER_SA_OFFSET            = 6,
	ENET_HEADER_ETHERTYPE_OFFSET     = 12,
	ENET_HEADER_CTRL_OPCDE_OFFSET    = 14,
	ENET_HEADER_SIZE                 = 16,
	ENET_HEADER_LAST                 = 16
} rdd_enet_header;
/* <<<RDD_ENET_HEADER */


/* >>>RDD_PFC_FRAME */
typedef enum
{
	PFC_FRAME_FIRST                         = 0,
	PFC_FRAME_CLASS_ENABLE_VECTOR_OFFSET    = 0,
	PFC_FRAME_TIME_0_OFFSET                 = 2,
	PFC_FRAME_SIZE                          = 18,
	PFC_FRAME_LAST                          = 18
} rdd_pfc_frame;
/* <<<RDD_PFC_FRAME */


/* >>>RDD_IP_PROTO */
typedef enum
{
	IP_PROTO_FIRST       = 1,
	IP_PROTO_ICMP        = 1,
	IP_PROTO_IPIP        = 4,
	IP_PROTO_TCP         = 6,
	IP_PROTO_UDP         = 17,
	IP_PROTO_IPV6        = 41,
	IP_PROTO_GRE         = 47,
	IP_PROTO_UDP_LITE    = 136,
	IP_PROTO_LAST        = 136
} rdd_ip_proto;
/* <<<RDD_IP_PROTO */


/* >>>RDD_IP_FLAGS */
typedef enum
{
	IP_FLAGS_FIRST                     = 1,
	IP_FLAGS_DO_NOT_FRAGMENT_OFFSET    = 1,
	IP_FLAGS_MORE_FRAGMENTS_OFFSET     = 2,
	IP_FLAGS_LAST                      = 2
} rdd_ip_flags;
/* <<<RDD_IP_FLAGS */


/* >>>RDD_LAYER3_IPV6_HEADER */
typedef enum
{
	LAYER3_IPV6_HEADER_FIRST            = 8,
	LAYER3_IPV6_HEADER_SRC_IP_OFFSET    = 8,
	LAYER3_IPV6_HEADER_DST_IP_OFFSET    = 24,
	LAYER3_IPV6_HEADER_LAST             = 24
} rdd_layer3_ipv6_header;
/* <<<RDD_LAYER3_IPV6_HEADER */


/* >>>RDD_LAYER3_HEADER */
typedef enum
{
	LAYER3_HEADER_FIRST                    = 0,
	LAYER3_HEADER_TRAFIC_CLASS_OFFSET      = 0,
	LAYER3_HEADER_TOS_OFFSET               = 1,
	LAYER3_HEADER_TOTAL_LENGTH_OFFSET      = 2,
	LAYER3_HEADER_PAYLOAD_LENGTH_OFFSET    = 4,
	LAYER3_HEADER_FLAGS_OFFSET             = 6,
	LAYER3_HEADER_HOP_LIMIT_OFFSET         = 7,
	LAYER3_HEADER_TTL_OFFSET               = 8,
	LAYER3_HEADER_PROTOCOL_OFFSET          = 9,
	LAYER3_HEADER_IP_CHECKSUM_OFFSET       = 10,
	LAYER3_HEADER_SRC_IP_OFFSET            = 12,
	LAYER3_HEADER_DST_IP_OFFSET            = 16,
	LAYER3_HEADER_LAST                     = 16
} rdd_layer3_header;
/* <<<RDD_LAYER3_HEADER */


/* >>>RDD_LAYER3_PSEUDO_HEADER */
typedef enum
{
	LAYER3_PSEUDO_HEADER_FIRST                = 0,
	LAYER3_PSEUDO_HEADER_SRC_IP_OFFSET        = 0,
	LAYER3_PSEUDO_HEADER_DST_IP_OFFSET        = 4,
	LAYER3_PSEUDO_HEADER_PROTOCOL_OFFSET      = 8,
	LAYER3_PSEUDO_HEADER_LENGTH_OFFSET        = 10,
	LAYER3_PSEUDO_HEADER_HDR_LENGTH           = 12,
	LAYER3_PSEUDO_HEADER_PROTOCOL_F_WIDTH     = 16,
	LAYER3_PSEUDO_HEADER_PROTOCOL_F_OFFSET    = 16,
	LAYER3_PSEUDO_HEADER_LAST                 = 16
} rdd_layer3_pseudo_header;
/* <<<RDD_LAYER3_PSEUDO_HEADER */


/* >>>RDD_LAYER3_IPV6_PSEUDO_HEADER */
typedef enum
{
	LAYER3_IPV6_PSEUDO_HEADER_FIRST              = 0,
	LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_OFFSET      = 0,
	LAYER3_IPV6_PSEUDO_HEADER_DST_IP_OFFSET      = 16,
	LAYER3_IPV6_PSEUDO_HEADER_LENGTH_OFFSET      = 32,
	LAYER3_IPV6_PSEUDO_HEADER_PROTOCOL_OFFSET    = 36,
	LAYER3_IPV6_PSEUDO_HEADER_HDR_LENGTH         = 40,
	LAYER3_IPV6_PSEUDO_HEADER_LAST               = 40
} rdd_layer3_ipv6_pseudo_header;
/* <<<RDD_LAYER3_IPV6_PSEUDO_HEADER */


/* >>>RDD_LAYER4_HEADER */
typedef enum
{
	LAYER4_HEADER_FIRST                                = 0,
	LAYER4_HEADER_SRC_PORT_OFFSET                      = 0,
	LAYER4_HEADER_ESP_SPI_OFFSET                       = 0,
	LAYER4_HEADER_DST_PORT_OFFSET                      = 2,
	LAYER4_HEADER_UDP_LITE_CHECKSUM_COVERAGE_OFFSET    = 4,
	LAYER4_HEADER_TCP_LENGTH_F_WIDTH                   = 4,
	LAYER4_HEADER_UDP_CHECKSUM_OFFSET                  = 6,
	LAYER4_HEADER_GRE_CALL_ID_OFFSET                   = 6,
	LAYER4_HEADER_UDP_HDR_LENGTH                       = 8,
	LAYER4_HEADER_TCP_LENGTH_OFFSET                    = 12,
	LAYER4_HEADER_TCP_FLAGS_OFFSET                     = 13,
	LAYER4_HEADER_TCP_CHECKSUM_OFFSET                  = 16,
	LAYER4_HEADER_TCP_HDR_MIN_LENGTH                   = 20,
	LAYER4_HEADER_TCP_LENGTH_F_OFFSET                  = 28,
	LAYER4_HEADER_LAST                                 = 28
} rdd_layer4_header;
/* <<<RDD_LAYER4_HEADER */


/* >>>RDD_PARSER_L2_PROTOCOL */
typedef enum
{
	PARSER_L2_PROTOCOL_FIRST             = 1,
	PARSER_L2_PROTOCOL_PPPOE_D           = 1,
	PARSER_L2_PROTOCOL_PPPOE_S           = 2,
	PARSER_L2_PROTOCOL_USER_DEFINED_0    = 8,
	PARSER_L2_PROTOCOL_USER_DEFINED_1    = 9,
	PARSER_L2_PROTOCOL_USER_DEFINED_2    = 10,
	PARSER_L2_PROTOCOL_USER_DEFINED_3    = 11,
	PARSER_L2_PROTOCOL_ARP               = 12,
	PARSER_L2_PROTOCOL__1588             = 13,
	PARSER_L2_PROTOCOL__802_1X           = 14,
	PARSER_L2_PROTOCOL_MASK              = 15,
	PARSER_L2_PROTOCOL__802_1AG_CFM      = 15,
	PARSER_L2_PROTOCOL_LAST              = 15
} rdd_parser_l2_protocol;
/* <<<RDD_PARSER_L2_PROTOCOL */


/* >>>RDD_PARSER_L3_PROTOCOL */
typedef enum
{
	PARSER_L3_PROTOCOL_FIRST    = 0,
	PARSER_L3_PROTOCOL_OTHER    = 0,
	PARSER_L3_PROTOCOL_IPV4     = 1,
	PARSER_L3_PROTOCOL_IPV6     = 2,
	PARSER_L3_PROTOCOL_MASK     = 3,
	PARSER_L3_PROTOCOL_LAST     = 3
} rdd_parser_l3_protocol;
/* <<<RDD_PARSER_L3_PROTOCOL */


/* >>>RDD_PARSER_L4_PROTOCOL */
typedef enum
{
	PARSER_L4_PROTOCOL_FIRST             = 0,
	PARSER_L4_PROTOCOL_OTHER             = 0,
	PARSER_L4_PROTOCOL_TCP               = 1,
	PARSER_L4_PROTOCOL_UDP               = 2,
	PARSER_L4_PROTOCOL_IGMP              = 3,
	PARSER_L4_PROTOCOL_ICMP              = 4,
	PARSER_L4_PROTOCOL_ICMPV6            = 5,
	PARSER_L4_PROTOCOL_ESP               = 6,
	PARSER_L4_PROTOCOL_GRE               = 7,
	PARSER_L4_PROTOCOL_USER_DEFINED_0    = 8,
	PARSER_L4_PROTOCOL_USER_DEFINED_1    = 9,
	PARSER_L4_PROTOCOL_USER_DEFINED_2    = 10,
	PARSER_L4_PROTOCOL_L2TPV3            = 11,
	PARSER_L4_PROTOCOL_USER_DEFINED_3    = 11,
	PARSER_L4_PROTOCOL_RESERVED          = 12,
	PARSER_L4_PROTOCOL_IPV4_OVER_IPV6    = 12,
	PARSER_L4_PROTOCOL_IPV6              = 13,
	PARSER_L4_PROTOCOL_AH                = 14,
	PARSER_L4_PROTOCOL_NOT_PARSED        = 15,
	PARSER_L4_PROTOCOL_MASK              = 15,
	PARSER_L4_PROTOCOL_LAST              = 15
} rdd_parser_l4_protocol;
/* <<<RDD_PARSER_L4_PROTOCOL */


/* >>>RDD_ACTION_ECN */
typedef enum
{
	ACTION_ECN_FIRST               = 0,
	ACTION_ECN_REMARKING_OFFSET    = 0,
	ACTION_ECN_REMARKING_WIDTH     = 2,
	ACTION_ECN_LAST                = 2
} rdd_action_ecn;
/* <<<RDD_ACTION_ECN */


/* >>>RDD_ACTION_DSCP */
typedef enum
{
	ACTION_DSCP_FIRST                             = 2,
	ACTION_DSCP_REMARKING_OFFSET                  = 2,
	ACTION_DSCP_REMARKING_TRAFFIC_CLASS_OFFSET    = 4,
	ACTION_DSCP_REMARKING_WIDTH                   = 6,
	ACTION_DSCP_REMARKING_TRAFFIC_CLASS_WIDTH     = 8,
	ACTION_DSCP_LAST                              = 8
} rdd_action_dscp;
/* <<<RDD_ACTION_DSCP */


/* >>>RDD_ACTION_OUTER */
typedef enum
{
	ACTION_OUTER_FIRST                         = 14,
	ACTION_OUTER_PBITS_REMARKING_VID_OFFSET    = 14,
	ACTION_OUTER_LAST                          = 14
} rdd_action_outer;
/* <<<RDD_ACTION_OUTER */


/* >>>RDD_ACTION_INNER */
typedef enum
{
	ACTION_INNER_FIRST                         = 18,
	ACTION_INNER_PBITS_REMARKING_VID_OFFSET    = 18,
	ACTION_INNER_LAST                          = 18
} rdd_action_inner;
/* <<<RDD_ACTION_INNER */


/* >>>RDD_ACTION_PBITS */
typedef enum
{
	ACTION_PBITS_FIRST                        = 2,
	ACTION_PBITS_REMARKING_DSCP_F_OFFSET      = 2,
	ACTION_PBITS_REMARKING_PACKET_F_WIDTH     = 3,
	ACTION_PBITS_REMARKING_DSCP_F_WIDTH       = 6,
	ACTION_PBITS_REMARKING_PACKET_F_OFFSET    = 13,
	ACTION_PBITS_LAST                         = 13
} rdd_action_pbits;
/* <<<RDD_ACTION_PBITS */


/* >>>RDD_ACTION_DS_LITE */
typedef enum
{
	ACTION_DS_LITE_FIRST   = 40,
	ACTION_DS_LITE_SIZE    = 40,
	ACTION_DS_LITE_LAST    = 40
} rdd_action_ds_lite;
/* <<<RDD_ACTION_DS_LITE */


/* >>>RDD_DS_ACTION_ID */
typedef enum
{
	DS_ACTION_ID_FIRST        = 0,
	DS_ACTION_ID_TRAP         = 0,
	DS_ACTION_ID_TTL          = 2,
	DS_ACTION_ID_DSCP         = 4,
	DS_ACTION_ID_NAT          = 5,
	DS_ACTION_ID_GRE          = 6,
	DS_ACTION_ID_OPBITS       = 7,
	DS_ACTION_ID_IPBITS       = 8,
	DS_ACTION_ID_DS_LITE      = 9,
	DS_ACTION_ID_PPPOE        = 10,
	DS_ACTION_ID_TOTAL_NUM    = 17,
	DS_ACTION_ID_LAST         = 17
} rdd_ds_action_id;
/* <<<RDD_DS_ACTION_ID */


/* >>>RDD_US_ACTION_ID */
typedef enum
{
	US_ACTION_ID_FIRST        = 0,
	US_ACTION_ID_TRAP         = 0,
	US_ACTION_ID_TTL          = 2,
	US_ACTION_ID_DSCP         = 4,
	US_ACTION_ID_NAT          = 5,
	US_ACTION_ID_GRE          = 6,
	US_ACTION_ID_OPBITS       = 7,
	US_ACTION_ID_IPBITS       = 8,
	US_ACTION_ID_DS_LITE      = 9,
	US_ACTION_ID_PPPOE        = 10,
	US_ACTION_ID_TOTAL_NUM    = 17,
	US_ACTION_ID_LAST         = 17
} rdd_us_action_id;
/* <<<RDD_US_ACTION_ID */


/* >>>RDD_RDD_VPORT */
typedef enum
{
	RDD_VPORT_FIRST    = 0,
	RDD_VPORT_ID_0     = 0,
	RDD_VPORT_ID_1     = 1,
	RDD_VPORT_ID_2     = 2,
	RDD_VPORT_ID_3     = 3,
	RDD_VPORT_ID_4     = 4,
	RDD_VPORT_ID_5     = 5,
	RDD_VPORT_ID_6     = 6,
	RDD_VPORT_ID_7     = 7,
	RDD_VPORT_ID_8     = 8,
	RDD_VPORT_ID_9     = 9,
	RDD_VPORT_ID_10    = 10,
	RDD_VPORT_ID_11    = 11,
	RDD_VPORT_ID_12    = 12,
	RDD_VPORT_ID_13    = 13,
	RDD_VPORT_ID_14    = 14,
	RDD_VPORT_ID_15    = 15,
	RDD_VPORT_ID_16    = 16,
	RDD_VPORT_ID_17    = 17,
	RDD_VPORT_ID_18    = 18,
	RDD_VPORT_ID_19    = 19,
	RDD_VPORT_ID_20    = 20,
	RDD_VPORT_ID_21    = 21,
	RDD_VPORT_ID_22    = 22,
	RDD_VPORT_ID_23    = 23,
	RDD_VPORT_ID_24    = 24,
	RDD_VPORT_ID_25    = 25,
	RDD_VPORT_ID_26    = 26,
	RDD_VPORT_ID_27    = 27,
	RDD_VPORT_ID_28    = 28,
	RDD_VPORT_ID_29    = 29,
	RDD_VPORT_ID_30    = 30,
	RDD_VPORT_ID_31    = 31,
	RDD_VPORT_ID_32    = 32,
	RDD_VPORT_ID_33    = 33,
	RDD_VPORT_ID_34    = 34,
	RDD_VPORT_ID_35    = 35,
	RDD_VPORT_ID_36    = 36,
	RDD_VPORT_ID_37    = 37,
	RDD_VPORT_ID_38    = 38,
	RDD_VPORT_ID_39    = 39,
	RDD_VPORT_LAST     = 39
} rdd_rdd_vport;
/* <<<RDD_RDD_VPORT */


/* >>>RDD_DSCP_TO */
typedef enum
{
	DSCP_TO_FIRST                 = 6,
	DSCP_TO_PBITS_SHIFT_OFFSET    = 6,
	DSCP_TO_LAST                  = 6
} rdd_dscp_to;
/* <<<RDD_DSCP_TO */


/* >>>RDD_RESOLUTION_CONTEXT */
typedef enum
{
	RESOLUTION_CONTEXT_FIRST                          = 0,
	RESOLUTION_CONTEXT_VIRTUAL_SRC_PORT_OFFSET        = 0,
	RESOLUTION_CONTEXT_GPE_DMA_OFFSET_WIDTH           = 1,
	RESOLUTION_CONTEXT_GPE_HEADER_LENGTH_WIDTH        = 1,
	RESOLUTION_CONTEXT_GPE_HEADER_IH_PTR_WIDTH        = 2,
	RESOLUTION_CONTEXT_GPE_COMMAND_LIST_PTR_WIDTH     = 2,
	RESOLUTION_CONTEXT_GPE_PACKET_DRR_PTR_WIDTH       = 4,
	RESOLUTION_CONTEXT_GPE_HEADER_LENGTH_OFFSET       = 6,
	RESOLUTION_CONTEXT_GPE_DMA_OFFSET_OFFSET          = 7,
	RESOLUTION_CONTEXT_GPE_COMMAND_LIST_PTR_OFFSET    = 8,
	RESOLUTION_CONTEXT_GPE_HEADER_IH_PTR_OFFSET       = 10,
	RESOLUTION_CONTEXT_GPE_PACKET_DRR_PTR_OFFSET      = 12,
	RESOLUTION_CONTEXT_LAST                           = 12
} rdd_resolution_context;
/* <<<RDD_RESOLUTION_CONTEXT */


/* >>>RDD_FFI */
typedef enum
{
	FFI_FIRST           = 3,
	FFI_8_LOG2_SIZE     = 3,
	FFI_16_LOG2_SIZE    = 4,
	FFI_32_LOG2_SIZE    = 5,
	FFI_8_SIZE          = 8,
	FFI_16_SIZE         = 16,
	FFI_32_SIZE         = 32,
	FFI_LAST            = 32
} rdd_ffi;
/* <<<RDD_FFI */


/* >>>RDD_TUNNEL_TYPE_BIT */
typedef enum
{
	TUNNEL_TYPE_BIT_FIRST      = 0,
	TUNNEL_TYPE_BIT_L3_GRE     = 0,
	TUNNEL_TYPE_BIT_GRE        = 0,
	TUNNEL_TYPE_BIT_L2_GRE     = 0,
	TUNNEL_TYPE_BIT_DS_LITE    = 1,
	TUNNEL_TYPE_BIT_VXLAN      = 2,
	TUNNEL_TYPE_BIT_LAST       = 2
} rdd_tunnel_type_bit;
/* <<<RDD_TUNNEL_TYPE_BIT */


/* >>>RDD_HASH */
typedef enum
{
	HASH_FIRST              = 7,
	HASH_MAX_TABLES_NUM     = 7,
	HASH_CRC_BYTE_SIZE      = 8,
	HASH_MAX_CTX_SIZE       = 18,
	HASH_KEY_SIZE           = 60,
	HASH_CAM_NUM_ENTRIES    = 64,
	HASH_INVALID_IDX        = 65535,
	HASH_LAST               = 65535
} rdd_hash;
/* <<<RDD_HASH */


/* >>>RDD_HASH_LKP */
typedef enum
{
	HASH_LKP_FIRST             = 0,
	HASH_LKP_MISS              = 0,
	HASH_LKP_MATCH_IN_TABLE    = 1,
	HASH_LKP_MATCH_IN_CAM      = 2,
	HASH_LKP_RESERVED          = 3,
	HASH_LKP_LAST              = 3
} rdd_hash_lkp;
/* <<<RDD_HASH_LKP */


/* >>>RDD_ */
typedef enum
{
	BBMSG_SRAM_ADDR_DIV_LOG2     = 3,
	FW_CRC_LEN                   = 4,
	BBMSG_SRAM_ADDR_DIV          = 8,
} rdd_;
/* <<<RDD_ */


/* >>>RDD_OAM_ETHERTYPE */
typedef enum
{
	OAM_ETHERTYPE_FIRST   = 34824,
	OAM_ETHERTYPE_8808    = 34824,
	OAM_ETHERTYPE_8809    = 34825,
	OAM_ETHERTYPE_LAST    = 34825
} rdd_oam_ethertype;
/* <<<RDD_OAM_ETHERTYPE */


/* >>>RDD_MLD_TYPE */
typedef enum
{
	MLD_TYPE_FIRST                           = 130,
	MLD_TYPE_V1_MULTICAST_LISTENER_QUERY     = 130,
	MLD_TYPE_V1_MIN                          = 130,
	MLD_TYPE_V1_MULTICAST_LISTENER_REPORT    = 131,
	MLD_TYPE_V1_MULTICAST_LISTENER_DONE      = 132,
	MLD_TYPE_V1_MAX                          = 132,
	MLD_TYPE_V2_MULTICAST_LISTENER_REPORT    = 143,
	MLD_TYPE_LAST                            = 143
} rdd_mld_type;
/* <<<RDD_MLD_TYPE */


/* >>>RDD_C_DEFS */
typedef enum
{
	C_DEFS_FIRST                                 = 32,
	C_DEFS_CPU_RECYCLE_STACK_SIZE                = 32,
	C_DEFS_CPU_RX_STACK_SIZE                     = 32,
	C_DEFS_GENERAL_TIMER_STACK_SIZE              = 32,
	C_DEFS_DHD_TX_POST_UPDATE_FIFO_STACK_SIZE    = 32,
	C_DEFS_REPORTING_STACK_SIZE                  = 32,
	C_DEFS_COMMON_REPROCESSING_STACK_SIZE        = 32,
	C_DEFS_DHD_TIMER_STACK_SIZE                  = 32,
	C_DEFS_DHD_RX_COMPLETE_STACK_SIZE            = 64,
	C_DEFS_DIRECT_FLOW_STACK_SIZE                = 64,
	C_DEFS_CPU_RX_COPY_STACK_SIZE                = 128,
	C_DEFS_CPU_TX_STACK_SIZE                     = 128,
	C_DEFS_DHD_TX_COMPLETE_STACK_SIZE            = 128,
	C_DEFS_DHD_TX_POST_STACK_SIZE                = 128,
	C_DEFS_SPDSVC_GEN_STACK_SIZE                 = 128,
	C_DEFS_DEFAULT_STACK_SIZE                    = 256,
	C_DEFS_SPDSVC_ANALYZER_STACK_SIZE            = 256,
	C_DEFS_PROCESSING_STACK_SIZE                 = 320,
	C_DEFS_LAST                                  = 320
} rdd_c_defs;
/* <<<RDD_C_DEFS */


/* >>>RDD_CPU_RX_REASON */
typedef enum
{
	CPU_RX_REASON_FIRST                 = 0,
	CPU_RX_REASON_OAM                   = 0,
	CPU_RX_REASON_PLOAM                 = 0,
	CPU_RX_REASON_OMCI                  = 1,
	CPU_RX_REASON_MPCP                  = 1,
	CPU_RX_REASON_FLOW                  = 2,
	CPU_RX_REASON_MULTICAST             = 3,
	CPU_RX_REASON_BROADCAST             = 4,
	CPU_RX_REASON_IGMP                  = 5,
	CPU_RX_REASON_ICMPV6                = 6,
	CPU_RX_REASON_MAC_TRAP_0            = 7,
	CPU_RX_REASON_MAC_TRAP_1            = 8,
	CPU_RX_REASON_MAC_TRAP_2            = 9,
	CPU_RX_REASON_MAC_TRAP_3            = 10,
	CPU_RX_REASON_DHCP                  = 11,
	CPU_RX_REASON_NON_TCP_UDP           = 12,
	CPU_RX_REASON_LOCAL_IP              = 13,
	CPU_RX_REASON_IP_HEADER_ERROR       = 14,
	CPU_RX_REASON_SA_MOVE               = 15,
	CPU_RX_REASON_UNKNOWN_SA            = 16,
	CPU_RX_REASON_UNKNOWN_DA            = 17,
	CPU_RX_REASON_IP_FRAGMENT           = 18,
	CPU_RX_REASON_MAC_SPOOFING          = 19,
	CPU_RX_REASON_MAC_DA_EQ_SA          = 19,
	CPU_RX_REASON_DIRECT_FLOW           = 20,
	CPU_RX_REASON_MCAST_MISS            = 21,
	CPU_RX_REASON_IPSEC                 = 22,
	CPU_RX_REASON_MCAST_FWD_AND_TRAP    = 23,
	CPU_RX_REASON_MCAST_EXCEPTION       = 24,
	CPU_RX_REASON_BRIDGE_DA_MAC         = 25,
	CPU_RX_REASON_L2CP                  = 26,
	CPU_RX_REASON_CPU_MIRRORING         = 27,
	CPU_RX_REASON_ETYPE_UDEF_0          = 28,
	CPU_RX_REASON_ETYPE_UDEF_1          = 29,
	CPU_RX_REASON_ETYPE_UDEF_2          = 30,
	CPU_RX_REASON_ETYPE_UDEF_3          = 31,
	CPU_RX_REASON_ETYPE_PPPOE_D         = 32,
	CPU_RX_REASON_ETYPE_PPPOE_S         = 33,
	CPU_RX_REASON_ETYPE_ARP             = 34,
	CPU_RX_REASON__1588                 = 35,
	CPU_RX_REASON_ETYPE_802_1X          = 36,
	CPU_RX_REASON_ETYPE_802_1AG_CFM     = 37,
	CPU_RX_REASON_RESERVED0             = 38,
	CPU_RX_REASON_UDP_CSUM_0            = 39,
	CPU_RX_REASON_UNKNOWN_DA_FLOOD      = 40,
	CPU_RX_REASON_IP_FLOW_MISS          = 41,
	CPU_RX_REASON_TCP_FLAGS             = 42,
	CPU_RX_REASON_TTL_EXPIRED           = 43,
	CPU_RX_REASON_MTU_EXCEEDED          = 44,
	CPU_RX_REASON_PARSER_ERROR          = 45,
	CPU_RX_REASON_CPU_REDIRECT          = 46,
	CPU_RX_REASON_L4_ESP                = 47,
	CPU_RX_REASON_UDEF_0                = 48,
	CPU_RX_REASON_UDEF_1                = 49,
	CPU_RX_REASON_UDEF_2                = 50,
	CPU_RX_REASON_UDEF_3                = 51,
	CPU_RX_REASON_UDEF_4                = 52,
	CPU_RX_REASON_UDEF_5                = 53,
	CPU_RX_REASON_UDEF_6                = 54,
	CPU_RX_REASON_UDEF_7                = 55,
	CPU_RX_REASON_UDEF_8                = 56,
	CPU_RX_REASON_UDEF_9                = 57,
	CPU_RX_REASON_UDEF_10               = 58,
	CPU_RX_REASON_UDEF_11               = 59,
	CPU_RX_REASON_UDEF_12               = 60,
	CPU_RX_REASON_UDEF_13               = 61,
	CPU_RX_REASON_UDEF_14               = 62,
	CPU_RX_REASON_UDEF_15               = 63,
	CPU_RX_REASON_LAST                  = 63
} rdd_cpu_rx_reason;
/* <<<RDD_CPU_RX_REASON */


/* >>>RDD_CPU_RX_METER */
typedef enum
{
	CPU_RX_METER_FIRST      = 0,
	CPU_RX_METER_ID_0       = 0,
	CPU_RX_METER_ID_1       = 1,
	CPU_RX_METER_ID_2       = 2,
	CPU_RX_METER_ID_3       = 3,
	CPU_RX_METER_ID_4       = 4,
	CPU_RX_METER_ID_5       = 5,
	CPU_RX_METER_ID_6       = 6,
	CPU_RX_METER_ID_7       = 7,
	CPU_RX_METER_ID_8       = 8,
	CPU_RX_METER_ID_9       = 9,
	CPU_RX_METER_ID_10      = 10,
	CPU_RX_METER_ID_11      = 11,
	CPU_RX_METER_ID_12      = 12,
	CPU_RX_METER_ID_13      = 13,
	CPU_RX_METER_ID_14      = 14,
	CPU_RX_METER_ID_15      = 15,
	CPU_RX_METER_DISABLE    = 255,
	CPU_RX_METER_LAST       = 255
} rdd_cpu_rx_meter;
/* <<<RDD_CPU_RX_METER */


/* >>>RDD_CPU_REDIRECT_TYPE */
typedef enum
{
	CPU_REDIRECT_TYPE_FIRST   = 0,
	CPU_REDIRECT_TYPE_NONE    = 0,
	CPU_REDIRECT_TYPE_ALL     = 1,
	CPU_REDIRECT_TYPE_FLOW    = 2,
	CPU_REDIRECT_TYPE_LAST    = 2
} rdd_cpu_redirect_type;
/* <<<RDD_CPU_REDIRECT_TYPE */


/* >>>RDD_CPU_RX_TC */
typedef enum
{
	CPU_RX_TC_FIRST   = 0,
	CPU_RX_TC_ID_0    = 0,
	CPU_RX_TC_ID_1    = 1,
	CPU_RX_TC_ID_2    = 2,
	CPU_RX_TC_ID_3    = 3,
	CPU_RX_TC_ID_4    = 4,
	CPU_RX_TC_ID_5    = 5,
	CPU_RX_TC_ID_6    = 6,
	CPU_RX_TC_ID_7    = 7,
	CPU_RX_TC_LAST    = 7
} rdd_cpu_rx_tc;
/* <<<RDD_CPU_RX_TC */


/* >>>RDD_CPU_RX_TYPE */
typedef enum
{
	CPU_RX_TYPE_FIRST            = 0,
	CPU_RX_TYPE_FWD              = 0,
	CPU_RX_TYPE_EXCEPTION        = 1,
	CPU_RX_TYPE_SPEED_SERVICE    = 2,
	CPU_RX_TYPE_WAN_LOOPBACK     = 3,
	CPU_RX_TYPE_LAST             = 3
} rdd_cpu_rx_type;
/* <<<RDD_CPU_RX_TYPE */


/* >>>RDD_SPDTEST */
typedef enum
{
	SPDTEST_FIRST          = 0,
	SPDTEST_NONE           = 0,
	SPDTEST_BRCM_SPDSVC    = 1,
	SPDTEST_UDP_BASIC      = 2,
	SPDTEST_UDP_IPERF3     = 3,
	SPDTEST_TCP            = 4,
	SPDTEST_TIMER_VALUE    = 100,
	SPDTEST_LAST           = 100
} rdd_spdtest;
/* <<<RDD_SPDTEST */


/* >>>RDD_PKTGEN_TX */
typedef enum
{
	PKTGEN_TX_FIRST               = 4,
	PKTGEN_TX_NUM_OF_DATA_PKTS    = 4,
	PKTGEN_TX_NUM_OF_SBPM_HDRS    = 28,
	PKTGEN_TX_LAST                = 28
} rdd_pktgen_tx;
/* <<<RDD_PKTGEN_TX */


/* >>>RDD_TCPSPDTEST */
typedef enum
{
	TCPSPDTEST_FIRST                                       = 0,
	TCPSPDTEST_DUP_ACK_STATE_NONE                          = 0,
	TCPSPDTEST_DUP_ACK_STATE_WAIT_THR                      = 1,
	TCPSPDTEST_UP_CWND_FACTOR_START                        = 2,
	TCPSPDTEST_DUP_ACK_STATE_WAIT_EFS                      = 2,
	TCPSPDTEST_DUP_ACK_STATE_WAIT_PARTIAL_ACK              = 3,
	TCPSPDTEST_DUP_ACK_STATE_PARTIAL_ACK                   = 4,
	TCPSPDTEST_RTO_RING_RETRANS_ELEMENT_SIZE               = 4,
	TCPSPDTEST_RTO_RING_TX_SEQ_COALESCING_THR              = 8,
	TCPSPDTEST_RTO_RING_TX_SEQ_ELEMENT_SIZE                = 8,
	TCPSPDTEST_RTO_RING_SCRATCHPAD_SIZE                    = 8,
	TCPSPDTEST_UP_CWND_FACTOR_MAX                          = 10,
	TCPSPDTEST_RTO_RING_TX_SEQ_SCRATCHPAD_METADATA_SIZE    = 16,
	TCPSPDTEST_NUM_OF_ERR_COR_BUFS                         = 32,
	TCPSPDTEST_RTO_RING_TX_SEQ_COALESCING_MASK             = 63,
	TCPSPDTEST_ERR_COR_BUF_IDX_MASK                        = 127,
	TCPSPDTEST_RTO_RING_TX_SEQ_COALESCING_TIME_USEC        = 4096,
	TCPSPDTEST_RTO_RING_RETRANS_MASK                       = 8191,
	TCPSPDTEST_RTO_RING_RETRANS_SIZE                       = 8192,
	TCPSPDTEST_RTO_RING_TX_SEQ_MASK                        = 131071,
	TCPSPDTEST_RTO_RING_TX_SEQ_SIZE                        = 131072,
	TCPSPDTEST_LAST                                        = 131072
} rdd_tcpspdtest;
/* <<<RDD_TCPSPDTEST */


/* >>>RDD_DEBUG_PRINT_TABLE */
typedef enum
{
	DEBUG_PRINT_TABLE_FIRST   = 16384,
	DEBUG_PRINT_TABLE_SIZE    = 16384,
	DEBUG_PRINT_TABLE_LAST    = 16384
} rdd_debug_print_table;
/* <<<RDD_DEBUG_PRINT_TABLE */


/* >>>RDD_MCAST_DEFS */
typedef enum
{
	MCAST_DEFS_FIRST                     = 255,
	MCAST_DEFS_MAX_CHANNELS_IN_MASTER    = 255,
	MCAST_DEFS_MAX_CHANNELS_IN_HASH      = 1024,
	MCAST_DEFS_MAX_FLOWS_IN_TOTAL        = 8192,
	MCAST_DEFS_LAST                      = 8192
} rdd_mcast_defs;
/* <<<RDD_MCAST_DEFS */


/* >>>RDD_CTX_SIZE */
typedef enum
{
	CTX_SIZE_FIRST       = 0,
	CTX_SIZE_8           = 0,
	CTX_SIZE_16          = 1,
	CTX_SIZE_24          = 2,
	CTX_SIZE_32          = 3,
	CTX_SIZE_40          = 4,
	CTX_SIZE_48          = 5,
	CTX_SIZE_56          = 6,
	CTX_SIZE_64          = 7,
	CTX_SIZE_72          = 8,
	CTX_SIZE_80          = 9,
	CTX_SIZE_88          = 10,
	CTX_SIZE_96          = 11,
	CTX_SIZE_104         = 12,
	CTX_SIZE_112         = 13,
	CTX_SIZE_120         = 14,
	CTX_SIZE_128         = 15,
	CTX_SIZE_NOT_USED    = 16,
	CTX_SIZE_LAST        = 16
} rdd_ctx_size;
/* <<<RDD_CTX_SIZE */


/* >>>RDD_TCAM_IC_MODULE */
typedef enum
{
	TCAM_IC_MODULE_FIRST                = 0,
	TCAM_IC_MODULE_GENERIC_FILTER_DS    = 0,
	TCAM_IC_MODULE_GENERIC_FILTER_US    = 1,
	TCAM_IC_MODULE_LAST                 = 1
} rdd_tcam_ic_module;
/* <<<RDD_TCAM_IC_MODULE */


/* >>>RDD_GENERIC_LAYER */
typedef enum
{
	GENERIC_LAYER_FIRST = 0,
	GENERIC_LAYER_L2    = 0,
	GENERIC_LAYER_L3    = 1,
	GENERIC_LAYER_L4    = 2,
	GENERIC_LAYER_LAST  = 2
} rdd_generic_layer;
/* <<<RDD_GENERIC_LAYER */


/* >>>RDD_GENERIC_FIELDS */
typedef enum
{
	GENERIC_FIELDS_FIRST        = 4,
	GENERIC_FIELDS_PER_TABLE    = 4,
	GENERIC_FIELDS_LAST         = 4
} rdd_generic_fields;
/* <<<RDD_GENERIC_FIELDS */


/* >>>RDD_BRIDGE_AND_VLAN_LKP_MISS_ACTION */
typedef enum
{
	BRIDGE_AND_VLAN_LKP_MISS_ACTION_FIRST      = 0,
	BRIDGE_AND_VLAN_LKP_MISS_ACTION_DROP       = 0,
	BRIDGE_AND_VLAN_LKP_MISS_ACTION_TRAP       = 1,
	BRIDGE_AND_VLAN_LKP_MISS_ACTION_FORWARD    = 2,
	BRIDGE_AND_VLAN_LKP_MISS_ACTION_LAST       = 2
} rdd_bridge_and_vlan_lkp_miss_action;
/* <<<RDD_BRIDGE_AND_VLAN_LKP_MISS_ACTION */


/* >>>RDD_BRIDGE_ARL_LOOKUP_METHOD */
typedef enum
{
	BRIDGE_ARL_LOOKUP_METHOD_FIRST       = 0,
	BRIDGE_ARL_LOOKUP_METHOD_MAC_ONLY    = 0,
	BRIDGE_ARL_LOOKUP_METHOD_MAC_VID     = 1,
	BRIDGE_ARL_LOOKUP_METHOD_LAST        = 1
} rdd_bridge_arl_lookup_method;
/* <<<RDD_BRIDGE_ARL_LOOKUP_METHOD */


/* >>>RDD_BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD */
typedef enum
{
	BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD_FIRST         = 0,
	BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD_VPORT_ONLY    = 0,
	BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD_VPORT_VID     = 1,
	BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD_LAST          = 1
} rdd_bridge_and_vlan_ctx_lookup_method;
/* <<<RDD_BRIDGE_AND_VLAN_CTX_LOOKUP_METHOD */


/* >>>RDD_BRIDGE_FLOW */
typedef enum
{
	BRIDGE_FLOW_FIRST = 0,
	BRIDGE_FLOW_DS    = 0,
	BRIDGE_FLOW_US    = 1,
	BRIDGE_FLOW_LAST  = 1
} rdd_bridge_flow;
/* <<<RDD_BRIDGE_FLOW */


/* >>>RDD_NO_FWD_ACTION */
typedef enum
{
	NO_FWD_ACTION_FIRST   = 0,
	NO_FWD_ACTION_DROP    = 0,
	NO_FWD_ACTION_TRAP    = 1,
	NO_FWD_ACTION_LAST    = 1
} rdd_no_fwd_action;
/* <<<RDD_NO_FWD_ACTION */


/* >>>RDD_MULTICAST_GROUP_MODE */
typedef enum
{
	MULTICAST_GROUP_MODE_FIRST       = 0,
	MULTICAST_GROUP_MODE_IANA        = 0,
	MULTICAST_GROUP_MODE_ASM_ONLY    = 1,
	MULTICAST_GROUP_MODE_SSM_ONLY    = 2,
	MULTICAST_GROUP_MODE_LAST        = 2
} rdd_multicast_group_mode;
/* <<<RDD_MULTICAST_GROUP_MODE */


/* >>>RDD_INGRESS_FILTER */
typedef enum
{
	INGRESS_FILTER_FIRST                = 0,
	INGRESS_FILTER_DHCP                 = 0,
	INGRESS_FILTER_ETYPE_PPPOE_D        = 1,
	INGRESS_FILTER_ETYPE_PPPOE_S        = 2,
	INGRESS_FILTER_IGMP                 = 3,
	INGRESS_FILTER_MLD                  = 4,
	INGRESS_FILTER_ICMPV6               = 5,
	INGRESS_FILTER_HDR_ERR              = 6,
	INGRESS_FILTER_IP_FRAGMENT          = 7,
	INGRESS_FILTER_ETYPE_UDEF_0         = 8,
	INGRESS_FILTER_ETYPE_UDEF_1         = 9,
	INGRESS_FILTER_ETYPE_UDEF_2         = 10,
	INGRESS_FILTER_ETYPE_UDEF_3         = 11,
	INGRESS_FILTER_ETYPE_ARP            = 12,
	INGRESS_FILTER_ETYPE_PTP_1588       = 13,
	INGRESS_FILTER_ETYPE_802_1X         = 14,
	INGRESS_FILTER_ETYPE_802_1AG_CFM    = 15,
	INGRESS_FILTER_MAC_SPOOFING         = 16,
	INGRESS_FILTER_MAC_DA_EQ_SA         = 16,
	INGRESS_FILTER_IP_MCAST_CONTROL     = 17,
	INGRESS_FILTER_MCAST_IPV4           = 18,
	INGRESS_FILTER_MCAST_IPV6           = 19,
	INGRESS_FILTER_MCAST_L2             = 20,
	INGRESS_FILTER_MCAST                = 21,
	INGRESS_FILTER_BCAST                = 22,
	INGRESS_FILTER_L4_PTP_1588          = 23,
	INGRESS_FILTER_L2CP                 = 24,
	INGRESS_FILTER_LAST                 = 24
} rdd_ingress_filter;
/* <<<RDD_INGRESS_FILTER */


/* >>>RDD_ACTION_POINT_PRIO */
typedef enum
{
	ACTION_POINT_PRIO_FIRST                   = 1,
	ACTION_POINT_PRIO_TCP_FLAGS               = 1,
	ACTION_POINT_PRIO_TUNNEL                  = 1,
	ACTION_POINT_PRIO_FLOW_MISS               = 1,
	ACTION_POINT_PRIO_GENERIC_FILTER          = 1,
	ACTION_POINT_PRIO_MTU                     = 1,
	ACTION_POINT_PRIO_FLOW_CONTROL            = 1,
	ACTION_POINT_PRIO_TTL                     = 1,
	ACTION_POINT_PRIO_UDP_CSUM_0              = 1,
	ACTION_POINT_PRIO_FLOW_POLICER            = 1,
	ACTION_POINT_PRIO_MCAST_WHITELIST_MISS    = 2,
	ACTION_POINT_PRIO_MCAST_CLIENT_MISS       = 2,
	ACTION_POINT_PRIO_INGRESS_CONGESTION      = 3,
	ACTION_POINT_PRIO_INGRESS_FILTERS         = 4,
	ACTION_POINT_PRIO_DOS_ATTACK              = 5,
	ACTION_POINT_PRIO_LAST                    = 5
} rdd_action_point_prio;
/* <<<RDD_ACTION_POINT_PRIO */


/* >>>RDD_DECISION_POINT_THR */
typedef enum
{
	DECISION_POINT_THR_FIRST             = 0,
	DECISION_POINT_THR_FLOW_MISS         = 0,
	DECISION_POINT_THR_PRE_PROCESSING    = 0,
	DECISION_POINT_THR_FLOW_HIT          = 0,
	DECISION_POINT_THR_LAST              = 0
} rdd_decision_point_thr;
/* <<<RDD_DECISION_POINT_THR */


/* >>>RDD_PACKET_HEADER_MAC */
typedef enum
{
	PACKET_HEADER_MAC_FIRST        = 0,
	PACKET_HEADER_MAC_DA_OFFSET    = 0,
	PACKET_HEADER_MAC_SA_OFFSET    = 6,
	PACKET_HEADER_MAC_LAST         = 6
} rdd_packet_header_mac;
/* <<<RDD_PACKET_HEADER_MAC */


/* >>>RDD_GENERAL_TIMER */
typedef enum
{
	GENERAL_TIMER_FIRST          = 0,
	GENERAL_TIMER_INDEX          = 0,
	GENERAL_TIMER_PERIODICITY    = 100,
	GENERAL_TIMER_LAST           = 100
} rdd_general_timer;
/* <<<RDD_GENERAL_TIMER */


/* >>>RDD_TIMER_ACTION */
typedef enum
{
	TIMER_ACTION_FIRST                    = 0,
	TIMER_ACTION_CPU_RX_COALESCING        = 0,
	TIMER_ACTION_RECYCLE_COALESCING       = 1,
	TIMER_ACTION_RX_METER_BUDGET_ALLOC    = 2,
	TIMER_ACTION_LAST                     = 2
} rdd_timer_action;
/* <<<RDD_TIMER_ACTION */


/* >>>RDD_RDPA_TUNNEL_TYPE */
typedef enum
{
	RDPA_TUNNEL_TYPE_FIRST      = 0,
	RDPA_TUNNEL_TYPE_L2_GRE     = 0,
	RDPA_TUNNEL_TYPE_L3_GRE     = 1,
	RDPA_TUNNEL_TYPE_DS_LITE    = 2,
	RDPA_TUNNEL_TYPE_VXLAN      = 4,
	RDPA_TUNNEL_TYPE_LAST       = 4
} rdd_rdpa_tunnel_type;
/* <<<RDD_RDPA_TUNNEL_TYPE */


/* >>>RDD_TUNNEL_INDICATION */
typedef enum
{
	TUNNEL_INDICATION_FIRST = 0,
	TUNNEL_INDICATION_L2    = 0,
	TUNNEL_INDICATION_L3    = 1,
	TUNNEL_INDICATION_LAST  = 1
} rdd_tunnel_indication;
/* <<<RDD_TUNNEL_INDICATION */


/* >>>RDD_RC */
typedef enum
{
	RC_FIRST                  = -2,
	RC_RETRY                  = -2,
	RC_ERROR                  = -1,
	RC_OK                     = 0,
	RC_CONTINUE_PROCESSING    = 1,
	RC_VALID_TUNNEL_RESULT    = 2,
	RC_LAST                   = 2
} rdd_rc;
/* <<<RDD_RC */


/* >>>RDD_COUNTER */
typedef enum
{
	COUNTER_FIRST                                   = 0,
	COUNTER_TM_PD_NOT_VALID_ID                      = 0,
	COUNTER_TM_ACTION_NOT_VALID_ID                  = 1,
	COUNTER_EPON_TM_PD_NOT_VALID_ID                 = 2,
	COUNTER_PROCESSING_ACTION_NOT_VALID_ID          = 4,
	COUNTER_CPU_RECYCLE_RING_CONGESTION             = 5,
	COUNTER_CPU_RX_FEED_RING_CONGESTION             = 6,
	COUNTER_CPU_RX_PSRAM_DROP                       = 7,
	COUNTER_IPTV_HASH_LKP_MISS_DROP                 = 8,
	COUNTER_IPTV_SRC_IP_VID_LKP_MISS_DROP           = 9,
	COUNTER_IPTV_INVALID_CTX_ENTRY_DROP             = 10,
	COUNTER_IPTV_FPM_SBPM_ALLOC_NACK_DROP           = 11,
	COUNTER_IPTV_FIRST_REPL_DISP_ALLOC_NACK_DROP    = 12,
	COUNTER_IPTV_EXCEPTION_DROP                     = 13,
	COUNTER_IPTV_OTHER_REPL_DISP_ALLOC_NACK_DROP    = 14,
	COUNTER_CPU_TX_COPY_NO_FPM                      = 15,
	COUNTER_CPU_TX_COPY_NO_SBPM                     = 16,
	COUNTER_CPU_RX_TC_TO_RXQ_MAP_DROP               = 17,
	COUNTER_CPU_RX_VPORT_TO_CPU_OBJ_MAP_DROP        = 18,
	COUNTER_ETHERNET_FLOW_DROP_ACTION               = 19,
	COUNTER_SBPM_ALLOC_EXCEPTION_DROP               = 20,
	COUNTER_DROP_CONNECTION_ACTION_DROP_ID          = 21,
	COUNTER_DROP_RESOURCE_CONGESTION_INGRESS        = 22,
	COUNTER_DROP_RESOURCE_CONGESTION_EGRESS         = 23,
	COUNTER_INGRESS_FILTER_DROP_FIRST_DS            = 24,
	COUNTER_INGRESS_FILTER_DROP_FIRST_US            = 48,
	COUNTER_INGRESS_RATE_LIMIT_DROP                 = 70,
	COUNTER_INGRESS_FILTER_DROP_LAST                = 71,
	COUNTER_CPU_RX_METER_DROP                       = 72,
	COUNTER_INGRESS_ISOLATION_DROP                  = 73,
	COUNTER_EGRESS_ISOLATION_DROP                   = 74,
	COUNTER_DA_LKP_MISS_DROP                        = 75,
	COUNTER_SA_LKP_MISS_DROP                        = 76,
	COUNTER_BRIDGE_FW_ELIGABILITY_DROP              = 77,
	COUNTER_DA_LKP_MATCH_DROP                       = 78,
	COUNTER_SA_LKP_MATCH_DROP                       = 79,
	COUNTER_CPU_TX_DISABLED_QUEUE_DROP              = 80,
	COUNTER_DISABLED_TX_FLOW_DROP                   = 81,
	COUNTER_CPU_FEED_RING_DISP_CONGESTION           = 82,
	COUNTER_SBPM_LIB_DISP_CONG                      = 83,
	COUNTER_BRIDGE_FLOODING                         = 84,
	COUNTER_DIS_PROTO_DS_IPV4                       = 85,
	COUNTER_DIS_PROTO_DS_IPV6                       = 86,
	COUNTER_DIS_PROTO_DS_PPPOE                      = 87,
	COUNTER_DIS_PROTO_DS_NON_IP                     = 88,
	COUNTER_DIS_PROTO_US_IPV4                       = 89,
	COUNTER_DIS_PROTO_US_IPV6                       = 90,
	COUNTER_DIS_PROTO_US_PPPOE                      = 91,
	COUNTER_DIS_PROTO_US_NON_IP                     = 92,
	COUNTER_DS_MIRROR_NO_SBPM_DROP                  = 93,
	COUNTER_DS_MIRROR_NO_TOKEN_DROP                 = 94,
	COUNTER_US_MIRROR_NO_SBPM_DROP                  = 95,
	COUNTER_US_MIRROR_NO_TOKEN_DROP                 = 96,
	COUNTER_TX_MIRROR_DROP                          = 97,
	COUNTER_INGRESS_CONGESTION_LAN                  = 98,
	COUNTER_INGRESS_CONGESTION_WAN                  = 99,
	COUNTER_SQ_PD_NOT_VALID                         = 100,
	COUNTER_SQ_ACTION_NOT_VALID                     = 101,
	COUNTER_RX_WAN_PORT_DROP                        = 102,
	COUNTER_RX_ERROR_DROP                           = 103,
	COUNTER_PACKET_MODIFY_DROP                      = 104,
	COUNTER_CODEL_QUEUE_BACK_TO_DROP                = 105,
	COUNTER_CODEL_QUEUE_RECOVER                     = 106,
	COUNTER_UNDEFINED_QUEUE_DROP                    = 106,
	COUNTER_CODEL_EMPTY_QUEUE_RECOVER               = 107,
	COUNTER_TUNNEL_NO_SBPM_DROP                     = 108,
	COUNTER_POLICER_RED_COLOR_DROP                  = 109,
	COUNTER_CPU_TX_INGRESS                          = 110,
	COUNTER_CPU_TX_EGRESS                           = 111,
	COUNTER_FLUSH_EGRESS_QUEUE                      = 112,
	COUNTER_DOS_ATTACK_RESERVED_0                   = 113,
	COUNTER_DOS_ATTACK_FIRST                        = 113,
	COUNTER_DOS_ATTACK_MAC_SA_EQ_DA                 = 114,
	COUNTER_DOS_ATTACK_IP_LAND                      = 115,
	COUNTER_DOS_ATTACK_TCP_BLAT                     = 116,
	COUNTER_DOS_ATTACK_UDP_BLAT                     = 117,
	COUNTER_DOS_ATTACK_TCP_NULLSCAN                 = 118,
	COUNTER_DOS_ATTACK_TCP_XMASSCAN                 = 119,
	COUNTER_DOS_ATTACK_TCP_SYNFINSCAN               = 120,
	COUNTER_DOS_ATTACK_TCP_SYNERROR                 = 121,
	COUNTER_DOS_ATTACK_TCP_SHORTHDR                 = 122,
	COUNTER_DOS_ATTACK_TCP_FRAGERROR                = 123,
	COUNTER_DOS_ATTACK_ICMPV4_FRAGMENT              = 124,
	COUNTER_DOS_ATTACK_ICMPV6_FRAGMENT              = 125,
	COUNTER_DOS_ATTACK_ICMPV4_LONGPING              = 126,
	COUNTER_DOS_ATTACK_ICMPV6_LONGPING              = 127,
	COUNTER_DOS_ATTACK_RESERVED_15                  = 128,
	COUNTER_DOS_ATTACK_LAST                         = 128,
	COUNTER_FC_MCAST_BAD_REPLICATIONS_NUM_DROP      = 129,
	COUNTER_FC_MCAST_CLIENT_FLOW_MISS               = 130,
	COUNTER_INVALID                                 = 255,
	COUNTER_LAST                                    = 255
} rdd_counter;
/* <<<RDD_COUNTER */


/* >>>RDD_BUF_MNG */
typedef enum
{
	BUF_MNG_FIRST                = 0,
	BUF_MNG_TOTAL_BUDGET_CNTR    = 0,
	BUF_MNG_WLAN_0_CNTR          = 1,
	BUF_MNG_WLAN_HIGH_0_CNTR     = 2,
	BUF_MNG_WLAN_1_CNTR          = 3,
	BUF_MNG_WLAN_HIGH_1_CNTR     = 4,
	BUF_MNG_WLAN_2_CNTR          = 5,
	BUF_MNG_WLAN_HIGH_2_CNTR     = 6,
	BUF_MNG_WLAN_TOTAL_CNTR      = 7,
	BUF_MNG_CPU_RX_CNTR          = 8,
	BUF_MNG_CPU_RX_HIGH_CNTR     = 9,
	BUF_MNG_LAST                 = 9
} rdd_buf_mng;
/* <<<RDD_BUF_MNG */


/* >>>RDD_POLICER_RESULT_COLOR */
typedef enum
{
	POLICER_RESULT_COLOR_FIRST     = 0,
	POLICER_RESULT_COLOR_RED       = 0,
	POLICER_RESULT_COLOR_YELLOW    = 64,
	POLICER_RESULT_COLOR_GREEN     = 128,
	POLICER_RESULT_COLOR_LAST      = 128
} rdd_policer_result_color;
/* <<<RDD_POLICER_RESULT_COLOR */


/* >>>RDD_CNPL_GROUP */
typedef enum
{
	CNPL_GROUP_FIRST                   = 0,
	CNPL_GROUP_RX_FLOW                 = 0,
	CNPL_GROUP_RX_FLOW_DROP            = 1,
	CNPL_GROUP_TX_FLOW                 = 2,
	CNPL_GROUP_TCAM                    = 3,
	CNPL_GROUP_TWO_BYTE_CNTR           = 4,
	CNPL_GROUP_FOUR_BYTE_CNTR          = 5,
	CNPL_GROUP_TX_QUEUE                = 6,
	CNPL_GROUP_DHD_CTR_CNTRS           = 7,
	CNPL_GROUP_CPU_RX_METER_DROP       = 8,
	CNPL_GROUP_POLICER_GREEN_COLOR     = 9,
	CNPL_GROUP_POLICER_YELLOW_COLOR    = 10,
	CNPL_GROUP_POLICER_RED_COLOR       = 11,
	CNPL_GROUP_PATHSTAT                = 12,
	CNPL_GROUP_DHD_CNTRS               = 13,
	CNPL_GROUP_LAST                    = 13
} rdd_cnpl_group;
/* <<<RDD_CNPL_GROUP */


/* >>>RDD_CNTR_GROUP */
typedef enum
{
	CNTR_GROUP_FIRST                = 0,
	CNTR_GROUP_RX_FLOW              = 0,
	CNTR_GROUP_TX_FLOW              = 1,
	CNTR_GROUP_TCAM_DEF             = 2,
	CNTR_GROUP_VARIOUS              = 3,
	CNTR_GROUP_GENERAL              = 4,
	CNTR_GROUP_TX_QUEUE             = 5,
	CNTR_GROUP_DHD_CTR              = 6,
	CNTR_GROUP_CPU_RX_METER_DROP    = 7,
	CNTR_GROUP_POLICER              = 8,
	CNTR_GROUP_PATHSTAT             = 9,
	CNTR_GROUP_DHD_CNTRS            = 10,
	CNTR_GROUP_IPTV_NATC            = 11,
	CNTR_GROUP_GROUPS_NUMBER        = 12,
	CNTR_GROUP_LAST                 = 12
} rdd_cntr_group;
/* <<<RDD_CNTR_GROUP */


/* >>>RDD_CNPL_POLICER_GROUP */
typedef enum
{
	CNPL_POLICER_GROUP_FIRST                 = 0,
	CNPL_POLICER_GROUP_DUAL_BUCKET_INDEX     = 0,
	CNPL_POLICER_GROUP_FLOW_CONTROL_INDEX    = 2,
	CNPL_POLICER_GROUP_LAST                  = 2
} rdd_cnpl_policer_group;
/* <<<RDD_CNPL_POLICER_GROUP */


/* >>>RDD_DHD_FLOW_PRIO */
typedef enum
{
	DHD_FLOW_PRIO_FIRST     = 0,
	DHD_FLOW_PRIO_NORMAL    = 0,
	DHD_FLOW_PRIO_HIGH      = 1,
	DHD_FLOW_PRIO_EXCL      = 2,
	DHD_FLOW_PRIO_LAST      = 2
} rdd_dhd_flow_prio;
/* <<<RDD_DHD_FLOW_PRIO */


/* >>>RDD_NATC */
typedef enum
{
	NATC_FIRST                     = 3,
	NATC_LOOKUP_DEPTH_SIZE_LOG2    = 3,
	NATC_LOOKUP_DEPTH_SIZE         = 8,
	NATC_MAX_TABLES_NUM            = 8,
	NATC_TABLE_KEY_SIZE            = 16,
	NATC_TABLE_RES_SIZE            = 64,
	NATC_MAX_ENTRY_LEN             = 128,
	NATC_LAST                      = 128
} rdd_natc;
/* <<<RDD_NATC */


/* >>>RDD_NATC_TBL_IDX */
typedef enum
{
	NATC_TBL_IDX_FIRST       = 0,
	NATC_TBL_IDX_DS          = 0,
	NATC_TBL_IDX_US          = 1,
	NATC_TBL_IDX_MCAST       = 2,
	NATC_TBL_IDX_COUNTERS    = 2,
	NATC_TBL_IDX_LAST        = 2
} rdd_natc_tbl_idx;
/* <<<RDD_NATC_TBL_IDX */


/* >>>RDD_NATC_SUB_TBL_IDX */
typedef enum
{
	NATC_SUB_TBL_IDX_FIRST          = 0,
	NATC_SUB_TBL_IDX_L3             = 0,
	NATC_SUB_TBL_IDX_VLAN_ACTION    = 1,
	NATC_SUB_TBL_IDX_L2             = 2,
	NATC_SUB_TBL_IDX_LAST           = 2
} rdd_natc_sub_tbl_idx;
/* <<<RDD_NATC_SUB_TBL_IDX */


/* >>>RDD_HASH_TABLE */
typedef enum
{
	HASH_TABLE_FIRST   = 1,
	HASH_TABLE_IPTV    = 1,
	HASH_TABLE_LAST    = 1
} rdd_hash_table;
/* <<<RDD_HASH_TABLE */


/* >>>RDD_CPU_IF_RDD */
typedef enum
{
	CPU_IF_RDD_FIRST      = 0,
	CPU_IF_RDD_DATA       = 0,
	CPU_IF_RDD_RECYCLE    = 1,
	CPU_IF_RDD_FEED       = 2,
	CPU_IF_RDD_CPU_TX     = 3,
	CPU_IF_RDD_LAST       = 3
} rdd_cpu_if_rdd;
/* <<<RDD_CPU_IF_RDD */


/* >>>RDD_DHD_CTR_GROUP */
typedef enum
{
	DHD_CTR_GROUP_FIRST                      = 0,
	DHD_CTR_GROUP_SPINLOCK_DHD_0             = 0,
	DHD_CTR_GROUP_SPINLOCK_DHD_1             = 1,
	DHD_CTR_GROUP_SPINLOCK_DHD_2             = 2,
	DHD_CTR_GROUP_WRITE_PTR_DHD_0            = 3,
	DHD_CTR_GROUP_WRITE_PTR_DHD_1            = 4,
	DHD_CTR_GROUP_WRITE_PTR_DHD_2            = 5,
	DHD_CTR_GROUP_DHD_TX_FPM_USED_0          = 6,
	DHD_CTR_GROUP_DHD_TX_FPM_USED_1          = 7,
	DHD_CTR_GROUP_DHD_TX_FPM_USED_2          = 8,
	DHD_CTR_GROUP_DHD_TX_FPM_USED_TOTAL      = 9,
	DHD_CTR_GROUP_SPINLOCK_DEBUG_PRINT       = 10,
	DHD_CTR_GROUP_WRITE_PTR_0_DEBUG_PRINT    = 11,
	DHD_CTR_GROUP_WRITE_PTR_1_DEBUG_PRINT    = 12,
	DHD_CTR_GROUP_LAST                       = 12
} rdd_dhd_ctr_group;
/* <<<RDD_DHD_CTR_GROUP */


/* >>>RDD_DHD_CNTR */
typedef enum
{
	DHD_CNTR_FIRST                          = 0,
	DHD_CNTR_DHD_RX_DROP_0                  = 0,
	DHD_CNTR_DHD_RX_DROP_1                  = 1,
	DHD_CNTR_DHD_RX_DROP_2                  = 2,
	DHD_CNTR_DHD_TX_FPM_DROP_0              = 3,
	DHD_CNTR_DHD_TX_FPM_DROP_1              = 4,
	DHD_CNTR_DHD_TX_FPM_DROP_2              = 5,
	DHD_CNTR_DHD_TX_HIGH_PRIO_FPM_DROP_0    = 6,
	DHD_CNTR_DHD_TX_HIGH_PRIO_FPM_DROP_1    = 7,
	DHD_CNTR_DHD_TX_HIGH_PRIO_FPM_DROP_2    = 8,
	DHD_CNTR_DHD_MCAST_SBPM_DROP_0          = 9,
	DHD_CNTR_DHD_MCAST_SBPM_DROP_1          = 10,
	DHD_CNTR_DHD_MCAST_SBPM_DROP_2          = 11,
	DHD_CNTR_DHD_TX_DROP_0_SSID_0           = 12,
	DHD_CNTR_DHD_TX_DROP_1_SSID_0           = 28,
	DHD_CNTR_DHD_TX_DROP_2_SSID_0           = 44,
	DHD_CNTR_DHD_TX_FR_FULL_0_AC_0          = 60,
	DHD_CNTR_DHD_TX_FR_FULL_1_AC_0          = 65,
	DHD_CNTR_DHD_TX_FR_FULL_2_AC_0          = 70,
	DHD_CNTR_DHD_DROP_LAST_CNTR             = 74,
	DHD_CNTR_LAST                           = 74
} rdd_dhd_cntr;
/* <<<RDD_DHD_CNTR */


/* >>>RDD_FLOW_DEST */
typedef enum
{
	FLOW_DEST_FIRST      = 0,
	FLOW_DEST_ETH_ID     = 0,
	FLOW_DEST_IPTV_ID    = 1,
	FLOW_DEST_LAST       = 1
} rdd_flow_dest;
/* <<<RDD_FLOW_DEST */


/* >>>RDD_TUNNEL_KEY */
typedef enum
{
	TUNNEL_KEY_FIRST             = 255,
	TUNNEL_KEY_OFFSET_INVALID    = 255,
	TUNNEL_KEY_LAST              = 255
} rdd_tunnel_key;
/* <<<RDD_TUNNEL_KEY */


/* >>>RDD_BBH_QUEUE */
typedef enum
{
	BBH_QUEUE_FIRST             = 40,
	BBH_QUEUE_WAN_1_ENTRY_ID    = 40,
	BBH_QUEUE_LAST              = 40
} rdd_bbh_queue;
/* <<<RDD_BBH_QUEUE */


/* >>>RDD_DIRECT_FLOW */
typedef enum
{
	DIRECT_FLOW_FIRST                             = 1,
	DIRECT_FLOW_PAUSE_MAC_CTRL_TYPE               = 1,
	DIRECT_FLOW_PAUSE_TIME_QUANTA_SHIFT_FACTOR    = 12,
	DIRECT_FLOW_LAST                              = 12
} rdd_direct_flow;
/* <<<RDD_DIRECT_FLOW */


/* >>>RDD_TM_UPDATE_VECTOR */
typedef enum
{
	TM_UPDATE_VECTOR_FIRST              = 0,
	TM_UPDATE_VECTOR_BS_DWRR_Q          = 0,
	TM_UPDATE_VECTOR_BS_Q_BRL           = 1,
	TM_UPDATE_VECTOR_BS_BRL_Q           = 2,
	TM_UPDATE_VECTOR_CS_DWRR_Q          = 3,
	TM_UPDATE_VECTOR_CS_DWRR_BS         = 4,
	TM_UPDATE_VECTOR_CS_DWRR_CS         = 5,
	TM_UPDATE_VECTOR_CS_BS_Q_BRL        = 6,
	TM_UPDATE_VECTOR_CS_Q_CRL_SIR       = 7,
	TM_UPDATE_VECTOR_CS_Q_CRL_PIR       = 8,
	TM_UPDATE_VECTOR_CS_BS_CRL_SIR_Q    = 9,
	TM_UPDATE_VECTOR_CS_BS_CRL_PIR_Q    = 10,
	TM_UPDATE_VECTOR_CS_CS_CRL_SIR_Q    = 11,
	TM_UPDATE_VECTOR_CS_CS_CRL_PIR_Q    = 12,
	TM_UPDATE_VECTOR_CS_BRL             = 13,
	TM_UPDATE_VECTOR_CS_CS_BRL          = 14,
	TM_UPDATE_VECTOR_OVL_RL             = 15,
	TM_UPDATE_VECTOR_LAST               = 15
} rdd_tm_update_vector;
/* <<<RDD_TM_UPDATE_VECTOR */


/* >>>RDD_COUNTER_TX_FLOW_GROUP */
typedef enum
{
	COUNTER_TX_FLOW_GROUP_FIRST              = 0,
	COUNTER_TX_FLOW_GROUP_TX_GEM_FIRST       = 0,
	COUNTER_TX_FLOW_GROUP_TX_VPORT_FIRST     = 128,
	COUNTER_TX_FLOW_GROUP_PATH_STAT_FIRST    = 144,
	COUNTER_TX_FLOW_GROUP_LAST               = 144
} rdd_counter_tx_flow_group;
/* <<<RDD_COUNTER_TX_FLOW_GROUP */


/* >>>RDD_BBMSG_TYPE */
typedef enum
{
	BBMSG_TYPE_FIRST                                              = 0,
	BBMSG_TYPE_RUNNER_BBH_RX_FLOW_CONTROL                         = 0,
	BBMSG_TYPE_QM_PD_FIFO_CREDIT_FREE                             = 0,
	BBMSG_TYPE_BBH_TX_PACKET_DESCRIPTOR                           = 1,
	BBMSG_TYPE_RUNNER_SBPM_BUFFER_ALLOC_MANUAL_TASK_ID            = 1,
	BBMSG_TYPE_QM_UPDATE_FIFO_CREDIT_FREE                         = 1,
	BBMSG_TYPE_FPM_BUFFER_ALLOC_MANUAL_TASK_ID                    = 1,
	BBMSG_TYPE_RUNNER_SBPM_MCAST_INC_REQUEST_MANUAL_TASK_ID       = 2,
	BBMSG_TYPE_FPM_BUFFER_MCAST_INCREMENT_MANUAL_TASK_ID          = 2,
	BBMSG_TYPE_BBH_TX_NACK                                        = 2,
	BBMSG_TYPE_BBH_TX_ACK                                         = 3,
	BBMSG_TYPE_FPM_BUFFER_FREE_MANUAL_TASK_ID                     = 3,
	BBMSG_TYPE_BBH_SBPM_BUFFER_FREE                               = 3,
	BBMSG_TYPE_BBH_GHOST_DBR                                      = 4,
	BBMSG_TYPE_RUNNER_SBPM_CONNECT_MANUAL_TASK_ID                 = 4,
	BBMSG_TYPE_RUNNER_SBPM_GET_NEXT_MANUAL_TASK_ID                = 5,
	BBMSG_TYPE_BBH_TX_REPORT_ACK                                  = 5,
	BBMSG_TYPE_BBH_SBPM_BUFFER_FREE_WITHOUT_CONTEXT               = 6,
	BBMSG_TYPE_RUNNER_SBPM_BUFFER_FREE_WITHOUT_CONTEXT            = 6,
	BBMSG_TYPE_BBH_TX_REPORT_NACK                                 = 7,
	BBMSG_TYPE_RUNNER_SBPM_INGRESS_TO_EGRESS                      = 7,
	BBMSG_TYPE_RUNNER_REORDER_PD_WRITE                            = 8,
	BBMSG_TYPE_RUNNER_DISPATCHER_PD_ACK_MANUAL_TASK_ID            = 9,
	BBMSG_TYPE_RUNNER_DISPATCHER_PD_WRITE                         = 10,
	BBMSG_TYPE_RUNNER_REORDER_TOKEN_REQUEST                       = 11,
	BBMSG_TYPE_RUNNER_REORDER_BUFFER_CONNECT                      = 12,
	BBMSG_TYPE_RUNNER_DISPATCHER_WAKEUP_PENDING                   = 13,
	BBMSG_TYPE_RUNNER_REORDER_CONNECT_REQUEST_BUFFER_CONNECTED    = 14,
	BBMSG_TYPE_RUNNER_REORDER_BUFFER_MULTICAST_CONNECT_REQUEST    = 15,
	BBMSG_TYPE_RUNNER_SBPM_BUFFER_ALLOC_AUTO_TASK_ID              = 17,
	BBMSG_TYPE_FPM_BUFFER_ALLOC_AUTO_TASK_ID                      = 17,
	BBMSG_TYPE_RUNNER_SBPM_MCAST_INC_REQUEST_AUTO_TASK_ID         = 18,
	BBMSG_TYPE_FPM_BUFFER_MCAST_INCREMENT_AUTO_TASK_ID            = 18,
	BBMSG_TYPE_FPM_BUFFER_FREE_AUTO_TASK_ID                       = 19,
	BBMSG_TYPE_RUNNER_SBPM_CONNECT_AUTO_TASK_ID                   = 20,
	BBMSG_TYPE_RUNNER_SBPM_GET_NEXT_AUTO_TASK_ID                  = 21,
	BBMSG_TYPE_BBH_RX_DISPATCHER_PD_WRITE                         = 24,
	BBMSG_TYPE_RUNNER_DISPATCHER_PD_ACK_AUTO_TASK_ID              = 25,
	BBMSG_TYPE_LAST                                               = 25
} rdd_bbmsg_type;
/* <<<RDD_BBMSG_TYPE */


/* >>>RDD_ERR_RX_PD */
typedef enum
{
	ERR_RX_PD_FIRST                 = 1,
	ERR_RX_PD_NO_SBPM               = 1,
	ERR_RX_PD_PACKET_TOO_SHORT      = 2,
	ERR_RX_PD_PACKET_TOO_LONG       = 3,
	ERR_RX_PD_CRC                   = 4,
	ERR_RX_PD_ENCRYPT               = 5,
	ERR_RX_PD_NO_SDMA_CHUNK         = 6,
	ERR_RX_PD_SOP_AFTER_SOP         = 7,
	ERR_RX_PD_THIRD_FLOW_ARRIVAL    = 8,
	ERR_RX_PD_LAST                  = 8
} rdd_err_rx_pd;
/* <<<RDD_ERR_RX_PD */


/* >>>RDD_SBPM_OPCODE */
typedef enum
{
	SBPM_OPCODE_FIRST                   = 0,
	SBPM_OPCODE_MULTI_GET_NEXT          = 0,
	SBPM_OPCODE_BN_ALLOC                = 1,
	SBPM_OPCODE_MCST_INC                = 2,
	SBPM_OPCODE_BN_FREE_WITH_CONTEXT    = 3,
	SBPM_OPCODE_BN_CONNECT              = 4,
	SBPM_OPCODE_GET_NEXT                = 5,
	SBPM_OPCODE_BN_FREE_WO_CONTEXT      = 6,
	SBPM_OPCODE_INGRESS_TO_EGRESS       = 7,
	SBPM_OPCODE_LAST                    = 7
} rdd_sbpm_opcode;
/* <<<RDD_SBPM_OPCODE */


/* >>>RDD_RDD_LAN */
typedef enum
{
	RDD_LAN_FIRST           = 1,
	RDD_LAN_BRIDGE_PORT0    = 1,
	RDD_LAN_BRIDGE_PORT1    = 2,
	RDD_LAN_BRIDGE_PORT2    = 3,
	RDD_LAN_BRIDGE_PORT3    = 4,
	RDD_LAN_BRIDGE_PORT4    = 5,
	RDD_LAN_BRIDGE_PORT5    = 6,
	RDD_LAN_LAST            = 6
} rdd_rdd_lan;
/* <<<RDD_RDD_LAN */


/* >>>RDD_MAC_TYPE */
typedef enum
{
	MAC_TYPE_FIRST    = 0,
	MAC_TYPE_EMAC     = 0,
	MAC_TYPE_GPON     = 1,
	MAC_TYPE_XGPON    = 2,
	MAC_TYPE_EPON     = 3,
	MAC_TYPE_XEPON    = 4,
	MAC_TYPE_DSL      = 5,
	MAC_TYPE_AE10G    = 6,
	MAC_TYPE_AE2P5    = 7,
	MAC_TYPE_LAST     = 7
} rdd_mac_type;
/* <<<RDD_MAC_TYPE */


/* >>>RDD_SBPM */
typedef enum
{
	SBPM_FIRST                    = 16383,
	SBPM_INVALID_BUFFER_NUMBER    = 16383,
	SBPM_LAST                     = 16383
} rdd_sbpm;
/* <<<RDD_SBPM */


/* >>>RDD_FPM_POOL_ID */
typedef enum
{
	FPM_POOL_ID_FIRST            = 0,
	FPM_POOL_ID_EIGHT_BUFFERS    = 0,
	FPM_POOL_ID_FOUR_BUFFERS     = 1,
	FPM_POOL_ID_TWO_BUFFERS      = 2,
	FPM_POOL_ID_ONE_BUFFER       = 3,
	FPM_POOL_ID_LAST             = 3
} rdd_fpm_pool_id;
/* <<<RDD_FPM_POOL_ID */


/* >>>RDD_CONG_STATE */
typedef enum
{
	CONG_STATE_FIRST   = 0,
	CONG_STATE_NONE    = 0,
	CONG_STATE_LOW     = 1,
	CONG_STATE_HIGH    = 2,
	CONG_STATE_LAST    = 2
} rdd_cong_state;
/* <<<RDD_CONG_STATE */


/* >>>RDD_GPE_COMMAND_LIST */
typedef enum
{
	GPE_COMMAND_LIST_FIRST         = 0,
	GPE_COMMAND_LIST_TERMINATOR    = 0,
	GPE_COMMAND_LIST_LAST          = 0
} rdd_gpe_command_list;
/* <<<RDD_GPE_COMMAND_LIST */


/* >>>RDD_VLAN_ACTION_GPE_OPCODE */
typedef enum
{
	VLAN_ACTION_GPE_OPCODE_FIRST              = 0,
	VLAN_ACTION_GPE_OPCODE_DROP               = 0,
	VLAN_ACTION_GPE_OPCODE_DSCP               = 1,
	VLAN_ACTION_GPE_OPCODE_MAC_HDR_COPY       = 2,
	VLAN_ACTION_GPE_OPCODE_REPLACE_16         = 3,
	VLAN_ACTION_GPE_OPCODE_REPLACE_32         = 4,
	VLAN_ACTION_GPE_OPCODE_REPLACE_BITS_16    = 5,
	VLAN_ACTION_GPE_OPCODE_COPY_BITS_16       = 6,
	VLAN_ACTION_GPE_OPCODE_SKIP_IF            = 7,
	VLAN_ACTION_GPE_OPCODE_LAST               = 7
} rdd_vlan_action_gpe_opcode;
/* <<<RDD_VLAN_ACTION_GPE_OPCODE */


/* >>>RDD_VLAN_ACTION_TPID_VALUE */
typedef enum
{
	VLAN_ACTION_TPID_VALUE_FIRST         = 0,
	VLAN_ACTION_TPID_VALUE_UNASSIGNED    = 0,
	VLAN_ACTION_TPID_VALUE_LAST          = 0
} rdd_vlan_action_tpid_value;
/* <<<RDD_VLAN_ACTION_TPID_VALUE */


/* >>>RDD_VLAN_ACTION_CL_OFFSET */
typedef enum
{
	VLAN_ACTION_CL_OFFSET_FIRST          = 0,
	VLAN_ACTION_CL_OFFSET_UNTAGGED       = 0,
	VLAN_ACTION_CL_OFFSET_1TAG           = 1,
	VLAN_ACTION_CL_OFFSET_2TAGS          = 2,
	VLAN_ACTION_CL_OFFSET_PTAG           = 3,
	VLAN_ACTION_CL_OFFSET_TRANSPARENT    = 255,
	VLAN_ACTION_CL_OFFSET_LAST           = 255
} rdd_vlan_action_cl_offset;
/* <<<RDD_VLAN_ACTION_CL_OFFSET */


/* >>>RDD_FR_FORMAT */
typedef enum
{
	FR_FORMAT_FIRST        = 0,
	FR_FORMAT_WI_WI64      = 0,
	FR_FORMAT_WI_CWI32     = 1,
	FR_FORMAT_WI_CWI64     = 2,
	FR_FORMAT_WI_ACWI32    = 3,
	FR_FORMAT_WI_ACWI64    = 4,
	FR_FORMAT_LAST         = 4
} rdd_fr_format;
/* <<<RDD_FR_FORMAT */


/* >>>RDD_BACKUP_INDEX */
typedef enum
{
	BACKUP_INDEX_FIRST        = 21760,
	BACKUP_INDEX_FIFO_SIZE    = 21760,
	BACKUP_INDEX_LAST         = 21760
} rdd_backup_index;
/* <<<RDD_BACKUP_INDEX */


/* >>>RDD_DMA_TYPE */
typedef enum
{
	DMA_TYPE_FIRST         = 1,
	DMA_TYPE_IDMA          = 1,
	DMA_TYPE_HWA_RXPOST    = 5,
	DMA_TYPE_HWA_TXCPL     = 6,
	DMA_TYPE_HWA_RXCPL     = 7,
	DMA_TYPE_LAST          = 7
} rdd_dma_type;
/* <<<RDD_DMA_TYPE */


/* >>>RDD_DHD */
typedef enum
{
	DHD_FIRST         = 3,
	DHD_MAX_RADIOS    = 3,
	DHD_LAST          = 3
} rdd_dhd;
/* <<<RDD_DHD */


/* >>>RDD_BUFFER_CONG_MGT_FW_STATE */
typedef enum
{
	BUFFER_CONG_MGT_FW_STATE_FIRST             = 0,
	BUFFER_CONG_MGT_FW_STATE_CONGESTED         = 0,
	BUFFER_CONG_MGT_FW_STATE_IN_PROGRESS       = 1,
	BUFFER_CONG_MGT_FW_STATE_USE_DMA_FOR_SQ    = 6,
	BUFFER_CONG_MGT_FW_STATE_HAS_SQ            = 7,
	BUFFER_CONG_MGT_FW_STATE_LAST              = 7
} rdd_buffer_cong_mgt_fw_state;
/* <<<RDD_BUFFER_CONG_MGT_FW_STATE */

#endif


/* Hardware defines */

/* >>>RDD_QEMU_DATA */
#define QEMU_DATA_START_RUNNER_TRACE_F_OFFSET                                              7
#define QEMU_DATA_START_RUNNER_TRACE_F_WIDTH                                               1
#define QEMU_DATA_QEMU_DATA_OFFSET                                                         0
#define QEMU_DATA_START_RUNNER_TRACE_OFFSET                                                0
#define QEMU_DATA_START_RUNNER_TRACE_WORD_OFFSET                                           0
#define QEMU_DATA_START_RUNNER_TRACE_F_OFFSET_MOD8                                         7
#define QEMU_DATA_START_RUNNER_TRACE_F_OFFSET_MOD16                                        7
#define QEMU_DATA_STOP_RUNNER_TRACE_F_OFFSET                                               6
#define QEMU_DATA_STOP_RUNNER_TRACE_F_WIDTH                                                1
#define QEMU_DATA_STOP_RUNNER_TRACE_OFFSET                                                 0
#define QEMU_DATA_STOP_RUNNER_TRACE_WORD_OFFSET                                            0
#define QEMU_DATA_STOP_RUNNER_TRACE_F_OFFSET_MOD8                                          6
#define QEMU_DATA_STOP_RUNNER_TRACE_F_OFFSET_MOD16                                         6
#define QEMU_DATA_START_CAPTURE_WAVES_F_OFFSET                                             5
#define QEMU_DATA_START_CAPTURE_WAVES_F_WIDTH                                              1
#define QEMU_DATA_START_CAPTURE_WAVES_OFFSET                                               0
#define QEMU_DATA_START_CAPTURE_WAVES_WORD_OFFSET                                          0
#define QEMU_DATA_START_CAPTURE_WAVES_F_OFFSET_MOD8                                        5
#define QEMU_DATA_START_CAPTURE_WAVES_F_OFFSET_MOD16                                       5
#define QEMU_DATA_STOP_CAPTURE_WAVES_F_OFFSET                                              4
#define QEMU_DATA_STOP_CAPTURE_WAVES_F_WIDTH                                               1
#define QEMU_DATA_STOP_CAPTURE_WAVES_OFFSET                                                0
#define QEMU_DATA_STOP_CAPTURE_WAVES_WORD_OFFSET                                           0
#define QEMU_DATA_STOP_CAPTURE_WAVES_F_OFFSET_MOD8                                         4
#define QEMU_DATA_STOP_CAPTURE_WAVES_F_OFFSET_MOD16                                        4
#define QEMU_DATA_START_SEND_1_PACKET_ONCE_F_OFFSET                                        3
#define QEMU_DATA_START_SEND_1_PACKET_ONCE_F_WIDTH                                         1
#define QEMU_DATA_START_SEND_1_PACKET_ONCE_OFFSET                                          0
#define QEMU_DATA_START_SEND_1_PACKET_ONCE_WORD_OFFSET                                     0
#define QEMU_DATA_START_SEND_1_PACKET_ONCE_F_OFFSET_MOD8                                   3
#define QEMU_DATA_START_SEND_1_PACKET_ONCE_F_OFFSET_MOD16                                  3
#define QEMU_DATA_START_SEND_INFINISE_PACKET_F_OFFSET                                      2
#define QEMU_DATA_START_SEND_INFINISE_PACKET_F_WIDTH                                       1
#define QEMU_DATA_START_SEND_INFINISE_PACKET_OFFSET                                        0
#define QEMU_DATA_START_SEND_INFINISE_PACKET_WORD_OFFSET                                   0
#define QEMU_DATA_START_SEND_INFINISE_PACKET_F_OFFSET_MOD8                                 2
#define QEMU_DATA_START_SEND_INFINISE_PACKET_F_OFFSET_MOD16                                2
#define QEMU_DATA_DATA_PATH_READY_F_OFFSET                                                 1
#define QEMU_DATA_DATA_PATH_READY_F_WIDTH                                                  1
#define QEMU_DATA_DATA_PATH_READY_OFFSET                                                   0
#define QEMU_DATA_DATA_PATH_READY_WORD_OFFSET                                              0
#define QEMU_DATA_DATA_PATH_READY_F_OFFSET_MOD8                                            1
#define QEMU_DATA_DATA_PATH_READY_F_OFFSET_MOD16                                           1
/* <<<RDD_QEMU_DATA */


/* >>>RDD_NATC_COMMAND_DATA */
#define NATC_COMMAND_DATA_COMMAND_OVERWRITTEN_F_OFFSET                                             30
#define NATC_COMMAND_DATA_COMMAND_OVERWRITTEN_F_WIDTH                                              2
#define NATC_COMMAND_DATA_NATC_COMMAND_DATA_OFFSET                                                 0
#define NATC_COMMAND_DATA_COMMAND_OVERWRITTEN_OFFSET                                               0
#define NATC_COMMAND_DATA_COMMAND_OVERWRITTEN_WORD_OFFSET                                          0
#define NATC_COMMAND_DATA_COMMAND_OVERWRITTEN_F_OFFSET_MOD8                                        6
#define NATC_COMMAND_DATA_COMMAND_OVERWRITTEN_F_OFFSET_MOD16                                       14
#define NATC_COMMAND_DATA_TABLE_NUM_F_OFFSET                                                       27
#define NATC_COMMAND_DATA_TABLE_NUM_F_WIDTH                                                        3
#define NATC_COMMAND_DATA_TABLE_NUM_OFFSET                                                         0
#define NATC_COMMAND_DATA_TABLE_NUM_WORD_OFFSET                                                    0
#define NATC_COMMAND_DATA_TABLE_NUM_F_OFFSET_MOD8                                                  3
#define NATC_COMMAND_DATA_TABLE_NUM_F_OFFSET_MOD16                                                 11
#define NATC_COMMAND_DATA_DECR_F_OFFSET                                                            26
#define NATC_COMMAND_DATA_DECR_F_WIDTH                                                             1
#define NATC_COMMAND_DATA_DECR_OFFSET                                                              0
#define NATC_COMMAND_DATA_DECR_WORD_OFFSET                                                         0
#define NATC_COMMAND_DATA_DECR_F_OFFSET_MOD8                                                       2
#define NATC_COMMAND_DATA_DECR_F_OFFSET_MOD16                                                      10
#define NATC_COMMAND_DATA_CACHE_FLUSH_F_OFFSET                                                     25
#define NATC_COMMAND_DATA_CACHE_FLUSH_F_WIDTH                                                      1
#define NATC_COMMAND_DATA_CACHE_FLUSH_OFFSET                                                       0
#define NATC_COMMAND_DATA_CACHE_FLUSH_WORD_OFFSET                                                  0
#define NATC_COMMAND_DATA_CACHE_FLUSH_F_OFFSET_MOD8                                                1
#define NATC_COMMAND_DATA_CACHE_FLUSH_F_OFFSET_MOD16                                               9
#define NATC_COMMAND_DATA_PACKET_LEN_F_OFFSET                                                      0
#define NATC_COMMAND_DATA_PACKET_LEN_F_WIDTH                                                       16
#define NATC_COMMAND_DATA_PACKET_LEN_OFFSET                                                        2
#define NATC_COMMAND_DATA_PACKET_LEN_WORD_OFFSET                                                   0
#define NATC_COMMAND_DATA_KEY_OFFSET                                                               4
#define NATC_COMMAND_DATA_KEY_WORD_OFFSET                                                          1
#define NATC_COMMAND_DATA_KEY_F_OFFSET_MOD16                                                       8

/* >>>NATC_COMMAND_DATA_STRUCT */
#define RDD_NATC_COMMAND_DATA_KEY_NUMBER	32
typedef union
{
    uint32_t word_32[9];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	command_overwritten                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	table_num                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	decr                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cache_flush                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                                	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	packet_len                               	;
        uint8_t	key[RDD_NATC_COMMAND_DATA_KEY_NUMBER];
#else
        uint16_t	packet_len                               	;
        uint32_t	reserved0                                	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cache_flush                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	decr                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	table_num                                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	command_overwritten                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	key[RDD_NATC_COMMAND_DATA_KEY_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) NATC_COMMAND_DATA_STRUCT;

#define RDD_NATC_COMMAND_DATA_COMMAND_OVERWRITTEN_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT), 6, 2, (r))
#define RDD_NATC_COMMAND_DATA_COMMAND_OVERWRITTEN_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT), 6, 2, (v))
#define RDD_NATC_COMMAND_DATA_COMMAND_OVERWRITTEN_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 6, 2, (r))
#define RDD_NATC_COMMAND_DATA_COMMAND_OVERWRITTEN_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 6, 2, (v))
#define RDD_NATC_COMMAND_DATA_TABLE_NUM_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT), 3, 3, (r))
#define RDD_NATC_COMMAND_DATA_TABLE_NUM_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT), 3, 3, (v))
#define RDD_NATC_COMMAND_DATA_TABLE_NUM_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p), 3, 3, (r))
#define RDD_NATC_COMMAND_DATA_TABLE_NUM_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p), 3, 3, (v))
#define RDD_NATC_COMMAND_DATA_DECR_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT), 2, 1, (r))
#define RDD_NATC_COMMAND_DATA_DECR_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT), 2, 1, (v))
#define RDD_NATC_COMMAND_DATA_DECR_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_NATC_COMMAND_DATA_DECR_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_NATC_COMMAND_DATA_CACHE_FLUSH_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT), 1, 1, (r))
#define RDD_NATC_COMMAND_DATA_CACHE_FLUSH_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT), 1, 1, (v))
#define RDD_NATC_COMMAND_DATA_CACHE_FLUSH_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_NATC_COMMAND_DATA_CACHE_FLUSH_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_NATC_COMMAND_DATA_PACKET_LEN_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT) + 2, (r))
#define RDD_NATC_COMMAND_DATA_PACKET_LEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT) + 2, (v))
#define RDD_NATC_COMMAND_DATA_PACKET_LEN_READ(r, p)                          MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_NATC_COMMAND_DATA_PACKET_LEN_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_NATC_COMMAND_DATA_KEY_READ_G(r, g, idx, i)                       GROUP_MREAD_I_8((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT) + 4, i, (r))
#define RDD_NATC_COMMAND_DATA_KEY_WRITE_G(v, g, idx, i)                      GROUP_MWRITE_I_8((g), (idx)*sizeof(NATC_COMMAND_DATA_STRUCT) + 4, i, (v))
#define RDD_NATC_COMMAND_DATA_KEY_READ(r, p, i)                              MREAD_I_8((uint8_t *)(p) + 4, i, (r))
#define RDD_NATC_COMMAND_DATA_KEY_WRITE(v, p, i)                             MWRITE_I_8((uint8_t *)(p) + 4, i, (v))
/* <<<NATC_COMMAND_DATA_STRUCT */

/* <<<RDD_NATC_COMMAND_DATA */


/* >>>RDD_MCAST_RESOLUTION */
#define MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_F_OFFSET                                             0
#define MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_F_WIDTH                                              32
#define MCAST_RESOLUTION_MCAST_RESOLUTION_OFFSET                                                  0
#define MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_OFFSET                                               0
#define MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_WORD_OFFSET                                          0
#define MCAST_RESOLUTION_IPTV_REPL_0_SOP_F_OFFSET                                                 24
#define MCAST_RESOLUTION_IPTV_REPL_0_SOP_F_WIDTH                                                  8
#define MCAST_RESOLUTION_IPTV_REPL_0_SOP_OFFSET                                                   4
#define MCAST_RESOLUTION_IPTV_REPL_0_SOP_WORD_OFFSET                                              1
#define MCAST_RESOLUTION_IPTV_REPL_0_SOP_F_OFFSET_MOD16                                           8
#define MCAST_RESOLUTION_POOL_NUM_F_OFFSET                                                        22
#define MCAST_RESOLUTION_POOL_NUM_F_WIDTH                                                         2
#define MCAST_RESOLUTION_POOL_NUM_OFFSET                                                          5
#define MCAST_RESOLUTION_POOL_NUM_WORD_OFFSET                                                     1
#define MCAST_RESOLUTION_POOL_NUM_F_OFFSET_MOD8                                                   6
#define MCAST_RESOLUTION_POOL_NUM_F_OFFSET_MOD16                                                  6
#define MCAST_RESOLUTION_REPLICATIONS_F_OFFSET                                                    16
#define MCAST_RESOLUTION_REPLICATIONS_F_WIDTH                                                     6
#define MCAST_RESOLUTION_REPLICATIONS_OFFSET                                                      5
#define MCAST_RESOLUTION_REPLICATIONS_WORD_OFFSET                                                 1
#define MCAST_RESOLUTION_REPLICATIONS_F_OFFSET_MOD8                                               0
#define MCAST_RESOLUTION_REPLICATIONS_F_OFFSET_MOD16                                              0
#define MCAST_RESOLUTION_INGRESS_VPORT_F_OFFSET                                                   8
#define MCAST_RESOLUTION_INGRESS_VPORT_F_WIDTH                                                    8
#define MCAST_RESOLUTION_INGRESS_VPORT_OFFSET                                                     6
#define MCAST_RESOLUTION_INGRESS_VPORT_WORD_OFFSET                                                1
#define MCAST_RESOLUTION_INGRESS_VPORT_F_OFFSET_MOD16                                             8
#define MCAST_RESOLUTION_TC_F_OFFSET                                                              0
#define MCAST_RESOLUTION_TC_F_WIDTH                                                               3
#define MCAST_RESOLUTION_TC_OFFSET                                                                7
#define MCAST_RESOLUTION_TC_WORD_OFFSET                                                           1
#define MCAST_RESOLUTION_TC_F_OFFSET_MOD8                                                         0
#define MCAST_RESOLUTION_TC_F_OFFSET_MOD16                                                        0

/* >>>MCAST_RESOLUTION_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	egress_ports_vector	;
        uint8_t	iptv_repl_0_sop    	;
        uint32_t	pool_num           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	replications       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	ingress_vport      	;
        uint32_t	reserved1          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tc                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	egress_ports_vector	;
        uint32_t	tc                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	ingress_vport      	;
        uint32_t	replications       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pool_num           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	iptv_repl_0_sop    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) MCAST_RESOLUTION_STRUCT;

#define RDD_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT), (r))
#define RDD_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT), (v))
#define RDD_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_MCAST_RESOLUTION_EGRESS_PORTS_VECTOR_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_MCAST_RESOLUTION_IPTV_REPL_0_SOP_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT) + 4, (r))
#define RDD_MCAST_RESOLUTION_IPTV_REPL_0_SOP_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT) + 4, (v))
#define RDD_MCAST_RESOLUTION_IPTV_REPL_0_SOP_READ(r, p)                     MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_MCAST_RESOLUTION_IPTV_REPL_0_SOP_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_MCAST_RESOLUTION_POOL_NUM_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT) + 5, 6, 2, (r))
#define RDD_MCAST_RESOLUTION_POOL_NUM_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT) + 5, 6, 2, (v))
#define RDD_MCAST_RESOLUTION_POOL_NUM_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 5, 6, 2, (r))
#define RDD_MCAST_RESOLUTION_POOL_NUM_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 5, 6, 2, (v))
#define RDD_MCAST_RESOLUTION_REPLICATIONS_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT) + 5, 0, 6, (r))
#define RDD_MCAST_RESOLUTION_REPLICATIONS_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT) + 5, 0, 6, (v))
#define RDD_MCAST_RESOLUTION_REPLICATIONS_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 5, 0, 6, (r))
#define RDD_MCAST_RESOLUTION_REPLICATIONS_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 5, 0, 6, (v))
#define RDD_MCAST_RESOLUTION_INGRESS_VPORT_READ_G(r, g, idx)                GROUP_MREAD_8((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT) + 6, (r))
#define RDD_MCAST_RESOLUTION_INGRESS_VPORT_WRITE_G(v, g, idx)               GROUP_MWRITE_8((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT) + 6, (v))
#define RDD_MCAST_RESOLUTION_INGRESS_VPORT_READ(r, p)                       MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_MCAST_RESOLUTION_INGRESS_VPORT_WRITE(v, p)                      MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_MCAST_RESOLUTION_TC_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT) + 7, 0, 3, (r))
#define RDD_MCAST_RESOLUTION_TC_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MCAST_RESOLUTION_STRUCT) + 7, 0, 3, (v))
#define RDD_MCAST_RESOLUTION_TC_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 7, 0, 3, (r))
#define RDD_MCAST_RESOLUTION_TC_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 7, 0, 3, (v))
/* <<<MCAST_RESOLUTION_STRUCT */

/* <<<RDD_MCAST_RESOLUTION */


/* >>>RDD_AGGREGATED_PD_DESCRIPTOR */
#define AGGREGATED_PD_DESCRIPTOR_VALID_F_OFFSET                                                           31
#define AGGREGATED_PD_DESCRIPTOR_VALID_F_WIDTH                                                            1
#define AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_DESCRIPTOR_OFFSET                                          0
#define AGGREGATED_PD_DESCRIPTOR_VALID_OFFSET                                                             0
#define AGGREGATED_PD_DESCRIPTOR_VALID_WORD_OFFSET                                                        0
#define AGGREGATED_PD_DESCRIPTOR_VALID_F_OFFSET_MOD8                                                      7
#define AGGREGATED_PD_DESCRIPTOR_VALID_F_OFFSET_MOD16                                                     15
#define AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_F_OFFSET                                    27
#define AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_F_WIDTH                                     4
#define AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_OFFSET                                      0
#define AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_WORD_OFFSET                                 0
#define AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_F_OFFSET_MOD8                               3
#define AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_F_OFFSET_MOD16                              11
#define AGGREGATED_PD_DESCRIPTOR_PLEN_2_F_OFFSET                                                          18
#define AGGREGATED_PD_DESCRIPTOR_PLEN_2_F_WIDTH                                                           9
#define AGGREGATED_PD_DESCRIPTOR_PLEN_2_OFFSET                                                            0
#define AGGREGATED_PD_DESCRIPTOR_PLEN_2_WORD_OFFSET                                                       0
#define AGGREGATED_PD_DESCRIPTOR_PLEN_2_F_OFFSET_MOD16                                                    2
#define AGGREGATED_PD_DESCRIPTOR_PLEN_1_F_OFFSET                                                          9
#define AGGREGATED_PD_DESCRIPTOR_PLEN_1_F_WIDTH                                                           9
#define AGGREGATED_PD_DESCRIPTOR_PLEN_1_OFFSET                                                            0
#define AGGREGATED_PD_DESCRIPTOR_PLEN_1_WORD_OFFSET                                                       0
#define AGGREGATED_PD_DESCRIPTOR_PLEN_1_F_OFFSET_MOD16                                                    9
#define AGGREGATED_PD_DESCRIPTOR_PLEN_0_F_OFFSET                                                          0
#define AGGREGATED_PD_DESCRIPTOR_PLEN_0_F_WIDTH                                                           9
#define AGGREGATED_PD_DESCRIPTOR_PLEN_0_OFFSET                                                            2
#define AGGREGATED_PD_DESCRIPTOR_PLEN_0_WORD_OFFSET                                                       0
#define AGGREGATED_PD_DESCRIPTOR_PLEN_0_F_OFFSET_MOD16                                                    0
#define AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUES_F_OFFSET                                             0
#define AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUES_F_WIDTH                                              32
#define AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUES_OFFSET                                               4
#define AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUES_WORD_OFFSET                                          1
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_F_OFFSET                                                      24
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_F_WIDTH                                                       8
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_OFFSET                                                        8
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_WORD_OFFSET                                                   2
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_F_OFFSET_MOD16                                                8
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_F_OFFSET                                                      16
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_F_WIDTH                                                       8
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_OFFSET                                                        9
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_WORD_OFFSET                                                   2
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_F_OFFSET_MOD16                                                0
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_F_OFFSET                                                      8
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_F_WIDTH                                                       8
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_OFFSET                                                        10
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_WORD_OFFSET                                                   2
#define AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_F_OFFSET_MOD16                                                8
#define AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_F_OFFSET                                          0
#define AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_F_WIDTH                                           8
#define AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_OFFSET                                            11
#define AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_WORD_OFFSET                                       2
#define AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_F_OFFSET_MOD16                                    0
#define AGGREGATED_PD_DESCRIPTOR_AGG_PD_F_OFFSET                                                          31
#define AGGREGATED_PD_DESCRIPTOR_AGG_PD_F_WIDTH                                                           1
#define AGGREGATED_PD_DESCRIPTOR_AGG_PD_OFFSET                                                            12
#define AGGREGATED_PD_DESCRIPTOR_AGG_PD_WORD_OFFSET                                                       3
#define AGGREGATED_PD_DESCRIPTOR_AGG_PD_F_OFFSET_MOD8                                                     7
#define AGGREGATED_PD_DESCRIPTOR_AGG_PD_F_OFFSET_MOD16                                                    15
#define AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    30
#define AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      12
#define AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 3
#define AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               6
#define AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              14
#define AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_F_OFFSET                                                     28
#define AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_F_WIDTH                                                      2
#define AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_OFFSET                                                       12
#define AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_WORD_OFFSET                                                  3
#define AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_F_OFFSET_MOD8                                                4
#define AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_F_OFFSET_MOD16                                               12
#define AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_F_OFFSET                                                      18
#define AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_F_WIDTH                                                       10
#define AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_OFFSET                                                        12
#define AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_WORD_OFFSET                                                   3
#define AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_F_OFFSET_MOD16                                                2
#define AGGREGATED_PD_DESCRIPTOR_BUFFER_NUMBER_0_F_OFFSET                                                 0
#define AGGREGATED_PD_DESCRIPTOR_BUFFER_NUMBER_0_F_WIDTH                                                  18
#define AGGREGATED_PD_DESCRIPTOR_BUFFER_NUMBER_0_OFFSET                                                   12
#define AGGREGATED_PD_DESCRIPTOR_BUFFER_NUMBER_0_WORD_OFFSET                                              3

/* >>>AGGREGATED_PD_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	second_level_queue_3_bits5_8	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	plen_2                      	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	plen_1                      	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	plen_0                      	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	second_level_queues         	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	last                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
        uint32_t	reserved0                             	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	second_level_queue_3_bits0_4          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
        uint32_t	second_level_queue_2                  	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
        uint32_t	second_level_queue_1                  	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
        uint32_t	second_level_queue_0                  	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reserved3                             	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
        uint32_t	codel_timestamp                       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	mac_flow_3                  	;
        uint8_t	mac_flow_2                  	;
        uint8_t	mac_flow_1                  	;
        uint8_t	aggregated_pd_mac_flow      	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reservedSU1_mac_flow_3                	;
        uint8_t	reservedSU1_mac_flow_2                	;
        uint8_t	reservedSU1_mac_flow_1                	;
        uint8_t	mac_flow_0                            	; /* Member of aggregated_pd_mac_flow union */
		};
		/* Sub Union 2 */
		struct{
        uint8_t	reservedSU2_mac_flow_3                	;
        uint8_t	reservedSU2_mac_flow_2                	;
        uint8_t	reservedSU2_mac_flow_1                	;
        uint32_t	is_vport                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of aggregated_pd_mac_flow union */
        uint32_t	flow_id_0                             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of aggregated_pd_mac_flow union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	agg_pd                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_packets                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	total_plen                  	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_number_0             	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_agg_pd                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_num_packets               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_total_plen                	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fpm                                   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_agg_pd                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_num_packets               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_total_plen                	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sbpm                                  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0 union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	plen_0                      	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	plen_1                      	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	plen_2                      	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	second_level_queue_3_bits5_8	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	second_level_queues         	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reserved0                             	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
        uint32_t	last                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	second_level_queue_0                  	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
        uint32_t	second_level_queue_1                  	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
        uint32_t	second_level_queue_2                  	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
        uint32_t	second_level_queue_3_bits0_4          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	codel_timestamp                       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
        uint32_t	reserved3                             	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of second_level_queues union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	aggregated_pd_mac_flow      	; /* This is a field union */
        uint8_t	mac_flow_1                  	;
        uint8_t	mac_flow_2                  	;
        uint8_t	mac_flow_3                  	;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	mac_flow_0                            	; /* Member of aggregated_pd_mac_flow union */
        uint8_t	reservedSU1_mac_flow_1                	;
        uint8_t	reservedSU1_mac_flow_2                	;
        uint8_t	reservedSU1_mac_flow_3                	;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	flow_id_0                             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of aggregated_pd_mac_flow union */
        uint32_t	is_vport                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of aggregated_pd_mac_flow union */
        uint8_t	reservedSU2_mac_flow_1                	;
        uint8_t	reservedSU2_mac_flow_2                	;
        uint8_t	reservedSU2_mac_flow_3                	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	buffer_number_0             	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	total_plen                  	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_packets                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg_pd                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	fpm                                   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0 union */
        uint32_t	reservedSU1_total_plen                	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_num_packets               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_agg_pd                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	sbpm                                  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0 union */
        uint32_t	reservedSU2_total_plen                	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_num_packets               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_agg_pd                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) AGGREGATED_PD_DESCRIPTOR_STRUCT;

#define RDD_AGGREGATED_PD_DESCRIPTOR_VALID_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_VALID_READ(r, p)                                        FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_VALID_WRITE(v, p)                                       FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_VALID_L_READ( wv )                                      FIELD_GET( wv, 31, 1 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_VALID_L_WRITE( v, wv )                                  FIELD_SET( v, 31, 1, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT), 3, 4, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT), 3, 4, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 3, 4, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 3, 4, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_L_READ( wv )               FIELD_GET( wv, 27, 4 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS5_8_L_WRITE( v, wv )           FIELD_SET( v, 27, 4, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_2_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT), 2, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_2_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT), 2, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_2_READ(r, p)                                       FIELD_MREAD_16((uint8_t *)(p), 2, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_2_WRITE(v, p)                                      FIELD_MWRITE_16((uint8_t *)(p), 2, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_2_L_READ( wv )                                     FIELD_GET( wv, 18, 9 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_2_L_WRITE( v, wv )                                 FIELD_SET( v, 18, 9, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_1_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 0, 9, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_1_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 0, 9, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_1_READ(r, p)                                       FIELD_MREAD_32((uint8_t *)(p) + 0, 9, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_1_WRITE(v, p)                                      FIELD_MWRITE_32((uint8_t *)(p) + 0, 9, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_1_L_READ( wv )                                     FIELD_GET( wv, 9, 9 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_1_L_WRITE( v, wv )                                 FIELD_SET( v, 9, 9, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_0_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 2, 0, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_0_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 2, 0, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_0_READ(r, p)                                       FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_0_WRITE(v, p)                                      FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_0_L_READ( wv )                                     FIELD_GET( wv, 0, 9 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_PLEN_0_L_WRITE( v, wv )                                 FIELD_SET( v, 0, 9, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUES_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUES_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUES_READ(r, p)                          MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUES_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUES_L_READ( wv )                        FIELD_GET( wv, 0, 32 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUES_L_WRITE( v, wv )                    FIELD_SET( v, 0, 32, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_LAST_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 4, 7, 1, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_LAST_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 4, 7, 1, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_LAST_READ(r, p)                                         FIELD_MREAD_8((uint8_t *)(p) + 4, 7, 1, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_LAST_WRITE(v, p)                                        FIELD_MWRITE_8((uint8_t *)(p) + 4, 7, 1, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_LAST_L_READ( wv )                                       FIELD_GET( wv, 31, 1 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_LAST_L_WRITE( v, wv )                                   FIELD_SET( v, 31, 1, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS0_4_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 4, 3, 5, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS0_4_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 4, 3, 5, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS0_4_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 4, 3, 5, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS0_4_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 4, 3, 5, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS0_4_L_READ( wv )               FIELD_GET( wv, 27, 5 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_3_BITS0_4_L_WRITE( v, wv )           FIELD_SET( v, 27, 5, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_2_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 4, 2, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_2_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 4, 2, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_2_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 4, 2, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_2_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 4, 2, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_2_L_READ( wv )                       FIELD_GET( wv, 18, 9 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_2_L_WRITE( v, wv )                   FIELD_SET( v, 18, 9, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_1_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 4, 9, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_1_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 4, 9, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_1_READ(r, p)                         FIELD_MREAD_32((uint8_t *)(p) + 4, 9, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_1_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)(p) + 4, 9, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_1_L_READ( wv )                       FIELD_GET( wv, 9, 9 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_1_L_WRITE( v, wv )                   FIELD_SET( v, 9, 9, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_0_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 6, 0, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_0_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 6, 0, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_0_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_0_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_0_L_READ( wv )                       FIELD_GET( wv, 0, 9 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SECOND_LEVEL_QUEUE_0_L_WRITE( v, wv )                   FIELD_SET( v, 0, 9, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_CODEL_TIMESTAMP_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 6, 0, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_CODEL_TIMESTAMP_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 6, 0, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_CODEL_TIMESTAMP_READ(r, p)                              FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_CODEL_TIMESTAMP_WRITE(v, p)                             FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_CODEL_TIMESTAMP_L_READ( wv )                            FIELD_GET( wv, 0, 9 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_CODEL_TIMESTAMP_L_WRITE( v, wv )                        FIELD_SET( v, 0, 9, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_READ_G(r, g, idx)                            GROUP_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 8, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_WRITE_G(v, g, idx)                           GROUP_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 8, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_READ(r, p)                                   MREAD_8((uint8_t *)(p) + 8, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_WRITE(v, p)                                  MWRITE_8((uint8_t *)(p) + 8, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_L_READ( wv )                                 FIELD_GET( wv, 24, 8 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_3_L_WRITE( v, wv )                             FIELD_SET( v, 24, 8, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_READ_G(r, g, idx)                            GROUP_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_WRITE_G(v, g, idx)                           GROUP_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_READ(r, p)                                   MREAD_8((uint8_t *)(p) + 9, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_WRITE(v, p)                                  MWRITE_8((uint8_t *)(p) + 9, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_L_READ( wv )                                 FIELD_GET( wv, 16, 8 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_2_L_WRITE( v, wv )                             FIELD_SET( v, 16, 8, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_READ_G(r, g, idx)                            GROUP_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 10, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_WRITE_G(v, g, idx)                           GROUP_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 10, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_READ(r, p)                                   MREAD_8((uint8_t *)(p) + 10, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_WRITE(v, p)                                  MWRITE_8((uint8_t *)(p) + 10, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_L_READ( wv )                                 FIELD_GET( wv, 8, 8 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_1_L_WRITE( v, wv )                             FIELD_SET( v, 8, 8, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_READ_G(r, g, idx)                GROUP_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 11, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_WRITE_G(v, g, idx)               GROUP_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 11, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_READ(r, p)                       MREAD_8((uint8_t *)(p) + 11, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_WRITE(v, p)                      MWRITE_8((uint8_t *)(p) + 11, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_L_READ( wv )                     FIELD_GET( wv, 0, 8 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGGREGATED_PD_MAC_FLOW_L_WRITE( v, wv )                 FIELD_SET( v, 0, 8, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_0_READ_G(r, g, idx)                            GROUP_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 11, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_0_WRITE_G(v, g, idx)                           GROUP_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 11, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_0_READ(r, p)                                   MREAD_8((uint8_t *)(p) + 11, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_0_WRITE(v, p)                                  MWRITE_8((uint8_t *)(p) + 11, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_0_L_READ( wv )                                 FIELD_GET( wv, 0, 8 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_MAC_FLOW_0_L_WRITE( v, wv )                             FIELD_SET( v, 0, 8, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_IS_VPORT_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 11, 7, 1, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_IS_VPORT_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 11, 7, 1, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_IS_VPORT_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p) + 11, 7, 1, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_IS_VPORT_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p) + 11, 7, 1, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_IS_VPORT_L_READ( wv )                                   FIELD_GET( wv, 7, 1 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_IS_VPORT_L_WRITE( v, wv )                               FIELD_SET( v, 7, 1, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_FLOW_ID_0_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 11, 0, 7, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_FLOW_ID_0_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 11, 0, 7, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_FLOW_ID_0_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 11, 0, 7, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_FLOW_ID_0_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 11, 0, 7, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_FLOW_ID_0_L_READ( wv )                                  FIELD_GET( wv, 0, 7 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_FLOW_ID_0_L_WRITE( v, wv )                              FIELD_SET( v, 0, 7, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 7, 1, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 7, 1, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGG_PD_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGG_PD_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGG_PD_L_READ( wv )                                     FIELD_GET( wv, 31, 1 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_AGG_PD_L_WRITE( v, wv )                                 FIELD_SET( v, 31, 1, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 6, 1, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 6, 1, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_L_READ( wv )                               FIELD_GET( wv, 30, 1 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_TARGET_MEM_0_L_WRITE( v, wv )                           FIELD_SET( v, 30, 1, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 4, 2, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 4, 2, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 12, 4, 2, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 12, 4, 2, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_L_READ( wv )                                FIELD_GET( wv, 28, 2 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_NUM_PACKETS_L_WRITE( v, wv )                            FIELD_SET( v, 28, 2, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 2, 10, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 2, 10, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_READ(r, p)                                   FIELD_MREAD_16((uint8_t *)(p) + 12, 2, 10, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_WRITE(v, p)                                  FIELD_MWRITE_16((uint8_t *)(p) + 12, 2, 10, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_L_READ( wv )                                 FIELD_GET( wv, 18, 10 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_TOTAL_PLEN_L_WRITE( v, wv )                             FIELD_SET( v, 18, 10, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_BUFFER_NUMBER_0_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 0, 18, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_BUFFER_NUMBER_0_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 0, 18, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_BUFFER_NUMBER_0_READ(r, p)                              FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 18, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_BUFFER_NUMBER_0_WRITE(v, p)                             FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 18, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_BUFFER_NUMBER_0_L_READ( wv )                            FIELD_GET( wv, 0, 18 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_BUFFER_NUMBER_0_L_WRITE( v, wv )                        FIELD_SET( v, 0, 18, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_FPM_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 0, 18, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_FPM_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 0, 18, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_FPM_READ(r, p)                                          FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 18, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_FPM_WRITE(v, p)                                         FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 18, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_FPM_L_READ( wv )                                        FIELD_GET( wv, 0, 18 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_FPM_L_WRITE( v, wv )                                    FIELD_SET( v, 0, 18, wv )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SBPM_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 0, 18, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SBPM_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(AGGREGATED_PD_DESCRIPTOR_STRUCT) + 12, 0, 18, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SBPM_READ(r, p)                                         FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 18, (r))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SBPM_WRITE(v, p)                                        FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 18, (v))
#define RDD_AGGREGATED_PD_DESCRIPTOR_SBPM_L_READ( wv )                                       FIELD_GET( wv, 0, 18 )
#define RDD_AGGREGATED_PD_DESCRIPTOR_SBPM_L_WRITE( v, wv )                                   FIELD_SET( v, 0, 18, wv )
/* <<<AGGREGATED_PD_DESCRIPTOR_STRUCT */

/* <<<RDD_AGGREGATED_PD_DESCRIPTOR */


/* >>>RDD_HASH_COMMAND */
#define HASH_COMMAND_CONFIGURATION_F_OFFSET                                                   29
#define HASH_COMMAND_CONFIGURATION_F_WIDTH                                                    3
#define HASH_COMMAND_HASH_COMMAND_OFFSET                                                      0
#define HASH_COMMAND_CONFIGURATION_OFFSET                                                     0
#define HASH_COMMAND_CONFIGURATION_WORD_OFFSET                                                0
#define HASH_COMMAND_CONFIGURATION_F_OFFSET_MOD8                                              5
#define HASH_COMMAND_CONFIGURATION_F_OFFSET_MOD16                                             13
#define HASH_COMMAND_AGING_F_OFFSET                                                           28
#define HASH_COMMAND_AGING_F_WIDTH                                                            1
#define HASH_COMMAND_AGING_OFFSET                                                             0
#define HASH_COMMAND_AGING_WORD_OFFSET                                                        0
#define HASH_COMMAND_AGING_F_OFFSET_MOD8                                                      4
#define HASH_COMMAND_AGING_F_OFFSET_MOD16                                                     12
#define HASH_COMMAND_KEY_1_F_OFFSET                                                           0
#define HASH_COMMAND_KEY_1_F_WIDTH                                                            28
#define HASH_COMMAND_KEY_1_OFFSET                                                             0
#define HASH_COMMAND_KEY_1_WORD_OFFSET                                                        0
#define HASH_COMMAND_KEY_0_F_OFFSET                                                           0
#define HASH_COMMAND_KEY_0_F_WIDTH                                                            32
#define HASH_COMMAND_KEY_0_OFFSET                                                             4
#define HASH_COMMAND_KEY_0_WORD_OFFSET                                                        1

/* >>>HASH_COMMAND_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	configuration	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	aging        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	key_1        	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	key_0        	;
#else
        uint32_t	key_1        	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	aging        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	configuration	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	key_0        	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) HASH_COMMAND_STRUCT;

#define RDD_HASH_COMMAND_CONFIGURATION_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(HASH_COMMAND_STRUCT), 5, 3, (r))
#define RDD_HASH_COMMAND_CONFIGURATION_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(HASH_COMMAND_STRUCT), 5, 3, (v))
#define RDD_HASH_COMMAND_CONFIGURATION_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 5, 3, (r))
#define RDD_HASH_COMMAND_CONFIGURATION_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 5, 3, (v))
#define RDD_HASH_COMMAND_AGING_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(HASH_COMMAND_STRUCT), 4, 1, (r))
#define RDD_HASH_COMMAND_AGING_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(HASH_COMMAND_STRUCT), 4, 1, (v))
#define RDD_HASH_COMMAND_AGING_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_HASH_COMMAND_AGING_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_HASH_COMMAND_KEY_1_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32((g), (idx)*sizeof(HASH_COMMAND_STRUCT), 0, 28, (r))
#define RDD_HASH_COMMAND_KEY_1_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(HASH_COMMAND_STRUCT), 0, 28, (v))
#define RDD_HASH_COMMAND_KEY_1_READ(r, p)                         FIELD_MREAD_32((uint8_t *)(p), 0, 28, (r))
#define RDD_HASH_COMMAND_KEY_1_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)(p), 0, 28, (v))
#define RDD_HASH_COMMAND_KEY_0_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(HASH_COMMAND_STRUCT) + 4, (r))
#define RDD_HASH_COMMAND_KEY_0_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(HASH_COMMAND_STRUCT) + 4, (v))
#define RDD_HASH_COMMAND_KEY_0_READ(r, p)                         MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_HASH_COMMAND_KEY_0_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<HASH_COMMAND_STRUCT */

/* <<<RDD_HASH_COMMAND */


/* >>>RDD_PARSER */
#define PARSER_L4_PROTOCOL_F_OFFSET                                                     28
#define PARSER_L4_PROTOCOL_F_WIDTH                                                      4
#define PARSER_PARSER_OFFSET                                                            0
#define PARSER_L4_PROTOCOL_OFFSET                                                       0
#define PARSER_L4_PROTOCOL_WORD_OFFSET                                                  0
#define PARSER_L4_PROTOCOL_F_OFFSET_MOD8                                                4
#define PARSER_L4_PROTOCOL_F_OFFSET_MOD16                                               12
#define PARSER_V6_AH_F_OFFSET                                                           27
#define PARSER_V6_AH_F_WIDTH                                                            1
#define PARSER_V6_AH_OFFSET                                                             0
#define PARSER_V6_AH_WORD_OFFSET                                                        0
#define PARSER_V6_AH_F_OFFSET_MOD8                                                      3
#define PARSER_V6_AH_F_OFFSET_MOD16                                                     11
#define PARSER_V6_DEST_OPT_F_OFFSET                                                     26
#define PARSER_V6_DEST_OPT_F_WIDTH                                                      1
#define PARSER_V6_DEST_OPT_OFFSET                                                       0
#define PARSER_V6_DEST_OPT_WORD_OFFSET                                                  0
#define PARSER_V6_DEST_OPT_F_OFFSET_MOD8                                                2
#define PARSER_V6_DEST_OPT_F_OFFSET_MOD16                                               10
#define PARSER_V6_ROUTE_F_OFFSET                                                        25
#define PARSER_V6_ROUTE_F_WIDTH                                                         1
#define PARSER_V6_ROUTE_OFFSET                                                          0
#define PARSER_V6_ROUTE_WORD_OFFSET                                                     0
#define PARSER_V6_ROUTE_F_OFFSET_MOD8                                                   1
#define PARSER_V6_ROUTE_F_OFFSET_MOD16                                                  9
#define PARSER_V6_HOP_F_OFFSET                                                          24
#define PARSER_V6_HOP_F_WIDTH                                                           1
#define PARSER_V6_HOP_OFFSET                                                            0
#define PARSER_V6_HOP_WORD_OFFSET                                                       0
#define PARSER_V6_HOP_F_OFFSET_MOD8                                                     0
#define PARSER_V6_HOP_F_OFFSET_MOD16                                                    8
#define PARSER_TCP_FLAGS_F_OFFSET                                                       16
#define PARSER_TCP_FLAGS_F_WIDTH                                                        8
#define PARSER_TCP_FLAGS_OFFSET                                                         1
#define PARSER_TCP_FLAGS_WORD_OFFSET                                                    0
#define PARSER_TCP_FLAGS_F_OFFSET_MOD16                                                 0
#define PARSER_LAYER3_OFFSET_F_OFFSET                                                   8
#define PARSER_LAYER3_OFFSET_F_WIDTH                                                    8
#define PARSER_LAYER3_OFFSET_OFFSET                                                     2
#define PARSER_LAYER3_OFFSET_WORD_OFFSET                                                0
#define PARSER_LAYER3_OFFSET_F_OFFSET_MOD16                                             8
#define PARSER_LAYER4_OFFSET_F_OFFSET                                                   0
#define PARSER_LAYER4_OFFSET_F_WIDTH                                                    8
#define PARSER_LAYER4_OFFSET_OFFSET                                                     3
#define PARSER_LAYER4_OFFSET_WORD_OFFSET                                                0
#define PARSER_LAYER4_OFFSET_F_OFFSET_MOD16                                             0
#define PARSER_OUTER_VLAN_F_OFFSET                                                      16
#define PARSER_OUTER_VLAN_F_WIDTH                                                       16
#define PARSER_OUTER_VLAN_OFFSET                                                        4
#define PARSER_OUTER_VLAN_WORD_OFFSET                                                   1
#define PARSER_INNER_VLAN_F_OFFSET                                                      0
#define PARSER_INNER_VLAN_F_WIDTH                                                       16
#define PARSER_INNER_VLAN_OFFSET                                                        6
#define PARSER_INNER_VLAN_WORD_OFFSET                                                   1
#define PARSER_ETHENRNET_VERSION_F_OFFSET                                               30
#define PARSER_ETHENRNET_VERSION_F_WIDTH                                                2
#define PARSER_ETHENRNET_VERSION_OFFSET                                                 8
#define PARSER_ETHENRNET_VERSION_WORD_OFFSET                                            2
#define PARSER_ETHENRNET_VERSION_F_OFFSET_MOD8                                          6
#define PARSER_ETHENRNET_VERSION_F_OFFSET_MOD16                                         14
#define PARSER_P_TAG_F_OFFSET                                                           29
#define PARSER_P_TAG_F_WIDTH                                                            1
#define PARSER_P_TAG_OFFSET                                                             8
#define PARSER_P_TAG_WORD_OFFSET                                                        2
#define PARSER_P_TAG_F_OFFSET_MOD8                                                      5
#define PARSER_P_TAG_F_OFFSET_MOD16                                                     13
#define PARSER_VID_FILTER_HIT_F_OFFSET                                                  28
#define PARSER_VID_FILTER_HIT_F_WIDTH                                                   1
#define PARSER_VID_FILTER_HIT_OFFSET                                                    8
#define PARSER_VID_FILTER_HIT_WORD_OFFSET                                               2
#define PARSER_VID_FILTER_HIT_F_OFFSET_MOD8                                             4
#define PARSER_VID_FILTER_HIT_F_OFFSET_MOD16                                            12
#define PARSER_VID_FILTER_MATCH_F_OFFSET                                                24
#define PARSER_VID_FILTER_MATCH_F_WIDTH                                                 4
#define PARSER_VID_FILTER_MATCH_OFFSET                                                  8
#define PARSER_VID_FILTER_MATCH_WORD_OFFSET                                             2
#define PARSER_VID_FILTER_MATCH_F_OFFSET_MOD8                                           0
#define PARSER_VID_FILTER_MATCH_F_OFFSET_MOD16                                          8
#define PARSER_TAG_TYPE_F_OFFSET                                                        22
#define PARSER_TAG_TYPE_F_WIDTH                                                         2
#define PARSER_TAG_TYPE_OFFSET                                                          9
#define PARSER_TAG_TYPE_WORD_OFFSET                                                     2
#define PARSER_TAG_TYPE_F_OFFSET_MOD8                                                   6
#define PARSER_TAG_TYPE_F_OFFSET_MOD16                                                  6
#define PARSER_TPID_VLAN_0_F_OFFSET                                                     19
#define PARSER_TPID_VLAN_0_F_WIDTH                                                      3
#define PARSER_TPID_VLAN_0_OFFSET                                                       9
#define PARSER_TPID_VLAN_0_WORD_OFFSET                                                  2
#define PARSER_TPID_VLAN_0_F_OFFSET_MOD8                                                3
#define PARSER_TPID_VLAN_0_F_OFFSET_MOD16                                               3
#define PARSER_TPID_VLAN_1_F_OFFSET                                                     16
#define PARSER_TPID_VLAN_1_F_WIDTH                                                      3
#define PARSER_TPID_VLAN_1_OFFSET                                                       9
#define PARSER_TPID_VLAN_1_WORD_OFFSET                                                  2
#define PARSER_TPID_VLAN_1_F_OFFSET_MOD8                                                0
#define PARSER_TPID_VLAN_1_F_OFFSET_MOD16                                               0
#define PARSER_DA_FILTER_NUMBER_F_OFFSET                                                12
#define PARSER_DA_FILTER_NUMBER_F_WIDTH                                                 4
#define PARSER_DA_FILTER_NUMBER_OFFSET                                                  10
#define PARSER_DA_FILTER_NUMBER_WORD_OFFSET                                             2
#define PARSER_DA_FILTER_NUMBER_F_OFFSET_MOD8                                           4
#define PARSER_DA_FILTER_NUMBER_F_OFFSET_MOD16                                          12
#define PARSER_UNUSED_F_OFFSET                                                          8
#define PARSER_UNUSED_F_WIDTH                                                           4
#define PARSER_UNUSED_OFFSET                                                            10
#define PARSER_UNUSED_WORD_OFFSET                                                       2
#define PARSER_UNUSED_F_OFFSET_MOD8                                                     0
#define PARSER_UNUSED_F_OFFSET_MOD16                                                    8
#define PARSER_LAYER2_OFFSET_F_OFFSET                                                   0
#define PARSER_LAYER2_OFFSET_F_WIDTH                                                    8
#define PARSER_LAYER2_OFFSET_OFFSET                                                     11
#define PARSER_LAYER2_OFFSET_WORD_OFFSET                                                2
#define PARSER_LAYER2_OFFSET_F_OFFSET_MOD16                                             0
#define PARSER_IP_FILTER_MATCH_F_OFFSET                                                 31
#define PARSER_IP_FILTER_MATCH_F_WIDTH                                                  1
#define PARSER_IP_FILTER_MATCH_OFFSET                                                   12
#define PARSER_IP_FILTER_MATCH_WORD_OFFSET                                              3
#define PARSER_IP_FILTER_MATCH_F_OFFSET_MOD8                                            7
#define PARSER_IP_FILTER_MATCH_F_OFFSET_MOD16                                           15
#define PARSER_IP_FILTER_NUM_F_OFFSET                                                   30
#define PARSER_IP_FILTER_NUM_F_WIDTH                                                    1
#define PARSER_IP_FILTER_NUM_OFFSET                                                     12
#define PARSER_IP_FILTER_NUM_WORD_OFFSET                                                3
#define PARSER_IP_FILTER_NUM_F_OFFSET_MOD8                                              6
#define PARSER_IP_FILTER_NUM_F_OFFSET_MOD16                                             14
#define PARSER_UNUSED1_F_OFFSET                                                         25
#define PARSER_UNUSED1_F_WIDTH                                                          5
#define PARSER_UNUSED1_OFFSET                                                           12
#define PARSER_UNUSED1_WORD_OFFSET                                                      3
#define PARSER_UNUSED1_F_OFFSET_MOD8                                                    1
#define PARSER_UNUSED1_F_OFFSET_MOD16                                                   9
#define PARSER_IPV6_F_OFFSET                                                            24
#define PARSER_IPV6_F_WIDTH                                                             1
#define PARSER_IPV6_OFFSET                                                              12
#define PARSER_IPV6_WORD_OFFSET                                                         3
#define PARSER_IPV6_F_OFFSET_MOD8                                                       0
#define PARSER_IPV6_F_OFFSET_MOD16                                                      8
#define PARSER_PROTOCOL_F_OFFSET                                                        16
#define PARSER_PROTOCOL_F_WIDTH                                                         8
#define PARSER_PROTOCOL_OFFSET                                                          13
#define PARSER_PROTOCOL_WORD_OFFSET                                                     3
#define PARSER_PROTOCOL_F_OFFSET_MOD16                                                  0
#define PARSER_FRAGMENT_HEADER_OFFSET_F_OFFSET                                          8
#define PARSER_FRAGMENT_HEADER_OFFSET_F_WIDTH                                           8
#define PARSER_FRAGMENT_HEADER_OFFSET_OFFSET                                            14
#define PARSER_FRAGMENT_HEADER_OFFSET_WORD_OFFSET                                       3
#define PARSER_FRAGMENT_HEADER_OFFSET_F_OFFSET_MOD16                                    8
#define PARSER_UNUSED3_F_OFFSET                                                         4
#define PARSER_UNUSED3_F_WIDTH                                                          4
#define PARSER_UNUSED3_OFFSET                                                           15
#define PARSER_UNUSED3_WORD_OFFSET                                                      3
#define PARSER_UNUSED3_F_OFFSET_MOD8                                                    4
#define PARSER_UNUSED3_F_OFFSET_MOD16                                                   4
#define PARSER_DOS_ATTACK_REASON_F_OFFSET                                               0
#define PARSER_DOS_ATTACK_REASON_F_WIDTH                                                4
#define PARSER_DOS_ATTACK_REASON_OFFSET                                                 15
#define PARSER_DOS_ATTACK_REASON_WORD_OFFSET                                            3
#define PARSER_DOS_ATTACK_REASON_F_OFFSET_MOD8                                          0
#define PARSER_DOS_ATTACK_REASON_F_OFFSET_MOD16                                         0
#define PARSER_ICMPV6_TYPE_F_OFFSET                                                     24
#define PARSER_ICMPV6_TYPE_F_WIDTH                                                      8
#define PARSER_ICMPV6_TYPE_OFFSET                                                       16
#define PARSER_ICMPV6_TYPE_WORD_OFFSET                                                  4
#define PARSER_ICMPV6_TYPE_F_OFFSET_MOD16                                               8
#define PARSER_IP_TTL_F_OFFSET                                                          16
#define PARSER_IP_TTL_F_WIDTH                                                           8
#define PARSER_IP_TTL_OFFSET                                                            17
#define PARSER_IP_TTL_WORD_OFFSET                                                       4
#define PARSER_IP_TTL_F_OFFSET_MOD16                                                    0
#define PARSER_IP_LENGTH_F_OFFSET                                                       0
#define PARSER_IP_LENGTH_F_WIDTH                                                        16
#define PARSER_IP_LENGTH_OFFSET                                                         18
#define PARSER_IP_LENGTH_WORD_OFFSET                                                    4
#define PARSER_NOT_WRITTEN_F_OFFSET                                                     0
#define PARSER_NOT_WRITTEN_F_WIDTH                                                      32
#define PARSER_NOT_WRITTEN_OFFSET                                                       20
#define PARSER_NOT_WRITTEN_WORD_OFFSET                                                  5

/* >>>PARSER_STRUCT */
typedef union
{
    uint32_t word_32[6];
    uint64_t dword_64[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	l4_protocol           	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l4_protocol enumeration*/
        uint32_t	v6_ah                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	v6_dest_opt           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	v6_route              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	v6_hop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	tcp_flags             	;
        uint8_t	layer3_offset         	;
        uint8_t	layer4_offset         	;
        uint16_t	outer_vlan            	;
        uint16_t	inner_vlan            	;
        uint32_t	ethenrnet_version     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	p_tag                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vid_filter_hit        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vid_filter_match      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tag_type              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tpid_vlan_0           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tpid_vlan_1           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	da_filter_number      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	unused                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	layer2_offset         	;
        uint32_t	ip_filter_match       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_filter_num         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	unused1               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ipv6                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	protocol              	;
        uint8_t	fragment_header_offset	;
        uint32_t	unused3               	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dos_attack_reason     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	icmpv6_type           	;
        uint8_t	ip_ttl                	;
        uint16_t	ip_length             	;
        uint32_t	not_written           	;
#else
        uint8_t	layer4_offset         	;
        uint8_t	layer3_offset         	;
        uint8_t	tcp_flags             	;
        uint32_t	v6_hop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	v6_route              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	v6_dest_opt           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	v6_ah                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l4_protocol           	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l4_protocol enumeration*/
        uint16_t	inner_vlan            	;
        uint16_t	outer_vlan            	;
        uint8_t	layer2_offset         	;
        uint32_t	unused                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	da_filter_number      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tpid_vlan_1           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tpid_vlan_0           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tag_type              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vid_filter_match      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vid_filter_hit        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	p_tag                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ethenrnet_version     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dos_attack_reason     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	unused3               	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	fragment_header_offset	;
        uint8_t	protocol              	;
        uint32_t	ipv6                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	unused1               	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_filter_num         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_filter_match       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	ip_length             	;
        uint8_t	ip_ttl                	;
        uint8_t	icmpv6_type           	;
        uint32_t	not_written           	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PARSER_STRUCT;

#define RDD_PARSER_L4_PROTOCOL_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT), 4, 4, (r)) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_L4_PROTOCOL_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT), 4, 4, (v)) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_L4_PROTOCOL_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 4, 4, (r)) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_L4_PROTOCOL_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 4, 4, (v)) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_V6_AH_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT), 3, 1, (r))
#define RDD_PARSER_V6_AH_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT), 3, 1, (v))
#define RDD_PARSER_V6_AH_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_PARSER_V6_AH_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_PARSER_V6_DEST_OPT_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT), 2, 1, (r))
#define RDD_PARSER_V6_DEST_OPT_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT), 2, 1, (v))
#define RDD_PARSER_V6_DEST_OPT_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_PARSER_V6_DEST_OPT_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_PARSER_V6_ROUTE_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT), 1, 1, (r))
#define RDD_PARSER_V6_ROUTE_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT), 1, 1, (v))
#define RDD_PARSER_V6_ROUTE_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_PARSER_V6_ROUTE_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_PARSER_V6_HOP_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT), 0, 1, (r))
#define RDD_PARSER_V6_HOP_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT), 0, 1, (v))
#define RDD_PARSER_V6_HOP_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p), 0, 1, (r))
#define RDD_PARSER_V6_HOP_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p), 0, 1, (v))
#define RDD_PARSER_TCP_FLAGS_READ_G(r, g, idx)                       GROUP_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 1, (r))
#define RDD_PARSER_TCP_FLAGS_WRITE_G(v, g, idx)                      GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 1, (v))
#define RDD_PARSER_TCP_FLAGS_READ(r, p)                              MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_PARSER_TCP_FLAGS_WRITE(v, p)                             MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_PARSER_LAYER3_OFFSET_READ_G(r, g, idx)                   GROUP_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 2, (r))
#define RDD_PARSER_LAYER3_OFFSET_WRITE_G(v, g, idx)                  GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 2, (v))
#define RDD_PARSER_LAYER3_OFFSET_READ(r, p)                          MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_PARSER_LAYER3_OFFSET_WRITE(v, p)                         MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_PARSER_LAYER4_OFFSET_READ_G(r, g, idx)                   GROUP_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 3, (r))
#define RDD_PARSER_LAYER4_OFFSET_WRITE_G(v, g, idx)                  GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 3, (v))
#define RDD_PARSER_LAYER4_OFFSET_READ(r, p)                          MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_PARSER_LAYER4_OFFSET_WRITE(v, p)                         MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_PARSER_OUTER_VLAN_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(PARSER_STRUCT) + 4, (r))
#define RDD_PARSER_OUTER_VLAN_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_STRUCT) + 4, (v))
#define RDD_PARSER_OUTER_VLAN_READ(r, p)                             MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_PARSER_OUTER_VLAN_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_PARSER_INNER_VLAN_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(PARSER_STRUCT) + 6, (r))
#define RDD_PARSER_INNER_VLAN_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_STRUCT) + 6, (v))
#define RDD_PARSER_INNER_VLAN_READ(r, p)                             MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_PARSER_INNER_VLAN_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_PARSER_ETHENRNET_VERSION_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 8, 6, 2, (r))
#define RDD_PARSER_ETHENRNET_VERSION_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 8, 6, 2, (v))
#define RDD_PARSER_ETHENRNET_VERSION_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 2, (r))
#define RDD_PARSER_ETHENRNET_VERSION_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 2, (v))
#define RDD_PARSER_P_TAG_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 8, 5, 1, (r))
#define RDD_PARSER_P_TAG_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 8, 5, 1, (v))
#define RDD_PARSER_P_TAG_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 8, 5, 1, (r))
#define RDD_PARSER_P_TAG_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 8, 5, 1, (v))
#define RDD_PARSER_VID_FILTER_HIT_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 8, 4, 1, (r))
#define RDD_PARSER_VID_FILTER_HIT_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 8, 4, 1, (v))
#define RDD_PARSER_VID_FILTER_HIT_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 8, 4, 1, (r))
#define RDD_PARSER_VID_FILTER_HIT_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 8, 4, 1, (v))
#define RDD_PARSER_VID_FILTER_MATCH_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 8, 0, 4, (r))
#define RDD_PARSER_VID_FILTER_MATCH_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 8, 0, 4, (v))
#define RDD_PARSER_VID_FILTER_MATCH_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 8, 0, 4, (r))
#define RDD_PARSER_VID_FILTER_MATCH_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 8, 0, 4, (v))
#define RDD_PARSER_TAG_TYPE_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 9, 6, 2, (r))
#define RDD_PARSER_TAG_TYPE_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 9, 6, 2, (v))
#define RDD_PARSER_TAG_TYPE_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 9, 6, 2, (r))
#define RDD_PARSER_TAG_TYPE_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 9, 6, 2, (v))
#define RDD_PARSER_TPID_VLAN_0_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 9, 3, 3, (r))
#define RDD_PARSER_TPID_VLAN_0_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 9, 3, 3, (v))
#define RDD_PARSER_TPID_VLAN_0_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 9, 3, 3, (r))
#define RDD_PARSER_TPID_VLAN_0_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 9, 3, 3, (v))
#define RDD_PARSER_TPID_VLAN_1_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 9, 0, 3, (r))
#define RDD_PARSER_TPID_VLAN_1_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 9, 0, 3, (v))
#define RDD_PARSER_TPID_VLAN_1_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 3, (r))
#define RDD_PARSER_TPID_VLAN_1_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 3, (v))
#define RDD_PARSER_DA_FILTER_NUMBER_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 10, 4, 4, (r))
#define RDD_PARSER_DA_FILTER_NUMBER_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 10, 4, 4, (v))
#define RDD_PARSER_DA_FILTER_NUMBER_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 10, 4, 4, (r))
#define RDD_PARSER_DA_FILTER_NUMBER_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 10, 4, 4, (v))
#define RDD_PARSER_UNUSED_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 10, 0, 4, (r))
#define RDD_PARSER_UNUSED_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 10, 0, 4, (v))
#define RDD_PARSER_UNUSED_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 10, 0, 4, (r))
#define RDD_PARSER_UNUSED_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 10, 0, 4, (v))
#define RDD_PARSER_LAYER2_OFFSET_READ_G(r, g, idx)                   GROUP_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 11, (r))
#define RDD_PARSER_LAYER2_OFFSET_WRITE_G(v, g, idx)                  GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 11, (v))
#define RDD_PARSER_LAYER2_OFFSET_READ(r, p)                          MREAD_8((uint8_t *)(p) + 11, (r))
#define RDD_PARSER_LAYER2_OFFSET_WRITE(v, p)                         MWRITE_8((uint8_t *)(p) + 11, (v))
#define RDD_PARSER_IP_FILTER_MATCH_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 12, 7, 1, (r))
#define RDD_PARSER_IP_FILTER_MATCH_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 12, 7, 1, (v))
#define RDD_PARSER_IP_FILTER_MATCH_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_PARSER_IP_FILTER_MATCH_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_PARSER_IP_FILTER_NUM_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 12, 6, 1, (r))
#define RDD_PARSER_IP_FILTER_NUM_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 12, 6, 1, (v))
#define RDD_PARSER_IP_FILTER_NUM_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_PARSER_IP_FILTER_NUM_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_PARSER_UNUSED1_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 12, 1, 5, (r))
#define RDD_PARSER_UNUSED1_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 12, 1, 5, (v))
#define RDD_PARSER_UNUSED1_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 12, 1, 5, (r))
#define RDD_PARSER_UNUSED1_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 12, 1, 5, (v))
#define RDD_PARSER_IPV6_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 12, 0, 1, (r))
#define RDD_PARSER_IPV6_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 12, 0, 1, (v))
#define RDD_PARSER_IPV6_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 12, 0, 1, (r))
#define RDD_PARSER_IPV6_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 12, 0, 1, (v))
#define RDD_PARSER_PROTOCOL_READ_G(r, g, idx)                        GROUP_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 13, (r))
#define RDD_PARSER_PROTOCOL_WRITE_G(v, g, idx)                       GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 13, (v))
#define RDD_PARSER_PROTOCOL_READ(r, p)                               MREAD_8((uint8_t *)(p) + 13, (r))
#define RDD_PARSER_PROTOCOL_WRITE(v, p)                              MWRITE_8((uint8_t *)(p) + 13, (v))
#define RDD_PARSER_FRAGMENT_HEADER_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 14, (r))
#define RDD_PARSER_FRAGMENT_HEADER_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 14, (v))
#define RDD_PARSER_FRAGMENT_HEADER_OFFSET_READ(r, p)                 MREAD_8((uint8_t *)(p) + 14, (r))
#define RDD_PARSER_FRAGMENT_HEADER_OFFSET_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 14, (v))
#define RDD_PARSER_UNUSED3_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 15, 4, 4, (r))
#define RDD_PARSER_UNUSED3_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 15, 4, 4, (v))
#define RDD_PARSER_UNUSED3_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 15, 4, 4, (r))
#define RDD_PARSER_UNUSED3_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 15, 4, 4, (v))
#define RDD_PARSER_DOS_ATTACK_REASON_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 15, 0, 4, (r))
#define RDD_PARSER_DOS_ATTACK_REASON_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 15, 0, 4, (v))
#define RDD_PARSER_DOS_ATTACK_REASON_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 15, 0, 4, (r))
#define RDD_PARSER_DOS_ATTACK_REASON_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 15, 0, 4, (v))
#define RDD_PARSER_ICMPV6_TYPE_READ_G(r, g, idx)                     GROUP_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 16, (r))
#define RDD_PARSER_ICMPV6_TYPE_WRITE_G(v, g, idx)                    GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 16, (v))
#define RDD_PARSER_ICMPV6_TYPE_READ(r, p)                            MREAD_8((uint8_t *)(p) + 16, (r))
#define RDD_PARSER_ICMPV6_TYPE_WRITE(v, p)                           MWRITE_8((uint8_t *)(p) + 16, (v))
#define RDD_PARSER_IP_TTL_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(PARSER_STRUCT) + 17, (r))
#define RDD_PARSER_IP_TTL_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_STRUCT) + 17, (v))
#define RDD_PARSER_IP_TTL_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 17, (r))
#define RDD_PARSER_IP_TTL_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 17, (v))
#define RDD_PARSER_IP_LENGTH_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(PARSER_STRUCT) + 18, (r))
#define RDD_PARSER_IP_LENGTH_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_STRUCT) + 18, (v))
#define RDD_PARSER_IP_LENGTH_READ(r, p)                              MREAD_16((uint8_t *)(p) + 18, (r))
#define RDD_PARSER_IP_LENGTH_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 18, (v))
#define RDD_PARSER_NOT_WRITTEN_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(PARSER_STRUCT) + 20, (r))
#define RDD_PARSER_NOT_WRITTEN_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_STRUCT) + 20, (v))
#define RDD_PARSER_NOT_WRITTEN_READ(r, p)                            MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_PARSER_NOT_WRITTEN_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 20, (v))
/* <<<PARSER_STRUCT */

/* <<<RDD_PARSER */


/* >>>RDD_PARSER_L2_LKP_ENTRY */
#define PARSER_L2_LKP_ENTRY_DA_CRC_F_OFFSET                                                          0
#define PARSER_L2_LKP_ENTRY_DA_CRC_F_WIDTH                                                           32
#define PARSER_L2_LKP_ENTRY_PARSER_L2_LKP_ENTRY_OFFSET                                               0
#define PARSER_L2_LKP_ENTRY_DA_CRC_OFFSET                                                            0
#define PARSER_L2_LKP_ENTRY_DA_CRC_WORD_OFFSET                                                       0
#define PARSER_L2_LKP_ENTRY_SA_CRC_F_OFFSET                                                          0
#define PARSER_L2_LKP_ENTRY_SA_CRC_F_WIDTH                                                           32
#define PARSER_L2_LKP_ENTRY_SA_CRC_OFFSET                                                            4
#define PARSER_L2_LKP_ENTRY_SA_CRC_WORD_OFFSET                                                       1
#define PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_F_OFFSET                                                  0
#define PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_F_WIDTH                                                   32
#define PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_OFFSET                                                    8
#define PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_WORD_OFFSET                                               2
#define PARSER_L2_LKP_ENTRY_TOS_F_OFFSET                                                             24
#define PARSER_L2_LKP_ENTRY_TOS_F_WIDTH                                                              8
#define PARSER_L2_LKP_ENTRY_TOS_OFFSET                                                               12
#define PARSER_L2_LKP_ENTRY_TOS_WORD_OFFSET                                                          3
#define PARSER_L2_LKP_ENTRY_TOS_F_OFFSET_MOD16                                                       8
#define PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_OFFSET                                                     19
#define PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_WIDTH                                                      5
#define PARSER_L2_LKP_ENTRY_LOOKUP_PORT_OFFSET                                                       13
#define PARSER_L2_LKP_ENTRY_LOOKUP_PORT_WORD_OFFSET                                                  3
#define PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_OFFSET_MOD8                                                3
#define PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_OFFSET_MOD16                                               3
#define PARSER_L2_LKP_ENTRY_VLANS_NUM_F_OFFSET                                                       16
#define PARSER_L2_LKP_ENTRY_VLANS_NUM_F_WIDTH                                                        3
#define PARSER_L2_LKP_ENTRY_VLANS_NUM_OFFSET                                                         13
#define PARSER_L2_LKP_ENTRY_VLANS_NUM_WORD_OFFSET                                                    3
#define PARSER_L2_LKP_ENTRY_VLANS_NUM_F_OFFSET_MOD8                                                  0
#define PARSER_L2_LKP_ENTRY_VLANS_NUM_F_OFFSET_MOD16                                                 0
#define PARSER_L2_LKP_ENTRY_VALID_F_OFFSET                                                           15
#define PARSER_L2_LKP_ENTRY_VALID_F_WIDTH                                                            1
#define PARSER_L2_LKP_ENTRY_VALID_OFFSET                                                             14
#define PARSER_L2_LKP_ENTRY_VALID_WORD_OFFSET                                                        3
#define PARSER_L2_LKP_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define PARSER_L2_LKP_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET                                                    14
#define PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_WIDTH                                                     1
#define PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_OFFSET                                                      14
#define PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_WORD_OFFSET                                                 3
#define PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET_MOD8                                               6
#define PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET_MOD16                                              14
#define PARSER_L2_LKP_ENTRY_LLC_SNAP_F_OFFSET                                                        13
#define PARSER_L2_LKP_ENTRY_LLC_SNAP_F_WIDTH                                                         1
#define PARSER_L2_LKP_ENTRY_LLC_SNAP_OFFSET                                                          14
#define PARSER_L2_LKP_ENTRY_LLC_SNAP_WORD_OFFSET                                                     3
#define PARSER_L2_LKP_ENTRY_LLC_SNAP_F_OFFSET_MOD8                                                   5
#define PARSER_L2_LKP_ENTRY_LLC_SNAP_F_OFFSET_MOD16                                                  13
#define PARSER_L2_LKP_ENTRY_CTX_EXT_F_OFFSET                                                         12
#define PARSER_L2_LKP_ENTRY_CTX_EXT_F_WIDTH                                                          1
#define PARSER_L2_LKP_ENTRY_CTX_EXT_OFFSET                                                           14
#define PARSER_L2_LKP_ENTRY_CTX_EXT_WORD_OFFSET                                                      3
#define PARSER_L2_LKP_ENTRY_CTX_EXT_F_OFFSET_MOD8                                                    4
#define PARSER_L2_LKP_ENTRY_CTX_EXT_F_OFFSET_MOD16                                                   12
#define PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_OFFSET                                                     0
#define PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_WIDTH                                                      4
#define PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_OFFSET                                                       15
#define PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_WORD_OFFSET                                                  3
#define PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_OFFSET_MOD8                                                0
#define PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_OFFSET_MOD16                                               0

/* >>>PARSER_L2_LKP_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	da_crc        	;
        uint32_t	sa_crc        	;
        uint32_t	vlan_etype_crc	;
        uint8_t	tos           	;
        uint32_t	lookup_port   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vlans_num     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcp_pure_ack  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	llc_snap      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ctx_ext       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	var_len_ctx   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	da_crc        	;
        uint32_t	sa_crc        	;
        uint32_t	vlan_etype_crc	;
        uint32_t	var_len_ctx   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ctx_ext       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	llc_snap      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcp_pure_ack  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vlans_num     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lookup_port   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	tos           	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PARSER_L2_LKP_ENTRY_STRUCT;

#define RDD_PARSER_L2_LKP_ENTRY_DA_CRC_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT), (r))
#define RDD_PARSER_L2_LKP_ENTRY_DA_CRC_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT), (v))
#define RDD_PARSER_L2_LKP_ENTRY_DA_CRC_READ(r, p)                         MREAD_32((uint8_t *)(p), (r))
#define RDD_PARSER_L2_LKP_ENTRY_DA_CRC_WRITE(v, p)                        MWRITE_32((uint8_t *)(p), (v))
#define RDD_PARSER_L2_LKP_ENTRY_SA_CRC_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 4, (r))
#define RDD_PARSER_L2_LKP_ENTRY_SA_CRC_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 4, (v))
#define RDD_PARSER_L2_LKP_ENTRY_SA_CRC_READ(r, p)                         MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_PARSER_L2_LKP_ENTRY_SA_CRC_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 8, (r))
#define RDD_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 8, (v))
#define RDD_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_READ(r, p)                 MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_PARSER_L2_LKP_ENTRY_TOS_READ_G(r, g, idx)                     GROUP_MREAD_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_PARSER_L2_LKP_ENTRY_TOS_WRITE_G(v, g, idx)                    GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_PARSER_L2_LKP_ENTRY_TOS_READ(r, p)                            MREAD_8((uint8_t *)(p) + 12, (r))
#define RDD_PARSER_L2_LKP_ENTRY_TOS_WRITE(v, p)                           MWRITE_8((uint8_t *)(p) + 12, (v))
#define RDD_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 13, 3, 5, (r))
#define RDD_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 13, 3, 5, (v))
#define RDD_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 13, 3, 5, (r))
#define RDD_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 13, 3, 5, (v))
#define RDD_PARSER_L2_LKP_ENTRY_VLANS_NUM_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 13, 0, 3, (r))
#define RDD_PARSER_L2_LKP_ENTRY_VLANS_NUM_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 13, 0, 3, (v))
#define RDD_PARSER_L2_LKP_ENTRY_VLANS_NUM_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 3, (r))
#define RDD_PARSER_L2_LKP_ENTRY_VLANS_NUM_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 3, (v))
#define RDD_PARSER_L2_LKP_ENTRY_VALID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 14, 7, 1, (r))
#define RDD_PARSER_L2_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 14, 7, 1, (v))
#define RDD_PARSER_L2_LKP_ENTRY_VALID_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 14, 7, 1, (r))
#define RDD_PARSER_L2_LKP_ENTRY_VALID_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 14, 7, 1, (v))
#define RDD_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 14, 6, 1, (r))
#define RDD_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 14, 6, 1, (v))
#define RDD_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 14, 6, 1, (r))
#define RDD_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 14, 6, 1, (v))
#define RDD_PARSER_L2_LKP_ENTRY_LLC_SNAP_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 14, 5, 1, (r))
#define RDD_PARSER_L2_LKP_ENTRY_LLC_SNAP_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 14, 5, 1, (v))
#define RDD_PARSER_L2_LKP_ENTRY_LLC_SNAP_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 14, 5, 1, (r))
#define RDD_PARSER_L2_LKP_ENTRY_LLC_SNAP_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 14, 5, 1, (v))
#define RDD_PARSER_L2_LKP_ENTRY_CTX_EXT_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 14, 4, 1, (r))
#define RDD_PARSER_L2_LKP_ENTRY_CTX_EXT_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 14, 4, 1, (v))
#define RDD_PARSER_L2_LKP_ENTRY_CTX_EXT_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 14, 4, 1, (r))
#define RDD_PARSER_L2_LKP_ENTRY_CTX_EXT_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 14, 4, 1, (v))
#define RDD_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 15, 0, 4, (r))
#define RDD_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L2_LKP_ENTRY_STRUCT) + 15, 0, 4, (v))
#define RDD_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 15, 0, 4, (r))
#define RDD_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 15, 0, 4, (v))
/* <<<PARSER_L2_LKP_ENTRY_STRUCT */

/* <<<RDD_PARSER_L2_LKP_ENTRY */


/* >>>RDD_PARSER_L3_LKP_ENTRY */
#define PARSER_L3_LKP_ENTRY_SRC_IP_F_OFFSET                                                          0
#define PARSER_L3_LKP_ENTRY_SRC_IP_F_WIDTH                                                           32
#define PARSER_L3_LKP_ENTRY_PARSER_L3_LKP_ENTRY_OFFSET                                               0
#define PARSER_L3_LKP_ENTRY_SRC_IP_OFFSET                                                            0
#define PARSER_L3_LKP_ENTRY_SRC_IP_WORD_OFFSET                                                       0
#define PARSER_L3_LKP_ENTRY_DST_IP_F_OFFSET                                                          0
#define PARSER_L3_LKP_ENTRY_DST_IP_F_WIDTH                                                           32
#define PARSER_L3_LKP_ENTRY_DST_IP_OFFSET                                                            4
#define PARSER_L3_LKP_ENTRY_DST_IP_WORD_OFFSET                                                       1
#define PARSER_L3_LKP_ENTRY_SRC_PORT_F_OFFSET                                                        16
#define PARSER_L3_LKP_ENTRY_SRC_PORT_F_WIDTH                                                         16
#define PARSER_L3_LKP_ENTRY_SRC_PORT_OFFSET                                                          8
#define PARSER_L3_LKP_ENTRY_SRC_PORT_WORD_OFFSET                                                     2
#define PARSER_L3_LKP_ENTRY_DST_PORT_F_OFFSET                                                        0
#define PARSER_L3_LKP_ENTRY_DST_PORT_F_WIDTH                                                         16
#define PARSER_L3_LKP_ENTRY_DST_PORT_OFFSET                                                          10
#define PARSER_L3_LKP_ENTRY_DST_PORT_WORD_OFFSET                                                     2
#define PARSER_L3_LKP_ENTRY_L3_LKP_TOS_F_OFFSET                                                      0
#define PARSER_L3_LKP_ENTRY_L3_LKP_TOS_F_WIDTH                                                       32
#define PARSER_L3_LKP_ENTRY_L3_LKP_TOS_OFFSET                                                        12
#define PARSER_L3_LKP_ENTRY_L3_LKP_TOS_WORD_OFFSET                                                   3
#define PARSER_L3_LKP_ENTRY_NOT_WRITTEN_F_OFFSET                                                     0
#define PARSER_L3_LKP_ENTRY_NOT_WRITTEN_F_WIDTH                                                      32
#define PARSER_L3_LKP_ENTRY_NOT_WRITTEN_OFFSET                                                       16
#define PARSER_L3_LKP_ENTRY_NOT_WRITTEN_WORD_OFFSET                                                  4

/* >>>PARSER_L3_LKP_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[5];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	src_ip              	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dst_ip              	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	src_port            	;
        uint16_t	dst_port            	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	l3_lkp_tos          	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	tos                           	; /* Member of L3_LKP_TOS union */
        uint32_t	lookup_port                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	vlans_num                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	valid                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	tcp_pure_ack                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	ipv6                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	ctx_ext                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	protocol                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */ /*defined by rdd_parser_l3_protocol enumeration*/
        uint32_t	var_len_ctx                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	l3_lkp_tos_port_vlan          	; /* Member of L3_LKP_TOS union */
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	not_written         	;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	src_ip              	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dst_ip              	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	dst_port            	;
        uint16_t	src_port            	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	l3_lkp_tos          	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	var_len_ctx                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	protocol                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */ /*defined by rdd_parser_l3_protocol enumeration*/
        uint32_t	ctx_ext                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	ipv6                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	tcp_pure_ack                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	valid                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	vlans_num                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint32_t	lookup_port                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of L3_LKP_TOS union */
        uint8_t	tos                           	; /* Member of L3_LKP_TOS union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	l3_lkp_tos_port_vlan          	; /* Member of L3_LKP_TOS union */
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	not_written         	;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) PARSER_L3_LKP_ENTRY_STRUCT;

#define RDD_PARSER_L3_LKP_ENTRY_SRC_IP_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT), (r))
#define RDD_PARSER_L3_LKP_ENTRY_SRC_IP_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT), (v))
#define RDD_PARSER_L3_LKP_ENTRY_SRC_IP_READ(r, p)                               MREAD_32((uint8_t *)(p), (r))
#define RDD_PARSER_L3_LKP_ENTRY_SRC_IP_WRITE(v, p)                              MWRITE_32((uint8_t *)(p), (v))
#define RDD_PARSER_L3_LKP_ENTRY_DST_IP_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 4, (r))
#define RDD_PARSER_L3_LKP_ENTRY_DST_IP_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 4, (v))
#define RDD_PARSER_L3_LKP_ENTRY_DST_IP_READ(r, p)                               MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_PARSER_L3_LKP_ENTRY_DST_IP_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_PARSER_L3_LKP_ENTRY_SRC_PORT_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 8, (r))
#define RDD_PARSER_L3_LKP_ENTRY_SRC_PORT_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 8, (v))
#define RDD_PARSER_L3_LKP_ENTRY_SRC_PORT_READ(r, p)                             MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_PARSER_L3_LKP_ENTRY_SRC_PORT_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_PARSER_L3_LKP_ENTRY_DST_PORT_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 10, (r))
#define RDD_PARSER_L3_LKP_ENTRY_DST_PORT_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 10, (v))
#define RDD_PARSER_L3_LKP_ENTRY_DST_PORT_READ(r, p)                             MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_PARSER_L3_LKP_ENTRY_DST_PORT_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_READ(r, p)                           MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_PARSER_L3_LKP_ENTRY_TOS_READ_G(r, g, idx)                           GROUP_MREAD_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_PARSER_L3_LKP_ENTRY_TOS_WRITE_G(v, g, idx)                          GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_PARSER_L3_LKP_ENTRY_TOS_READ(r, p)                                  MREAD_8((uint8_t *)(p) + 12, (r))
#define RDD_PARSER_L3_LKP_ENTRY_TOS_WRITE(v, p)                                 MWRITE_8((uint8_t *)(p) + 12, (v))
#define RDD_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 13, 3, 5, (r))
#define RDD_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 13, 3, 5, (v))
#define RDD_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 13, 3, 5, (r))
#define RDD_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 13, 3, 5, (v))
#define RDD_PARSER_L3_LKP_ENTRY_VLANS_NUM_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 13, 0, 3, (r))
#define RDD_PARSER_L3_LKP_ENTRY_VLANS_NUM_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 13, 0, 3, (v))
#define RDD_PARSER_L3_LKP_ENTRY_VLANS_NUM_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 3, (r))
#define RDD_PARSER_L3_LKP_ENTRY_VLANS_NUM_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 3, (v))
#define RDD_PARSER_L3_LKP_ENTRY_VALID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 14, 7, 1, (r))
#define RDD_PARSER_L3_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 14, 7, 1, (v))
#define RDD_PARSER_L3_LKP_ENTRY_VALID_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 14, 7, 1, (r))
#define RDD_PARSER_L3_LKP_ENTRY_VALID_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 14, 7, 1, (v))
#define RDD_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 14, 6, 1, (r))
#define RDD_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 14, 6, 1, (v))
#define RDD_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 14, 6, 1, (r))
#define RDD_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 14, 6, 1, (v))
#define RDD_PARSER_L3_LKP_ENTRY_IPV6_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 14, 5, 1, (r))
#define RDD_PARSER_L3_LKP_ENTRY_IPV6_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 14, 5, 1, (v))
#define RDD_PARSER_L3_LKP_ENTRY_IPV6_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 14, 5, 1, (r))
#define RDD_PARSER_L3_LKP_ENTRY_IPV6_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 14, 5, 1, (v))
#define RDD_PARSER_L3_LKP_ENTRY_CTX_EXT_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 14, 4, 1, (r))
#define RDD_PARSER_L3_LKP_ENTRY_CTX_EXT_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 14, 4, 1, (v))
#define RDD_PARSER_L3_LKP_ENTRY_CTX_EXT_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 14, 4, 1, (r))
#define RDD_PARSER_L3_LKP_ENTRY_CTX_EXT_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 14, 4, 1, (v))
#define RDD_PARSER_L3_LKP_ENTRY_PROTOCOL_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 14, 4, 8, (r)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_L3_LKP_ENTRY_PROTOCOL_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 14, 4, 8, (v)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_L3_LKP_ENTRY_PROTOCOL_READ(r, p)                             FIELD_MREAD_16((uint8_t *)(p) + 14, 4, 8, (r)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_L3_LKP_ENTRY_PROTOCOL_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)(p) + 14, 4, 8, (v)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 15, 0, 4, (r))
#define RDD_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 15, 0, 4, (v))
#define RDD_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 15, 0, 4, (r))
#define RDD_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 15, 0, 4, (v))
#define RDD_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_READ(r, p)                 MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 16, (r))
#define RDD_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_L3_LKP_ENTRY_STRUCT) + 16, (v))
#define RDD_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_READ(r, p)                          MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 16, (v))
/* <<<PARSER_L3_LKP_ENTRY_STRUCT */

/* <<<RDD_PARSER_L3_LKP_ENTRY */


/* >>>RDD_PARSER_IC_LKP_ENTRY */
#define PARSER_IC_LKP_ENTRY_DA_CRC_F_OFFSET                                                          0
#define PARSER_IC_LKP_ENTRY_DA_CRC_F_WIDTH                                                           32
#define PARSER_IC_LKP_ENTRY_PARSER_IC_LKP_ENTRY_OFFSET                                               0
#define PARSER_IC_LKP_ENTRY_DA_CRC_OFFSET                                                            0
#define PARSER_IC_LKP_ENTRY_DA_CRC_WORD_OFFSET                                                       0
#define PARSER_IC_LKP_ENTRY_SA_CRC_F_OFFSET                                                          0
#define PARSER_IC_LKP_ENTRY_SA_CRC_F_WIDTH                                                           32
#define PARSER_IC_LKP_ENTRY_SA_CRC_OFFSET                                                            4
#define PARSER_IC_LKP_ENTRY_SA_CRC_WORD_OFFSET                                                       1
#define PARSER_IC_LKP_ENTRY_SRC_IP_F_OFFSET                                                          0
#define PARSER_IC_LKP_ENTRY_SRC_IP_F_WIDTH                                                           32
#define PARSER_IC_LKP_ENTRY_SRC_IP_OFFSET                                                            8
#define PARSER_IC_LKP_ENTRY_SRC_IP_WORD_OFFSET                                                       2
#define PARSER_IC_LKP_ENTRY_DST_IP_F_OFFSET                                                          0
#define PARSER_IC_LKP_ENTRY_DST_IP_F_WIDTH                                                           32
#define PARSER_IC_LKP_ENTRY_DST_IP_OFFSET                                                            12
#define PARSER_IC_LKP_ENTRY_DST_IP_WORD_OFFSET                                                       3
#define PARSER_IC_LKP_ENTRY_SRC_PORT_F_OFFSET                                                        16
#define PARSER_IC_LKP_ENTRY_SRC_PORT_F_WIDTH                                                         16
#define PARSER_IC_LKP_ENTRY_SRC_PORT_OFFSET                                                          16
#define PARSER_IC_LKP_ENTRY_SRC_PORT_WORD_OFFSET                                                     4
#define PARSER_IC_LKP_ENTRY_DST_PORT_F_OFFSET                                                        0
#define PARSER_IC_LKP_ENTRY_DST_PORT_F_WIDTH                                                         16
#define PARSER_IC_LKP_ENTRY_DST_PORT_OFFSET                                                          18
#define PARSER_IC_LKP_ENTRY_DST_PORT_WORD_OFFSET                                                     4
#define PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_F_OFFSET                                                   16
#define PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_F_WIDTH                                                    16
#define PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_OFFSET                                                     20
#define PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_WORD_OFFSET                                                5
#define PARSER_IC_LKP_ENTRY_PROTOCOL_F_OFFSET                                                        8
#define PARSER_IC_LKP_ENTRY_PROTOCOL_F_WIDTH                                                         8
#define PARSER_IC_LKP_ENTRY_PROTOCOL_OFFSET                                                          22
#define PARSER_IC_LKP_ENTRY_PROTOCOL_WORD_OFFSET                                                     5
#define PARSER_IC_LKP_ENTRY_PROTOCOL_F_OFFSET_MOD16                                                  8
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_0_F_OFFSET                                                     5
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_0_F_WIDTH                                                      3
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_0_OFFSET                                                       23
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_0_WORD_OFFSET                                                  5
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_0_F_OFFSET_MOD8                                                5
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_0_F_OFFSET_MOD16                                               5
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_1_F_OFFSET                                                     2
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_1_F_WIDTH                                                      3
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_1_OFFSET                                                       23
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_1_WORD_OFFSET                                                  5
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_1_F_OFFSET_MOD8                                                2
#define PARSER_IC_LKP_ENTRY_TPID_VLAN_1_F_OFFSET_MOD16                                               2
#define PARSER_IC_LKP_ENTRY_IPV6_F_OFFSET                                                            1
#define PARSER_IC_LKP_ENTRY_IPV6_F_WIDTH                                                             1
#define PARSER_IC_LKP_ENTRY_IPV6_OFFSET                                                              23
#define PARSER_IC_LKP_ENTRY_IPV6_WORD_OFFSET                                                         5
#define PARSER_IC_LKP_ENTRY_IPV6_F_OFFSET_MOD8                                                       1
#define PARSER_IC_LKP_ENTRY_IPV6_F_OFFSET_MOD16                                                      1
#define PARSER_IC_LKP_ENTRY_IPV4_F_OFFSET                                                            0
#define PARSER_IC_LKP_ENTRY_IPV4_F_WIDTH                                                             1
#define PARSER_IC_LKP_ENTRY_IPV4_OFFSET                                                              23
#define PARSER_IC_LKP_ENTRY_IPV4_WORD_OFFSET                                                         5
#define PARSER_IC_LKP_ENTRY_IPV4_F_OFFSET_MOD8                                                       0
#define PARSER_IC_LKP_ENTRY_IPV4_F_OFFSET_MOD16                                                      0
#define PARSER_IC_LKP_ENTRY_OUTER_PBIT_F_OFFSET                                                      29
#define PARSER_IC_LKP_ENTRY_OUTER_PBIT_F_WIDTH                                                       3
#define PARSER_IC_LKP_ENTRY_OUTER_PBIT_OFFSET                                                        24
#define PARSER_IC_LKP_ENTRY_OUTER_PBIT_WORD_OFFSET                                                   6
#define PARSER_IC_LKP_ENTRY_OUTER_PBIT_F_OFFSET_MOD8                                                 5
#define PARSER_IC_LKP_ENTRY_OUTER_PBIT_F_OFFSET_MOD16                                                13
#define PARSER_IC_LKP_ENTRY_OUTER_CFI_F_OFFSET                                                       28
#define PARSER_IC_LKP_ENTRY_OUTER_CFI_F_WIDTH                                                        1
#define PARSER_IC_LKP_ENTRY_OUTER_CFI_OFFSET                                                         24
#define PARSER_IC_LKP_ENTRY_OUTER_CFI_WORD_OFFSET                                                    6
#define PARSER_IC_LKP_ENTRY_OUTER_CFI_F_OFFSET_MOD8                                                  4
#define PARSER_IC_LKP_ENTRY_OUTER_CFI_F_OFFSET_MOD16                                                 12
#define PARSER_IC_LKP_ENTRY_OUTER_VID_F_OFFSET                                                       16
#define PARSER_IC_LKP_ENTRY_OUTER_VID_F_WIDTH                                                        12
#define PARSER_IC_LKP_ENTRY_OUTER_VID_OFFSET                                                         24
#define PARSER_IC_LKP_ENTRY_OUTER_VID_WORD_OFFSET                                                    6
#define PARSER_IC_LKP_ENTRY_OUTER_VID_F_OFFSET_MOD16                                                 0
#define PARSER_IC_LKP_ENTRY_INNER_PBIT_F_OFFSET                                                      13
#define PARSER_IC_LKP_ENTRY_INNER_PBIT_F_WIDTH                                                       3
#define PARSER_IC_LKP_ENTRY_INNER_PBIT_OFFSET                                                        26
#define PARSER_IC_LKP_ENTRY_INNER_PBIT_WORD_OFFSET                                                   6
#define PARSER_IC_LKP_ENTRY_INNER_PBIT_F_OFFSET_MOD8                                                 5
#define PARSER_IC_LKP_ENTRY_INNER_PBIT_F_OFFSET_MOD16                                                13
#define PARSER_IC_LKP_ENTRY_INNER_CFI_F_OFFSET                                                       12
#define PARSER_IC_LKP_ENTRY_INNER_CFI_F_WIDTH                                                        1
#define PARSER_IC_LKP_ENTRY_INNER_CFI_OFFSET                                                         26
#define PARSER_IC_LKP_ENTRY_INNER_CFI_WORD_OFFSET                                                    6
#define PARSER_IC_LKP_ENTRY_INNER_CFI_F_OFFSET_MOD8                                                  4
#define PARSER_IC_LKP_ENTRY_INNER_CFI_F_OFFSET_MOD16                                                 12
#define PARSER_IC_LKP_ENTRY_INNER_VID_F_OFFSET                                                       0
#define PARSER_IC_LKP_ENTRY_INNER_VID_F_WIDTH                                                        12
#define PARSER_IC_LKP_ENTRY_INNER_VID_OFFSET                                                         26
#define PARSER_IC_LKP_ENTRY_INNER_VID_WORD_OFFSET                                                    6
#define PARSER_IC_LKP_ENTRY_INNER_VID_F_OFFSET_MOD16                                                 0
#define PARSER_IC_LKP_ENTRY_TOS_F_OFFSET                                                             24
#define PARSER_IC_LKP_ENTRY_TOS_F_WIDTH                                                              8
#define PARSER_IC_LKP_ENTRY_TOS_OFFSET                                                               28
#define PARSER_IC_LKP_ENTRY_TOS_WORD_OFFSET                                                          7
#define PARSER_IC_LKP_ENTRY_TOS_F_OFFSET_MOD16                                                       8
#define PARSER_IC_LKP_ENTRY_LOOKUP_PORT_F_OFFSET                                                     19
#define PARSER_IC_LKP_ENTRY_LOOKUP_PORT_F_WIDTH                                                      5
#define PARSER_IC_LKP_ENTRY_LOOKUP_PORT_OFFSET                                                       29
#define PARSER_IC_LKP_ENTRY_LOOKUP_PORT_WORD_OFFSET                                                  7
#define PARSER_IC_LKP_ENTRY_LOOKUP_PORT_F_OFFSET_MOD8                                                3
#define PARSER_IC_LKP_ENTRY_LOOKUP_PORT_F_OFFSET_MOD16                                               3
#define PARSER_IC_LKP_ENTRY_VLANS_NUM_F_OFFSET                                                       16
#define PARSER_IC_LKP_ENTRY_VLANS_NUM_F_WIDTH                                                        3
#define PARSER_IC_LKP_ENTRY_VLANS_NUM_OFFSET                                                         29
#define PARSER_IC_LKP_ENTRY_VLANS_NUM_WORD_OFFSET                                                    7
#define PARSER_IC_LKP_ENTRY_VLANS_NUM_F_OFFSET_MOD8                                                  0
#define PARSER_IC_LKP_ENTRY_VLANS_NUM_F_OFFSET_MOD16                                                 0
#define PARSER_IC_LKP_ENTRY_MC_L3_F_OFFSET                                                           15
#define PARSER_IC_LKP_ENTRY_MC_L3_F_WIDTH                                                            1
#define PARSER_IC_LKP_ENTRY_MC_L3_OFFSET                                                             30
#define PARSER_IC_LKP_ENTRY_MC_L3_WORD_OFFSET                                                        7
#define PARSER_IC_LKP_ENTRY_MC_L3_F_OFFSET_MOD8                                                      7
#define PARSER_IC_LKP_ENTRY_MC_L3_F_OFFSET_MOD16                                                     15
#define PARSER_IC_LKP_ENTRY_BC_F_OFFSET                                                              14
#define PARSER_IC_LKP_ENTRY_BC_F_WIDTH                                                               1
#define PARSER_IC_LKP_ENTRY_BC_OFFSET                                                                30
#define PARSER_IC_LKP_ENTRY_BC_WORD_OFFSET                                                           7
#define PARSER_IC_LKP_ENTRY_BC_F_OFFSET_MOD8                                                         6
#define PARSER_IC_LKP_ENTRY_BC_F_OFFSET_MOD16                                                        14
#define PARSER_IC_LKP_ENTRY_MC_F_OFFSET                                                              13
#define PARSER_IC_LKP_ENTRY_MC_F_WIDTH                                                               1
#define PARSER_IC_LKP_ENTRY_MC_OFFSET                                                                30
#define PARSER_IC_LKP_ENTRY_MC_WORD_OFFSET                                                           7
#define PARSER_IC_LKP_ENTRY_MC_F_OFFSET_MOD8                                                         5
#define PARSER_IC_LKP_ENTRY_MC_F_OFFSET_MOD16                                                        13
#define PARSER_IC_LKP_ENTRY_NETWORK_LAYER_F_OFFSET                                                   12
#define PARSER_IC_LKP_ENTRY_NETWORK_LAYER_F_WIDTH                                                    1
#define PARSER_IC_LKP_ENTRY_NETWORK_LAYER_OFFSET                                                     30
#define PARSER_IC_LKP_ENTRY_NETWORK_LAYER_WORD_OFFSET                                                7
#define PARSER_IC_LKP_ENTRY_NETWORK_LAYER_F_OFFSET_MOD8                                              4
#define PARSER_IC_LKP_ENTRY_NETWORK_LAYER_F_OFFSET_MOD16                                             12
#define PARSER_IC_LKP_ENTRY_TABLE_ID_F_OFFSET                                                        8
#define PARSER_IC_LKP_ENTRY_TABLE_ID_F_WIDTH                                                         1
#define PARSER_IC_LKP_ENTRY_TABLE_ID_OFFSET                                                          30
#define PARSER_IC_LKP_ENTRY_TABLE_ID_WORD_OFFSET                                                     7
#define PARSER_IC_LKP_ENTRY_TABLE_ID_F_OFFSET_MOD8                                                   0
#define PARSER_IC_LKP_ENTRY_TABLE_ID_F_OFFSET_MOD16                                                  8
#define PARSER_IC_LKP_ENTRY_GEM_SSID_F_OFFSET                                                        0
#define PARSER_IC_LKP_ENTRY_GEM_SSID_F_WIDTH                                                         8
#define PARSER_IC_LKP_ENTRY_GEM_SSID_OFFSET                                                          31
#define PARSER_IC_LKP_ENTRY_GEM_SSID_WORD_OFFSET                                                     7
#define PARSER_IC_LKP_ENTRY_GEM_SSID_F_OFFSET_MOD16                                                  0

/* >>>PARSER_IC_LKP_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[8];
    uint64_t dword_64[4];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	da_crc       	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	sa_crc       	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	src_ip       	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dst_ip       	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	src_port     	;
        uint16_t	dst_port     	;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	ethernet_type	;
        uint8_t	protocol     	;
        uint32_t	tpid_vlan_0  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tpid_vlan_1  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ipv6         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ipv4         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	outer_pbit   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	outer_cfi    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	outer_vid    	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	inner_pbit   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	inner_cfi    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	inner_vid    	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	tos          	;
        uint32_t	lookup_port  	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vlans_num    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_l3        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bc           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	network_layer	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	table_id     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	gem_ssid     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reservedSU1_tos        	;
        uint32_t	reservedSU1_lookup_port	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_vlans_num  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mc_l3      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_bc         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mc         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_network_layer	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved3  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_table_id   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	gem                    	; /* Member of gem_ssid union */
		};
		/* Sub Union 2 */
		struct{
        uint8_t	reservedSU2_tos        	;
        uint32_t	reservedSU2_lookup_port	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_vlans_num  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mc_l3      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_bc         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mc         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_network_layer	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved3  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_table_id   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of gem_ssid union */
        uint32_t	ssid                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of gem_ssid union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	da_crc       	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	sa_crc       	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	src_ip       	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dst_ip       	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	dst_port     	;
        uint16_t	src_port     	;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ipv4         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ipv6         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tpid_vlan_1  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tpid_vlan_0  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	protocol     	;
        uint16_t	ethernet_type	;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	inner_vid    	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	inner_cfi    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	inner_pbit   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	outer_vid    	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	outer_cfi    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	outer_pbit   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	gem_ssid     	; /* This is a field union */
        uint32_t	table_id     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	network_layer	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bc           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_l3        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vlans_num    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lookup_port  	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	tos          	;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	gem                    	; /* Member of gem_ssid union */
        uint32_t	reservedSU1_table_id   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved3  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_network_layer	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mc         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_bc         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mc_l3      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_vlans_num  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lookup_port	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reservedSU1_tos        	;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	ssid                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of gem_ssid union */
        uint32_t	reserved4              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of gem_ssid union */
        uint32_t	reservedSU2_table_id   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved3  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_network_layer	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mc         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_bc         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mc_l3      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_vlans_num  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lookup_port	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reservedSU2_tos        	;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PARSER_IC_LKP_ENTRY_STRUCT;

#define RDD_PARSER_IC_LKP_ENTRY_DA_CRC_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT), (r))
#define RDD_PARSER_IC_LKP_ENTRY_DA_CRC_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT), (v))
#define RDD_PARSER_IC_LKP_ENTRY_DA_CRC_READ(r, p)                        MREAD_32((uint8_t *)(p), (r))
#define RDD_PARSER_IC_LKP_ENTRY_DA_CRC_WRITE(v, p)                       MWRITE_32((uint8_t *)(p), (v))
#define RDD_PARSER_IC_LKP_ENTRY_SA_CRC_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 4, (r))
#define RDD_PARSER_IC_LKP_ENTRY_SA_CRC_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 4, (v))
#define RDD_PARSER_IC_LKP_ENTRY_SA_CRC_READ(r, p)                        MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_PARSER_IC_LKP_ENTRY_SA_CRC_WRITE(v, p)                       MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_PARSER_IC_LKP_ENTRY_SRC_IP_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 8, (r))
#define RDD_PARSER_IC_LKP_ENTRY_SRC_IP_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 8, (v))
#define RDD_PARSER_IC_LKP_ENTRY_SRC_IP_READ(r, p)                        MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_PARSER_IC_LKP_ENTRY_SRC_IP_WRITE(v, p)                       MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_PARSER_IC_LKP_ENTRY_DST_IP_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_PARSER_IC_LKP_ENTRY_DST_IP_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_PARSER_IC_LKP_ENTRY_DST_IP_READ(r, p)                        MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_PARSER_IC_LKP_ENTRY_DST_IP_WRITE(v, p)                       MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_PARSER_IC_LKP_ENTRY_SRC_PORT_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 16, (r))
#define RDD_PARSER_IC_LKP_ENTRY_SRC_PORT_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 16, (v))
#define RDD_PARSER_IC_LKP_ENTRY_SRC_PORT_READ(r, p)                      MREAD_16((uint8_t *)(p) + 16, (r))
#define RDD_PARSER_IC_LKP_ENTRY_SRC_PORT_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 16, (v))
#define RDD_PARSER_IC_LKP_ENTRY_DST_PORT_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 18, (r))
#define RDD_PARSER_IC_LKP_ENTRY_DST_PORT_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 18, (v))
#define RDD_PARSER_IC_LKP_ENTRY_DST_PORT_READ(r, p)                      MREAD_16((uint8_t *)(p) + 18, (r))
#define RDD_PARSER_IC_LKP_ENTRY_DST_PORT_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 18, (v))
#define RDD_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 20, (r))
#define RDD_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 20, (v))
#define RDD_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_READ(r, p)                 MREAD_16((uint8_t *)(p) + 20, (r))
#define RDD_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 20, (v))
#define RDD_PARSER_IC_LKP_ENTRY_PROTOCOL_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 22, (r))
#define RDD_PARSER_IC_LKP_ENTRY_PROTOCOL_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 22, (v))
#define RDD_PARSER_IC_LKP_ENTRY_PROTOCOL_READ(r, p)                      MREAD_8((uint8_t *)(p) + 22, (r))
#define RDD_PARSER_IC_LKP_ENTRY_PROTOCOL_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 22, (v))
#define RDD_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 23, 5, 3, (r))
#define RDD_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 23, 5, 3, (v))
#define RDD_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 23, 5, 3, (r))
#define RDD_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 23, 5, 3, (v))
#define RDD_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 23, 2, 3, (r))
#define RDD_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 23, 2, 3, (v))
#define RDD_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 23, 2, 3, (r))
#define RDD_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 23, 2, 3, (v))
#define RDD_PARSER_IC_LKP_ENTRY_IPV6_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 23, 1, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_IPV6_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 23, 1, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_IPV6_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 23, 1, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_IPV6_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 23, 1, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_IPV4_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 23, 0, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_IPV4_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 23, 0, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_IPV4_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 23, 0, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_IPV4_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 23, 0, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_PBIT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 24, 5, 3, (r))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_PBIT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 24, 5, 3, (v))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_PBIT_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 24, 5, 3, (r))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_PBIT_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 24, 5, 3, (v))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_CFI_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 24, 4, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_CFI_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 24, 4, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_CFI_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 24, 4, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_CFI_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 24, 4, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_VID_READ_G(r, g, idx)              GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 24, 0, 12, (r))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_VID_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 24, 0, 12, (v))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_VID_READ(r, p)                     FIELD_MREAD_16((uint8_t *)(p) + 24, 0, 12, (r))
#define RDD_PARSER_IC_LKP_ENTRY_OUTER_VID_WRITE(v, p)                    FIELD_MWRITE_16((uint8_t *)(p) + 24, 0, 12, (v))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_PBIT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 26, 5, 3, (r))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_PBIT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 26, 5, 3, (v))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_PBIT_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 26, 5, 3, (r))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_PBIT_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 26, 5, 3, (v))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_CFI_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 26, 4, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_CFI_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 26, 4, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_CFI_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 26, 4, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_CFI_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 26, 4, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_VID_READ_G(r, g, idx)              GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 26, 0, 12, (r))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_VID_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 26, 0, 12, (v))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_VID_READ(r, p)                     FIELD_MREAD_16((uint8_t *)(p) + 26, 0, 12, (r))
#define RDD_PARSER_IC_LKP_ENTRY_INNER_VID_WRITE(v, p)                    FIELD_MWRITE_16((uint8_t *)(p) + 26, 0, 12, (v))
#define RDD_PARSER_IC_LKP_ENTRY_TOS_READ_G(r, g, idx)                    GROUP_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 28, (r))
#define RDD_PARSER_IC_LKP_ENTRY_TOS_WRITE_G(v, g, idx)                   GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 28, (v))
#define RDD_PARSER_IC_LKP_ENTRY_TOS_READ(r, p)                           MREAD_8((uint8_t *)(p) + 28, (r))
#define RDD_PARSER_IC_LKP_ENTRY_TOS_WRITE(v, p)                          MWRITE_8((uint8_t *)(p) + 28, (v))
#define RDD_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 29, 3, 5, (r))
#define RDD_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 29, 3, 5, (v))
#define RDD_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 29, 3, 5, (r))
#define RDD_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 29, 3, 5, (v))
#define RDD_PARSER_IC_LKP_ENTRY_VLANS_NUM_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 29, 0, 3, (r))
#define RDD_PARSER_IC_LKP_ENTRY_VLANS_NUM_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 29, 0, 3, (v))
#define RDD_PARSER_IC_LKP_ENTRY_VLANS_NUM_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 29, 0, 3, (r))
#define RDD_PARSER_IC_LKP_ENTRY_VLANS_NUM_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 29, 0, 3, (v))
#define RDD_PARSER_IC_LKP_ENTRY_MC_L3_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 30, 7, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_MC_L3_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 30, 7, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_MC_L3_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 30, 7, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_MC_L3_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 30, 7, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_BC_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 30, 6, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_BC_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 30, 6, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_BC_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 30, 6, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_BC_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 30, 6, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_MC_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 30, 5, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_MC_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 30, 5, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_MC_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 30, 5, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_MC_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 30, 5, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 30, 4, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 30, 4, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 30, 4, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 30, 4, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_TABLE_ID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 30, 0, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_TABLE_ID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 30, 0, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_TABLE_ID_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 30, 0, 1, (r))
#define RDD_PARSER_IC_LKP_ENTRY_TABLE_ID_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 30, 0, 1, (v))
#define RDD_PARSER_IC_LKP_ENTRY_GEM_SSID_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 31, (r))
#define RDD_PARSER_IC_LKP_ENTRY_GEM_SSID_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 31, (v))
#define RDD_PARSER_IC_LKP_ENTRY_GEM_SSID_READ(r, p)                      MREAD_8((uint8_t *)(p) + 31, (r))
#define RDD_PARSER_IC_LKP_ENTRY_GEM_SSID_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 31, (v))
#define RDD_PARSER_IC_LKP_ENTRY_GEM_READ_G(r, g, idx)                    GROUP_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 31, (r))
#define RDD_PARSER_IC_LKP_ENTRY_GEM_WRITE_G(v, g, idx)                   GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 31, (v))
#define RDD_PARSER_IC_LKP_ENTRY_GEM_READ(r, p)                           MREAD_8((uint8_t *)(p) + 31, (r))
#define RDD_PARSER_IC_LKP_ENTRY_GEM_WRITE(v, p)                          MWRITE_8((uint8_t *)(p) + 31, (v))
#define RDD_PARSER_IC_LKP_ENTRY_SSID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 31, 0, 5, (r))
#define RDD_PARSER_IC_LKP_ENTRY_SSID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_IC_LKP_ENTRY_STRUCT) + 31, 0, 5, (v))
#define RDD_PARSER_IC_LKP_ENTRY_SSID_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 31, 0, 5, (r))
#define RDD_PARSER_IC_LKP_ENTRY_SSID_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 31, 0, 5, (v))
/* <<<PARSER_IC_LKP_ENTRY_STRUCT */

/* <<<RDD_PARSER_IC_LKP_ENTRY */


/* >>>RDD_NATC_COMMAND_DATA_L2 */
#define NATC_COMMAND_DATA_L2_COMMAND_OVERWRITTEN_F_OFFSET                                             30
#define NATC_COMMAND_DATA_L2_COMMAND_OVERWRITTEN_F_WIDTH                                              2
#define NATC_COMMAND_DATA_L2_NATC_COMMAND_DATA_L2_OFFSET                                              0
#define NATC_COMMAND_DATA_L2_COMMAND_OVERWRITTEN_OFFSET                                               0
#define NATC_COMMAND_DATA_L2_COMMAND_OVERWRITTEN_WORD_OFFSET                                          0
#define NATC_COMMAND_DATA_L2_COMMAND_OVERWRITTEN_F_OFFSET_MOD8                                        6
#define NATC_COMMAND_DATA_L2_COMMAND_OVERWRITTEN_F_OFFSET_MOD16                                       14
#define NATC_COMMAND_DATA_L2_TABLE_NUM_F_OFFSET                                                       27
#define NATC_COMMAND_DATA_L2_TABLE_NUM_F_WIDTH                                                        3
#define NATC_COMMAND_DATA_L2_TABLE_NUM_OFFSET                                                         0
#define NATC_COMMAND_DATA_L2_TABLE_NUM_WORD_OFFSET                                                    0
#define NATC_COMMAND_DATA_L2_TABLE_NUM_F_OFFSET_MOD8                                                  3
#define NATC_COMMAND_DATA_L2_TABLE_NUM_F_OFFSET_MOD16                                                 11
#define NATC_COMMAND_DATA_L2_DECR_F_OFFSET                                                            26
#define NATC_COMMAND_DATA_L2_DECR_F_WIDTH                                                             1
#define NATC_COMMAND_DATA_L2_DECR_OFFSET                                                              0
#define NATC_COMMAND_DATA_L2_DECR_WORD_OFFSET                                                         0
#define NATC_COMMAND_DATA_L2_DECR_F_OFFSET_MOD8                                                       2
#define NATC_COMMAND_DATA_L2_DECR_F_OFFSET_MOD16                                                      10
#define NATC_COMMAND_DATA_L2_CACHE_FLUSH_F_OFFSET                                                     25
#define NATC_COMMAND_DATA_L2_CACHE_FLUSH_F_WIDTH                                                      1
#define NATC_COMMAND_DATA_L2_CACHE_FLUSH_OFFSET                                                       0
#define NATC_COMMAND_DATA_L2_CACHE_FLUSH_WORD_OFFSET                                                  0
#define NATC_COMMAND_DATA_L2_CACHE_FLUSH_F_OFFSET_MOD8                                                1
#define NATC_COMMAND_DATA_L2_CACHE_FLUSH_F_OFFSET_MOD16                                               9
#define NATC_COMMAND_DATA_L2_PACKET_LEN_F_OFFSET                                                      0
#define NATC_COMMAND_DATA_L2_PACKET_LEN_F_WIDTH                                                       16
#define NATC_COMMAND_DATA_L2_PACKET_LEN_OFFSET                                                        2
#define NATC_COMMAND_DATA_L2_PACKET_LEN_WORD_OFFSET                                                   0
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_DA_CRC_F_OFFSET                                      0
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_DA_CRC_F_WIDTH                                       32
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_OFFSET                                               4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_DA_CRC_OFFSET                                        4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_DA_CRC_WORD_OFFSET                                   1
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_SA_CRC_F_OFFSET                                      0
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_SA_CRC_F_WIDTH                                       32
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_SA_CRC_OFFSET                                        8
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_SA_CRC_WORD_OFFSET                                   2
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_F_OFFSET                              0
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_F_WIDTH                               32
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_OFFSET                                12
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_WORD_OFFSET                           3
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TOS_F_OFFSET                                         24
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TOS_F_WIDTH                                          8
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TOS_OFFSET                                           16
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TOS_WORD_OFFSET                                      4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TOS_F_OFFSET_MOD16                                   8
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_OFFSET                                 19
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_WIDTH                                  5
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_OFFSET                                   17
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_WORD_OFFSET                              4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_OFFSET_MOD8                            3
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_OFFSET_MOD16                           3
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLANS_NUM_F_OFFSET                                   16
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLANS_NUM_F_WIDTH                                    3
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLANS_NUM_OFFSET                                     17
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLANS_NUM_WORD_OFFSET                                4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLANS_NUM_F_OFFSET_MOD8                              0
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLANS_NUM_F_OFFSET_MOD16                             0
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VALID_F_OFFSET                                       15
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VALID_F_WIDTH                                        1
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VALID_OFFSET                                         18
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VALID_WORD_OFFSET                                    4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VALID_F_OFFSET_MOD8                                  7
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VALID_F_OFFSET_MOD16                                 15
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET                                14
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_WIDTH                                 1
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_OFFSET                                  18
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_WORD_OFFSET                             4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET_MOD8                           6
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET_MOD16                          14
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LLC_SNAP_F_OFFSET                                    13
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LLC_SNAP_F_WIDTH                                     1
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LLC_SNAP_OFFSET                                      18
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LLC_SNAP_WORD_OFFSET                                 4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LLC_SNAP_F_OFFSET_MOD8                               5
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LLC_SNAP_F_OFFSET_MOD16                              13
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_CTX_EXT_F_OFFSET                                     12
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_CTX_EXT_F_WIDTH                                      1
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_CTX_EXT_OFFSET                                       18
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_CTX_EXT_WORD_OFFSET                                  4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_CTX_EXT_F_OFFSET_MOD8                                4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_CTX_EXT_F_OFFSET_MOD16                               12
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_RESERVED1_F_OFFSET                                   4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_RESERVED1_F_WIDTH                                    8
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_RESERVED1_OFFSET                                     18
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_RESERVED1_WORD_OFFSET                                4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_RESERVED1_F_OFFSET_MOD16                             4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_OFFSET                                 0
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_WIDTH                                  4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_OFFSET                                   19
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_WORD_OFFSET                              4
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_OFFSET_MOD8                            0
#define NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_OFFSET_MOD16                           0

/* >>>NATC_COMMAND_DATA_L2_STRUCT */
typedef union
{
    uint32_t word_32[5];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	command_overwritten               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	table_num                         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	decr                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cache_flush                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                         	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	packet_len                        	;
        uint32_t	parser_l2_lkp_entry_da_crc        	;
        uint32_t	parser_l2_lkp_entry_sa_crc        	;
        uint32_t	parser_l2_lkp_entry_vlan_etype_crc	;
        uint8_t	parser_l2_lkp_entry_tos           	;
        uint32_t	parser_l2_lkp_entry_lookup_port   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_vlans_num     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_tcp_pure_ack  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_llc_snap      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_ctx_ext       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_reserved1     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_var_len_ctx   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	packet_len                        	;
        uint32_t	reserved0                         	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cache_flush                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	decr                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	table_num                         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	command_overwritten               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_da_crc        	;
        uint32_t	parser_l2_lkp_entry_sa_crc        	;
        uint32_t	parser_l2_lkp_entry_vlan_etype_crc	;
        uint32_t	parser_l2_lkp_entry_var_len_ctx   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_reserved1     	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_ctx_ext       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_llc_snap      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_tcp_pure_ack  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_vlans_num     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_lookup_port   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	parser_l2_lkp_entry_tos           	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) NATC_COMMAND_DATA_L2_STRUCT;

#define RDD_NATC_COMMAND_DATA_L2_COMMAND_OVERWRITTEN_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT), 6, 2, (r))
#define RDD_NATC_COMMAND_DATA_L2_COMMAND_OVERWRITTEN_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT), 6, 2, (v))
#define RDD_NATC_COMMAND_DATA_L2_COMMAND_OVERWRITTEN_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p), 6, 2, (r))
#define RDD_NATC_COMMAND_DATA_L2_COMMAND_OVERWRITTEN_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p), 6, 2, (v))
#define RDD_NATC_COMMAND_DATA_L2_TABLE_NUM_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT), 3, 3, (r))
#define RDD_NATC_COMMAND_DATA_L2_TABLE_NUM_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT), 3, 3, (v))
#define RDD_NATC_COMMAND_DATA_L2_TABLE_NUM_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)(p), 3, 3, (r))
#define RDD_NATC_COMMAND_DATA_L2_TABLE_NUM_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)(p), 3, 3, (v))
#define RDD_NATC_COMMAND_DATA_L2_DECR_READ_G(r, g, idx)                                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT), 2, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_DECR_WRITE_G(v, g, idx)                                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT), 2, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_DECR_READ(r, p)                                               FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_DECR_WRITE(v, p)                                              FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_CACHE_FLUSH_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT), 1, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_CACHE_FLUSH_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT), 1, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_CACHE_FLUSH_READ(r, p)                                        FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_CACHE_FLUSH_WRITE(v, p)                                       FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_PACKET_LEN_READ_G(r, g, idx)                                  GROUP_MREAD_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 2, (r))
#define RDD_NATC_COMMAND_DATA_L2_PACKET_LEN_WRITE_G(v, g, idx)                                 GROUP_MWRITE_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 2, (v))
#define RDD_NATC_COMMAND_DATA_L2_PACKET_LEN_READ(r, p)                                         MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_NATC_COMMAND_DATA_L2_PACKET_LEN_WRITE(v, p)                                        MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_DA_CRC_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 4, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_DA_CRC_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 4, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_DA_CRC_READ(r, p)                         MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_DA_CRC_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_SA_CRC_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 8, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_SA_CRC_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 8, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_SA_CRC_READ(r, p)                         MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_SA_CRC_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 12, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 12, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_READ(r, p)                 MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TOS_READ_G(r, g, idx)                     GROUP_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 16, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TOS_WRITE_G(v, g, idx)                    GROUP_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 16, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TOS_READ(r, p)                            MREAD_8((uint8_t *)(p) + 16, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TOS_WRITE(v, p)                           MWRITE_8((uint8_t *)(p) + 16, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 17, 3, 5, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 17, 3, 5, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 17, 3, 5, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 17, 3, 5, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLANS_NUM_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 17, 0, 3, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLANS_NUM_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 17, 0, 3, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLANS_NUM_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 17, 0, 3, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VLANS_NUM_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 17, 0, 3, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VALID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 18, 7, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 18, 7, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VALID_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 18, 7, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VALID_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 18, 7, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 18, 6, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 18, 6, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 18, 6, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 18, 6, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LLC_SNAP_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 18, 5, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LLC_SNAP_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 18, 5, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LLC_SNAP_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 18, 5, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_LLC_SNAP_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 18, 5, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_CTX_EXT_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 18, 4, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_CTX_EXT_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 18, 4, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_CTX_EXT_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 18, 4, 1, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_CTX_EXT_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 18, 4, 1, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_RESERVED1_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 18, 4, 8, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_RESERVED1_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 18, 4, 8, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_RESERVED1_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 18, 4, 8, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_RESERVED1_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 18, 4, 8, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 19, 0, 4, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L2_STRUCT) + 19, 0, 4, (v))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 19, 0, 4, (r))
#define RDD_NATC_COMMAND_DATA_L2_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 19, 0, 4, (v))
/* <<<NATC_COMMAND_DATA_L2_STRUCT */

/* <<<RDD_NATC_COMMAND_DATA_L2 */


/* >>>RDD_NATC_COMMAND_DATA_L3 */
#define NATC_COMMAND_DATA_L3_COMMAND_OVERWRITTEN_F_OFFSET                                             30
#define NATC_COMMAND_DATA_L3_COMMAND_OVERWRITTEN_F_WIDTH                                              2
#define NATC_COMMAND_DATA_L3_NATC_COMMAND_DATA_L3_OFFSET                                              0
#define NATC_COMMAND_DATA_L3_COMMAND_OVERWRITTEN_OFFSET                                               0
#define NATC_COMMAND_DATA_L3_COMMAND_OVERWRITTEN_WORD_OFFSET                                          0
#define NATC_COMMAND_DATA_L3_COMMAND_OVERWRITTEN_F_OFFSET_MOD8                                        6
#define NATC_COMMAND_DATA_L3_COMMAND_OVERWRITTEN_F_OFFSET_MOD16                                       14
#define NATC_COMMAND_DATA_L3_TABLE_NUM_F_OFFSET                                                       27
#define NATC_COMMAND_DATA_L3_TABLE_NUM_F_WIDTH                                                        3
#define NATC_COMMAND_DATA_L3_TABLE_NUM_OFFSET                                                         0
#define NATC_COMMAND_DATA_L3_TABLE_NUM_WORD_OFFSET                                                    0
#define NATC_COMMAND_DATA_L3_TABLE_NUM_F_OFFSET_MOD8                                                  3
#define NATC_COMMAND_DATA_L3_TABLE_NUM_F_OFFSET_MOD16                                                 11
#define NATC_COMMAND_DATA_L3_DECR_F_OFFSET                                                            26
#define NATC_COMMAND_DATA_L3_DECR_F_WIDTH                                                             1
#define NATC_COMMAND_DATA_L3_DECR_OFFSET                                                              0
#define NATC_COMMAND_DATA_L3_DECR_WORD_OFFSET                                                         0
#define NATC_COMMAND_DATA_L3_DECR_F_OFFSET_MOD8                                                       2
#define NATC_COMMAND_DATA_L3_DECR_F_OFFSET_MOD16                                                      10
#define NATC_COMMAND_DATA_L3_CACHE_FLUSH_F_OFFSET                                                     25
#define NATC_COMMAND_DATA_L3_CACHE_FLUSH_F_WIDTH                                                      1
#define NATC_COMMAND_DATA_L3_CACHE_FLUSH_OFFSET                                                       0
#define NATC_COMMAND_DATA_L3_CACHE_FLUSH_WORD_OFFSET                                                  0
#define NATC_COMMAND_DATA_L3_CACHE_FLUSH_F_OFFSET_MOD8                                                1
#define NATC_COMMAND_DATA_L3_CACHE_FLUSH_F_OFFSET_MOD16                                               9
#define NATC_COMMAND_DATA_L3_PACKET_LEN_F_OFFSET                                                      0
#define NATC_COMMAND_DATA_L3_PACKET_LEN_F_WIDTH                                                       16
#define NATC_COMMAND_DATA_L3_PACKET_LEN_OFFSET                                                        2
#define NATC_COMMAND_DATA_L3_PACKET_LEN_WORD_OFFSET                                                   0
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_IP_F_OFFSET                                      0
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_IP_F_WIDTH                                       32
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_OFFSET                                               4
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_IP_OFFSET                                        4
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_IP_WORD_OFFSET                                   1
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_IP_F_OFFSET                                      0
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_IP_F_WIDTH                                       32
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_IP_OFFSET                                        8
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_IP_WORD_OFFSET                                   2
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_PORT_F_OFFSET                                    16
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_PORT_F_WIDTH                                     16
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_PORT_OFFSET                                      12
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_PORT_WORD_OFFSET                                 3
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_PORT_F_OFFSET                                    0
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_PORT_F_WIDTH                                     16
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_PORT_OFFSET                                      14
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_PORT_WORD_OFFSET                                 3
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_F_OFFSET                                  0
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_F_WIDTH                                   32
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_OFFSET                                    16
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_WORD_OFFSET                               4
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_F_OFFSET                                 0
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_F_WIDTH                                  32
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_OFFSET                                   20
#define NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_WORD_OFFSET                              5

/* >>>NATC_COMMAND_DATA_L3_STRUCT */
typedef union
{
    uint32_t word_32[6];
    uint64_t dword_64[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	command_overwritten                     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	table_num                               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	decr                                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cache_flush                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                               	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	packet_len                              	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_src_ip              	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_dst_ip              	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	parser_l3_lkp_entry_src_port            	;
        uint16_t	parser_l3_lkp_entry_dst_port            	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_l3_lkp_tos          	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	parser_l3_lkp_entry_tos                           	; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_lookup_port                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_vlans_num                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_valid                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_tcp_pure_ack                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_ipv6                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_ctx_ext                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_protocol                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */ /*defined by rdd_parser_l3_protocol enumeration*/
        uint32_t	parser_l3_lkp_entry_var_len_ctx                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	parser_l3_lkp_entry_l3_lkp_tos_port_vlan          	; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_not_written         	;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	packet_len                              	;
        uint32_t	reserved0                               	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cache_flush                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	decr                                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	table_num                               	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	command_overwritten                     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_src_ip              	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_dst_ip              	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	parser_l3_lkp_entry_dst_port            	;
        uint16_t	parser_l3_lkp_entry_src_port            	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_l3_lkp_tos          	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	parser_l3_lkp_entry_var_len_ctx                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_protocol                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */ /*defined by rdd_parser_l3_protocol enumeration*/
        uint32_t	parser_l3_lkp_entry_ctx_ext                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_ipv6                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_tcp_pure_ack                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_valid                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_vlans_num                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_lookup_port                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint8_t	parser_l3_lkp_entry_tos                           	; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	parser_l3_lkp_entry_l3_lkp_tos_port_vlan          	; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_not_written         	;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) NATC_COMMAND_DATA_L3_STRUCT;

#define RDD_NATC_COMMAND_DATA_L3_COMMAND_OVERWRITTEN_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT), 6, 2, (r))
#define RDD_NATC_COMMAND_DATA_L3_COMMAND_OVERWRITTEN_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT), 6, 2, (v))
#define RDD_NATC_COMMAND_DATA_L3_COMMAND_OVERWRITTEN_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p), 6, 2, (r))
#define RDD_NATC_COMMAND_DATA_L3_COMMAND_OVERWRITTEN_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p), 6, 2, (v))
#define RDD_NATC_COMMAND_DATA_L3_TABLE_NUM_READ_G(r, g, idx)                                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT), 3, 3, (r))
#define RDD_NATC_COMMAND_DATA_L3_TABLE_NUM_WRITE_G(v, g, idx)                                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT), 3, 3, (v))
#define RDD_NATC_COMMAND_DATA_L3_TABLE_NUM_READ(r, p)                                                FIELD_MREAD_8((uint8_t *)(p), 3, 3, (r))
#define RDD_NATC_COMMAND_DATA_L3_TABLE_NUM_WRITE(v, p)                                               FIELD_MWRITE_8((uint8_t *)(p), 3, 3, (v))
#define RDD_NATC_COMMAND_DATA_L3_DECR_READ_G(r, g, idx)                                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT), 2, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_DECR_WRITE_G(v, g, idx)                                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT), 2, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_DECR_READ(r, p)                                                     FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_DECR_WRITE(v, p)                                                    FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_CACHE_FLUSH_READ_G(r, g, idx)                                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT), 1, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_CACHE_FLUSH_WRITE_G(v, g, idx)                                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT), 1, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_CACHE_FLUSH_READ(r, p)                                              FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_CACHE_FLUSH_WRITE(v, p)                                             FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_PACKET_LEN_READ_G(r, g, idx)                                        GROUP_MREAD_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 2, (r))
#define RDD_NATC_COMMAND_DATA_L3_PACKET_LEN_WRITE_G(v, g, idx)                                       GROUP_MWRITE_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 2, (v))
#define RDD_NATC_COMMAND_DATA_L3_PACKET_LEN_READ(r, p)                                               MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_NATC_COMMAND_DATA_L3_PACKET_LEN_WRITE(v, p)                                              MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_IP_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 4, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_IP_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 4, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_IP_READ(r, p)                               MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_IP_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_IP_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 8, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_IP_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 8, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_IP_READ(r, p)                               MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_IP_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_PORT_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 12, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_PORT_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 12, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_PORT_READ(r, p)                             MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_SRC_PORT_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_PORT_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 14, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_PORT_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 14, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_PORT_READ(r, p)                             MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_DST_PORT_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 16, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 16, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_READ(r, p)                           MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_TOS_READ_G(r, g, idx)                           GROUP_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 16, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_TOS_WRITE_G(v, g, idx)                          GROUP_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 16, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_TOS_READ(r, p)                                  MREAD_8((uint8_t *)(p) + 16, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_TOS_WRITE(v, p)                                 MWRITE_8((uint8_t *)(p) + 16, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 17, 3, 5, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 17, 3, 5, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 17, 3, 5, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 17, 3, 5, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VLANS_NUM_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 17, 0, 3, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VLANS_NUM_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 17, 0, 3, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VLANS_NUM_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 17, 0, 3, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VLANS_NUM_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 17, 0, 3, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VALID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 18, 7, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 18, 7, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VALID_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 18, 7, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VALID_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 18, 7, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 18, 6, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 18, 6, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 18, 6, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 18, 6, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_IPV6_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 18, 5, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_IPV6_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 18, 5, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_IPV6_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 18, 5, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_IPV6_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 18, 5, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_CTX_EXT_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 18, 4, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_CTX_EXT_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 18, 4, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_CTX_EXT_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 18, 4, 1, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_CTX_EXT_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 18, 4, 1, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_PROTOCOL_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 18, 4, 8, (r)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_PROTOCOL_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 18, 4, 8, (v)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_PROTOCOL_READ(r, p)                             FIELD_MREAD_16((uint8_t *)(p) + 18, 4, 8, (r)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_PROTOCOL_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)(p) + 18, 4, 8, (v)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 19, 0, 4, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 19, 0, 4, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 19, 0, 4, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 19, 0, 4, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 16, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 16, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_READ(r, p)                 MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 20, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(NATC_COMMAND_DATA_L3_STRUCT) + 20, (v))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_READ(r, p)                          MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_NATC_COMMAND_DATA_L3_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 20, (v))
/* <<<NATC_COMMAND_DATA_L3_STRUCT */

/* <<<RDD_NATC_COMMAND_DATA_L3 */


/* >>>RDD_ACTION */
#define ACTION_TYPE_F_OFFSET                                                            14
#define ACTION_TYPE_F_WIDTH                                                             2
#define ACTION_ACTION_OFFSET                                                            0
#define ACTION_TYPE_OFFSET                                                              0
#define ACTION_TYPE_WORD_OFFSET                                                         0
#define ACTION_TYPE_F_OFFSET_MOD8                                                       6
#define ACTION_TYPE_F_OFFSET_MOD16                                                      14
#define ACTION_PRIORITY_F_OFFSET                                                        8
#define ACTION_PRIORITY_F_WIDTH                                                         6
#define ACTION_PRIORITY_OFFSET                                                          0
#define ACTION_PRIORITY_WORD_OFFSET                                                     0
#define ACTION_PRIORITY_F_OFFSET_MOD8                                                   0
#define ACTION_PRIORITY_F_OFFSET_MOD16                                                  8
#define ACTION_REASON_OR_COUNTER_F_OFFSET                                               0
#define ACTION_REASON_OR_COUNTER_F_WIDTH                                                8
#define ACTION_REASON_OR_COUNTER_OFFSET                                                 1
#define ACTION_REASON_OR_COUNTER_WORD_OFFSET                                            0
#define ACTION_REASON_OR_COUNTER_F_OFFSET_MOD16                                         0

/* >>>ACTION_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	type             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	priority         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint8_t	reason_or_counter	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint16_t	reservedSU1_type           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	needed_priority            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of priority union */
        uint16_t	reserved_priority          	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of priority union */
        uint8_t	trap_reason                	; /* Member of reason_or_counter union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	reservedSU2_type           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reservedSU2_priority       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	drop_counter               	; /* Member of reason_or_counter union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	reason_or_counter	; /* This is a field union */
        uint16_t	priority         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint16_t	type             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	trap_reason                	; /* Member of reason_or_counter union */
        uint16_t	reserved_priority          	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of priority union */
        uint16_t	needed_priority            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of priority union */
        uint16_t	reservedSU1_type           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint8_t	drop_counter               	; /* Member of reason_or_counter union */
        uint16_t	reservedSU2_priority       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reservedSU2_type           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) ACTION_STRUCT;

#define RDD_ACTION_TYPE_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(ACTION_STRUCT), 6, 2, (r))
#define RDD_ACTION_TYPE_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(ACTION_STRUCT), 6, 2, (v))
#define RDD_ACTION_TYPE_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 6, 2, (r))
#define RDD_ACTION_TYPE_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 6, 2, (v))
#define RDD_ACTION_PRIORITY_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(ACTION_STRUCT), 0, 6, (r))
#define RDD_ACTION_PRIORITY_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(ACTION_STRUCT), 0, 6, (v))
#define RDD_ACTION_PRIORITY_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 0, 6, (r))
#define RDD_ACTION_PRIORITY_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 0, 6, (v))
#define RDD_ACTION_NEEDED_PRIORITY_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(ACTION_STRUCT), 3, 3, (r))
#define RDD_ACTION_NEEDED_PRIORITY_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(ACTION_STRUCT), 3, 3, (v))
#define RDD_ACTION_NEEDED_PRIORITY_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p), 3, 3, (r))
#define RDD_ACTION_NEEDED_PRIORITY_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p), 3, 3, (v))
#define RDD_ACTION_REASON_OR_COUNTER_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(ACTION_STRUCT) + 1, (r))
#define RDD_ACTION_REASON_OR_COUNTER_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(ACTION_STRUCT) + 1, (v))
#define RDD_ACTION_REASON_OR_COUNTER_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_ACTION_REASON_OR_COUNTER_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_ACTION_TRAP_REASON_READ_G(r, g, idx)                GROUP_MREAD_8((g), (idx)*sizeof(ACTION_STRUCT) + 1, (r))
#define RDD_ACTION_TRAP_REASON_WRITE_G(v, g, idx)               GROUP_MWRITE_8((g), (idx)*sizeof(ACTION_STRUCT) + 1, (v))
#define RDD_ACTION_TRAP_REASON_READ(r, p)                       MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_ACTION_TRAP_REASON_WRITE(v, p)                      MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_ACTION_DROP_COUNTER_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(ACTION_STRUCT) + 1, (r))
#define RDD_ACTION_DROP_COUNTER_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(ACTION_STRUCT) + 1, (v))
#define RDD_ACTION_DROP_COUNTER_READ(r, p)                      MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_ACTION_DROP_COUNTER_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 1, (v))
/* <<<ACTION_STRUCT */

/* <<<RDD_ACTION */


/* >>>RDD_VLAN_TAG */
#define VLAN_TAG_PBITS_F_OFFSET                                                           13
#define VLAN_TAG_PBITS_F_WIDTH                                                            3
#define VLAN_TAG_VLAN_TAG_OFFSET                                                          0
#define VLAN_TAG_PBITS_OFFSET                                                             0
#define VLAN_TAG_PBITS_WORD_OFFSET                                                        0
#define VLAN_TAG_PBITS_F_OFFSET_MOD8                                                      5
#define VLAN_TAG_PBITS_F_OFFSET_MOD16                                                     13
#define VLAN_TAG_CFI_F_OFFSET                                                             12
#define VLAN_TAG_CFI_F_WIDTH                                                              1
#define VLAN_TAG_CFI_OFFSET                                                               0
#define VLAN_TAG_CFI_WORD_OFFSET                                                          0
#define VLAN_TAG_CFI_F_OFFSET_MOD8                                                        4
#define VLAN_TAG_CFI_F_OFFSET_MOD16                                                       12
#define VLAN_TAG_VID_F_OFFSET                                                             0
#define VLAN_TAG_VID_F_WIDTH                                                              12
#define VLAN_TAG_VID_OFFSET                                                               0
#define VLAN_TAG_VID_WORD_OFFSET                                                          0
#define VLAN_TAG_VID_F_OFFSET_MOD16                                                       0

/* >>>VLAN_TAG_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	pbits     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	cfi       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	vid       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	vid       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	cfi       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	pbits     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) VLAN_TAG_STRUCT;

#define RDD_VLAN_TAG_PBITS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VLAN_TAG_STRUCT), 5, 3, (r))
#define RDD_VLAN_TAG_PBITS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VLAN_TAG_STRUCT), 5, 3, (v))
#define RDD_VLAN_TAG_PBITS_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 5, 3, (r))
#define RDD_VLAN_TAG_PBITS_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 5, 3, (v))
#define RDD_VLAN_TAG_CFI_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(VLAN_TAG_STRUCT), 4, 1, (r))
#define RDD_VLAN_TAG_CFI_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(VLAN_TAG_STRUCT), 4, 1, (v))
#define RDD_VLAN_TAG_CFI_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_VLAN_TAG_CFI_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_VLAN_TAG_VID_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(VLAN_TAG_STRUCT), 0, 12, (r))
#define RDD_VLAN_TAG_VID_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(VLAN_TAG_STRUCT), 0, 12, (v))
#define RDD_VLAN_TAG_VID_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p), 0, 12, (r))
#define RDD_VLAN_TAG_VID_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p), 0, 12, (v))
/* <<<VLAN_TAG_STRUCT */

/* <<<RDD_VLAN_TAG */


/* >>>RDD_PROCESSING_CPU_RX_DESCRIPTOR */
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_F_OFFSET                                                           31
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_F_WIDTH                                                            1
#define PROCESSING_CPU_RX_DESCRIPTOR_PROCESSING_CPU_RX_DESCRIPTOR_OFFSET                                      0
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_OFFSET                                                             0
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_WORD_OFFSET                                                        0
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_F_OFFSET_MOD8                                                      7
#define PROCESSING_CPU_RX_DESCRIPTOR_VALID_F_OFFSET_MOD16                                                     15
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_F_OFFSET                                                        30
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_F_WIDTH                                                         1
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_OFFSET                                                          0
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_WORD_OFFSET                                                     0
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_F_OFFSET_MOD8                                                   6
#define PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_F_OFFSET_MOD16                                                  14
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_F_OFFSET                                  29
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_F_WIDTH                                   1
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_OFFSET                                    0
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_WORD_OFFSET                               0
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_F_OFFSET_MOD8                             5
#define PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_F_OFFSET_MOD16                            13
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_F_OFFSET                                                         28
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_F_WIDTH                                                          1
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_OFFSET                                                           0
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_WORD_OFFSET                                                      0
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_F_OFFSET_MOD8                                                    4
#define PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_F_OFFSET_MOD16                                                   12
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_F_OFFSET                                                       27
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_F_WIDTH                                                        1
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_OFFSET                                                         0
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_WORD_OFFSET                                                    0
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_F_OFFSET_MOD8                                                  3
#define PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_F_OFFSET_MOD16                                                 11
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_F_OFFSET                                                           26
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_OFFSET                                                             0
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_WORD_OFFSET                                                        0
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      2
#define PROCESSING_CPU_RX_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     10
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_F_OFFSET                                                      25
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_F_WIDTH                                                       1
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_OFFSET                                                        0
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_WORD_OFFSET                                                   0
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_F_OFFSET_MOD8                                                 1
#define PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_F_OFFSET_MOD16                                                9
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_F_OFFSET                                      23
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_F_WIDTH                                       2
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_OFFSET                                        0
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_WORD_OFFSET                                   0
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_F_OFFSET_MOD8                                 7
#define PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_F_OFFSET_MOD16                                7
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_F_OFFSET                                            16
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_F_WIDTH                                             7
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_OFFSET                                              1
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_WORD_OFFSET                                         0
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_F_OFFSET_MOD8                                       0
#define PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_F_OFFSET_MOD16                                      0
#define PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   7
#define PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     2
#define PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             7
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_OFFSET                                             6
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_WIDTH                                              1
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_OFFSET                                               3
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_WORD_OFFSET                                          0
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_OFFSET_MOD8                                        6
#define PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_OFFSET_MOD16                                       6
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_F_OFFSET                                          5
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_F_WIDTH                                           1
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_OFFSET                                            3
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_WORD_OFFSET                                       0
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_F_OFFSET_MOD8                                     5
#define PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_F_OFFSET_MOD16                                    5
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_F_OFFSET                            1
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_F_WIDTH                             4
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_OFFSET                              3
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_WORD_OFFSET                         0
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_F_OFFSET_MOD8                       1
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_F_OFFSET_MOD16                      1
#define PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_F_OFFSET             22
#define PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_F_WIDTH              10
#define PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_OFFSET               4
#define PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_WORD_OFFSET          1
#define PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_F_OFFSET_MOD16       6
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_F_OFFSET                                                        21
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_F_WIDTH                                                         1
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_OFFSET                                                          5
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_WORD_OFFSET                                                     1
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_F_OFFSET_MOD8                                                   5
#define PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_F_OFFSET_MOD16                                                  5
#define PROCESSING_CPU_RX_DESCRIPTOR_INGRESS_CONG_F_OFFSET                                                    20
#define PROCESSING_CPU_RX_DESCRIPTOR_INGRESS_CONG_F_WIDTH                                                     1
#define PROCESSING_CPU_RX_DESCRIPTOR_INGRESS_CONG_OFFSET                                                      5
#define PROCESSING_CPU_RX_DESCRIPTOR_INGRESS_CONG_WORD_OFFSET                                                 1
#define PROCESSING_CPU_RX_DESCRIPTOR_INGRESS_CONG_F_OFFSET_MOD8                                               4
#define PROCESSING_CPU_RX_DESCRIPTOR_INGRESS_CONG_F_OFFSET_MOD16                                              4
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_F_OFFSET                                                             19
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_OFFSET                                                               5
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_WORD_OFFSET                                                          1
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        3
#define PROCESSING_CPU_RX_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       3
#define PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   0
#define PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     6
#define PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                1
#define PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             0
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_F_OFFSET                                                            31
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_F_WIDTH                                                             1
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_OFFSET                                                              8
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_WORD_OFFSET                                                         2
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_F_OFFSET_MOD8                                                       7
#define PROCESSING_CPU_RX_DESCRIPTOR_DROP_F_OFFSET_MOD16                                                      15
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET                                                    30
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_F_WIDTH                                                     1
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_OFFSET                                                      8
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_WORD_OFFSET                                                 2
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD8                                               6
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD16                                              14
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_F_OFFSET                                                    28
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_F_WIDTH                                                     2
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_OFFSET                                                      8
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_WORD_OFFSET                                                 2
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_F_OFFSET_MOD8                                               4
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_F_OFFSET_MOD16                                              12
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_F_OFFSET                                                             27
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_F_WIDTH                                                              1
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_OFFSET                                                               8
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_WORD_OFFSET                                                          2
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_F_OFFSET_MOD8                                                        3
#define PROCESSING_CPU_RX_DESCRIPTOR_LAN_F_OFFSET_MOD16                                                       11
#define PROCESSING_CPU_RX_DESCRIPTOR_VPORT_F_OFFSET                                                           19
#define PROCESSING_CPU_RX_DESCRIPTOR_VPORT_F_WIDTH                                                            8
#define PROCESSING_CPU_RX_DESCRIPTOR_VPORT_OFFSET                                                             8
#define PROCESSING_CPU_RX_DESCRIPTOR_VPORT_WORD_OFFSET                                                        2
#define PROCESSING_CPU_RX_DESCRIPTOR_VPORT_F_OFFSET_MOD16                                                     3
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_F_OFFSET                                                    18
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_F_WIDTH                                                     1
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_OFFSET                                                      9
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_WORD_OFFSET                                                 2
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_F_OFFSET_MOD8                                               2
#define PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_F_OFFSET_MOD16                                              2
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_F_OFFSET                              14
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_F_WIDTH                               4
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_OFFSET                                9
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_WORD_OFFSET                           2
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_F_OFFSET_MOD8                         6
#define PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_F_OFFSET_MOD16                        14
#define PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_F_OFFSET                                                     0
#define PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_F_WIDTH                                                      14
#define PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_OFFSET                                                       10
#define PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_WORD_OFFSET                                                  2
#define PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_F_OFFSET_MOD16                                               0
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_F_OFFSET                                                          31
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_F_WIDTH                                                           1
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_OFFSET                                                            12
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_WORD_OFFSET                                                       3
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_F_OFFSET_MOD8                                                     7
#define PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_F_OFFSET_MOD16                                                    15
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    30
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      12
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 3
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               6
#define PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              14
#define PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_F_OFFSET                                              0
#define PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_F_WIDTH                                               30
#define PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_OFFSET                                                12
#define PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WORD_OFFSET                                           3

/* >>>PROCESSING_CPU_RX_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	type_or_service_queue_wlan 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	reason_or_forwarding       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588_or_dsl_rx        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	coherent_or_forwarding     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	reserved0                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_valid                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_headroom                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of dont_agg_or_is_chksum_verified union */
        uint32_t	reservedSU1_mc_copy                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reprocess                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_force_copy               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	type                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
        uint32_t	cpu_redirect_0                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	cpu_reason                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	reservedSU1_first_level_q            	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
        uint32_t	coherent                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of coherent_or_forwarding union */
        uint32_t	metadata_1_2                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
        uint32_t	reservedSU1_reserved0                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_valid                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_headroom                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_chksum_verified                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of dont_agg_or_is_chksum_verified union */
        uint32_t	reservedSU2_mc_copy                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reprocess                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_force_copy               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	service_queue_is_wlan                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
        uint32_t	service_queue_wlan_frw_type          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
        uint32_t	tc                                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	metadata_0_0                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	reservedSU2_first_level_q            	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dsl_rx                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
        uint32_t	ucast                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of coherent_or_forwarding union */
        uint32_t	spdtest_stream_id                    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
        uint32_t	tcpspdtest_is_upload                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
        uint32_t	reservedSU2_reserved0                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_valid                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_headroom                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_mc_copy                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_reprocess                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_color                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_force_copy               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_type_or_service_queue_wlan	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_proxy_mode                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	wlan_mcast_idx                       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	reservedSU3_first_level_q            	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_flag_1588_or_dsl_rx      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_coherent_or_forwarding   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_reserved0                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reservedSU4_valid                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_headroom                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_mc_copy                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_reprocess                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_color                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_force_copy               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_type_or_service_queue_wlan	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_redirect_1                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	wan_flow_1                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	reservedSU4_first_level_q            	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_flag_1588_or_dsl_rx      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_coherent_or_forwarding   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_reserved0                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                  	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	metadata_1_0                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
        uint32_t	reservedSU1_priority                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_ingress_cong             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_abs                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved1                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_length            	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	spdtest_l3_l4_hdr_len                	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
        uint32_t	reservedSU2_priority                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_ingress_cong             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_abs                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved1                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_length            	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint8_t	egress_queue                         	; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
        uint32_t	wan_flow_0                           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
        uint32_t	reservedSU3_priority                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_ingress_cong             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_abs                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_reserved1                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_packet_length            	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vport                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ssid_or_metadata_2_or_cpu_redirect	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	bn1_or_abs3                	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_drop                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_metadata_1_1             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lan                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
        uint32_t	reservedSU1_metadata_0_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ssid                                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
        uint32_t	bn1_first                            	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_drop                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_metadata_1_1             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lan                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	source_port                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
        uint32_t	reservedSU2_metadata_0_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
        uint32_t	metadata_2                           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
        uint32_t	reserved4                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	abs3                                 	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_drop                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_metadata_1_1             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_lan                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_vport                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
        uint32_t	port_id                              	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
        uint32_t	reservedSU3_metadata_0_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	omci_enc_key_index                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
        uint32_t	reserved3                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
        uint32_t	reservedSU3_bn1_or_abs3              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	payload_offset_sop         	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_agg_pd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sop_fpm                              	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm                               	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_agg_pd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn_num                               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop                                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint16_t	bn0_first                            	; /* Member of payload_offset_sop union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_agg_pd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_0             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved5                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	abs0                                 	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reservedSU4_agg_pd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_target_mem_0             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved6                            	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	fpm_pool                             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	fpm_num                              	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved0                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	coherent_or_forwarding     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	flag_1588_or_dsl_rx        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	first_level_q              	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reason_or_forwarding       	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	type_or_service_queue_wlan 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	force_copy                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reprocess                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	headroom                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_reserved0                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	metadata_1_2                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
        uint32_t	coherent                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of coherent_or_forwarding union */
        uint32_t	flag_1588                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
        uint32_t	reservedSU1_first_level_q            	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_reason                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	cpu_redirect_0                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	type                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
        uint32_t	reservedSU1_force_copy               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reprocess                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mc_copy                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of dont_agg_or_is_chksum_verified union */
        uint32_t	reservedSU1_headroom                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_valid                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_reserved0                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcpspdtest_is_upload                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
        uint32_t	spdtest_stream_id                    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of metadata_1_2_or_tcpspdtest_stream_id union */
        uint32_t	ucast                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of coherent_or_forwarding union */
        uint32_t	dsl_rx                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
        uint32_t	reservedSU2_first_level_q            	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	metadata_0_0                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	tc                                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	service_queue_wlan_frw_type          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
        uint32_t	service_queue_is_wlan                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of type_or_service_queue_wlan union */
        uint32_t	reservedSU2_force_copy               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reprocess                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mc_copy                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_chksum_verified                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of dont_agg_or_is_chksum_verified union */
        uint32_t	reservedSU2_headroom                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_valid                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_reserved0                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_coherent_or_forwarding   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_flag_1588_or_dsl_rx      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_first_level_q            	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wlan_mcast_idx                       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	is_proxy_mode                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	reservedSU3_type_or_service_queue_wlan	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_force_copy               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_color                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_reprocess                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_mc_copy                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_headroom                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_valid                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reservedSU4_reserved0                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_metadata_1_2_or_tcpspdtest_stream_id	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_coherent_or_forwarding   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_flag_1588_or_dsl_rx      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_first_level_q            	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_flow_1                           	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	cpu_redirect_1                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of reason_or_forwarding union */
        uint32_t	reservedSU4_type_or_service_queue_wlan	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_force_copy               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_color                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_reprocess                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_mc_copy                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_dont_agg_or_is_chksum_verified	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_headroom                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_valid                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_length              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                  	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_packet_length            	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved1                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_abs                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_ingress_cong             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_priority                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	metadata_1_0                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_packet_length            	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved1                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_abs                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_ingress_cong             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_priority                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdtest_l3_l4_hdr_len                	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_packet_length            	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_reserved1                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_abs                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_ingress_cong             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_priority                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_flow_0                           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
        uint8_t	egress_queue                         	; /* Member of num_of_avail_dhd_repl_or_metadata_1_or_cpu_redirect union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	bn1_or_abs3                	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	ssid_or_metadata_2_or_cpu_redirect	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	metadata_0_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vport                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	lan                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	metadata_1_1               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drop                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn1_first                            	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	ssid                                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
        uint32_t	reservedSU1_metadata_0_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow                                 	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
        uint32_t	reservedSU1_lan                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_metadata_1_1             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_drop                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	abs3                                 	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	reserved4                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	metadata_2                           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
        uint32_t	reserved2                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
        uint32_t	reservedSU2_metadata_0_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	source_port                          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
        uint32_t	reservedSU2_lan                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_metadata_1_1             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_drop                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_bn1_or_abs3              	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
        uint32_t	omci_enc_key_index                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ssid_or_metadata_2_or_cpu_redirect union */
        uint32_t	reservedSU3_metadata_0_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	port_id                              	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
        uint32_t	is_vport                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vport union */
        uint32_t	reservedSU3_lan                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_metadata_1_1             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_1             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_drop                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	payload_offset_sop         	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	target_mem_0               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg_pd                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn_fpm                               	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop_fpm                              	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU1_target_mem_0             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_agg_pd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint16_t	bn0_first                            	; /* Member of payload_offset_sop union */
        uint32_t	sop                                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_num                               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU2_target_mem_0             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_agg_pd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	abs0                                 	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved5                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU3_target_mem_0             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_agg_pd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
        uint32_t	fpm_num                              	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	fpm_pool                             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved6                            	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU4_target_mem_0             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_agg_pd                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PROCESSING_CPU_RX_DESCRIPTOR_STRUCT;

#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VALID_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VALID_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VALID_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_HEADROOM_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_READ_G(r, g, idx)       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_WRITE_G(v, g, idx)      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_READ(r, p)              FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_OR_IS_CHKSUM_VERIFIED_WRITE(v, p)             FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DONT_AGG_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 4, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 4, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_MC_COPY_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 3, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 3, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REPROCESS_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 2, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 2, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COLOR_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COLOR_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 1, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 1, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FORCE_COPY_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 7, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 7, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_READ(r, p)                  FIELD_MREAD_16((uint8_t *)(p), 7, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_OR_SERVICE_QUEUE_WLAN_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)(p), 7, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 7, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 7, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_READ(r, p)                                        FIELD_MREAD_16((uint8_t *)(p), 7, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TYPE_WRITE(v, p)                                       FIELD_MWRITE_16((uint8_t *)(p), 7, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_IS_WLAN_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 0, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_IS_WLAN_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT), 0, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_IS_WLAN_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 0, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_IS_WLAN_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 0, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_WLAN_FRW_TYPE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 7, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_WLAN_FRW_TYPE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 7, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_WLAN_FRW_TYPE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 7, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SERVICE_QUEUE_WLAN_FRW_TYPE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 7, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 0, 7, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 0, 7, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 7, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_REASON_OR_FORWARDING_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 7, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_0_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_0_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_0_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 1, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_0_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 1, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REASON_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 0, 6, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REASON_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 0, 6, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REASON_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 6, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REASON_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 6, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TC_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 4, 3, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TC_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 4, 3, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TC_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)(p) + 1, 4, 3, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TC_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)(p) + 1, 4, 3, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_0_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 0, 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_0_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 0, 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_0_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_0_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_PROXY_MODE_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_PROXY_MODE_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_PROXY_MODE_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 1, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_PROXY_MODE_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 1, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WLAN_MCAST_IDX_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 0, 6, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WLAN_MCAST_IDX_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 0, 6, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WLAN_MCAST_IDX_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 6, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WLAN_MCAST_IDX_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 6, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_1_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_1_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_1_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 1, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_CPU_REDIRECT_1_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 1, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_1_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 0, 6, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_1_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 1, 0, 6, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_1_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 6, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_1_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 6, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 2, 7, 9, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 2, 7, 9, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                               FIELD_MREAD_16((uint8_t *)(p) + 2, 7, 9, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)(p) + 2, 7, 9, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLAG_1588_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DSL_RX_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DSL_RX_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DSL_RX_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DSL_RX_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 3, 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_OR_FORWARDING_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 3, 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 3, 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_COHERENT_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 3, 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_UCAST_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_UCAST_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_UCAST_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p) + 3, 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_UCAST_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p) + 3, 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_READ_G(r, g, idx) GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 1, 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 1, 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_READ(r, p)        FIELD_MREAD_8((uint8_t *)(p) + 3, 1, 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_OR_TCPSPDTEST_STREAM_ID_WRITE(v, p)       FIELD_MWRITE_8((uint8_t *)(p) + 3, 1, 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 1, 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 1, 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 3, 1, 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_2_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 3, 1, 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_STREAM_ID_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 2, 3, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_STREAM_ID_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 2, 3, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_STREAM_ID_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 3, 2, 3, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_STREAM_ID_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 3, 2, 3, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 1, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 3, 1, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 3, 1, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 3, 1, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_READ_G(r, g, idx)GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 4, 6, 10, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 4, 6, 10, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_READ(r, p)FIELD_MREAD_16((uint8_t *)(p) + 4, 6, 10, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_NUM_OF_AVAIL_DHD_REPL_OR_METADATA_1_OR_CPU_REDIRECT_WRITE(v, p)FIELD_MWRITE_16((uint8_t *)(p) + 4, 6, 10, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_0_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 4, 6, 10, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_0_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 4, 6, 10, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_0_READ(r, p)                                FIELD_MREAD_16((uint8_t *)(p) + 4, 6, 10, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_0_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)(p) + 4, 6, 10, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 4, 6, 10, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 4, 6, 10, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p) + 4, 6, 10, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p) + 4, 6, 10, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_READ_G(r, g, idx)                         GROUP_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_WRITE_G(v, g, idx)                        GROUP_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_READ(r, p)                                MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_WRITE(v, p)                               MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_0_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 5, 6, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_0_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 5, 6, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_0_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 5, 6, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_WAN_FLOW_0_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 5, 6, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 5, 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 5, 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 5, 5, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PRIORITY_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 5, 5, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_INGRESS_CONG_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 5, 4, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_INGRESS_CONG_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 5, 4, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_INGRESS_CONG_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 5, 4, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_INGRESS_CONG_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 5, 4, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 5, 3, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 5, 3, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS_READ(r, p)                                         FIELD_MREAD_8((uint8_t *)(p) + 5, 3, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS_WRITE(v, p)                                        FIELD_MWRITE_8((uint8_t *)(p) + 5, 3, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 6, 0, 14, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 6, 0, 14, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                               FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DROP_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 7, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 7, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DROP_READ(r, p)                                        FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_DROP_WRITE(v, p)                                       FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 4, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 4, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 8, 4, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_1_1_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 8, 4, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_LAN_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 3, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 3, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_LAN_READ(r, p)                                         FIELD_MREAD_8((uint8_t *)(p) + 8, 3, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_LAN_WRITE(v, p)                                        FIELD_MWRITE_8((uint8_t *)(p) + 8, 3, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VPORT_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VPORT_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VPORT_READ(r, p)                                       FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 8, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_VPORT_WRITE(v, p)                                      FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 8, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLOW_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLOW_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLOW_READ(r, p)                                        FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 8, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FLOW_WRITE(v, p)                                       FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 8, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOURCE_PORT_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOURCE_PORT_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOURCE_PORT_READ(r, p)                                 FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 8, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOURCE_PORT_WRITE(v, p)                                FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 8, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_VPORT_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 2, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_VPORT_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 2, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_VPORT_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 8, 2, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_IS_VPORT_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 8, 2, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PORT_ID_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 3, 7, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PORT_ID_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 3, 7, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PORT_ID_READ(r, p)                                     FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 7, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PORT_ID_WRITE(v, p)                                    FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 7, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 9, 2, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 9, 2, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 9, 2, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_0_1_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 9, 2, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_READ_G(r, g, idx)   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 14, 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_WRITE_G(v, g, idx)  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 14, 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_READ(r, p)          FIELD_MREAD_32((uint8_t *)(p) + 8, 14, 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_OR_METADATA_2_OR_CPU_REDIRECT_WRITE(v, p)         FIELD_MWRITE_32((uint8_t *)(p) + 8, 14, 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 14, 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 8, 14, 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_READ(r, p)                                        FIELD_MREAD_32((uint8_t *)(p) + 8, 14, 4, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SSID_WRITE(v, p)                                       FIELD_MWRITE_32((uint8_t *)(p) + 8, 14, 4, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_2_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 10, 6, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_2_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 10, 6, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_2_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 10, 6, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_METADATA_2_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 10, 6, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_OMCI_ENC_KEY_INDEX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 9, 0, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_OMCI_ENC_KEY_INDEX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 9, 0, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_OMCI_ENC_KEY_INDEX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_OMCI_ENC_KEY_INDEX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 10, 0, 14, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 10, 0, 14, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_READ(r, p)                                 FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 14, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_OR_ABS3_WRITE(v, p)                                FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 14, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_FIRST_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 10, 0, 14, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_FIRST_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 10, 0, 14, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_FIRST_READ(r, p)                                   FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 14, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN1_FIRST_WRITE(v, p)                                  FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 14, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS3_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 10, 0, 11, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS3_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 10, 0, 11, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS3_READ(r, p)                                        FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 11, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS3_WRITE(v, p)                                       FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 11, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 7, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 7, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_AGG_PD_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 0, 30, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 0, 30, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ(r, p)                          FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 30, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 30, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_FPM_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 3, 11, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_FPM_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 3, 11, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_FPM_READ(r, p)                                     FIELD_MREAD_16((uint8_t *)(p) + 12, 3, 11, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_FPM_WRITE(v, p)                                    FIELD_MWRITE_16((uint8_t *)(p) + 12, 3, 11, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_FPM_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 0, 19, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_FPM_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 0, 19, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_FPM_READ(r, p)                                      FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 19, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_FPM_WRITE(v, p)                                     FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 19, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 7, 7, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 7, 7, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_READ(r, p)                                      FIELD_MREAD_16((uint8_t *)(p) + 12, 7, 7, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN_NUM_WRITE(v, p)                                     FIELD_MWRITE_16((uint8_t *)(p) + 12, 7, 7, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_READ_G(r, g, idx)                                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 13, 0, 7, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 13, 0, 7, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_READ(r, p)                                         FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 7, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_SOP_WRITE(v, p)                                        FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 7, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)                            GROUP_MREAD_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)                           GROUP_MWRITE_16((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN0_FIRST_READ(r, p)                                   MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                                  MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS0_READ_G(r, g, idx)                                 GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 0, 29, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS0_WRITE_G(v, g, idx)                                GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 0, 29, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS0_READ(r, p)                                        FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 29, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_ABS0_WRITE(v, p)                                       FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 29, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_POOL_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 13, 1, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_POOL_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 13, 1, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_POOL_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 13, 1, 2, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_POOL_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 13, 1, 2, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_NUM_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 0, 17, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_NUM_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_CPU_RX_DESCRIPTOR_STRUCT) + 12, 0, 17, (v))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_NUM_READ(r, p)                                     FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 17, (r))
#define RDD_PROCESSING_CPU_RX_DESCRIPTOR_FPM_NUM_WRITE(v, p)                                    FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 17, (v))
/* <<<PROCESSING_CPU_RX_DESCRIPTOR_STRUCT */

/* <<<RDD_PROCESSING_CPU_RX_DESCRIPTOR */


/* >>>RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY */
#define CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_F_OFFSET                                                         0
#define CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_F_WIDTH                                                          32
#define CPU_RING_INTERRUPT_COUNTER_ENTRY_CPU_RING_INTERRUPT_COUNTER_ENTRY_OFFSET                                  0
#define CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_OFFSET                                                           0
#define CPU_RING_INTERRUPT_COUNTER_ENTRY_COUNTER_WORD_OFFSET                                                      0
#define CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_F_OFFSET                                                        0
#define CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_F_WIDTH                                                         32
#define CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_OFFSET                                                          4
#define CPU_RING_INTERRUPT_COUNTER_ENTRY_MAX_SIZE_WORD_OFFSET                                                     1
/* <<<RDD_CPU_RING_INTERRUPT_COUNTER_ENTRY */


/* >>>RDD_CPU_RX_METER_ENTRY */
#define CPU_RX_METER_ENTRY_CURRENT_BUDGET_F_OFFSET                                                  16
#define CPU_RX_METER_ENTRY_CURRENT_BUDGET_F_WIDTH                                                   16
#define CPU_RX_METER_ENTRY_CPU_RX_METER_ENTRY_OFFSET                                                0
#define CPU_RX_METER_ENTRY_CURRENT_BUDGET_OFFSET                                                    0
#define CPU_RX_METER_ENTRY_CURRENT_BUDGET_WORD_OFFSET                                               0
#define CPU_RX_METER_ENTRY_BUDGET_LIMIT_F_OFFSET                                                    0
#define CPU_RX_METER_ENTRY_BUDGET_LIMIT_F_WIDTH                                                     16
#define CPU_RX_METER_ENTRY_BUDGET_LIMIT_OFFSET                                                      2
#define CPU_RX_METER_ENTRY_BUDGET_LIMIT_WORD_OFFSET                                                 0
#define CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_F_OFFSET                                                16
#define CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_F_WIDTH                                                 16
#define CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_OFFSET                                                  4
#define CPU_RX_METER_ENTRY_ALLOCATED_BUDGET_WORD_OFFSET                                             1
#define CPU_RX_METER_ENTRY_BUDGET_RESIDUE_F_OFFSET                                                  8
#define CPU_RX_METER_ENTRY_BUDGET_RESIDUE_F_WIDTH                                                   8
#define CPU_RX_METER_ENTRY_BUDGET_RESIDUE_OFFSET                                                    6
#define CPU_RX_METER_ENTRY_BUDGET_RESIDUE_WORD_OFFSET                                               1
#define CPU_RX_METER_ENTRY_BUDGET_RESIDUE_F_OFFSET_MOD16                                            8
#define CPU_RX_METER_ENTRY_CURRENT_CYCLE_F_OFFSET                                                   0
#define CPU_RX_METER_ENTRY_CURRENT_CYCLE_F_WIDTH                                                    8
#define CPU_RX_METER_ENTRY_CURRENT_CYCLE_OFFSET                                                     7
#define CPU_RX_METER_ENTRY_CURRENT_CYCLE_WORD_OFFSET                                                1
#define CPU_RX_METER_ENTRY_CURRENT_CYCLE_F_OFFSET_MOD16                                             0
/* <<<RDD_CPU_RX_METER_ENTRY */


/* >>>RDD_CPU_REDIRECT_MODE_ENTRY */
#define CPU_REDIRECT_MODE_ENTRY_MODE_F_OFFSET                                                            0
#define CPU_REDIRECT_MODE_ENTRY_MODE_F_WIDTH                                                             8
#define CPU_REDIRECT_MODE_ENTRY_CPU_REDIRECT_MODE_ENTRY_OFFSET                                           0
#define CPU_REDIRECT_MODE_ENTRY_MODE_OFFSET                                                              0
#define CPU_REDIRECT_MODE_ENTRY_MODE_WORD_OFFSET                                                         0
#define CPU_REDIRECT_MODE_ENTRY_MODE_F_OFFSET_MOD16                                                      0
/* <<<RDD_CPU_REDIRECT_MODE_ENTRY */


/* >>>RDD_CSO_CONTEXT_ENTRY */
#define CSO_CONTEXT_ENTRY_CSUM_VALUE_F_OFFSET                                                      0
#define CSO_CONTEXT_ENTRY_CSUM_VALUE_F_WIDTH                                                       16
#define CSO_CONTEXT_ENTRY_CSUM_VALUE_OFFSET                                                        6
#define CSO_CONTEXT_ENTRY_CSUM_VALUE_WORD_OFFSET                                                   1
#define CSO_CONTEXT_ENTRY_CAM_RESULT_F_OFFSET                                                      16
#define CSO_CONTEXT_ENTRY_CAM_RESULT_F_WIDTH                                                       16
#define CSO_CONTEXT_ENTRY_CAM_RESULT_OFFSET                                                        8
#define CSO_CONTEXT_ENTRY_CAM_RESULT_WORD_OFFSET                                                   2
#define CSO_CONTEXT_ENTRY_CRC_RESULT_F_OFFSET                                                      0
#define CSO_CONTEXT_ENTRY_CRC_RESULT_F_WIDTH                                                       32
#define CSO_CONTEXT_ENTRY_CRC_RESULT_OFFSET                                                        12
#define CSO_CONTEXT_ENTRY_CRC_RESULT_WORD_OFFSET                                                   3
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_F_OFFSET                                                0
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_F_WIDTH                                                 32
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_OFFSET                                                  16
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_0_WORD_OFFSET                                             4
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_F_OFFSET                                                0
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_F_WIDTH                                                 32
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_OFFSET                                                  20
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_1_WORD_OFFSET                                             5
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_F_OFFSET                                                0
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_F_WIDTH                                                 32
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_OFFSET                                                  24
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_2_WORD_OFFSET                                             6
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_F_OFFSET                                                0
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_F_WIDTH                                                 32
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_OFFSET                                                  28
#define CSO_CONTEXT_ENTRY_SAVED_PKT_DESC_3_WORD_OFFSET                                             7
#define CSO_CONTEXT_ENTRY_PARSER_RESULT_OFFSET                                                     32
#define CSO_CONTEXT_ENTRY_PARSER_RESULT_WORD_OFFSET                                                8
#define CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_F_OFFSET                                               0
#define CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_F_WIDTH                                                32
#define CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_OFFSET                                                 128
#define CSO_CONTEXT_ENTRY_SAVED_RET_ADDRESS_WORD_OFFSET                                            32
#define CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_F_OFFSET                                               0
#define CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_F_WIDTH                                                32
#define CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_OFFSET                                                 132
#define CSO_CONTEXT_ENTRY_GOOD_CSUM_PACKETS_WORD_OFFSET                                            33
#define CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_F_OFFSET                                          0
#define CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_F_WIDTH                                           32
#define CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_OFFSET                                            136
#define CSO_CONTEXT_ENTRY_NO_CSO_SUPPORT_PACKETS_WORD_OFFSET                                       34
#define CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_F_OFFSET                                       0
#define CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_F_WIDTH                                        32
#define CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_OFFSET                                         140
#define CSO_CONTEXT_ENTRY_BAD_IPV4_HDR_CSUM_PACKETS_WORD_OFFSET                                    35
#define CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_F_OFFSET                                        0
#define CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_F_WIDTH                                         32
#define CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_OFFSET                                          144
#define CSO_CONTEXT_ENTRY_BAD_TCP_UDP_CSUM_PACKETS_WORD_OFFSET                                     36
#define CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_F_OFFSET                                             16
#define CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_F_WIDTH                                              16
#define CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_OFFSET                                               148
#define CSO_CONTEXT_ENTRY_SAVED_BUFFER_NUMBER_WORD_OFFSET                                          37
#define CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_F_OFFSET                                             0
#define CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_F_WIDTH                                              16
#define CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_OFFSET                                               150
#define CSO_CONTEXT_ENTRY_SAVED_PACKET_LENGTH_WORD_OFFSET                                          37
/* <<<RDD_CSO_CONTEXT_ENTRY */


/* >>>RDD_SPDSVC_RX_TS_STAT */
#define SPDSVC_RX_TS_STAT_TS_FIRST_F_OFFSET                                                        0
#define SPDSVC_RX_TS_STAT_TS_FIRST_F_WIDTH                                                         32
#define SPDSVC_RX_TS_STAT_SPDSVC_RX_TS_STAT_OFFSET                                                 0
#define SPDSVC_RX_TS_STAT_TS_FIRST_OFFSET                                                          0
#define SPDSVC_RX_TS_STAT_TS_FIRST_WORD_OFFSET                                                     0
#define SPDSVC_RX_TS_STAT_TS_LAST_F_OFFSET                                                         0
#define SPDSVC_RX_TS_STAT_TS_LAST_F_WIDTH                                                          32
#define SPDSVC_RX_TS_STAT_TS_LAST_OFFSET                                                           4
#define SPDSVC_RX_TS_STAT_TS_LAST_WORD_OFFSET                                                      1
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_F_OFFSET                                                    0
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_F_WIDTH                                                     1
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_OFFSET                                                      11
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_WORD_OFFSET                                                 2
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_F_OFFSET_MOD8                                               0
#define SPDSVC_RX_TS_STAT_TS_FIRST_SET_F_OFFSET_MOD16                                              0

/* >>>SPDSVC_RX_TS_STAT_STRUCT */
typedef union
{
    uint32_t word_32[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	ts_first    	;
        uint32_t	ts_last     	;
        uint32_t	reserved    	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ts_first_set	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	ts_first    	;
        uint32_t	ts_last     	;
        uint32_t	ts_first_set	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved    	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) SPDSVC_RX_TS_STAT_STRUCT;

#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_RX_TS_STAT_STRUCT), (r))
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_RX_TS_STAT_STRUCT), (v))
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_READ(r, p)                     MREAD_32((uint8_t *)(p), (r))
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_WRITE(v, p)                    MWRITE_32((uint8_t *)(p), (v))
#define RDD_SPDSVC_RX_TS_STAT_TS_LAST_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(SPDSVC_RX_TS_STAT_STRUCT) + 4, (r))
#define RDD_SPDSVC_RX_TS_STAT_TS_LAST_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(SPDSVC_RX_TS_STAT_STRUCT) + 4, (v))
#define RDD_SPDSVC_RX_TS_STAT_TS_LAST_READ(r, p)                      MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_SPDSVC_RX_TS_STAT_TS_LAST_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_SET_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SPDSVC_RX_TS_STAT_STRUCT) + 11, 0, 1, (r))
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_SET_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SPDSVC_RX_TS_STAT_STRUCT) + 11, 0, 1, (v))
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_SET_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 11, 0, 1, (r))
#define RDD_SPDSVC_RX_TS_STAT_TS_FIRST_SET_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 11, 0, 1, (v))
/* <<<SPDSVC_RX_TS_STAT_STRUCT */

/* <<<RDD_SPDSVC_RX_TS_STAT */


/* >>>RDD_RING_CPU_TX_DESCRIPTOR */
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_F_OFFSET                                                       31
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_F_WIDTH                                                        1
#define RING_CPU_TX_DESCRIPTOR_RING_CPU_TX_DESCRIPTOR_OFFSET                                            0
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_OFFSET                                                         0
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_WORD_OFFSET                                                    0
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_F_OFFSET_MOD8                                                  7
#define RING_CPU_TX_DESCRIPTOR_IS_EGRESS_F_OFFSET_MOD16                                                 15
#define RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   22
#define RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     0
#define RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define RING_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             6
#define RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   8
#define RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     0
#define RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                0
#define RING_CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             8
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_F_OFFSET                                                 0
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_F_WIDTH                                                  8
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_OFFSET                                                   3
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_WORD_OFFSET                                              0
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_HIGH_F_OFFSET_MOD16                                           0
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_F_OFFSET                                     0
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_F_WIDTH                                      32
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_OFFSET                                       4
#define RING_CPU_TX_DESCRIPTOR_SK_BUF_PTR_LOW_OR_DATA_1588_WORD_OFFSET                                  1
#define RING_CPU_TX_DESCRIPTOR_COLOR_F_OFFSET                                                           31
#define RING_CPU_TX_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define RING_CPU_TX_DESCRIPTOR_COLOR_OFFSET                                                             8
#define RING_CPU_TX_DESCRIPTOR_COLOR_WORD_OFFSET                                                        2
#define RING_CPU_TX_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      7
#define RING_CPU_TX_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     15
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET                                                  30
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_WIDTH                                                   1
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_OFFSET                                                    8
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WORD_OFFSET                                               2
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET_MOD8                                             6
#define RING_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET_MOD16                                            14
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET                                                       29
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_F_WIDTH                                                        1
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_OFFSET                                                         8
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_WORD_OFFSET                                                    2
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD8                                                  5
#define RING_CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD16                                                 13
#define RING_CPU_TX_DESCRIPTOR_LAN_F_OFFSET                                                             28
#define RING_CPU_TX_DESCRIPTOR_LAN_F_WIDTH                                                              1
#define RING_CPU_TX_DESCRIPTOR_LAN_OFFSET                                                               8
#define RING_CPU_TX_DESCRIPTOR_LAN_WORD_OFFSET                                                          2
#define RING_CPU_TX_DESCRIPTOR_LAN_F_OFFSET_MOD8                                                        4
#define RING_CPU_TX_DESCRIPTOR_LAN_F_OFFSET_MOD16                                                       12
#define RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_F_OFFSET                                      20
#define RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_F_WIDTH                                       8
#define RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_OFFSET                                        8
#define RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_WORD_OFFSET                                   2
#define RING_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_F_OFFSET_MOD16                                4
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_F_OFFSET                                                    19
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_F_WIDTH                                                     1
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_OFFSET                                                      9
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_WORD_OFFSET                                                 2
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_F_OFFSET_MOD8                                               3
#define RING_CPU_TX_DESCRIPTOR_FPM_FALLBACK_F_OFFSET_MOD16                                              3
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_F_OFFSET                                                       18
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_F_WIDTH                                                        1
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_OFFSET                                                         9
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_WORD_OFFSET                                                    2
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_F_OFFSET_MOD8                                                  2
#define RING_CPU_TX_DESCRIPTOR_SBPM_COPY_F_OFFSET_MOD16                                                 2
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    17
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      9
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 2
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               1
#define RING_CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              1
#define RING_CPU_TX_DESCRIPTOR_ABS_F_OFFSET                                                             16
#define RING_CPU_TX_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define RING_CPU_TX_DESCRIPTOR_ABS_OFFSET                                                               9
#define RING_CPU_TX_DESCRIPTOR_ABS_WORD_OFFSET                                                          2
#define RING_CPU_TX_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        0
#define RING_CPU_TX_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       0
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_F_OFFSET                                                       14
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_F_WIDTH                                                        2
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_OFFSET                                                         10
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_WORD_OFFSET                                                    2
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_F_OFFSET_MOD8                                                  6
#define RING_CPU_TX_DESCRIPTOR_LAG_INDEX_F_OFFSET_MOD16                                                 14
#define RING_CPU_TX_DESCRIPTOR_SSID_F_OFFSET                                                            10
#define RING_CPU_TX_DESCRIPTOR_SSID_F_WIDTH                                                             4
#define RING_CPU_TX_DESCRIPTOR_SSID_OFFSET                                                              10
#define RING_CPU_TX_DESCRIPTOR_SSID_WORD_OFFSET                                                         2
#define RING_CPU_TX_DESCRIPTOR_SSID_F_OFFSET_MOD8                                                       2
#define RING_CPU_TX_DESCRIPTOR_SSID_F_OFFSET_MOD16                                                      10
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_F_OFFSET                                                9
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_F_WIDTH                                                 1
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_OFFSET                                                  10
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_WORD_OFFSET                                             2
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_F_OFFSET_MOD8                                           1
#define RING_CPU_TX_DESCRIPTOR_EGRESS_DONT_DROP_F_OFFSET_MOD16                                          9
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_F_OFFSET                                                0
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_F_WIDTH                                                 8
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_OFFSET                                                  11
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_WORD_OFFSET                                             2
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_HIGH_F_OFFSET_MOD16                                          0
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_F_OFFSET                                      0
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_F_WIDTH                                       32
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_OFFSET                                        12
#define RING_CPU_TX_DESCRIPTOR_PKT_BUF_PTR_LOW_OR_FPM_BN0_WORD_OFFSET                                   3
/* <<<RDD_RING_CPU_TX_DESCRIPTOR */


/* >>>RDD_CPU_TX_RING_INDICES */
#define CPU_TX_RING_INDICES_READ_IDX_F_OFFSET                                                        16
#define CPU_TX_RING_INDICES_READ_IDX_F_WIDTH                                                         16
#define CPU_TX_RING_INDICES_CPU_TX_RING_INDICES_OFFSET                                               0
#define CPU_TX_RING_INDICES_READ_IDX_OFFSET                                                          0
#define CPU_TX_RING_INDICES_READ_IDX_WORD_OFFSET                                                     0
#define CPU_TX_RING_INDICES_WRITE_IDX_F_OFFSET                                                       0
#define CPU_TX_RING_INDICES_WRITE_IDX_F_WIDTH                                                        16
#define CPU_TX_RING_INDICES_WRITE_IDX_OFFSET                                                         2
#define CPU_TX_RING_INDICES_WRITE_IDX_WORD_OFFSET                                                    0
/* <<<RDD_CPU_TX_RING_INDICES */


/* >>>RDD_CPU_TX_SYNC_FIFO_ENTRY */
#define CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_F_OFFSET                                                       16
#define CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_F_WIDTH                                                        16
#define CPU_TX_SYNC_FIFO_ENTRY_CPU_TX_SYNC_FIFO_ENTRY_OFFSET                                            0
#define CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_OFFSET                                                         0
#define CPU_TX_SYNC_FIFO_ENTRY_WRITE_PTR_WORD_OFFSET                                                    0
#define CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_F_OFFSET                                                        0
#define CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_F_WIDTH                                                         16
#define CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_OFFSET                                                          2
#define CPU_TX_SYNC_FIFO_ENTRY_READ_PTR_WORD_OFFSET                                                     0
#define CPU_TX_SYNC_FIFO_ENTRY_FIFO_F_OFFSET                                                            16
#define CPU_TX_SYNC_FIFO_ENTRY_FIFO_F_WIDTH                                                             16
#define CPU_TX_SYNC_FIFO_ENTRY_FIFO_OFFSET                                                              4
#define CPU_TX_SYNC_FIFO_ENTRY_FIFO_WORD_OFFSET                                                         1
/* <<<RDD_CPU_TX_SYNC_FIFO_ENTRY */


/* >>>RDD_CPU_TX_DBG_CNTRS */
#define CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_F_OFFSET                                                    0
#define CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_F_WIDTH                                                     32
#define CPU_TX_DBG_CNTRS_CPU_TX_DBG_CNTRS_OFFSET                                                  0
#define CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_OFFSET                                                      0
#define CPU_TX_DBG_CNTRS_SBPM_NO_NEXT_WORD_OFFSET                                                 0
#define CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_F_OFFSET                                                   0
#define CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_F_WIDTH                                                    32
#define CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_OFFSET                                                     4
#define CPU_TX_DBG_CNTRS_SBPM_NO_FIRST_WORD_OFFSET                                                1
#define CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_F_OFFSET                                                 0
#define CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_F_WIDTH                                                  32
#define CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_OFFSET                                                   8
#define CPU_TX_DBG_CNTRS_TX_FLOW_DISABLE_WORD_OFFSET                                              2
#define CPU_TX_DBG_CNTRS_NO_FPM_F_OFFSET                                                          0
#define CPU_TX_DBG_CNTRS_NO_FPM_F_WIDTH                                                           32
#define CPU_TX_DBG_CNTRS_NO_FPM_OFFSET                                                            12
#define CPU_TX_DBG_CNTRS_NO_FPM_WORD_OFFSET                                                       3
#define CPU_TX_DBG_CNTRS_TASK_EXIT_F_OFFSET                                                       0
#define CPU_TX_DBG_CNTRS_TASK_EXIT_F_WIDTH                                                        32
#define CPU_TX_DBG_CNTRS_TASK_EXIT_OFFSET                                                         16
#define CPU_TX_DBG_CNTRS_TASK_EXIT_WORD_OFFSET                                                    4
#define CPU_TX_DBG_CNTRS_SYNC_WAIT_F_OFFSET                                                       0
#define CPU_TX_DBG_CNTRS_SYNC_WAIT_F_WIDTH                                                        32
#define CPU_TX_DBG_CNTRS_SYNC_WAIT_OFFSET                                                         20
#define CPU_TX_DBG_CNTRS_SYNC_WAIT_WORD_OFFSET                                                    5
#define CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_F_OFFSET                                         0
#define CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_F_WIDTH                                          32
#define CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_OFFSET                                           24
#define CPU_TX_DBG_CNTRS_NO_DISPATCHER_SCHEDULER_WORD_OFFSET                                      6
#define CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_F_OFFSET                                               0
#define CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_F_WIDTH                                                32
#define CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_OFFSET                                                 28
#define CPU_TX_DBG_CNTRS_RECYCLE_FIFO_FULL_WORD_OFFSET                                            7
#define CPU_TX_DBG_CNTRS_DROP_PKT_F_OFFSET                                                        0
#define CPU_TX_DBG_CNTRS_DROP_PKT_F_WIDTH                                                         32
#define CPU_TX_DBG_CNTRS_DROP_PKT_OFFSET                                                          32
#define CPU_TX_DBG_CNTRS_DROP_PKT_WORD_OFFSET                                                     8
#define CPU_TX_DBG_CNTRS_TASK_START_F_OFFSET                                                      0
#define CPU_TX_DBG_CNTRS_TASK_START_F_WIDTH                                                       32
#define CPU_TX_DBG_CNTRS_TASK_START_OFFSET                                                        36
#define CPU_TX_DBG_CNTRS_TASK_START_WORD_OFFSET                                                   9
#define CPU_TX_DBG_CNTRS_NO_FWD_F_OFFSET                                                          0
#define CPU_TX_DBG_CNTRS_NO_FWD_F_WIDTH                                                           32
#define CPU_TX_DBG_CNTRS_NO_FWD_OFFSET                                                            40
#define CPU_TX_DBG_CNTRS_NO_FWD_WORD_OFFSET                                                       10
/* <<<RDD_CPU_TX_DBG_CNTRS */


/* >>>RDD_SPDSVC_GEN_PARAMS */
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_F_OFFSET                                              0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_F_WIDTH                                               32
#define SPDSVC_GEN_PARAMS_SPDSVC_GEN_PARAMS_OFFSET                                                 0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_OFFSET                                                0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_0_WORD_OFFSET                                           0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_F_OFFSET                                              0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_F_WIDTH                                               32
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_OFFSET                                                4
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_1_WORD_OFFSET                                           1
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_F_OFFSET                                              0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_F_WIDTH                                               32
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_OFFSET                                                24
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_2_WORD_OFFSET                                           6
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_F_OFFSET                                              0
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_F_WIDTH                                               32
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_OFFSET                                                28
#define SPDSVC_GEN_PARAMS_PROCESSING_TX_PD_3_WORD_OFFSET                                           7
#define SPDSVC_GEN_PARAMS_TOTAL_COPIES_F_OFFSET                                                    0
#define SPDSVC_GEN_PARAMS_TOTAL_COPIES_F_WIDTH                                                     32
#define SPDSVC_GEN_PARAMS_TOTAL_COPIES_OFFSET                                                      32
#define SPDSVC_GEN_PARAMS_TOTAL_COPIES_WORD_OFFSET                                                 8
#define SPDSVC_GEN_PARAMS_BUCKET_F_OFFSET                                                          0
#define SPDSVC_GEN_PARAMS_BUCKET_F_WIDTH                                                           32
#define SPDSVC_GEN_PARAMS_BUCKET_OFFSET                                                            36
#define SPDSVC_GEN_PARAMS_BUCKET_WORD_OFFSET                                                       9
#define SPDSVC_GEN_PARAMS_TIMER_PERIOD_F_OFFSET                                                    16
#define SPDSVC_GEN_PARAMS_TIMER_PERIOD_F_WIDTH                                                     16
#define SPDSVC_GEN_PARAMS_TIMER_PERIOD_OFFSET                                                      40
#define SPDSVC_GEN_PARAMS_TIMER_PERIOD_WORD_OFFSET                                                 10
#define SPDSVC_GEN_PARAMS_TOTAL_LENGTH_F_OFFSET                                                    0
#define SPDSVC_GEN_PARAMS_TOTAL_LENGTH_F_WIDTH                                                     16
#define SPDSVC_GEN_PARAMS_TOTAL_LENGTH_OFFSET                                                      42
#define SPDSVC_GEN_PARAMS_TOTAL_LENGTH_WORD_OFFSET                                                 10
#define SPDSVC_GEN_PARAMS_TX_PACKETS_F_OFFSET                                                      0
#define SPDSVC_GEN_PARAMS_TX_PACKETS_F_WIDTH                                                       32
#define SPDSVC_GEN_PARAMS_TX_PACKETS_OFFSET                                                        44
#define SPDSVC_GEN_PARAMS_TX_PACKETS_WORD_OFFSET                                                   11
#define SPDSVC_GEN_PARAMS_TX_DROPPED_F_OFFSET                                                      0
#define SPDSVC_GEN_PARAMS_TX_DROPPED_F_WIDTH                                                       32
#define SPDSVC_GEN_PARAMS_TX_DROPPED_OFFSET                                                        48
#define SPDSVC_GEN_PARAMS_TX_DROPPED_WORD_OFFSET                                                   12
#define SPDSVC_GEN_PARAMS_TOKENS_F_OFFSET                                                          0
#define SPDSVC_GEN_PARAMS_TOKENS_F_WIDTH                                                           32
#define SPDSVC_GEN_PARAMS_TOKENS_OFFSET                                                            52
#define SPDSVC_GEN_PARAMS_TOKENS_WORD_OFFSET                                                       13
#define SPDSVC_GEN_PARAMS_BUCKET_SIZE_F_OFFSET                                                     0
#define SPDSVC_GEN_PARAMS_BUCKET_SIZE_F_WIDTH                                                      32
#define SPDSVC_GEN_PARAMS_BUCKET_SIZE_OFFSET                                                       56
#define SPDSVC_GEN_PARAMS_BUCKET_SIZE_WORD_OFFSET                                                  14
/* <<<RDD_SPDSVC_GEN_PARAMS */


/* >>>RDD_SPDTEST_GEN_CFG */
#define SPDTEST_GEN_CFG_TEST_TYPE_F_OFFSET                                                       28
#define SPDTEST_GEN_CFG_TEST_TYPE_F_WIDTH                                                        4
#define SPDTEST_GEN_CFG_SPDTEST_GEN_CFG_OFFSET                                                   0
#define SPDTEST_GEN_CFG_TEST_TYPE_OFFSET                                                         0
#define SPDTEST_GEN_CFG_TEST_TYPE_WORD_OFFSET                                                    0
#define SPDTEST_GEN_CFG_TEST_TYPE_F_OFFSET_MOD8                                                  4
#define SPDTEST_GEN_CFG_TEST_TYPE_F_OFFSET_MOD16                                                 12
#define SPDTEST_GEN_CFG_IS_ON_F_OFFSET                                                           27
#define SPDTEST_GEN_CFG_IS_ON_F_WIDTH                                                            1
#define SPDTEST_GEN_CFG_IS_ON_OFFSET                                                             0
#define SPDTEST_GEN_CFG_IS_ON_WORD_OFFSET                                                        0
#define SPDTEST_GEN_CFG_IS_ON_F_OFFSET_MOD8                                                      3
#define SPDTEST_GEN_CFG_IS_ON_F_OFFSET_MOD16                                                     11
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_F_OFFSET                                                   26
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_F_WIDTH                                                    1
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_OFFSET                                                     0
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_WORD_OFFSET                                                0
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_F_OFFSET_MOD8                                              2
#define SPDTEST_GEN_CFG_IS_ENDLESS_TX_F_OFFSET_MOD16                                             10
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_F_OFFSET                                               25
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_F_WIDTH                                                1
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_OFFSET                                                 0
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_WORD_OFFSET                                            0
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_F_OFFSET_MOD8                                          1
#define SPDTEST_GEN_CFG_NOT_VALID_LICENSE_F_OFFSET_MOD16                                         9
#define SPDTEST_GEN_CFG_IPERF3_64BIT_PKTID_F_OFFSET                                              24
#define SPDTEST_GEN_CFG_IPERF3_64BIT_PKTID_F_WIDTH                                               1
#define SPDTEST_GEN_CFG_IPERF3_64BIT_PKTID_OFFSET                                                0
#define SPDTEST_GEN_CFG_IPERF3_64BIT_PKTID_WORD_OFFSET                                           0
#define SPDTEST_GEN_CFG_IPERF3_64BIT_PKTID_F_OFFSET_MOD8                                         0
#define SPDTEST_GEN_CFG_IPERF3_64BIT_PKTID_F_OFFSET_MOD16                                        8
/* <<<RDD_SPDTEST_GEN_CFG */


/* >>>RDD_UDPSPDT_TX_PARAMS */
#define UDPSPDT_TX_PARAMS_TOTAL_NUM_OF_PKTS_F_OFFSET                                               0
#define UDPSPDT_TX_PARAMS_TOTAL_NUM_OF_PKTS_F_WIDTH                                                32
#define UDPSPDT_TX_PARAMS_UDPSPDT_TX_PARAMS_OFFSET                                                 0
#define UDPSPDT_TX_PARAMS_TOTAL_NUM_OF_PKTS_OFFSET                                                 0
#define UDPSPDT_TX_PARAMS_TOTAL_NUM_OF_PKTS_WORD_OFFSET                                            0
#define UDPSPDT_TX_PARAMS_PACKET_SIZE_F_OFFSET                                                     16
#define UDPSPDT_TX_PARAMS_PACKET_SIZE_F_WIDTH                                                      16
#define UDPSPDT_TX_PARAMS_PACKET_SIZE_OFFSET                                                       4
#define UDPSPDT_TX_PARAMS_PACKET_SIZE_WORD_OFFSET                                                  1
#define UDPSPDT_TX_PARAMS_CURR_BUCKET_F_OFFSET                                                     0
#define UDPSPDT_TX_PARAMS_CURR_BUCKET_F_WIDTH                                                      32
#define UDPSPDT_TX_PARAMS_CURR_BUCKET_OFFSET                                                       8
#define UDPSPDT_TX_PARAMS_CURR_BUCKET_WORD_OFFSET                                                  2
#define UDPSPDT_TX_PARAMS_BUCKET_BUDGET_F_OFFSET                                                   0
#define UDPSPDT_TX_PARAMS_BUCKET_BUDGET_F_WIDTH                                                    32
#define UDPSPDT_TX_PARAMS_BUCKET_BUDGET_OFFSET                                                     12
#define UDPSPDT_TX_PARAMS_BUCKET_BUDGET_WORD_OFFSET                                                3
#define UDPSPDT_TX_PARAMS_MAX_BUCKET_SIZE_F_OFFSET                                                 0
#define UDPSPDT_TX_PARAMS_MAX_BUCKET_SIZE_F_WIDTH                                                  32
#define UDPSPDT_TX_PARAMS_MAX_BUCKET_SIZE_OFFSET                                                   20
#define UDPSPDT_TX_PARAMS_MAX_BUCKET_SIZE_WORD_OFFSET                                              5
/* <<<RDD_UDPSPDT_TX_PARAMS */


/* >>>RDD_UDPSPDT_STREAM_TX_STAT */
#define UDPSPDT_STREAM_TX_STAT_TX_PACKETS_1_F_OFFSET                                                    0
#define UDPSPDT_STREAM_TX_STAT_TX_PACKETS_1_F_WIDTH                                                     32
#define UDPSPDT_STREAM_TX_STAT_UDPSPDT_STREAM_TX_STAT_OFFSET                                            0
#define UDPSPDT_STREAM_TX_STAT_TX_PACKETS_1_OFFSET                                                      0
#define UDPSPDT_STREAM_TX_STAT_TX_PACKETS_1_WORD_OFFSET                                                 0
#define UDPSPDT_STREAM_TX_STAT_TX_PACKETS_0_F_OFFSET                                                    0
#define UDPSPDT_STREAM_TX_STAT_TX_PACKETS_0_F_WIDTH                                                     32
#define UDPSPDT_STREAM_TX_STAT_TX_PACKETS_0_OFFSET                                                      4
#define UDPSPDT_STREAM_TX_STAT_TX_PACKETS_0_WORD_OFFSET                                                 1
#define UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SPBM_F_OFFSET                                                0
#define UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SPBM_F_WIDTH                                                 32
#define UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SPBM_OFFSET                                                  8
#define UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SPBM_WORD_OFFSET                                             2
#define UDPSPDT_STREAM_TX_STAT_FIRST_TS_F_OFFSET                                                        0
#define UDPSPDT_STREAM_TX_STAT_FIRST_TS_F_WIDTH                                                         32
#define UDPSPDT_STREAM_TX_STAT_FIRST_TS_OFFSET                                                          12
#define UDPSPDT_STREAM_TX_STAT_FIRST_TS_WORD_OFFSET                                                     3
#define UDPSPDT_STREAM_TX_STAT_LAST_TS_1_F_OFFSET                                                       0
#define UDPSPDT_STREAM_TX_STAT_LAST_TS_1_F_WIDTH                                                        32
#define UDPSPDT_STREAM_TX_STAT_LAST_TS_1_OFFSET                                                         16
#define UDPSPDT_STREAM_TX_STAT_LAST_TS_1_WORD_OFFSET                                                    4
#define UDPSPDT_STREAM_TX_STAT_LAST_TS_0_F_OFFSET                                                       0
#define UDPSPDT_STREAM_TX_STAT_LAST_TS_0_F_WIDTH                                                        32
#define UDPSPDT_STREAM_TX_STAT_LAST_TS_0_OFFSET                                                         20
#define UDPSPDT_STREAM_TX_STAT_LAST_TS_0_WORD_OFFSET                                                    5
#define UDPSPDT_STREAM_TX_STAT_IPERF3_TS_SEC_F_OFFSET                                                   0
#define UDPSPDT_STREAM_TX_STAT_IPERF3_TS_SEC_F_WIDTH                                                    32
#define UDPSPDT_STREAM_TX_STAT_IPERF3_TS_SEC_OFFSET                                                     24
#define UDPSPDT_STREAM_TX_STAT_IPERF3_TS_SEC_WORD_OFFSET                                                6
#define UDPSPDT_STREAM_TX_STAT_IPERF3_TS_USEC_F_OFFSET                                                  0
#define UDPSPDT_STREAM_TX_STAT_IPERF3_TS_USEC_F_WIDTH                                                   32
#define UDPSPDT_STREAM_TX_STAT_IPERF3_TS_USEC_OFFSET                                                    28
#define UDPSPDT_STREAM_TX_STAT_IPERF3_TS_USEC_WORD_OFFSET                                               7
#define UDPSPDT_STREAM_TX_STAT_BAD_PROTO_CNTR_F_OFFSET                                                  16
#define UDPSPDT_STREAM_TX_STAT_BAD_PROTO_CNTR_F_WIDTH                                                   16
#define UDPSPDT_STREAM_TX_STAT_BAD_PROTO_CNTR_OFFSET                                                    32
#define UDPSPDT_STREAM_TX_STAT_BAD_PROTO_CNTR_WORD_OFFSET                                               8
#define UDPSPDT_STREAM_TX_STAT_TIME_SLICE_EXPIRE_F_OFFSET                                               0
#define UDPSPDT_STREAM_TX_STAT_TIME_SLICE_EXPIRE_F_WIDTH                                                16
#define UDPSPDT_STREAM_TX_STAT_TIME_SLICE_EXPIRE_OFFSET                                                 34
#define UDPSPDT_STREAM_TX_STAT_TIME_SLICE_EXPIRE_WORD_OFFSET                                            8
#define UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SBPM_TIMER_STOP_F_OFFSET                                     16
#define UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SBPM_TIMER_STOP_F_WIDTH                                      16
#define UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SBPM_TIMER_STOP_OFFSET                                       36
#define UDPSPDT_STREAM_TX_STAT_TX_DROPS_NO_SBPM_TIMER_STOP_WORD_OFFSET                                  9
#define UDPSPDT_STREAM_TX_STAT_FIRST_TS_SET_F_OFFSET                                                    0
#define UDPSPDT_STREAM_TX_STAT_FIRST_TS_SET_F_WIDTH                                                     1
#define UDPSPDT_STREAM_TX_STAT_FIRST_TS_SET_OFFSET                                                      39
#define UDPSPDT_STREAM_TX_STAT_FIRST_TS_SET_WORD_OFFSET                                                 9
#define UDPSPDT_STREAM_TX_STAT_FIRST_TS_SET_F_OFFSET_MOD8                                               0
#define UDPSPDT_STREAM_TX_STAT_FIRST_TS_SET_F_OFFSET_MOD16                                              0
/* <<<RDD_UDPSPDT_STREAM_TX_STAT */


/* >>>RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR */
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_VALID_F_OFFSET                                                           31
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_VALID_F_WIDTH                                                            1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PROCESSING_SPDSVC_RX_DESCRIPTOR_OFFSET                                   0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_VALID_OFFSET                                                             0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_VALID_WORD_OFFSET                                                        0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_VALID_F_OFFSET_MOD8                                                      7
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_VALID_F_OFFSET_MOD16                                                     15
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_HEADROOM_F_OFFSET                                                        30
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_HEADROOM_F_WIDTH                                                         1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_HEADROOM_OFFSET                                                          0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_HEADROOM_WORD_OFFSET                                                     0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_HEADROOM_F_OFFSET_MOD8                                                   6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_HEADROOM_F_OFFSET_MOD16                                                  14
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DONT_AGG_F_OFFSET                                                        29
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DONT_AGG_F_WIDTH                                                         1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DONT_AGG_OFFSET                                                          0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DONT_AGG_WORD_OFFSET                                                     0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DONT_AGG_F_OFFSET_MOD8                                                   5
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DONT_AGG_F_OFFSET_MOD16                                                  13
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_MC_COPY_F_OFFSET                                                         28
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_MC_COPY_F_WIDTH                                                          1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_MC_COPY_OFFSET                                                           0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_MC_COPY_WORD_OFFSET                                                      0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_MC_COPY_F_OFFSET_MOD8                                                    4
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_MC_COPY_F_OFFSET_MOD16                                                   12
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_REPROCESS_F_OFFSET                                                       27
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_REPROCESS_F_WIDTH                                                        1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_REPROCESS_OFFSET                                                         0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_REPROCESS_WORD_OFFSET                                                    0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_REPROCESS_F_OFFSET_MOD8                                                  3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_REPROCESS_F_OFFSET_MOD16                                                 11
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COLOR_F_OFFSET                                                           26
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COLOR_OFFSET                                                             0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COLOR_WORD_OFFSET                                                        0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      2
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     10
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FORCE_COPY_F_OFFSET                                                      25
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FORCE_COPY_F_WIDTH                                                       1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FORCE_COPY_OFFSET                                                        0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FORCE_COPY_WORD_OFFSET                                                   0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FORCE_COPY_F_OFFSET_MOD8                                                 1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FORCE_COPY_F_OFFSET_MOD16                                                9
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDSVC_TYPE_F_OFFSET                                                     22
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDSVC_TYPE_F_WIDTH                                                      3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDSVC_TYPE_OFFSET                                                       0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDSVC_TYPE_WORD_OFFSET                                                  0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDSVC_TYPE_F_OFFSET_MOD8                                                6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDSVC_TYPE_F_OFFSET_MOD16                                               6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_L3_OFFSET_F_OFFSET                                                       16
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_L3_OFFSET_F_WIDTH                                                        6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_L3_OFFSET_OFFSET                                                         1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_L3_OFFSET_WORD_OFFSET                                                    0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_L3_OFFSET_F_OFFSET_MOD8                                                  0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_L3_OFFSET_F_OFFSET_MOD16                                                 0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   7
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     2
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             7
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_OFFSET                                             6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_WIDTH                                              1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_OFFSET                                               3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_WORD_OFFSET                                          0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_OFFSET_MOD8                                        6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_F_OFFSET_MOD16                                       6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COHERENT_F_OFFSET                                                        5
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COHERENT_F_WIDTH                                                         1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COHERENT_OFFSET                                                          3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COHERENT_WORD_OFFSET                                                     0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COHERENT_F_OFFSET_MOD8                                                   5
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_COHERENT_F_OFFSET_MOD16                                                  5
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_STREAM_ID_F_OFFSET                                               2
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_STREAM_ID_F_WIDTH                                                3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_STREAM_ID_OFFSET                                                 3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_STREAM_ID_WORD_OFFSET                                            0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_STREAM_ID_F_OFFSET_MOD8                                          2
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_STREAM_ID_F_OFFSET_MOD16                                         2
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_F_OFFSET                                            1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_F_WIDTH                                             1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_OFFSET                                              3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_WORD_OFFSET                                         0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_F_OFFSET_MOD8                                       1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_F_OFFSET_MOD16                                      1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_F_OFFSET                                           22
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_F_WIDTH                                            7
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_OFFSET                                             4
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_WORD_OFFSET                                        1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_F_OFFSET_MOD8                                      6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_F_OFFSET_MOD16                                     6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PRIORITY_F_OFFSET                                                        21
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PRIORITY_F_WIDTH                                                         1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PRIORITY_OFFSET                                                          5
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PRIORITY_WORD_OFFSET                                                     1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PRIORITY_F_OFFSET_MOD8                                                   5
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PRIORITY_F_OFFSET_MOD16                                                  5
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_CONG_F_OFFSET                                                    20
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_CONG_F_WIDTH                                                     1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_CONG_OFFSET                                                      5
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_CONG_WORD_OFFSET                                                 1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_CONG_F_OFFSET_MOD8                                               4
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_CONG_F_OFFSET_MOD16                                              4
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS_F_OFFSET                                                             19
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS_OFFSET                                                               5
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS_WORD_OFFSET                                                          1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DROP_F_OFFSET                                                            31
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DROP_F_WIDTH                                                             1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DROP_OFFSET                                                              8
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DROP_WORD_OFFSET                                                         2
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DROP_F_OFFSET_MOD8                                                       7
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_DROP_F_OFFSET_MOD16                                                      15
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET                                                    30
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_1_F_WIDTH                                                     1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_1_OFFSET                                                      8
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_1_WORD_OFFSET                                                 2
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD8                                               6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD16                                              14
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_LAN_F_OFFSET                                                             27
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_LAN_F_WIDTH                                                              1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_LAN_OFFSET                                                               8
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_LAN_WORD_OFFSET                                                          2
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_LAN_F_OFFSET_MOD8                                                        3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_LAN_F_OFFSET_MOD16                                                       11
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_VPORT_F_OFFSET                                                   19
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_VPORT_F_WIDTH                                                    8
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_VPORT_OFFSET                                                     8
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_VPORT_WORD_OFFSET                                                2
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_VPORT_F_OFFSET_MOD16                                             3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_OR_ABS3_F_OFFSET                                                     0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_OR_ABS3_F_WIDTH                                                      19
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_OR_ABS3_OFFSET                                                       8
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_OR_ABS3_WORD_OFFSET                                                  2
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_AGG_PD_F_OFFSET                                                          31
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_AGG_PD_F_WIDTH                                                           1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_AGG_PD_OFFSET                                                            12
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_AGG_PD_WORD_OFFSET                                                       3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_AGG_PD_F_OFFSET_MOD8                                                     7
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_AGG_PD_F_OFFSET_MOD16                                                    15
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    30
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      12
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 3
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               6
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              14
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_F_OFFSET                                              0
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_F_WIDTH                                               30
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_OFFSET                                                12
#define PROCESSING_SPDSVC_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WORD_OFFSET                                           3

/* >>>PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	headroom             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_copy              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reprocess            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	force_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdsvc_type          	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l3_offset            	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q        	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588_or_dsl_rx  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	coherent             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdtest_stream_id    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcpspdtest_is_upload 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_valid              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_headroom           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_dont_agg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mc_copy            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reprocess          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_force_copy         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_spdsvc_type        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_l3_offset          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_first_level_q      	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
        uint32_t	reservedSU1_coherent           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_spdtest_stream_id  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_tcpspdtest_is_upload	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved1          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_valid              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_headroom           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_dont_agg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mc_copy            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reprocess          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_force_copy         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_spdsvc_type        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_l3_offset          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_first_level_q      	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dsl_rx                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
        uint32_t	reservedSU2_coherent           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_spdtest_stream_id  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_tcpspdtest_is_upload	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved1          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved2            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdtest_l3_l4_hdr_len	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_length        	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	drop                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lan                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_vport        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn1_or_abs3          	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_drop               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved4          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lan                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_ingress_vport      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn1_first                      	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_drop               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved4          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lan                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_ingress_vport      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved8                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	abs3                           	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	agg_pd               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	payload_offset_sop   	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_agg_pd             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sop_fpm                        	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm                         	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_agg_pd             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn_num                         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop                            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint16_t	bn0_first                      	; /* Member of payload_offset_sop union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_agg_pd             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_0       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved6                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	abs0                           	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reservedSU4_agg_pd             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_target_mem_0       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved7                      	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	fpm_pool                       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	fpm_num                        	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved1            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcpspdtest_is_upload 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdtest_stream_id    	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	coherent             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588_or_dsl_rx  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	first_level_q        	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l3_offset            	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdsvc_type          	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	force_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reprocess            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_copy              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	headroom             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_reserved1          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_tcpspdtest_is_upload	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_spdtest_stream_id  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_coherent           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
        uint32_t	reservedSU1_first_level_q      	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_l3_offset          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_spdsvc_type        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_force_copy         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reprocess          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mc_copy            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_dont_agg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_headroom           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_valid              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_reserved1          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_tcpspdtest_is_upload	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_spdtest_stream_id  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_coherent           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dsl_rx                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of flag_1588_or_dsl_rx union */
        uint32_t	reservedSU2_first_level_q      	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_l3_offset          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_spdsvc_type        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_force_copy         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reprocess          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mc_copy            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_dont_agg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_headroom           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_valid              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_length        	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdtest_l3_l4_hdr_len	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	bn1_or_abs3          	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	ingress_vport        	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lan                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drop                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn1_first                      	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	reservedSU1_ingress_vport      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lan                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved4          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_drop               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	abs3                           	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	reserved8                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	reservedSU2_ingress_vport      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lan                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved4          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_drop               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	payload_offset_sop   	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	target_mem_0         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg_pd               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn_fpm                         	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop_fpm                        	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU1_target_mem_0       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_agg_pd             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint16_t	bn0_first                      	; /* Member of payload_offset_sop union */
        uint32_t	sop                            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_num                         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU2_target_mem_0       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_agg_pd             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	abs0                           	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved6                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU3_target_mem_0       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_agg_pd             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
        uint32_t	fpm_num                        	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	fpm_pool                       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved7                      	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU4_target_mem_0       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_agg_pd             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT;

#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_VALID_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_VALID_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_VALID_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_HEADROOM_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_HEADROOM_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_HEADROOM_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_HEADROOM_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DONT_AGG_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 5, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DONT_AGG_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 5, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DONT_AGG_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DONT_AGG_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_MC_COPY_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 4, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_MC_COPY_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 4, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_MC_COPY_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_MC_COPY_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_REPROCESS_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 3, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_REPROCESS_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 3, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_REPROCESS_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_REPROCESS_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 2, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 2, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_COLOR_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_COLOR_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FORCE_COPY_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 1, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FORCE_COPY_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 1, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FORCE_COPY_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FORCE_COPY_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDSVC_TYPE_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 6, 3, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDSVC_TYPE_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT), 6, 3, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDSVC_TYPE_READ(r, p)                           FIELD_MREAD_16((uint8_t *)(p), 6, 3, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDSVC_TYPE_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)(p), 6, 3, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_L3_OFFSET_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 1, 0, 6, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_L3_OFFSET_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 1, 0, 6, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_L3_OFFSET_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 6, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_L3_OFFSET_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 6, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 2, 7, 9, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 2, 7, 9, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 2, 7, 9, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 2, 7, 9, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_OR_DSL_RX_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FLAG_1588_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DSL_RX_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DSL_RX_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DSL_RX_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DSL_RX_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_COHERENT_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 5, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_COHERENT_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 5, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_COHERENT_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 3, 5, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_COHERENT_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 3, 5, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_STREAM_ID_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 2, 3, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_STREAM_ID_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 2, 3, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_STREAM_ID_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 3, 2, 3, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_STREAM_ID_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 3, 2, 3, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 1, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 3, 1, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 3, 1, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TCPSPDTEST_IS_UPLOAD_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 3, 1, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 4, 6, 7, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 4, 6, 7, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 4, 6, 7, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SPDTEST_L3_L4_HDR_LEN_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 4, 6, 7, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PRIORITY_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 5, 5, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PRIORITY_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 5, 5, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PRIORITY_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 5, 5, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PRIORITY_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 5, 5, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_CONG_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 5, 4, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_CONG_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 5, 4, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_CONG_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 5, 4, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_CONG_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 5, 4, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 5, 3, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 5, 3, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 5, 3, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 5, 3, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 6, 0, 14, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 6, 0, 14, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DROP_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 7, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 7, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DROP_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_DROP_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_LAN_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 3, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 3, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_LAN_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 8, 3, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_LAN_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 8, 3, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_VPORT_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_VPORT_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 3, 8, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_VPORT_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 8, 3, 8, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_INGRESS_VPORT_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 8, 3, 8, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_OR_ABS3_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 0, 19, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_OR_ABS3_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 0, 19, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_OR_ABS3_READ(r, p)                           FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 19, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_OR_ABS3_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 19, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_FIRST_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 0, 19, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_FIRST_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 8, 0, 19, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_FIRST_READ(r, p)                             FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 19, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN1_FIRST_WRITE(v, p)                            FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 19, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS3_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 10, 0, 11, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS3_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 10, 0, 11, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS3_READ(r, p)                                  FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 11, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS3_WRITE(v, p)                                 FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 11, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 7, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 7, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_AGG_PD_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_AGG_PD_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ_G(r, g, idx)             GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 0, 30, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 0, 30, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ(r, p)                    FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 30, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE(v, p)                   FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 30, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SOP_FPM_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 3, 11, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SOP_FPM_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 3, 11, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SOP_FPM_READ(r, p)                               FIELD_MREAD_16((uint8_t *)(p) + 12, 3, 11, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SOP_FPM_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)(p) + 12, 3, 11, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN_FPM_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 0, 19, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN_FPM_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 0, 19, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN_FPM_READ(r, p)                                FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 19, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN_FPM_WRITE(v, p)                               FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 19, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN_NUM_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 7, 7, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN_NUM_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 7, 7, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN_NUM_READ(r, p)                                FIELD_MREAD_16((uint8_t *)(p) + 12, 7, 7, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN_NUM_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)(p) + 12, 7, 7, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SOP_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 13, 0, 7, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 13, 0, 7, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SOP_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 7, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_SOP_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 7, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN0_FIRST_READ(r, p)                             MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS0_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 0, 29, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS0_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 0, 29, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS0_READ(r, p)                                  FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 29, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_ABS0_WRITE(v, p)                                 FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 29, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FPM_POOL_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 13, 1, 2, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FPM_POOL_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 13, 1, 2, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FPM_POOL_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 13, 1, 2, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FPM_POOL_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 13, 1, 2, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FPM_NUM_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 0, 17, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FPM_NUM_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT) + 12, 0, 17, (v))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FPM_NUM_READ(r, p)                               FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 17, (r))
#define RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR_FPM_NUM_WRITE(v, p)                              FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 17, (v))
/* <<<PROCESSING_SPDSVC_RX_DESCRIPTOR_STRUCT */

/* <<<RDD_PROCESSING_SPDSVC_RX_DESCRIPTOR */


/* >>>RDD_UDPSPDT_STREAM_RX_STAT */
#define UDPSPDT_STREAM_RX_STAT_RX_BYTES_1_F_OFFSET                                                      0
#define UDPSPDT_STREAM_RX_STAT_RX_BYTES_1_F_WIDTH                                                       32
#define UDPSPDT_STREAM_RX_STAT_UDPSPDT_STREAM_RX_STAT_OFFSET                                            0
#define UDPSPDT_STREAM_RX_STAT_RX_BYTES_1_OFFSET                                                        0
#define UDPSPDT_STREAM_RX_STAT_RX_BYTES_1_WORD_OFFSET                                                   0
#define UDPSPDT_STREAM_RX_STAT_RX_BYTES_0_F_OFFSET                                                      0
#define UDPSPDT_STREAM_RX_STAT_RX_BYTES_0_F_WIDTH                                                       32
#define UDPSPDT_STREAM_RX_STAT_RX_BYTES_0_OFFSET                                                        4
#define UDPSPDT_STREAM_RX_STAT_RX_BYTES_0_WORD_OFFSET                                                   1
#define UDPSPDT_STREAM_RX_STAT_RX_PACKETS_1_F_OFFSET                                                    0
#define UDPSPDT_STREAM_RX_STAT_RX_PACKETS_1_F_WIDTH                                                     32
#define UDPSPDT_STREAM_RX_STAT_RX_PACKETS_1_OFFSET                                                      8
#define UDPSPDT_STREAM_RX_STAT_RX_PACKETS_1_WORD_OFFSET                                                 2
#define UDPSPDT_STREAM_RX_STAT_RX_PACKETS_0_F_OFFSET                                                    0
#define UDPSPDT_STREAM_RX_STAT_RX_PACKETS_0_F_WIDTH                                                     32
#define UDPSPDT_STREAM_RX_STAT_RX_PACKETS_0_OFFSET                                                      12
#define UDPSPDT_STREAM_RX_STAT_RX_PACKETS_0_WORD_OFFSET                                                 3
#define UDPSPDT_STREAM_RX_STAT_TS_FIRST_F_OFFSET                                                        0
#define UDPSPDT_STREAM_RX_STAT_TS_FIRST_F_WIDTH                                                         32
#define UDPSPDT_STREAM_RX_STAT_TS_FIRST_OFFSET                                                          16
#define UDPSPDT_STREAM_RX_STAT_TS_FIRST_WORD_OFFSET                                                     4
#define UDPSPDT_STREAM_RX_STAT_TS_LAST_1_F_OFFSET                                                       0
#define UDPSPDT_STREAM_RX_STAT_TS_LAST_1_F_WIDTH                                                        32
#define UDPSPDT_STREAM_RX_STAT_TS_LAST_1_OFFSET                                                         20
#define UDPSPDT_STREAM_RX_STAT_TS_LAST_1_WORD_OFFSET                                                    5
#define UDPSPDT_STREAM_RX_STAT_TS_LAST_0_F_OFFSET                                                       0
#define UDPSPDT_STREAM_RX_STAT_TS_LAST_0_F_WIDTH                                                        32
#define UDPSPDT_STREAM_RX_STAT_TS_LAST_0_OFFSET                                                         24
#define UDPSPDT_STREAM_RX_STAT_TS_LAST_0_WORD_OFFSET                                                    6
#define UDPSPDT_STREAM_RX_STAT_TS_FIRST_SET_F_OFFSET                                                    31
#define UDPSPDT_STREAM_RX_STAT_TS_FIRST_SET_F_WIDTH                                                     1
#define UDPSPDT_STREAM_RX_STAT_TS_FIRST_SET_OFFSET                                                      28
#define UDPSPDT_STREAM_RX_STAT_TS_FIRST_SET_WORD_OFFSET                                                 7
#define UDPSPDT_STREAM_RX_STAT_TS_FIRST_SET_F_OFFSET_MOD8                                               7
#define UDPSPDT_STREAM_RX_STAT_TS_FIRST_SET_F_OFFSET_MOD16                                              15
#define UDPSPDT_STREAM_RX_STAT_BAD_PROTO_CNTR_F_OFFSET                                                  0
#define UDPSPDT_STREAM_RX_STAT_BAD_PROTO_CNTR_F_WIDTH                                                   16
#define UDPSPDT_STREAM_RX_STAT_BAD_PROTO_CNTR_OFFSET                                                    30
#define UDPSPDT_STREAM_RX_STAT_BAD_PROTO_CNTR_WORD_OFFSET                                               7
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_1_F_OFFSET                                         0
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_1_F_WIDTH                                          32
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_1_OFFSET                                           32
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_1_WORD_OFFSET                                      8
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_0_F_OFFSET                                         0
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_0_F_WIDTH                                          32
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_0_OFFSET                                           36
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_PACKET_LOST_0_WORD_OFFSET                                      9
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_1_F_OFFSET                                        0
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_1_F_WIDTH                                         32
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_1_OFFSET                                          40
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_1_WORD_OFFSET                                     10
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_0_F_OFFSET                                        0
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_0_F_WIDTH                                         32
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_0_OFFSET                                          44
#define UDPSPDT_STREAM_RX_STAT_IPERF3_RX_OUT_OF_ORDER_0_WORD_OFFSET                                     11
/* <<<RDD_UDPSPDT_STREAM_RX_STAT */


/* >>>RDD_UDPSPDT_SCRATCH_IPERF3_RX */
#define UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_0_F_OFFSET                                                    0
#define UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_0_F_WIDTH                                                     32
#define UDPSPDT_SCRATCH_IPERF3_RX_UDPSPDT_SCRATCH_IPERF3_RX_OFFSET                                         0
#define UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_0_OFFSET                                                      0
#define UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_0_WORD_OFFSET                                                 0
#define UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_1_F_OFFSET                                                    0
#define UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_1_F_WIDTH                                                     32
#define UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_1_OFFSET                                                      4
#define UDPSPDT_SCRATCH_IPERF3_RX_RX_PACKETS_1_WORD_OFFSET                                                 1
/* <<<RDD_UDPSPDT_SCRATCH_IPERF3_RX */


/* >>>RDD_SPDSVC_WLAN_GEN_PARAMS */
#define SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_F_OFFSET                                                0
#define SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_F_WIDTH                                                 32
#define SPDSVC_WLAN_GEN_PARAMS_SPDSVC_WLAN_GEN_PARAMS_OFFSET                                            0
#define SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_OFFSET                                                  0
#define SPDSVC_WLAN_GEN_PARAMS_COMPLETE_TRACKED_WORD_OFFSET                                             0
#define SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_F_OFFSET                                                       0
#define SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_F_WIDTH                                                        32
#define SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_OFFSET                                                         4
#define SPDSVC_WLAN_GEN_PARAMS_TX_COPIES_WORD_OFFSET                                                    1
#define SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_F_OFFSET                                                 16
#define SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_F_WIDTH                                                  16
#define SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_OFFSET                                                   8
#define SPDSVC_WLAN_GEN_PARAMS_SPDSVC_FREE_IDX_WORD_OFFSET                                              2
/* <<<RDD_SPDSVC_WLAN_GEN_PARAMS */


/* >>>RDD_SPDSVC_WLAN_TXPOST_PARAMS */
#define SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_F_OFFSET                                                 0
#define SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_F_WIDTH                                                  16
#define SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_WLAN_TXPOST_PARAMS_OFFSET                                         0
#define SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_OFFSET                                                   0
#define SPDSVC_WLAN_TXPOST_PARAMS_SPDSVC_FREE_IDX_WORD_OFFSET                                              0
/* <<<RDD_SPDSVC_WLAN_TXPOST_PARAMS */


/* >>>RDD_PKTGEN_TX_PARAMS */
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_F_OFFSET                                      0
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_F_WIDTH                                       32
#define PKTGEN_TX_PARAMS_PKTGEN_TX_PARAMS_OFFSET                                                  0
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_OFFSET                                        0
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_0_WORD_OFFSET                                   0
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_F_OFFSET                                      0
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_F_WIDTH                                       32
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_OFFSET                                        4
#define PKTGEN_TX_PARAMS_BBMSG_SBPM_MCAST_INC_REQ_1_WORD_OFFSET                                   1
#define PKTGEN_TX_PARAMS_REF_PD_0_F_OFFSET                                                        0
#define PKTGEN_TX_PARAMS_REF_PD_0_F_WIDTH                                                         32
#define PKTGEN_TX_PARAMS_REF_PD_0_OFFSET                                                          8
#define PKTGEN_TX_PARAMS_REF_PD_0_WORD_OFFSET                                                     2
#define PKTGEN_TX_PARAMS_REF_PD_1_F_OFFSET                                                        0
#define PKTGEN_TX_PARAMS_REF_PD_1_F_WIDTH                                                         32
#define PKTGEN_TX_PARAMS_REF_PD_1_OFFSET                                                          12
#define PKTGEN_TX_PARAMS_REF_PD_1_WORD_OFFSET                                                     3
#define PKTGEN_TX_PARAMS_REF_PD_2_F_OFFSET                                                        0
#define PKTGEN_TX_PARAMS_REF_PD_2_F_WIDTH                                                         32
#define PKTGEN_TX_PARAMS_REF_PD_2_OFFSET                                                          16
#define PKTGEN_TX_PARAMS_REF_PD_2_WORD_OFFSET                                                     4
#define PKTGEN_TX_PARAMS_REF_PD_3_F_OFFSET                                                        0
#define PKTGEN_TX_PARAMS_REF_PD_3_F_WIDTH                                                         32
#define PKTGEN_TX_PARAMS_REF_PD_3_OFFSET                                                          20
#define PKTGEN_TX_PARAMS_REF_PD_3_WORD_OFFSET                                                     5
#define PKTGEN_TX_PARAMS_TASK_NUM_F_OFFSET                                                        28
#define PKTGEN_TX_PARAMS_TASK_NUM_F_WIDTH                                                         4
#define PKTGEN_TX_PARAMS_TASK_NUM_OFFSET                                                          24
#define PKTGEN_TX_PARAMS_TASK_NUM_WORD_OFFSET                                                     6
#define PKTGEN_TX_PARAMS_TASK_NUM_F_OFFSET_MOD8                                                   4
#define PKTGEN_TX_PARAMS_TASK_NUM_F_OFFSET_MOD16                                                  12
#define PKTGEN_TX_PARAMS_BAD_TX_NUM_OF_BNS_F_OFFSET                                               0
#define PKTGEN_TX_PARAMS_BAD_TX_NUM_OF_BNS_F_WIDTH                                                16
#define PKTGEN_TX_PARAMS_BAD_TX_NUM_OF_BNS_OFFSET                                                 30
#define PKTGEN_TX_PARAMS_BAD_TX_NUM_OF_BNS_WORD_OFFSET                                            7
/* <<<RDD_PKTGEN_TX_PARAMS */


/* >>>RDD_PKTGEN_SBPM_HDR_BN */
#define PKTGEN_SBPM_HDR_BN_FIRST_BN_F_OFFSET                                                        2
#define PKTGEN_SBPM_HDR_BN_FIRST_BN_F_WIDTH                                                         14
#define PKTGEN_SBPM_HDR_BN_PKTGEN_SBPM_HDR_BN_OFFSET                                                0
#define PKTGEN_SBPM_HDR_BN_FIRST_BN_OFFSET                                                          0
#define PKTGEN_SBPM_HDR_BN_FIRST_BN_WORD_OFFSET                                                     0
#define PKTGEN_SBPM_HDR_BN_FIRST_BN_F_OFFSET_MOD16                                                  2
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_F_OFFSET                                                         0
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_F_WIDTH                                                          2
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_OFFSET                                                           1
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_WORD_OFFSET                                                      0
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_F_OFFSET_MOD8                                                    0
#define PKTGEN_SBPM_HDR_BN_EXT_IDX_F_OFFSET_MOD16                                                   0
/* <<<RDD_PKTGEN_SBPM_HDR_BN */


/* >>>RDD_PKTGEN_SBPM_EXT */
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_F_OFFSET                                                      14
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_F_WIDTH                                                       4
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_OFFSET                                                        1
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_WORD_OFFSET                                                   0
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_F_OFFSET_MOD8                                                 6
#define PKTGEN_SBPM_EXT_NUM_OF_BNS_F_OFFSET_MOD16                                                14
#define PKTGEN_SBPM_EXT_BN1_F_OFFSET                                                             0
#define PKTGEN_SBPM_EXT_BN1_F_WIDTH                                                              14
#define PKTGEN_SBPM_EXT_BN1_OFFSET                                                               2
#define PKTGEN_SBPM_EXT_BN1_WORD_OFFSET                                                          0
#define PKTGEN_SBPM_EXT_BN1_F_OFFSET_MOD16                                                       0
/* <<<RDD_PKTGEN_SBPM_EXT */


/* >>>RDD_PKTGEN_FPM_UG_MGMT_ENTRY */
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_F_OFFSET                                                0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_F_WIDTH                                                 32
#define PKTGEN_FPM_UG_MGMT_ENTRY_PKTGEN_FPM_UG_MGMT_ENTRY_OFFSET                                          0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_OFFSET                                                  0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_DUMMY_WORD_OFFSET                                             0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_F_OFFSET                                                      0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_F_WIDTH                                                       32
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_OFFSET                                                        4
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_WORD_OFFSET                                                   1
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_F_OFFSET                                             0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_F_WIDTH                                              32
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_OFFSET                                               8
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_CNT_REG_ADDR_WORD_OFFSET                                          2
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_F_OFFSET                                                4
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_F_WIDTH                                                 28
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_OFFSET                                                  12
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_UG_THRESHOLD_WORD_OFFSET                                             3
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_TOKENS_QUANTUM_F_OFFSET                                              0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_TOKENS_QUANTUM_F_WIDTH                                               4
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_TOKENS_QUANTUM_OFFSET                                                15
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_TOKENS_QUANTUM_WORD_OFFSET                                           3
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_TOKENS_QUANTUM_F_OFFSET_MOD8                                         0
#define PKTGEN_FPM_UG_MGMT_ENTRY_FPM_TOKENS_QUANTUM_F_OFFSET_MOD16                                        0
#define PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_F_OFFSET                                                          0
#define PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_F_WIDTH                                                           32
#define PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_OFFSET                                                            16
#define PKTGEN_FPM_UG_MGMT_ENTRY_BUDGET_WORD_OFFSET                                                       4
/* <<<RDD_PKTGEN_FPM_UG_MGMT_ENTRY */


/* >>>RDD_ENTRY_PARMS */
#define ENTRY_PARMS_WAN_FLOW_F_OFFSET                                                        16
#define ENTRY_PARMS_WAN_FLOW_F_WIDTH                                                         16
#define ENTRY_PARMS_ENTRY_PARMS_OFFSET                                                       0
#define ENTRY_PARMS_WAN_FLOW_OFFSET                                                          0
#define ENTRY_PARMS_WAN_FLOW_WORD_OFFSET                                                     0
#define ENTRY_PARMS_TX_QM_QUEUE_F_OFFSET                                                     0
#define ENTRY_PARMS_TX_QM_QUEUE_F_WIDTH                                                      16
#define ENTRY_PARMS_TX_QM_QUEUE_OFFSET                                                       2
#define ENTRY_PARMS_TX_QM_QUEUE_WORD_OFFSET                                                  0
#define ENTRY_PARMS_TCP_UDP_PARMS_F_OFFSET                                                   0
#define ENTRY_PARMS_TCP_UDP_PARMS_F_WIDTH                                                    32
#define ENTRY_PARMS_TCP_UDP_PARMS_OFFSET                                                     4
#define ENTRY_PARMS_TCP_UDP_PARMS_WORD_OFFSET                                                1

/* >>>ENTRY_PARMS_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	wan_flow          	;
        uint16_t	tx_qm_queue       	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tcp_udp_parms     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	l2_hdr_len                  	; /* Member of tcp_udp_parms union */
        uint8_t	l3_hdr_len                  	; /* Member of tcp_udp_parms union */
        uint8_t	l3_protocol                 	; /* Member of tcp_udp_parms union */
        uint8_t	tx_hdr_len                  	; /* Member of tcp_udp_parms union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	udp_payload_offset          	; /* Member of tcp_udp_parms union */
        uint16_t	udp_csum                    	; /* Member of tcp_udp_parms union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	tx_qm_queue       	;
        uint16_t	wan_flow          	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tcp_udp_parms     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	tx_hdr_len                  	; /* Member of tcp_udp_parms union */
        uint8_t	l3_protocol                 	; /* Member of tcp_udp_parms union */
        uint8_t	l3_hdr_len                  	; /* Member of tcp_udp_parms union */
        uint8_t	l2_hdr_len                  	; /* Member of tcp_udp_parms union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	udp_csum                    	; /* Member of tcp_udp_parms union */
        uint16_t	udp_payload_offset          	; /* Member of tcp_udp_parms union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) ENTRY_PARMS_STRUCT;

#define RDD_ENTRY_PARMS_WAN_FLOW_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(ENTRY_PARMS_STRUCT), (r))
#define RDD_ENTRY_PARMS_WAN_FLOW_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(ENTRY_PARMS_STRUCT), (v))
#define RDD_ENTRY_PARMS_WAN_FLOW_READ(r, p)                           MREAD_16((uint8_t *)(p), (r))
#define RDD_ENTRY_PARMS_WAN_FLOW_WRITE(v, p)                          MWRITE_16((uint8_t *)(p), (v))
#define RDD_ENTRY_PARMS_TX_QM_QUEUE_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 2, (r))
#define RDD_ENTRY_PARMS_TX_QM_QUEUE_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 2, (v))
#define RDD_ENTRY_PARMS_TX_QM_QUEUE_READ(r, p)                        MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_ENTRY_PARMS_TX_QM_QUEUE_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_ENTRY_PARMS_TCP_UDP_PARMS_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 4, (r))
#define RDD_ENTRY_PARMS_TCP_UDP_PARMS_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 4, (v))
#define RDD_ENTRY_PARMS_TCP_UDP_PARMS_READ(r, p)                      MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_ENTRY_PARMS_TCP_UDP_PARMS_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_ENTRY_PARMS_L2_HDR_LEN_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 4, (r))
#define RDD_ENTRY_PARMS_L2_HDR_LEN_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 4, (v))
#define RDD_ENTRY_PARMS_L2_HDR_LEN_READ(r, p)                         MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_ENTRY_PARMS_L2_HDR_LEN_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_ENTRY_PARMS_L3_HDR_LEN_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 5, (r))
#define RDD_ENTRY_PARMS_L3_HDR_LEN_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 5, (v))
#define RDD_ENTRY_PARMS_L3_HDR_LEN_READ(r, p)                         MREAD_8((uint8_t *)(p) + 5, (r))
#define RDD_ENTRY_PARMS_L3_HDR_LEN_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 5, (v))
#define RDD_ENTRY_PARMS_L3_PROTOCOL_READ_G(r, g, idx)                 GROUP_MREAD_8((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 6, (r))
#define RDD_ENTRY_PARMS_L3_PROTOCOL_WRITE_G(v, g, idx)                GROUP_MWRITE_8((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 6, (v))
#define RDD_ENTRY_PARMS_L3_PROTOCOL_READ(r, p)                        MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_ENTRY_PARMS_L3_PROTOCOL_WRITE(v, p)                       MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_ENTRY_PARMS_TX_HDR_LEN_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 7, (r))
#define RDD_ENTRY_PARMS_TX_HDR_LEN_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 7, (v))
#define RDD_ENTRY_PARMS_TX_HDR_LEN_READ(r, p)                         MREAD_8((uint8_t *)(p) + 7, (r))
#define RDD_ENTRY_PARMS_TX_HDR_LEN_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 7, (v))
#define RDD_ENTRY_PARMS_UDP_PAYLOAD_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 4, (r))
#define RDD_ENTRY_PARMS_UDP_PAYLOAD_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 4, (v))
#define RDD_ENTRY_PARMS_UDP_PAYLOAD_OFFSET_READ(r, p)                 MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_ENTRY_PARMS_UDP_PAYLOAD_OFFSET_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_ENTRY_PARMS_UDP_CSUM_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 6, (r))
#define RDD_ENTRY_PARMS_UDP_CSUM_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(ENTRY_PARMS_STRUCT) + 6, (v))
#define RDD_ENTRY_PARMS_UDP_CSUM_READ(r, p)                           MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_ENTRY_PARMS_UDP_CSUM_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 6, (v))
/* <<<ENTRY_PARMS_STRUCT */

/* <<<RDD_ENTRY_PARMS */


/* >>>RDD_REF_PKT_HDR */
#define REF_PKT_HDR_SIZE_F_OFFSET                                                            16
#define REF_PKT_HDR_SIZE_F_WIDTH                                                             16
#define REF_PKT_HDR_REF_PKT_HDR_OFFSET                                                       0
#define REF_PKT_HDR_SIZE_OFFSET                                                              0
#define REF_PKT_HDR_SIZE_WORD_OFFSET                                                         0
#define REF_PKT_HDR_OFFSET_F_OFFSET                                                          0
#define REF_PKT_HDR_OFFSET_F_WIDTH                                                           16
#define REF_PKT_HDR_OFFSET_OFFSET                                                            2
#define REF_PKT_HDR_OFFSET_WORD_OFFSET                                                       0
#define REF_PKT_HDR_HDR_F_OFFSET                                                             0
#define REF_PKT_HDR_HDR_F_WIDTH                                                              32
#define REF_PKT_HDR_HDR_OFFSET                                                               8
#define REF_PKT_HDR_HDR_WORD_OFFSET                                                          2
#define REF_PKT_HDR_HDR_1_F_OFFSET                                                           0
#define REF_PKT_HDR_HDR_1_F_WIDTH                                                            32
#define REF_PKT_HDR_HDR_1_OFFSET                                                             12
#define REF_PKT_HDR_HDR_1_WORD_OFFSET                                                        3
#define REF_PKT_HDR_HDR_2_F_OFFSET                                                           0
#define REF_PKT_HDR_HDR_2_F_WIDTH                                                            32
#define REF_PKT_HDR_HDR_2_OFFSET                                                             16
#define REF_PKT_HDR_HDR_2_WORD_OFFSET                                                        4
#define REF_PKT_HDR_HDR_3_F_OFFSET                                                           0
#define REF_PKT_HDR_HDR_3_F_WIDTH                                                            32
#define REF_PKT_HDR_HDR_3_OFFSET                                                             20
#define REF_PKT_HDR_HDR_3_WORD_OFFSET                                                        5
#define REF_PKT_HDR_HDR_4_F_OFFSET                                                           0
#define REF_PKT_HDR_HDR_4_F_WIDTH                                                            32
#define REF_PKT_HDR_HDR_4_OFFSET                                                             24
#define REF_PKT_HDR_HDR_4_WORD_OFFSET                                                        6
#define REF_PKT_HDR_HDR_5_F_OFFSET                                                           0
#define REF_PKT_HDR_HDR_5_F_WIDTH                                                            32
#define REF_PKT_HDR_HDR_5_OFFSET                                                             28
#define REF_PKT_HDR_HDR_5_WORD_OFFSET                                                        7
#define REF_PKT_HDR_HDR_6_F_OFFSET                                                           0
#define REF_PKT_HDR_HDR_6_F_WIDTH                                                            32
#define REF_PKT_HDR_HDR_6_OFFSET                                                             32
#define REF_PKT_HDR_HDR_6_WORD_OFFSET                                                        8
#define REF_PKT_HDR_HDR_7_F_OFFSET                                                           0
#define REF_PKT_HDR_HDR_7_F_WIDTH                                                            32
#define REF_PKT_HDR_HDR_7_OFFSET                                                             36
#define REF_PKT_HDR_HDR_7_WORD_OFFSET                                                        9
#define REF_PKT_HDR_HDR_8_F_OFFSET                                                           0
#define REF_PKT_HDR_HDR_8_F_WIDTH                                                            32
#define REF_PKT_HDR_HDR_8_OFFSET                                                             40
#define REF_PKT_HDR_HDR_8_WORD_OFFSET                                                        10
#define REF_PKT_HDR_HDR_9_F_OFFSET                                                           0
#define REF_PKT_HDR_HDR_9_F_WIDTH                                                            32
#define REF_PKT_HDR_HDR_9_OFFSET                                                             44
#define REF_PKT_HDR_HDR_9_WORD_OFFSET                                                        11
#define REF_PKT_HDR_HDR_10_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_10_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_10_OFFSET                                                            48
#define REF_PKT_HDR_HDR_10_WORD_OFFSET                                                       12
#define REF_PKT_HDR_HDR_11_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_11_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_11_OFFSET                                                            52
#define REF_PKT_HDR_HDR_11_WORD_OFFSET                                                       13
#define REF_PKT_HDR_HDR_12_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_12_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_12_OFFSET                                                            56
#define REF_PKT_HDR_HDR_12_WORD_OFFSET                                                       14
#define REF_PKT_HDR_HDR_13_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_13_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_13_OFFSET                                                            60
#define REF_PKT_HDR_HDR_13_WORD_OFFSET                                                       15
#define REF_PKT_HDR_HDR_14_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_14_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_14_OFFSET                                                            64
#define REF_PKT_HDR_HDR_14_WORD_OFFSET                                                       16
#define REF_PKT_HDR_HDR_15_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_15_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_15_OFFSET                                                            68
#define REF_PKT_HDR_HDR_15_WORD_OFFSET                                                       17
#define REF_PKT_HDR_HDR_16_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_16_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_16_OFFSET                                                            72
#define REF_PKT_HDR_HDR_16_WORD_OFFSET                                                       18
#define REF_PKT_HDR_HDR_17_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_17_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_17_OFFSET                                                            76
#define REF_PKT_HDR_HDR_17_WORD_OFFSET                                                       19
#define REF_PKT_HDR_HDR_18_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_18_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_18_OFFSET                                                            80
#define REF_PKT_HDR_HDR_18_WORD_OFFSET                                                       20
#define REF_PKT_HDR_HDR_19_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_19_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_19_OFFSET                                                            84
#define REF_PKT_HDR_HDR_19_WORD_OFFSET                                                       21
#define REF_PKT_HDR_HDR_20_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_20_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_20_OFFSET                                                            88
#define REF_PKT_HDR_HDR_20_WORD_OFFSET                                                       22
#define REF_PKT_HDR_HDR_21_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_21_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_21_OFFSET                                                            92
#define REF_PKT_HDR_HDR_21_WORD_OFFSET                                                       23
#define REF_PKT_HDR_HDR_22_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_22_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_22_OFFSET                                                            96
#define REF_PKT_HDR_HDR_22_WORD_OFFSET                                                       24
#define REF_PKT_HDR_HDR_23_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_23_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_23_OFFSET                                                            100
#define REF_PKT_HDR_HDR_23_WORD_OFFSET                                                       25
#define REF_PKT_HDR_HDR_24_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_24_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_24_OFFSET                                                            104
#define REF_PKT_HDR_HDR_24_WORD_OFFSET                                                       26
#define REF_PKT_HDR_HDR_25_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_25_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_25_OFFSET                                                            108
#define REF_PKT_HDR_HDR_25_WORD_OFFSET                                                       27
#define REF_PKT_HDR_HDR_26_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_26_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_26_OFFSET                                                            112
#define REF_PKT_HDR_HDR_26_WORD_OFFSET                                                       28
#define REF_PKT_HDR_HDR_27_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_27_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_27_OFFSET                                                            116
#define REF_PKT_HDR_HDR_27_WORD_OFFSET                                                       29
#define REF_PKT_HDR_HDR_28_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_28_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_28_OFFSET                                                            120
#define REF_PKT_HDR_HDR_28_WORD_OFFSET                                                       30
#define REF_PKT_HDR_HDR_29_F_OFFSET                                                          0
#define REF_PKT_HDR_HDR_29_F_WIDTH                                                           32
#define REF_PKT_HDR_HDR_29_OFFSET                                                            124
#define REF_PKT_HDR_HDR_29_WORD_OFFSET                                                       31

/* >>>REF_PKT_HDR_STRUCT */
typedef union
{
    uint32_t word_32[32];
    uint64_t dword_64[16];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	size      	;
        uint16_t	offset    	;
        uint32_t	reserved  	;
        uint32_t	hdr       	;
        uint32_t	hdr_1     	;
        uint32_t	hdr_2     	;
        uint32_t	hdr_3     	;
        uint32_t	hdr_4     	;
        uint32_t	hdr_5     	;
        uint32_t	hdr_6     	;
        uint32_t	hdr_7     	;
        uint32_t	hdr_8     	;
        uint32_t	hdr_9     	;
        uint32_t	hdr_10    	;
        uint32_t	hdr_11    	;
        uint32_t	hdr_12    	;
        uint32_t	hdr_13    	;
        uint32_t	hdr_14    	;
        uint32_t	hdr_15    	;
        uint32_t	hdr_16    	;
        uint32_t	hdr_17    	;
        uint32_t	hdr_18    	;
        uint32_t	hdr_19    	;
        uint32_t	hdr_20    	;
        uint32_t	hdr_21    	;
        uint32_t	hdr_22    	;
        uint32_t	hdr_23    	;
        uint32_t	hdr_24    	;
        uint32_t	hdr_25    	;
        uint32_t	hdr_26    	;
        uint32_t	hdr_27    	;
        uint32_t	hdr_28    	;
        uint32_t	hdr_29    	;
#else
        uint16_t	offset    	;
        uint16_t	size      	;
        uint32_t	reserved  	;
        uint32_t	hdr       	;
        uint32_t	hdr_1     	;
        uint32_t	hdr_2     	;
        uint32_t	hdr_3     	;
        uint32_t	hdr_4     	;
        uint32_t	hdr_5     	;
        uint32_t	hdr_6     	;
        uint32_t	hdr_7     	;
        uint32_t	hdr_8     	;
        uint32_t	hdr_9     	;
        uint32_t	hdr_10    	;
        uint32_t	hdr_11    	;
        uint32_t	hdr_12    	;
        uint32_t	hdr_13    	;
        uint32_t	hdr_14    	;
        uint32_t	hdr_15    	;
        uint32_t	hdr_16    	;
        uint32_t	hdr_17    	;
        uint32_t	hdr_18    	;
        uint32_t	hdr_19    	;
        uint32_t	hdr_20    	;
        uint32_t	hdr_21    	;
        uint32_t	hdr_22    	;
        uint32_t	hdr_23    	;
        uint32_t	hdr_24    	;
        uint32_t	hdr_25    	;
        uint32_t	hdr_26    	;
        uint32_t	hdr_27    	;
        uint32_t	hdr_28    	;
        uint32_t	hdr_29    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) REF_PKT_HDR_STRUCT;

#define RDD_REF_PKT_HDR_SIZE_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(REF_PKT_HDR_STRUCT), (r))
#define RDD_REF_PKT_HDR_SIZE_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(REF_PKT_HDR_STRUCT), (v))
#define RDD_REF_PKT_HDR_SIZE_READ(r, p)                     MREAD_16((uint8_t *)(p), (r))
#define RDD_REF_PKT_HDR_SIZE_WRITE(v, p)                    MWRITE_16((uint8_t *)(p), (v))
#define RDD_REF_PKT_HDR_OFFSET_READ_G(r, g, idx)            GROUP_MREAD_16((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 2, (r))
#define RDD_REF_PKT_HDR_OFFSET_WRITE_G(v, g, idx)           GROUP_MWRITE_16((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 2, (v))
#define RDD_REF_PKT_HDR_OFFSET_READ(r, p)                   MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_REF_PKT_HDR_OFFSET_WRITE(v, p)                  MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_REF_PKT_HDR_HDR_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 8, (r))
#define RDD_REF_PKT_HDR_HDR_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 8, (v))
#define RDD_REF_PKT_HDR_HDR_READ(r, p)                      MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_REF_PKT_HDR_HDR_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_REF_PKT_HDR_HDR_1_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 12, (r))
#define RDD_REF_PKT_HDR_HDR_1_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 12, (v))
#define RDD_REF_PKT_HDR_HDR_1_READ(r, p)                    MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_REF_PKT_HDR_HDR_1_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_REF_PKT_HDR_HDR_2_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 16, (r))
#define RDD_REF_PKT_HDR_HDR_2_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 16, (v))
#define RDD_REF_PKT_HDR_HDR_2_READ(r, p)                    MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_REF_PKT_HDR_HDR_2_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_REF_PKT_HDR_HDR_3_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 20, (r))
#define RDD_REF_PKT_HDR_HDR_3_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 20, (v))
#define RDD_REF_PKT_HDR_HDR_3_READ(r, p)                    MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_REF_PKT_HDR_HDR_3_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_REF_PKT_HDR_HDR_4_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 24, (r))
#define RDD_REF_PKT_HDR_HDR_4_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 24, (v))
#define RDD_REF_PKT_HDR_HDR_4_READ(r, p)                    MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_REF_PKT_HDR_HDR_4_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_REF_PKT_HDR_HDR_5_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 28, (r))
#define RDD_REF_PKT_HDR_HDR_5_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 28, (v))
#define RDD_REF_PKT_HDR_HDR_5_READ(r, p)                    MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_REF_PKT_HDR_HDR_5_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_REF_PKT_HDR_HDR_6_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 32, (r))
#define RDD_REF_PKT_HDR_HDR_6_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 32, (v))
#define RDD_REF_PKT_HDR_HDR_6_READ(r, p)                    MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_REF_PKT_HDR_HDR_6_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_REF_PKT_HDR_HDR_7_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 36, (r))
#define RDD_REF_PKT_HDR_HDR_7_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 36, (v))
#define RDD_REF_PKT_HDR_HDR_7_READ(r, p)                    MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_REF_PKT_HDR_HDR_7_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_REF_PKT_HDR_HDR_8_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 40, (r))
#define RDD_REF_PKT_HDR_HDR_8_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 40, (v))
#define RDD_REF_PKT_HDR_HDR_8_READ(r, p)                    MREAD_32((uint8_t *)(p) + 40, (r))
#define RDD_REF_PKT_HDR_HDR_8_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 40, (v))
#define RDD_REF_PKT_HDR_HDR_9_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 44, (r))
#define RDD_REF_PKT_HDR_HDR_9_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 44, (v))
#define RDD_REF_PKT_HDR_HDR_9_READ(r, p)                    MREAD_32((uint8_t *)(p) + 44, (r))
#define RDD_REF_PKT_HDR_HDR_9_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 44, (v))
#define RDD_REF_PKT_HDR_HDR_10_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 48, (r))
#define RDD_REF_PKT_HDR_HDR_10_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 48, (v))
#define RDD_REF_PKT_HDR_HDR_10_READ(r, p)                   MREAD_32((uint8_t *)(p) + 48, (r))
#define RDD_REF_PKT_HDR_HDR_10_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 48, (v))
#define RDD_REF_PKT_HDR_HDR_11_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 52, (r))
#define RDD_REF_PKT_HDR_HDR_11_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 52, (v))
#define RDD_REF_PKT_HDR_HDR_11_READ(r, p)                   MREAD_32((uint8_t *)(p) + 52, (r))
#define RDD_REF_PKT_HDR_HDR_11_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 52, (v))
#define RDD_REF_PKT_HDR_HDR_12_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 56, (r))
#define RDD_REF_PKT_HDR_HDR_12_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 56, (v))
#define RDD_REF_PKT_HDR_HDR_12_READ(r, p)                   MREAD_32((uint8_t *)(p) + 56, (r))
#define RDD_REF_PKT_HDR_HDR_12_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 56, (v))
#define RDD_REF_PKT_HDR_HDR_13_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 60, (r))
#define RDD_REF_PKT_HDR_HDR_13_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 60, (v))
#define RDD_REF_PKT_HDR_HDR_13_READ(r, p)                   MREAD_32((uint8_t *)(p) + 60, (r))
#define RDD_REF_PKT_HDR_HDR_13_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 60, (v))
#define RDD_REF_PKT_HDR_HDR_14_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 64, (r))
#define RDD_REF_PKT_HDR_HDR_14_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 64, (v))
#define RDD_REF_PKT_HDR_HDR_14_READ(r, p)                   MREAD_32((uint8_t *)(p) + 64, (r))
#define RDD_REF_PKT_HDR_HDR_14_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 64, (v))
#define RDD_REF_PKT_HDR_HDR_15_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 68, (r))
#define RDD_REF_PKT_HDR_HDR_15_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 68, (v))
#define RDD_REF_PKT_HDR_HDR_15_READ(r, p)                   MREAD_32((uint8_t *)(p) + 68, (r))
#define RDD_REF_PKT_HDR_HDR_15_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 68, (v))
#define RDD_REF_PKT_HDR_HDR_16_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 72, (r))
#define RDD_REF_PKT_HDR_HDR_16_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 72, (v))
#define RDD_REF_PKT_HDR_HDR_16_READ(r, p)                   MREAD_32((uint8_t *)(p) + 72, (r))
#define RDD_REF_PKT_HDR_HDR_16_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 72, (v))
#define RDD_REF_PKT_HDR_HDR_17_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 76, (r))
#define RDD_REF_PKT_HDR_HDR_17_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 76, (v))
#define RDD_REF_PKT_HDR_HDR_17_READ(r, p)                   MREAD_32((uint8_t *)(p) + 76, (r))
#define RDD_REF_PKT_HDR_HDR_17_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 76, (v))
#define RDD_REF_PKT_HDR_HDR_18_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 80, (r))
#define RDD_REF_PKT_HDR_HDR_18_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 80, (v))
#define RDD_REF_PKT_HDR_HDR_18_READ(r, p)                   MREAD_32((uint8_t *)(p) + 80, (r))
#define RDD_REF_PKT_HDR_HDR_18_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 80, (v))
#define RDD_REF_PKT_HDR_HDR_19_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 84, (r))
#define RDD_REF_PKT_HDR_HDR_19_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 84, (v))
#define RDD_REF_PKT_HDR_HDR_19_READ(r, p)                   MREAD_32((uint8_t *)(p) + 84, (r))
#define RDD_REF_PKT_HDR_HDR_19_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 84, (v))
#define RDD_REF_PKT_HDR_HDR_20_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 88, (r))
#define RDD_REF_PKT_HDR_HDR_20_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 88, (v))
#define RDD_REF_PKT_HDR_HDR_20_READ(r, p)                   MREAD_32((uint8_t *)(p) + 88, (r))
#define RDD_REF_PKT_HDR_HDR_20_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 88, (v))
#define RDD_REF_PKT_HDR_HDR_21_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 92, (r))
#define RDD_REF_PKT_HDR_HDR_21_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 92, (v))
#define RDD_REF_PKT_HDR_HDR_21_READ(r, p)                   MREAD_32((uint8_t *)(p) + 92, (r))
#define RDD_REF_PKT_HDR_HDR_21_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 92, (v))
#define RDD_REF_PKT_HDR_HDR_22_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 96, (r))
#define RDD_REF_PKT_HDR_HDR_22_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 96, (v))
#define RDD_REF_PKT_HDR_HDR_22_READ(r, p)                   MREAD_32((uint8_t *)(p) + 96, (r))
#define RDD_REF_PKT_HDR_HDR_22_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 96, (v))
#define RDD_REF_PKT_HDR_HDR_23_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 100, (r))
#define RDD_REF_PKT_HDR_HDR_23_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 100, (v))
#define RDD_REF_PKT_HDR_HDR_23_READ(r, p)                   MREAD_32((uint8_t *)(p) + 100, (r))
#define RDD_REF_PKT_HDR_HDR_23_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 100, (v))
#define RDD_REF_PKT_HDR_HDR_24_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 104, (r))
#define RDD_REF_PKT_HDR_HDR_24_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 104, (v))
#define RDD_REF_PKT_HDR_HDR_24_READ(r, p)                   MREAD_32((uint8_t *)(p) + 104, (r))
#define RDD_REF_PKT_HDR_HDR_24_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 104, (v))
#define RDD_REF_PKT_HDR_HDR_25_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 108, (r))
#define RDD_REF_PKT_HDR_HDR_25_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 108, (v))
#define RDD_REF_PKT_HDR_HDR_25_READ(r, p)                   MREAD_32((uint8_t *)(p) + 108, (r))
#define RDD_REF_PKT_HDR_HDR_25_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 108, (v))
#define RDD_REF_PKT_HDR_HDR_26_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 112, (r))
#define RDD_REF_PKT_HDR_HDR_26_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 112, (v))
#define RDD_REF_PKT_HDR_HDR_26_READ(r, p)                   MREAD_32((uint8_t *)(p) + 112, (r))
#define RDD_REF_PKT_HDR_HDR_26_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 112, (v))
#define RDD_REF_PKT_HDR_HDR_27_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 116, (r))
#define RDD_REF_PKT_HDR_HDR_27_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 116, (v))
#define RDD_REF_PKT_HDR_HDR_27_READ(r, p)                   MREAD_32((uint8_t *)(p) + 116, (r))
#define RDD_REF_PKT_HDR_HDR_27_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 116, (v))
#define RDD_REF_PKT_HDR_HDR_28_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 120, (r))
#define RDD_REF_PKT_HDR_HDR_28_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 120, (v))
#define RDD_REF_PKT_HDR_HDR_28_READ(r, p)                   MREAD_32((uint8_t *)(p) + 120, (r))
#define RDD_REF_PKT_HDR_HDR_28_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 120, (v))
#define RDD_REF_PKT_HDR_HDR_29_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 124, (r))
#define RDD_REF_PKT_HDR_HDR_29_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(REF_PKT_HDR_STRUCT) + 124, (v))
#define RDD_REF_PKT_HDR_HDR_29_READ(r, p)                   MREAD_32((uint8_t *)(p) + 124, (r))
#define RDD_REF_PKT_HDR_HDR_29_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 124, (v))
/* <<<REF_PKT_HDR_STRUCT */

/* <<<RDD_REF_PKT_HDR */


/* >>>RDD_PKTGEN_TX_STREAM_ENTRY */
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_SIZE_F_OFFSET                                                16
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_SIZE_F_WIDTH                                                 16
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_OFFSET                                                       0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_SIZE_OFFSET                                                  0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_SIZE_WORD_OFFSET                                             0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_OFFSET_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_OFFSET_F_WIDTH                                               16
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_OFFSET_OFFSET                                                2
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_OFFSET_WORD_OFFSET                                           0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_RESERVED_F_OFFSET                                            0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_RESERVED_F_WIDTH                                             32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_RESERVED_OFFSET                                              4
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_RESERVED_WORD_OFFSET                                         1
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_F_OFFSET                                                 0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_F_WIDTH                                                  32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_OFFSET                                                   8
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_WORD_OFFSET                                              2
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_1_F_OFFSET                                               0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_1_F_WIDTH                                                32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_1_OFFSET                                                 12
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_1_WORD_OFFSET                                            3
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_2_F_OFFSET                                               0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_2_F_WIDTH                                                32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_2_OFFSET                                                 16
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_2_WORD_OFFSET                                            4
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_3_F_OFFSET                                               0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_3_F_WIDTH                                                32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_3_OFFSET                                                 20
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_3_WORD_OFFSET                                            5
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_4_F_OFFSET                                               0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_4_F_WIDTH                                                32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_4_OFFSET                                                 24
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_4_WORD_OFFSET                                            6
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_5_F_OFFSET                                               0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_5_F_WIDTH                                                32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_5_OFFSET                                                 28
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_5_WORD_OFFSET                                            7
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_6_F_OFFSET                                               0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_6_F_WIDTH                                                32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_6_OFFSET                                                 32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_6_WORD_OFFSET                                            8
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_7_F_OFFSET                                               0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_7_F_WIDTH                                                32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_7_OFFSET                                                 36
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_7_WORD_OFFSET                                            9
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_8_F_OFFSET                                               0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_8_F_WIDTH                                                32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_8_OFFSET                                                 40
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_8_WORD_OFFSET                                            10
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_9_F_OFFSET                                               0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_9_F_WIDTH                                                32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_9_OFFSET                                                 44
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_9_WORD_OFFSET                                            11
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_10_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_10_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_10_OFFSET                                                48
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_10_WORD_OFFSET                                           12
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_11_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_11_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_11_OFFSET                                                52
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_11_WORD_OFFSET                                           13
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_12_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_12_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_12_OFFSET                                                56
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_12_WORD_OFFSET                                           14
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_13_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_13_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_13_OFFSET                                                60
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_13_WORD_OFFSET                                           15
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_14_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_14_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_14_OFFSET                                                64
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_14_WORD_OFFSET                                           16
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_15_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_15_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_15_OFFSET                                                68
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_15_WORD_OFFSET                                           17
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_16_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_16_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_16_OFFSET                                                72
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_16_WORD_OFFSET                                           18
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_17_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_17_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_17_OFFSET                                                76
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_17_WORD_OFFSET                                           19
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_18_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_18_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_18_OFFSET                                                80
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_18_WORD_OFFSET                                           20
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_19_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_19_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_19_OFFSET                                                84
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_19_WORD_OFFSET                                           21
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_20_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_20_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_20_OFFSET                                                88
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_20_WORD_OFFSET                                           22
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_21_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_21_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_21_OFFSET                                                92
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_21_WORD_OFFSET                                           23
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_22_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_22_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_22_OFFSET                                                96
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_22_WORD_OFFSET                                           24
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_23_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_23_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_23_OFFSET                                                100
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_23_WORD_OFFSET                                           25
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_24_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_24_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_24_OFFSET                                                104
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_24_WORD_OFFSET                                           26
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_25_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_25_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_25_OFFSET                                                108
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_25_WORD_OFFSET                                           27
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_26_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_26_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_26_OFFSET                                                112
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_26_WORD_OFFSET                                           28
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_27_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_27_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_27_OFFSET                                                116
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_27_WORD_OFFSET                                           29
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_28_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_28_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_28_OFFSET                                                120
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_28_WORD_OFFSET                                           30
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_29_F_OFFSET                                              0
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_29_F_WIDTH                                               32
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_29_OFFSET                                                124
#define PKTGEN_TX_STREAM_ENTRY_REF_PKT_HDR_HDR_29_WORD_OFFSET                                           31
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_WAN_FLOW_F_OFFSET                                            16
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_WAN_FLOW_F_WIDTH                                             16
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_OFFSET                                                       128
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_WAN_FLOW_OFFSET                                              128
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_WAN_FLOW_WORD_OFFSET                                         32
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_QM_QUEUE_F_OFFSET                                         0
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_QM_QUEUE_F_WIDTH                                          16
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_QM_QUEUE_OFFSET                                           130
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TX_QM_QUEUE_WORD_OFFSET                                      32
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TCP_UDP_PARMS_F_OFFSET                                       0
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TCP_UDP_PARMS_F_WIDTH                                        32
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TCP_UDP_PARMS_OFFSET                                         132
#define PKTGEN_TX_STREAM_ENTRY_ENTRY_PARMS_TCP_UDP_PARMS_WORD_OFFSET                                    33
/* <<<RDD_PKTGEN_TX_STREAM_ENTRY */


/* >>>RDD_PKTGEN_TX_STREAM_SCRATCH_ENTRY */
#define PKTGEN_TX_STREAM_SCRATCH_ENTRY_CSUM_VALUE_F_OFFSET                                                      16
#define PKTGEN_TX_STREAM_SCRATCH_ENTRY_CSUM_VALUE_F_WIDTH                                                       16
#define PKTGEN_TX_STREAM_SCRATCH_ENTRY_CSUM_VALUE_OFFSET                                                        4
#define PKTGEN_TX_STREAM_SCRATCH_ENTRY_CSUM_VALUE_WORD_OFFSET                                                   1
/* <<<RDD_PKTGEN_TX_STREAM_SCRATCH_ENTRY */


/* >>>RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO */
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_F_OFFSET                                                     24
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_F_WIDTH                                                      8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_TCPSPDTEST_ENGINE_GLOBAL_INFO_OFFSET                                     0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_OFFSET                                                       0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_WORD_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_STREAMS_F_OFFSET_MOD16                                               8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_BNS_F_OFFSET                                                         0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_BNS_F_WIDTH                                                          16
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_BNS_OFFSET                                                           2
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_NUM_BNS_WORD_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_F_OFFSET                                                   0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_F_WIDTH                                                    32
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_OFFSET                                                     4
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_STREAM_VECTOR_WORD_OFFSET                                                1
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_F_OFFSET                                                0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_F_WIDTH                                                 32
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_OFFSET                                                  8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_WORD_OFFSET                                             2
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_F_OFFSET                                           0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_F_WIDTH                                            32
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_OFFSET                                             12
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_FULL_TOKENS_WORD_OFFSET                                        3
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_F_OFFSET                                      16
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_F_WIDTH                                       16
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_OFFSET                                        16
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_BUCKET_TOKENS_FILL_RATE_WORD_OFFSET                                   4
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_F_OFFSET                                               8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_F_WIDTH                                                8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_OFFSET                                                 18
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_WORD_OFFSET                                            4
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_NEXT_STREAM_ID_F_OFFSET_MOD16                                         8
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_IS_TIMER_ACTIVE_F_OFFSET                                              0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_IS_TIMER_ACTIVE_F_WIDTH                                               1
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_IS_TIMER_ACTIVE_OFFSET                                                19
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_IS_TIMER_ACTIVE_WORD_OFFSET                                           4
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_IS_TIMER_ACTIVE_F_OFFSET_MOD8                                         0
#define TCPSPDTEST_ENGINE_GLOBAL_INFO_UP_IS_TIMER_ACTIVE_F_OFFSET_MOD16                                        0
/* <<<RDD_TCPSPDTEST_ENGINE_GLOBAL_INFO */


/* >>>RDD_TCPSPDTEST_ENGINE_CONN_INFO */
#define TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_OFFSET                                                24
#define TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_WIDTH                                                 8
#define TCPSPDTEST_ENGINE_CONN_INFO_TCPSPDTEST_ENGINE_CONN_INFO_OFFSET                                       0
#define TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WORD_OFFSET                                             0
#define TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_OFFSET_MOD16                                          8
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_OFFSET                                                16
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_WIDTH                                                 8
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_OFFSET                                                  1
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WORD_OFFSET                                             0
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_OFFSET_MOD16                                          0
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_OFFSET                                                8
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_WIDTH                                                 8
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_OFFSET                                                  2
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WORD_OFFSET                                             0
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_OFFSET_MOD16                                          8
#define TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_F_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_F_WIDTH                                                   8
#define TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_OFFSET                                                    3
#define TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_WORD_OFFSET                                               0
#define TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_F_OFFSET_MOD16                                            0
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_F_OFFSET                                                       16
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_F_WIDTH                                                        16
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_OFFSET                                                         4
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WORD_OFFSET                                                    1
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_F_OFFSET                                                0
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_F_WIDTH                                                 16
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_OFFSET                                                  6
#define TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WORD_OFFSET                                             1

/* >>>TCPSPDTEST_ENGINE_CONN_INFO_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	cpu_rx_rdd_queue	;
        uint8_t	up_pppoe_hdr_ofs	;
        uint8_t	up_peer_rx_scale	;
        uint8_t	sack_permitted  	;
        uint16_t	up_tx_mss       	;
        uint16_t	up_tx_max_pd_len	;
#else
        uint8_t	sack_permitted  	;
        uint8_t	up_peer_rx_scale	;
        uint8_t	up_pppoe_hdr_ofs	;
        uint8_t	cpu_rx_rdd_queue	;
        uint16_t	up_tx_max_pd_len	;
        uint16_t	up_tx_mss       	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) TCPSPDTEST_ENGINE_CONN_INFO_STRUCT;

#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT), (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT), (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_READ(r, p)                 MREAD_8((uint8_t *)(p), (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WRITE(v, p)                MWRITE_8((uint8_t *)(p), (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT) + 1, (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT) + 1, (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT) + 2, (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT) + 2, (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_READ(r, p)                 MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT) + 3, (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT) + 3, (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_READ(r, p)                   MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_WRITE(v, p)                  MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT) + 4, (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT) + 4, (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_READ(r, p)                        MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT) + 6, (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_CONN_INFO_STRUCT) + 6, (v))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_READ(r, p)                 MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 6, (v))
/* <<<TCPSPDTEST_ENGINE_CONN_INFO_STRUCT */

/* <<<RDD_TCPSPDTEST_ENGINE_CONN_INFO */


/* >>>RDD_TCPSPDTEST_ENGINE_TCB */
#define TCPSPDTEST_ENGINE_TCB_RX_PKTS_F_OFFSET                                                         0
#define TCPSPDTEST_ENGINE_TCB_RX_PKTS_F_WIDTH                                                          32
#define TCPSPDTEST_ENGINE_TCB_TCPSPDTEST_ENGINE_TCB_OFFSET                                             0
#define TCPSPDTEST_ENGINE_TCB_RX_PKTS_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_TCB_RX_PKTS_WORD_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_TCB_TXED_PKTS_F_OFFSET                                                       0
#define TCPSPDTEST_ENGINE_TCB_TXED_PKTS_F_WIDTH                                                        32
#define TCPSPDTEST_ENGINE_TCB_TXED_PKTS_OFFSET                                                         4
#define TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WORD_OFFSET                                                    1
#define TCPSPDTEST_ENGINE_TCB_FREED_PKTS_F_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_TCB_FREED_PKTS_F_WIDTH                                                       32
#define TCPSPDTEST_ENGINE_TCB_FREED_PKTS_OFFSET                                                        8
#define TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WORD_OFFSET                                                   2
#define TCPSPDTEST_ENGINE_TCB_ACK_SEQ_F_OFFSET                                                         0
#define TCPSPDTEST_ENGINE_TCB_ACK_SEQ_F_WIDTH                                                          32
#define TCPSPDTEST_ENGINE_TCB_ACK_SEQ_OFFSET                                                           12
#define TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WORD_OFFSET                                                      3
#define TCPSPDTEST_ENGINE_TCB_TX_SEQ_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_TCB_TX_SEQ_F_WIDTH                                                           32
#define TCPSPDTEST_ENGINE_TCB_TX_SEQ_OFFSET                                                            16
#define TCPSPDTEST_ENGINE_TCB_TX_SEQ_WORD_OFFSET                                                       4
#define TCPSPDTEST_ENGINE_TCB_BAD_PKTS_F_OFFSET                                                        0
#define TCPSPDTEST_ENGINE_TCB_BAD_PKTS_F_WIDTH                                                         32
#define TCPSPDTEST_ENGINE_TCB_BAD_PKTS_OFFSET                                                          20
#define TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WORD_OFFSET                                                     5
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_F_OFFSET                                                       0
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_F_WIDTH                                                        32
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_OFFSET                                                         24
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WORD_OFFSET                                                    6
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_F_OFFSET                                                     0
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_F_WIDTH                                                      32
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_OFFSET                                                       28
#define TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WORD_OFFSET                                                  7
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_F_OFFSET                                                        0
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_F_WIDTH                                                         32
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_OFFSET                                                          32
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_WORD_OFFSET                                                     8
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_F_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_F_WIDTH                                                       32
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_OFFSET                                                        36
#define TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WORD_OFFSET                                                   9
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_F_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_F_WIDTH                                                   32
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_OFFSET                                                    40
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WORD_OFFSET                                               10
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_F_OFFSET                                                0
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_F_WIDTH                                                 32
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_OFFSET                                                  44
#define TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WORD_OFFSET                                             11
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_F_OFFSET                                                0
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_F_WIDTH                                                 32
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_OFFSET                                                  48
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WORD_OFFSET                                             12
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_F_OFFSET                                              0
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_F_WIDTH                                               32
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_OFFSET                                                52
#define TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WORD_OFFSET                                           13
#define TCPSPDTEST_ENGINE_TCB_NO_CREDITS_F_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_TCB_NO_CREDITS_F_WIDTH                                                       32
#define TCPSPDTEST_ENGINE_TCB_NO_CREDITS_OFFSET                                                        56
#define TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WORD_OFFSET                                                   14
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_F_OFFSET                                                         0
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_F_WIDTH                                                          32
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_OFFSET                                                           60
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_WORD_OFFSET                                                      15
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_F_OFFSET                                                     0
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_F_WIDTH                                                      32
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_OFFSET                                                       64
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WORD_OFFSET                                                  16
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_F_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_F_WIDTH                                                   32
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_OFFSET                                                    68
#define TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WORD_OFFSET                                               17
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_F_OFFSET                                                 0
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_F_WIDTH                                                  32
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_OFFSET                                                   72
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WORD_OFFSET                                              18
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_F_OFFSET                                                0
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_F_WIDTH                                                 32
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_OFFSET                                                  76
#define TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WORD_OFFSET                                             19
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_F_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_F_WIDTH                                                   32
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_OFFSET                                                    80
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WORD_OFFSET                                               20
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_F_OFFSET                                             0
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_F_WIDTH                                              32
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_OFFSET                                               84
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WORD_OFFSET                                          21
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_F_OFFSET                                       16
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_F_WIDTH                                        16
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_OFFSET                                         88
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WORD_OFFSET                                    22
#define TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_F_OFFSET                                             0
#define TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_F_WIDTH                                              16
#define TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_OFFSET                                               90
#define TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WORD_OFFSET                                          22
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_OFFSET                                                8
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_WIDTH                                                 8
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_OFFSET                                                  94
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WORD_OFFSET                                             23
#define TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_OFFSET_MOD16                                          8
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET                                               2
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_WIDTH                                                1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_OFFSET                                                 95
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WORD_OFFSET                                            23
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET_MOD8                                          2
#define TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET_MOD16                                         2
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET                                                   1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_WIDTH                                                    1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_OFFSET                                                     95
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WORD_OFFSET                                                23
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET_MOD8                                              1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET_MOD16                                             1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET                                                    0
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_WIDTH                                                     1
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_OFFSET                                                      95
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WORD_OFFSET                                                 23
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET_MOD8                                               0
#define TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET_MOD16                                              0

/* >>>TCPSPDTEST_ENGINE_TCB_STRUCT */
typedef union
{
    uint32_t word_32[24];
    uint64_t dword_64[12];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	rx_pkts                  	;
        uint32_t	txed_pkts                	;
        uint32_t	freed_pkts               	;
        uint32_t	ack_seq                  	;
        uint32_t	tx_seq                   	;
        uint32_t	bad_pkts                 	;
        uint32_t	bad_bytes                	;
        uint32_t	bad_bytes_1              	;
        uint32_t	rx_bytes                 	;
        uint32_t	rx_bytes_1               	;
        uint32_t	expected_bytes           	;
        uint32_t	expected_bytes_1         	;
        uint32_t	up_to_send_bytes         	;
        uint32_t	up_to_send_bytes_1       	;
        uint32_t	no_credits               	;
        uint32_t	up_cwnd                  	;
        uint32_t	up_cwnd_thr              	;
        uint32_t	up_cwnd_budget           	;
        uint32_t	up_last_ack_seq          	;
        uint32_t	up_last_ack_time         	;
        uint32_t	up_dup_ack_cnt           	;
        uint32_t	up_dup_ack_seq_done      	;
        uint16_t	up_dup_ack_total_pkts_cnt	;
        uint16_t	up_fast_retrans_cnt      	;
        uint16_t	reserved1                	;
        uint8_t	up_dup_ack_state         	;
        uint32_t	reserved2                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	up_is_rx_win_stop        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	up_is_timeout            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	up_is_active             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	rx_pkts                  	;
        uint32_t	txed_pkts                	;
        uint32_t	freed_pkts               	;
        uint32_t	ack_seq                  	;
        uint32_t	tx_seq                   	;
        uint32_t	bad_pkts                 	;
        uint32_t	bad_bytes                	;
        uint32_t	bad_bytes_1              	;
        uint32_t	rx_bytes                 	;
        uint32_t	rx_bytes_1               	;
        uint32_t	expected_bytes           	;
        uint32_t	expected_bytes_1         	;
        uint32_t	up_to_send_bytes         	;
        uint32_t	up_to_send_bytes_1       	;
        uint32_t	no_credits               	;
        uint32_t	up_cwnd                  	;
        uint32_t	up_cwnd_thr              	;
        uint32_t	up_cwnd_budget           	;
        uint32_t	up_last_ack_seq          	;
        uint32_t	up_last_ack_time         	;
        uint32_t	up_dup_ack_cnt           	;
        uint32_t	up_dup_ack_seq_done      	;
        uint16_t	up_fast_retrans_cnt      	;
        uint16_t	up_dup_ack_total_pkts_cnt	;
        uint32_t	up_is_active             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	up_is_timeout            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	up_is_rx_win_stop        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	up_dup_ack_state         	;
        uint16_t	reserved1                	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) TCPSPDTEST_ENGINE_TCB_STRUCT;

#define RDD_TCPSPDTEST_ENGINE_TCB_RX_PKTS_READ_G(r, g, idx)                            GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT), (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_PKTS_WRITE_G(v, g, idx)                           GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT), (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_PKTS_READ(r, p)                                   MREAD_32((uint8_t *)(p), (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_PKTS_WRITE(v, p)                                  MWRITE_32((uint8_t *)(p), (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_READ_G(r, g, idx)                          GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 4, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WRITE_G(v, g, idx)                         GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 4, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_READ(r, p)                                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WRITE(v, p)                                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 8, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 8, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_READ(r, p)                                MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_READ_G(r, g, idx)                            GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 12, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WRITE_G(v, g, idx)                           GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 12, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_READ(r, p)                                   MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WRITE(v, p)                                  MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_TX_SEQ_READ_G(r, g, idx)                             GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 16, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_TX_SEQ_WRITE_G(v, g, idx)                            GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 16, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_TX_SEQ_READ(r, p)                                    MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_TX_SEQ_WRITE(v, p)                                   MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_READ_G(r, g, idx)                           GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 20, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WRITE_G(v, g, idx)                          GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 20, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_READ(r, p)                                  MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WRITE(v, p)                                 MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_READ_G(r, g, idx)                          GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 24, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WRITE_G(v, g, idx)                         GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 24, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_READ(r, p)                                 MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WRITE(v, p)                                MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 28, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 28, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_READ(r, p)                               MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_READ_G(r, g, idx)                           GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 32, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_WRITE_G(v, g, idx)                          GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 32, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_READ(r, p)                                  MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_WRITE(v, p)                                 MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 36, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 36, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_READ(r, p)                                MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 40, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 40, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_READ(r, p)                            MREAD_32((uint8_t *)(p) + 40, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 40, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 44, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 44, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_READ(r, p)                          MREAD_32((uint8_t *)(p) + 44, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 44, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 48, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 48, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_READ(r, p)                          MREAD_32((uint8_t *)(p) + 48, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 48, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 52, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 52, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_READ(r, p)                        MREAD_32((uint8_t *)(p) + 52, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WRITE(v, p)                       MWRITE_32((uint8_t *)(p) + 52, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 56, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 56, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_READ(r, p)                                MREAD_32((uint8_t *)(p) + 56, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 56, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_READ_G(r, g, idx)                            GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 60, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_WRITE_G(v, g, idx)                           GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 60, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_READ(r, p)                                   MREAD_32((uint8_t *)(p) + 60, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_WRITE(v, p)                                  MWRITE_32((uint8_t *)(p) + 60, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 64, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 64, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_READ(r, p)                               MREAD_32((uint8_t *)(p) + 64, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 64, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 68, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 68, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_READ(r, p)                            MREAD_32((uint8_t *)(p) + 68, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 68, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 72, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 72, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_READ(r, p)                           MREAD_32((uint8_t *)(p) + 72, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 72, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 76, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 76, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_READ(r, p)                          MREAD_32((uint8_t *)(p) + 76, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 76, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 80, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 80, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_READ(r, p)                            MREAD_32((uint8_t *)(p) + 80, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 80, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 84, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 84, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_READ(r, p)                       MREAD_32((uint8_t *)(p) + 84, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 84, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 88, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 88, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_READ(r, p)                 MREAD_16((uint8_t *)(p) + 88, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 88, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 90, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 90, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_READ(r, p)                       MREAD_16((uint8_t *)(p) + 90, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 90, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_READ_G(r, g, idx)                   GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 94, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WRITE_G(v, g, idx)                  GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 94, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_READ(r, p)                          MREAD_8((uint8_t *)(p) + 94, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WRITE(v, p)                         MWRITE_8((uint8_t *)(p) + 94, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 95, 2, 1, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 95, 2, 1, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 95, 2, 1, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 95, 2, 1, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 95, 1, 1, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 95, 1, 1, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 95, 1, 1, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 95, 1, 1, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 95, 0, 1, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_TCB_STRUCT) + 95, 0, 1, (v))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 95, 0, 1, (r))
#define RDD_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 95, 0, 1, (v))
/* <<<TCPSPDTEST_ENGINE_TCB_STRUCT */

/* <<<RDD_TCPSPDTEST_ENGINE_TCB */


/* >>>RDD_TCPSPDTEST_ENGINE_PKT_DROP */
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_OFFSET                                                         24
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_WIDTH                                                          8
#define TCPSPDTEST_ENGINE_PKT_DROP_TCPSPDTEST_ENGINE_PKT_DROP_OFFSET                                        0
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_OFFSET                                                           0
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WORD_OFFSET                                                      0
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_OFFSET_MOD16                                                   8
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_OFFSET                                                     16
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_WIDTH                                                      8
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_OFFSET                                                       1
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WORD_OFFSET                                                  0
#define TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_OFFSET_MOD16                                               0
#define TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_F_OFFSET                                                        0
#define TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_F_WIDTH                                                         16
#define TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_OFFSET                                                          2
#define TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WORD_OFFSET                                                     0
#define TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_F_OFFSET                                                          16
#define TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_F_WIDTH                                                           16
#define TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_OFFSET                                                            4
#define TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WORD_OFFSET                                                       1
#define TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_F_OFFSET                                                          0
#define TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_F_WIDTH                                                           16
#define TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_OFFSET                                                            6
#define TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WORD_OFFSET                                                       1
#define TCPSPDTEST_ENGINE_PKT_DROP_SEQ_OFFSET                                                               8
#define TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WORD_OFFSET                                                          2

/* >>>TCPSPDTEST_ENGINE_PKT_DROP_STRUCT */
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER	32
typedef union
{
    uint32_t word_32[34];
    uint64_t dword_64[17];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	is_drop                                           	;
        uint8_t	is_win_full                                       	;
        uint16_t	num_errs                                          	;
        uint16_t	wr_ofs                                            	;
        uint16_t	rd_ofs                                            	;
        uint32_t	seq[RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER];
#else
        uint16_t	num_errs                                          	;
        uint8_t	is_win_full                                       	;
        uint8_t	is_drop                                           	;
        uint16_t	rd_ofs                                            	;
        uint16_t	wr_ofs                                            	;
        uint32_t	seq[RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) TCPSPDTEST_ENGINE_PKT_DROP_STRUCT;

#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT), (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT), (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_READ(r, p)                     MREAD_8((uint8_t *)(p), (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WRITE(v, p)                    MWRITE_8((uint8_t *)(p), (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT) + 1, (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT) + 1, (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_READ_G(r, g, idx)             GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT) + 2, (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WRITE_G(v, g, idx)            GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT) + 2, (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_READ(r, p)                    MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WRITE(v, p)                   MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT) + 4, (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT) + 4, (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_READ(r, p)                      MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT) + 6, (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT) + 6, (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_READ(r, p)                      MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_READ_G(r, g, idx, i)               GROUP_MREAD_I_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT) + 8, i, (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WRITE_G(v, g, idx, i)              GROUP_MWRITE_I_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_PKT_DROP_STRUCT) + 8, i, (v))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_READ(r, p, i)                      MREAD_I_32((uint8_t *)(p) + 8, i, (r))
#define RDD_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WRITE(v, p, i)                     MWRITE_I_32((uint8_t *)(p) + 8, i, (v))
/* <<<TCPSPDTEST_ENGINE_PKT_DROP_STRUCT */

/* <<<RDD_TCPSPDTEST_ENGINE_PKT_DROP */


/* >>>RDD_TCPSPDTEST_ENGINE_RTO */
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_F_OFFSET                                            0
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_F_WIDTH                                             32
#define TCPSPDTEST_ENGINE_RTO_TCPSPDTEST_ENGINE_RTO_OFFSET                                             0
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_OFFSET                                              0
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_WORD_OFFSET                                         0
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_F_OFFSET                                           0
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_F_WIDTH                                            32
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_OFFSET                                             4
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_WORD_OFFSET                                        1
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_F_OFFSET                                            0
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_F_WIDTH                                             32
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_OFFSET                                              8
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_WORD_OFFSET                                         2
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_F_OFFSET                                            0
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_F_WIDTH                                             32
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_OFFSET                                              12
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_WORD_OFFSET                                         3
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_F_OFFSET                                           0
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_F_WIDTH                                            32
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_OFFSET                                             16
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_WORD_OFFSET                                        4
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_F_OFFSET                                          0
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_F_WIDTH                                           32
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_OFFSET                                            20
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_WORD_OFFSET                                       5
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_F_OFFSET                                        0
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_F_WIDTH                                         32
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_OFFSET                                          24
#define TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_WORD_OFFSET                                     6
#define TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_F_OFFSET                                 16
#define TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_F_WIDTH                                  16
#define TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_OFFSET                                   28
#define TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_WORD_OFFSET                              7
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_F_OFFSET                              0
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_F_WIDTH                               32
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_OFFSET                                32
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_WORD_OFFSET                           8
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_F_OFFSET                             0
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_F_WIDTH                              32
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_OFFSET                               36
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_WORD_OFFSET                          9
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_F_OFFSET                                0
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_F_WIDTH                                 32
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_OFFSET                                  40
#define TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_WORD_OFFSET                             10
#define TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_OFFSET                                                   48
#define TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_WORD_OFFSET                                              12
#define TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_OFFSET                                          80
#define TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WORD_OFFSET                                     20

/* >>>TCPSPDTEST_ENGINE_RTO_STRUCT */
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_NUMBER	8
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_NUMBER	16
typedef union
{
    uint32_t word_32[36];
    uint64_t dword_64[18];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	ring_tx_seq_addr_low                                                                   	;
        uint32_t	ring_tx_seq_addr_high                                                                  	;
        uint32_t	ring_tx_seq_send_cnt                                                                   	;
        uint32_t	ring_tx_seq_drop_cnt                                                                   	;
        uint32_t	ring_retrans_addr_low                                                                  	;
        uint32_t	ring_retrans_addr_high                                                                 	;
        uint32_t	ring_retrans_receive_cnt                                                               	;
        uint16_t	ring_scratchpad_metadata_wr_ofs                                                        	;
        uint16_t	reserved1                                                                              	;
        uint32_t	ring_tx_seq_coalescing_timeout_cnt                                                     	;
        uint32_t	ring_tx_seq_coalescing_fill_pkt_cnt                                                    	;
        uint32_t	ring_tx_seq_coalescing_last_time                                                       	;
        uint32_t	reserved2                                                                              	;
        uint32_t	ring_scratchpad[RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_NUMBER];
        uint32_t	ring_scratchpad_metadata[RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_NUMBER];
#else
        uint32_t	ring_tx_seq_addr_low                                                                   	;
        uint32_t	ring_tx_seq_addr_high                                                                  	;
        uint32_t	ring_tx_seq_send_cnt                                                                   	;
        uint32_t	ring_tx_seq_drop_cnt                                                                   	;
        uint32_t	ring_retrans_addr_low                                                                  	;
        uint32_t	ring_retrans_addr_high                                                                 	;
        uint32_t	ring_retrans_receive_cnt                                                               	;
        uint16_t	reserved1                                                                              	;
        uint16_t	ring_scratchpad_metadata_wr_ofs                                                        	;
        uint32_t	ring_tx_seq_coalescing_timeout_cnt                                                     	;
        uint32_t	ring_tx_seq_coalescing_fill_pkt_cnt                                                    	;
        uint32_t	ring_tx_seq_coalescing_last_time                                                       	;
        uint32_t	reserved2                                                                              	;
        uint32_t	ring_scratchpad[RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_NUMBER];
        uint32_t	ring_scratchpad_metadata[RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) TCPSPDTEST_ENGINE_RTO_STRUCT;

#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT), (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT), (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_READ(r, p)                                MREAD_32((uint8_t *)(p), (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_WRITE(v, p)                               MWRITE_32((uint8_t *)(p), (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 4, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 4, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_READ(r, p)                               MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 8, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 8, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_READ(r, p)                                MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_READ_G(r, g, idx)                         GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 12, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_WRITE_G(v, g, idx)                        GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 12, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_READ(r, p)                                MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_WRITE(v, p)                               MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 16, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 16, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_READ(r, p)                               MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_READ_G(r, g, idx)                       GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 20, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_WRITE_G(v, g, idx)                      GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 20, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_READ(r, p)                              MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_WRITE(v, p)                             MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_READ_G(r, g, idx)                     GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 24, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_WRITE_G(v, g, idx)                    GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 24, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_READ(r, p)                            MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_WRITE(v, p)                           MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 28, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 28, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_READ(r, p)                     MREAD_16((uint8_t *)(p) + 28, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 28, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 32, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 32, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_READ(r, p)                  MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 36, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 36, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_READ(r, p)                 MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 40, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 40, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_READ(r, p)                    MREAD_32((uint8_t *)(p) + 40, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 40, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_READ_G(r, g, idx, i)                           GROUP_MREAD_I_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 48, i, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_WRITE_G(v, g, idx, i)                          GROUP_MWRITE_I_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 48, i, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_READ(r, p, i)                                  MREAD_I_32((uint8_t *)(p) + 48, i, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_WRITE(v, p, i)                                 MWRITE_I_32((uint8_t *)(p) + 48, i, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_READ_G(r, g, idx, i)                  GROUP_MREAD_I_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 80, i, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WRITE_G(v, g, idx, i)                 GROUP_MWRITE_I_32((g), (idx)*sizeof(TCPSPDTEST_ENGINE_RTO_STRUCT) + 80, i, (v))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_READ(r, p, i)                         MREAD_I_32((uint8_t *)(p) + 80, i, (r))
#define RDD_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WRITE(v, p, i)                        MWRITE_I_32((uint8_t *)(p) + 80, i, (v))
/* <<<TCPSPDTEST_ENGINE_RTO_STRUCT */

/* <<<RDD_TCPSPDTEST_ENGINE_RTO */


/* >>>RDD_TCPSPDTEST_STREAM */
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_OFFSET                    24
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_WIDTH                     8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_OFFSET                                       0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_OFFSET                      0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_WORD_OFFSET                 0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_CPU_RX_RDD_QUEUE_F_OFFSET_MOD16              8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_OFFSET                    16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_WIDTH                     8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_OFFSET                      1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_WORD_OFFSET                 0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PPPOE_HDR_OFS_F_OFFSET_MOD16              0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_OFFSET                    8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_WIDTH                     8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_OFFSET                      2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_WORD_OFFSET                 0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_PEER_RX_SCALE_F_OFFSET_MOD16              8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_F_OFFSET                      0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_F_WIDTH                       8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_OFFSET                        3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_WORD_OFFSET                   0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_SACK_PERMITTED_F_OFFSET_MOD16                0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_F_OFFSET                           16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_F_WIDTH                            16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_OFFSET                             4
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MSS_WORD_OFFSET                        1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_F_OFFSET                    0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_F_WIDTH                     16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_OFFSET                      6
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_CONN_INFO_UP_TX_MAX_PD_LEN_WORD_OFFSET                 1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_F_OFFSET                                   0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_F_WIDTH                                    32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_OFFSET                                             8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_OFFSET                                     8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_PKTS_WORD_OFFSET                                2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_F_OFFSET                                 0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_F_WIDTH                                  32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_OFFSET                                   12
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TXED_PKTS_WORD_OFFSET                              3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_F_OFFSET                                0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_F_WIDTH                                 32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_OFFSET                                  16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_FREED_PKTS_WORD_OFFSET                             4
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_F_OFFSET                                   0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_F_WIDTH                                    32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_OFFSET                                     20
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_ACK_SEQ_WORD_OFFSET                                5
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_F_OFFSET                                    0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_F_WIDTH                                     32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_OFFSET                                      24
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_TX_SEQ_WORD_OFFSET                                 6
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_F_OFFSET                                  0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_F_WIDTH                                   32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_OFFSET                                    28
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_PKTS_WORD_OFFSET                               7
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_F_OFFSET                                 0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_F_WIDTH                                  32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_OFFSET                                   32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_WORD_OFFSET                              8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_F_OFFSET                               0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_F_WIDTH                                32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_OFFSET                                 36
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_BAD_BYTES_1_WORD_OFFSET                            9
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_F_OFFSET                                  0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_F_WIDTH                                   32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_OFFSET                                    40
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_WORD_OFFSET                               10
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_F_OFFSET                                0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_F_WIDTH                                 32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_OFFSET                                  44
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RX_BYTES_1_WORD_OFFSET                             11
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_OFFSET                              48
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_WORD_OFFSET                         12
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_F_OFFSET                          0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_F_WIDTH                           32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_OFFSET                            52
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_EXPECTED_BYTES_1_WORD_OFFSET                       13
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_F_OFFSET                          0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_F_WIDTH                           32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_OFFSET                            56
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_WORD_OFFSET                       14
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_F_OFFSET                        0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_F_WIDTH                         32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_OFFSET                          60
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_TO_SEND_BYTES_1_WORD_OFFSET                     15
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_F_OFFSET                                0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_F_WIDTH                                 32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_OFFSET                                  64
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_NO_CREDITS_WORD_OFFSET                             16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_F_OFFSET                                   0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_F_WIDTH                                    32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_OFFSET                                     68
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_WORD_OFFSET                                17
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_F_OFFSET                               0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_F_WIDTH                                32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_OFFSET                                 72
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_THR_WORD_OFFSET                            18
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_OFFSET                              76
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_CWND_BUDGET_WORD_OFFSET                         19
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_F_OFFSET                           0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_F_WIDTH                            32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_OFFSET                             80
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_SEQ_WORD_OFFSET                        20
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_F_OFFSET                          0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_F_WIDTH                           32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_OFFSET                            84
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_LAST_ACK_TIME_WORD_OFFSET                       21
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_F_OFFSET                            0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_F_WIDTH                             32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_OFFSET                              88
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_CNT_WORD_OFFSET                         22
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_F_OFFSET                       0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_F_WIDTH                        32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_OFFSET                         92
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_SEQ_DONE_WORD_OFFSET                    23
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_F_OFFSET                 16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_F_WIDTH                  16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_OFFSET                   96
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_TOTAL_PKTS_CNT_WORD_OFFSET              24
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_F_OFFSET                       0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_F_WIDTH                        16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_OFFSET                         98
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_FAST_RETRANS_CNT_WORD_OFFSET                    24
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_F_OFFSET                                 16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_F_WIDTH                                  16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_OFFSET                                   100
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED1_WORD_OFFSET                              25
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_OFFSET                          8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_WIDTH                           8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_OFFSET                            102
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_WORD_OFFSET                       25
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_DUP_ACK_STATE_F_OFFSET_MOD16                    8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED2_F_OFFSET                                 3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED2_F_WIDTH                                  5
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED2_OFFSET                                   103
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED2_WORD_OFFSET                              25
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED2_F_OFFSET_MOD8                            3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_RESERVED2_F_OFFSET_MOD16                           3
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET                         2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_WIDTH                          1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_OFFSET                           103
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_WORD_OFFSET                      25
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET_MOD8                    2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_RX_WIN_STOP_F_OFFSET_MOD16                   2
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET                             1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_WIDTH                              1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_OFFSET                               103
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_WORD_OFFSET                          25
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET_MOD8                        1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_TIMEOUT_F_OFFSET_MOD16                       1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET                              0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_WIDTH                               1
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_OFFSET                                103
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_WORD_OFFSET                           25
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET_MOD8                         0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_TCB_UP_IS_ACTIVE_F_OFFSET_MOD16                        0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_OFFSET                              24
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_WIDTH                               8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_OFFSET                                        104
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_OFFSET                                104
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_WORD_OFFSET                           26
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_DROP_F_OFFSET_MOD16                        8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_OFFSET                          16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_WIDTH                           8
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_OFFSET                            105
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_WORD_OFFSET                       26
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_IS_WIN_FULL_F_OFFSET_MOD16                    0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_F_OFFSET                             0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_F_WIDTH                              16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_OFFSET                               106
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_NUM_ERRS_WORD_OFFSET                          26
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_F_OFFSET                               16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_F_WIDTH                                16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_OFFSET                                 108
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_WR_OFS_WORD_OFFSET                            27
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_F_OFFSET                               0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_F_WIDTH                                16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_OFFSET                                 110
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_RD_OFS_WORD_OFFSET                            27
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_OFFSET                                    112
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_PKT_DROP_SEQ_WORD_OFFSET                               28
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_F_OFFSET                      0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_F_WIDTH                       32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_OFFSET                                             240
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_OFFSET                        240
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_LOW_WORD_OFFSET                   60
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_F_OFFSET                     0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_F_WIDTH                      32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_OFFSET                       244
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_ADDR_HIGH_WORD_OFFSET                  61
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_F_OFFSET                      0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_F_WIDTH                       32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_OFFSET                        248
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_SEND_CNT_WORD_OFFSET                   62
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_F_OFFSET                      0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_F_WIDTH                       32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_OFFSET                        252
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_DROP_CNT_WORD_OFFSET                   63
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_F_OFFSET                     0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_F_WIDTH                      32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_OFFSET                       256
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_LOW_WORD_OFFSET                  64
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_F_OFFSET                    0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_F_WIDTH                     32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_OFFSET                      260
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_ADDR_HIGH_WORD_OFFSET                 65
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_F_OFFSET                  0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_F_WIDTH                   32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_OFFSET                    264
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_RETRANS_RECEIVE_CNT_WORD_OFFSET               66
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_F_OFFSET           16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_F_WIDTH            16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_OFFSET             268
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WR_OFS_WORD_OFFSET        67
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED1_F_OFFSET                                 0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED1_F_WIDTH                                  16
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED1_OFFSET                                   270
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED1_WORD_OFFSET                              67
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_F_OFFSET        0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_F_WIDTH         32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_OFFSET          272
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_TIMEOUT_CNT_WORD_OFFSET     68
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_F_OFFSET       0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_F_WIDTH        32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_OFFSET         276
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_FILL_PKT_CNT_WORD_OFFSET    69
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_F_OFFSET          0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_F_WIDTH           32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_OFFSET            280
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_TX_SEQ_COALESCING_LAST_TIME_WORD_OFFSET       70
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED2_F_OFFSET                                 0
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED2_F_WIDTH                                  32
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED2_OFFSET                                   284
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RESERVED2_WORD_OFFSET                              71
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_OFFSET                             288
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_WORD_OFFSET                        72
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_OFFSET                    320
#define TCPSPDTEST_STREAM_TCPSPDTEST_ENGINE_RTO_RING_SCRATCHPAD_METADATA_WORD_OFFSET               80
/* <<<RDD_TCPSPDTEST_STREAM */


/* >>>RDD_DEBUG_PRINT_HEADER */
#define DEBUG_PRINT_HEADER_PRINT_MARK_F_OFFSET                                                      24
#define DEBUG_PRINT_HEADER_PRINT_MARK_F_WIDTH                                                       8
#define DEBUG_PRINT_HEADER_DEBUG_PRINT_HEADER_OFFSET                                                0
#define DEBUG_PRINT_HEADER_PRINT_MARK_OFFSET                                                        0
#define DEBUG_PRINT_HEADER_PRINT_MARK_WORD_OFFSET                                                   0
#define DEBUG_PRINT_HEADER_PRINT_MARK_F_OFFSET_MOD16                                                8
#define DEBUG_PRINT_HEADER_CORE_ID_F_OFFSET                                                         20
#define DEBUG_PRINT_HEADER_CORE_ID_F_WIDTH                                                          4
#define DEBUG_PRINT_HEADER_CORE_ID_OFFSET                                                           1
#define DEBUG_PRINT_HEADER_CORE_ID_WORD_OFFSET                                                      0
#define DEBUG_PRINT_HEADER_CORE_ID_F_OFFSET_MOD8                                                    4
#define DEBUG_PRINT_HEADER_CORE_ID_F_OFFSET_MOD16                                                   4
#define DEBUG_PRINT_HEADER_TASK_ID_F_OFFSET                                                         16
#define DEBUG_PRINT_HEADER_TASK_ID_F_WIDTH                                                          4
#define DEBUG_PRINT_HEADER_TASK_ID_OFFSET                                                           1
#define DEBUG_PRINT_HEADER_TASK_ID_WORD_OFFSET                                                      0
#define DEBUG_PRINT_HEADER_TASK_ID_F_OFFSET_MOD8                                                    0
#define DEBUG_PRINT_HEADER_TASK_ID_F_OFFSET_MOD16                                                   0
#define DEBUG_PRINT_HEADER_PRINT_PRIO_F_OFFSET                                                      14
#define DEBUG_PRINT_HEADER_PRINT_PRIO_F_WIDTH                                                       2
#define DEBUG_PRINT_HEADER_PRINT_PRIO_OFFSET                                                        2
#define DEBUG_PRINT_HEADER_PRINT_PRIO_WORD_OFFSET                                                   0
#define DEBUG_PRINT_HEADER_PRINT_PRIO_F_OFFSET_MOD8                                                 6
#define DEBUG_PRINT_HEADER_PRINT_PRIO_F_OFFSET_MOD16                                                14
#define DEBUG_PRINT_HEADER_MSG_LEN_F_OFFSET                                                         11
#define DEBUG_PRINT_HEADER_MSG_LEN_F_WIDTH                                                          3
#define DEBUG_PRINT_HEADER_MSG_LEN_OFFSET                                                           2
#define DEBUG_PRINT_HEADER_MSG_LEN_WORD_OFFSET                                                      0
#define DEBUG_PRINT_HEADER_MSG_LEN_F_OFFSET_MOD8                                                    3
#define DEBUG_PRINT_HEADER_MSG_LEN_F_OFFSET_MOD16                                                   11
#define DEBUG_PRINT_HEADER_STRING_ID_F_OFFSET                                                       0
#define DEBUG_PRINT_HEADER_STRING_ID_F_WIDTH                                                        11
#define DEBUG_PRINT_HEADER_STRING_ID_OFFSET                                                         2
#define DEBUG_PRINT_HEADER_STRING_ID_WORD_OFFSET                                                    0
#define DEBUG_PRINT_HEADER_STRING_ID_F_OFFSET_MOD16                                                 0

/* >>>DEBUG_PRINT_HEADER_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	print_mark	;
        uint32_t	core_id   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	print_prio	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	msg_len   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	string_id 	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	string_id 	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	msg_len   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	print_prio	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	core_id   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	print_mark	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) DEBUG_PRINT_HEADER_STRUCT;

#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT), (r))
#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT), (v))
#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_READ(r, p)                 MREAD_8((uint8_t *)(p), (r))
#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_WRITE(v, p)                MWRITE_8((uint8_t *)(p), (v))
#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_L_READ( wv )               FIELD_GET( wv, 24, 8 )
#define RDD_DEBUG_PRINT_HEADER_PRINT_MARK_L_WRITE( v, wv )           FIELD_SET( v, 24, 8, wv )
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT) + 1, 4, 4, (r))
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT) + 1, 4, 4, (v))
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 1, 4, 4, (r))
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 1, 4, 4, (v))
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_L_READ( wv )                  FIELD_GET( wv, 20, 4 )
#define RDD_DEBUG_PRINT_HEADER_CORE_ID_L_WRITE( v, wv )              FIELD_SET( v, 20, 4, wv )
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT) + 1, 0, 4, (r))
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT) + 1, 0, 4, (v))
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 4, (r))
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 4, (v))
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_L_READ( wv )                  FIELD_GET( wv, 16, 4 )
#define RDD_DEBUG_PRINT_HEADER_TASK_ID_L_WRITE( v, wv )              FIELD_SET( v, 16, 4, wv )
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT) + 2, 6, 2, (r))
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT) + 2, 6, 2, (v))
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 2, 6, 2, (r))
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 2, 6, 2, (v))
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_L_READ( wv )               FIELD_GET( wv, 14, 2 )
#define RDD_DEBUG_PRINT_HEADER_PRINT_PRIO_L_WRITE( v, wv )           FIELD_SET( v, 14, 2, wv )
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT) + 2, 3, 3, (r))
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT) + 2, 3, 3, (v))
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 3, (r))
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 3, (v))
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_L_READ( wv )                  FIELD_GET( wv, 11, 3 )
#define RDD_DEBUG_PRINT_HEADER_MSG_LEN_L_WRITE( v, wv )              FIELD_SET( v, 11, 3, wv )
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT) + 2, 0, 11, (r))
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DEBUG_PRINT_HEADER_STRUCT) + 2, 0, 11, (v))
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_READ(r, p)                  FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 11, (r))
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 11, (v))
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_L_READ( wv )                FIELD_GET( wv, 0, 11 )
#define RDD_DEBUG_PRINT_HEADER_STRING_ID_L_WRITE( v, wv )            FIELD_SET( v, 0, 11, wv )
/* <<<DEBUG_PRINT_HEADER_STRUCT */

/* <<<RDD_DEBUG_PRINT_HEADER */


/* >>>RDD_DEBUG_PRINT_INFO */
#define DEBUG_PRINT_INFO_ADDR_LOW_F_OFFSET                                                        0
#define DEBUG_PRINT_INFO_ADDR_LOW_F_WIDTH                                                         32
#define DEBUG_PRINT_INFO_DEBUG_PRINT_INFO_OFFSET                                                  0
#define DEBUG_PRINT_INFO_ADDR_LOW_OFFSET                                                          0
#define DEBUG_PRINT_INFO_ADDR_LOW_WORD_OFFSET                                                     0
#define DEBUG_PRINT_INFO_ADDR_HIGH_F_OFFSET                                                       0
#define DEBUG_PRINT_INFO_ADDR_HIGH_F_WIDTH                                                        32
#define DEBUG_PRINT_INFO_ADDR_HIGH_OFFSET                                                         4
#define DEBUG_PRINT_INFO_ADDR_HIGH_WORD_OFFSET                                                    1
#define DEBUG_PRINT_INFO_SIZE_F_OFFSET                                                            0
#define DEBUG_PRINT_INFO_SIZE_F_WIDTH                                                             32
#define DEBUG_PRINT_INFO_SIZE_OFFSET                                                              8
#define DEBUG_PRINT_INFO_SIZE_WORD_OFFSET                                                         2
#define DEBUG_PRINT_INFO_TABLE_ID_F_OFFSET                                                        24
#define DEBUG_PRINT_INFO_TABLE_ID_F_WIDTH                                                         8
#define DEBUG_PRINT_INFO_TABLE_ID_OFFSET                                                          12
#define DEBUG_PRINT_INFO_TABLE_ID_WORD_OFFSET                                                     3
#define DEBUG_PRINT_INFO_TABLE_ID_F_OFFSET_MOD16                                                  8
/* <<<RDD_DEBUG_PRINT_INFO */


/* >>>RDD_IPTV_CFG */
#define IPTV_CFG_RES_OFFSET_F_OFFSET                                                      16
#define IPTV_CFG_RES_OFFSET_F_WIDTH                                                       16
#define IPTV_CFG_IPTV_CFG_OFFSET                                                          0
#define IPTV_CFG_RES_OFFSET_OFFSET                                                        0
#define IPTV_CFG_RES_OFFSET_WORD_OFFSET                                                   0
#define IPTV_CFG_CONTEXT_OFFSET_F_OFFSET                                                  0
#define IPTV_CFG_CONTEXT_OFFSET_F_WIDTH                                                   16
#define IPTV_CFG_CONTEXT_OFFSET_OFFSET                                                    2
#define IPTV_CFG_CONTEXT_OFFSET_WORD_OFFSET                                               0
#define IPTV_CFG_KEY_OFFSET_F_OFFSET                                                      16
#define IPTV_CFG_KEY_OFFSET_F_WIDTH                                                       16
#define IPTV_CFG_KEY_OFFSET_OFFSET                                                        4
#define IPTV_CFG_KEY_OFFSET_WORD_OFFSET                                                   1
#define IPTV_CFG_HASH_TBL_IDX_F_OFFSET                                                    8
#define IPTV_CFG_HASH_TBL_IDX_F_WIDTH                                                     8
#define IPTV_CFG_HASH_TBL_IDX_OFFSET                                                      6
#define IPTV_CFG_HASH_TBL_IDX_WORD_OFFSET                                                 1
#define IPTV_CFG_HASH_TBL_IDX_F_OFFSET_MOD16                                              8
#define IPTV_CFG_L2_MCAST_F_OFFSET                                                        0
#define IPTV_CFG_L2_MCAST_F_WIDTH                                                         8
#define IPTV_CFG_L2_MCAST_OFFSET                                                          7
#define IPTV_CFG_L2_MCAST_WORD_OFFSET                                                     1
#define IPTV_CFG_L2_MCAST_F_OFFSET_MOD16                                                  0
/* <<<RDD_IPTV_CFG */


/* >>>RDD_IPTV_HASH_LKP_ENTRY */
#define IPTV_HASH_LKP_ENTRY_ADDR_HIGH_F_OFFSET                                                       0
#define IPTV_HASH_LKP_ENTRY_ADDR_HIGH_F_WIDTH                                                        32
#define IPTV_HASH_LKP_ENTRY_ADDR_HIGH_OFFSET                                                         0
#define IPTV_HASH_LKP_ENTRY_ADDR_HIGH_WORD_OFFSET                                                    0
#define IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_F_OFFSET                                               0
#define IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_F_WIDTH                                                32
#define IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_OFFSET                                                 4
#define IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_WORD_OFFSET                                            1

/* >>>IPTV_HASH_LKP_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	addr_high        	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reserved0                  	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
        uint32_t	ipv6                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	reserved1                  	; /* Member of addr_high union */
        uint16_t	mac_high                   	; /* Member of addr_high union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dst_ip_or_mac_low	;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	addr_high        	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	ipv6                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
        uint32_t	reserved0                  	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of addr_high union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	mac_high                   	; /* Member of addr_high union */
        uint16_t	reserved1                  	; /* Member of addr_high union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dst_ip_or_mac_low	;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) IPTV_HASH_LKP_ENTRY_STRUCT;

#define RDD_IPTV_HASH_LKP_ENTRY_ADDR_HIGH_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(IPTV_HASH_LKP_ENTRY_STRUCT), (r))
#define RDD_IPTV_HASH_LKP_ENTRY_ADDR_HIGH_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(IPTV_HASH_LKP_ENTRY_STRUCT), (v))
#define RDD_IPTV_HASH_LKP_ENTRY_ADDR_HIGH_READ(r, p)                         MREAD_32((uint8_t *)(p), (r))
#define RDD_IPTV_HASH_LKP_ENTRY_ADDR_HIGH_WRITE(v, p)                        MWRITE_32((uint8_t *)(p), (v))
#define RDD_IPTV_HASH_LKP_ENTRY_IPV6_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_HASH_LKP_ENTRY_STRUCT) + 3, 0, 1, (r))
#define RDD_IPTV_HASH_LKP_ENTRY_IPV6_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_HASH_LKP_ENTRY_STRUCT) + 3, 0, 1, (v))
#define RDD_IPTV_HASH_LKP_ENTRY_IPV6_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 1, (r))
#define RDD_IPTV_HASH_LKP_ENTRY_IPV6_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 1, (v))
#define RDD_IPTV_HASH_LKP_ENTRY_MAC_HIGH_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(IPTV_HASH_LKP_ENTRY_STRUCT) + 2, (r))
#define RDD_IPTV_HASH_LKP_ENTRY_MAC_HIGH_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(IPTV_HASH_LKP_ENTRY_STRUCT) + 2, (v))
#define RDD_IPTV_HASH_LKP_ENTRY_MAC_HIGH_READ(r, p)                          MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_IPTV_HASH_LKP_ENTRY_MAC_HIGH_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(IPTV_HASH_LKP_ENTRY_STRUCT) + 4, (r))
#define RDD_IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(IPTV_HASH_LKP_ENTRY_STRUCT) + 4, (v))
#define RDD_IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_IPTV_HASH_LKP_ENTRY_DST_IP_OR_MAC_LOW_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<IPTV_HASH_LKP_ENTRY_STRUCT */

/* <<<RDD_IPTV_HASH_LKP_ENTRY */


/* >>>RDD_IPTV_HASH_RESULT_ENTRY */
#define IPTV_HASH_RESULT_ENTRY_CTX_IDX_F_OFFSET                                                         22
#define IPTV_HASH_RESULT_ENTRY_CTX_IDX_F_WIDTH                                                          10
#define IPTV_HASH_RESULT_ENTRY_IPTV_HASH_RESULT_ENTRY_OFFSET                                            0
#define IPTV_HASH_RESULT_ENTRY_CTX_IDX_OFFSET                                                           0
#define IPTV_HASH_RESULT_ENTRY_CTX_IDX_WORD_OFFSET                                                      0
#define IPTV_HASH_RESULT_ENTRY_CTX_IDX_F_OFFSET_MOD16                                                   6

/* >>>IPTV_HASH_RESULT_ENTRY_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	ctx_idx   	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved0 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ctx_idx   	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} IPTV_HASH_RESULT_ENTRY_STRUCT;

#define RDD_IPTV_HASH_RESULT_ENTRY_CTX_IDX_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(IPTV_HASH_RESULT_ENTRY_STRUCT), 6, 10, (r))
#define RDD_IPTV_HASH_RESULT_ENTRY_CTX_IDX_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(IPTV_HASH_RESULT_ENTRY_STRUCT), 6, 10, (v))
#define RDD_IPTV_HASH_RESULT_ENTRY_CTX_IDX_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p), 6, 10, (r))
#define RDD_IPTV_HASH_RESULT_ENTRY_CTX_IDX_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p), 6, 10, (v))
/* <<<IPTV_HASH_RESULT_ENTRY_STRUCT */

/* <<<RDD_IPTV_HASH_RESULT_ENTRY */


/* >>>RDD_IPTV_DDR_CONTEXT_ENTRY */
#define IPTV_DDR_CONTEXT_ENTRY_VALID_F_OFFSET                                                           31
#define IPTV_DDR_CONTEXT_ENTRY_VALID_F_WIDTH                                                            1
#define IPTV_DDR_CONTEXT_ENTRY_IPTV_DDR_CONTEXT_ENTRY_OFFSET                                            0
#define IPTV_DDR_CONTEXT_ENTRY_VALID_OFFSET                                                             0
#define IPTV_DDR_CONTEXT_ENTRY_VALID_WORD_OFFSET                                                        0
#define IPTV_DDR_CONTEXT_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define IPTV_DDR_CONTEXT_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_F_OFFSET                                                          30
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_F_WIDTH                                                           1
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_OFFSET                                                            0
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_WORD_OFFSET                                                       0
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_F_OFFSET_MOD8                                                     6
#define IPTV_DDR_CONTEXT_ENTRY_IP_VER_F_OFFSET_MOD16                                                    14
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_F_OFFSET                                                         29
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_F_WIDTH                                                          1
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_OFFSET                                                           0
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_WORD_OFFSET                                                      0
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_F_OFFSET_MOD8                                                    5
#define IPTV_DDR_CONTEXT_ENTRY_ANY_VID_F_OFFSET_MOD16                                                   13
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_F_OFFSET                                                      28
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_F_WIDTH                                                       1
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_OFFSET                                                        0
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_WORD_OFFSET                                                   0
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_F_OFFSET_MOD8                                                 4
#define IPTV_DDR_CONTEXT_ENTRY_ANY_SRC_IP_F_OFFSET_MOD16                                                12
#define IPTV_DDR_CONTEXT_ENTRY_VID_F_OFFSET                                                             16
#define IPTV_DDR_CONTEXT_ENTRY_VID_F_WIDTH                                                              12
#define IPTV_DDR_CONTEXT_ENTRY_VID_OFFSET                                                               0
#define IPTV_DDR_CONTEXT_ENTRY_VID_WORD_OFFSET                                                          0
#define IPTV_DDR_CONTEXT_ENTRY_VID_F_OFFSET_MOD16                                                       0
#define IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_F_OFFSET                                                  0
#define IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_F_WIDTH                                                   16
#define IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_OFFSET                                                    2
#define IPTV_DDR_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WORD_OFFSET                                               0
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_F_OFFSET                                 16
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_F_WIDTH                                  16
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_OFFSET                                   4
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_0_OR_FLOODING_VPORT_WORD_OFFSET                              1
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_F_OFFSET                                                   0
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_F_WIDTH                                                    16
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_OFFSET                                                     6
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_1_WORD_OFFSET                                                1
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_F_OFFSET                                                   16
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_F_WIDTH                                                    16
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_OFFSET                                                     8
#define IPTV_DDR_CONTEXT_ENTRY_SSID_VECTOR_2_WORD_OFFSET                                                2
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_OFFSET                                                13
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_WIDTH                                                 3
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_OFFSET                                                  10
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_WORD_OFFSET                                             2
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_OFFSET_MOD8                                           5
#define IPTV_DDR_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_OFFSET_MOD16                                          13
#define IPTV_DDR_CONTEXT_ENTRY_RDD_VPORT_F_OFFSET                                                       8
#define IPTV_DDR_CONTEXT_ENTRY_RDD_VPORT_F_WIDTH                                                        5
#define IPTV_DDR_CONTEXT_ENTRY_RDD_VPORT_OFFSET                                                         10
#define IPTV_DDR_CONTEXT_ENTRY_RDD_VPORT_WORD_OFFSET                                                    2
#define IPTV_DDR_CONTEXT_ENTRY_RDD_VPORT_F_OFFSET_MOD8                                                  0
#define IPTV_DDR_CONTEXT_ENTRY_RDD_VPORT_F_OFFSET_MOD16                                                 8
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_F_OFFSET                                        7
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_F_WIDTH                                         1
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_OFFSET                                          11
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_WORD_OFFSET                                     2
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_F_OFFSET_MOD8                                   7
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_PROXY_ENABLED_F_OFFSET_MOD16                                  7
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_F_OFFSET                                                0
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_F_WIDTH                                                 7
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_OFFSET                                                  11
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_WORD_OFFSET                                             2
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_F_OFFSET_MOD8                                           0
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_INDEX_F_OFFSET_MOD16                                          0
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_F_OFFSET                                              28
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_F_WIDTH                                               3
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_OFFSET                                                12
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_WORD_OFFSET                                           3
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_F_OFFSET_MOD8                                         4
#define IPTV_DDR_CONTEXT_ENTRY_WLAN_MCAST_TX_PRIO_F_OFFSET_MOD16                                        12
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_F_OFFSET                                                        22
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_F_WIDTH                                                         2
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_OFFSET                                                          13
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_WORD_OFFSET                                                     3
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_F_OFFSET_MOD8                                                   6
#define IPTV_DDR_CONTEXT_ENTRY_POOL_NUM_F_OFFSET_MOD16                                                  6
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_F_OFFSET                                                    16
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_F_WIDTH                                                     6
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_OFFSET                                                      13
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_WORD_OFFSET                                                 3
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_F_OFFSET_MOD8                                               0
#define IPTV_DDR_CONTEXT_ENTRY_REPLICATIONS_F_OFFSET_MOD16                                              0
#define IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_F_OFFSET                                                         0
#define IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_F_WIDTH                                                          10
#define IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_OFFSET                                                           14
#define IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_WORD_OFFSET                                                      3
#define IPTV_DDR_CONTEXT_ENTRY_CNTR_ID_F_OFFSET_MOD16                                                   0
#define IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_F_OFFSET                                             0
#define IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_F_WIDTH                                              32
#define IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_OFFSET                                               16
#define IPTV_DDR_CONTEXT_ENTRY_EGRESS_PORTS_VECTOR_WORD_OFFSET                                          4
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IP_F_OFFSET                                                          0
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IP_F_WIDTH                                                           32
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IP_OFFSET                                                            20
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IP_WORD_OFFSET                                                       5
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_OFFSET                                                     24
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_WORD_OFFSET                                                6
#define IPTV_DDR_CONTEXT_ENTRY_SRC_IPV6_ADDR_F_OFFSET_MOD16                                             8
#define IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_OFFSET                                                     40
#define IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_WORD_OFFSET                                                10
#define IPTV_DDR_CONTEXT_ENTRY_DST_IPV6_ADDR_F_OFFSET_MOD16                                             8
#define IPTV_DDR_CONTEXT_ENTRY_RESULT_OFFSET                                                            56
#define IPTV_DDR_CONTEXT_ENTRY_RESULT_WORD_OFFSET                                                       14
#define IPTV_DDR_CONTEXT_ENTRY_RESULT_F_OFFSET_MOD16                                                    8
/* <<<RDD_IPTV_DDR_CONTEXT_ENTRY */


/* >>>RDD_IPTV_RULE_BASED_RESULT */
#define IPTV_RULE_BASED_RESULT_IPTV_RULE_BASED_RESULT_OFFSET                                            0
#define IPTV_RULE_BASED_RESULT_RULE_OFFSET                                                              0
#define IPTV_RULE_BASED_RESULT_RULE_WORD_OFFSET                                                         0
#define IPTV_RULE_BASED_RESULT_RULE_F_OFFSET_MOD16                                                      0

/* >>>IPTV_RULE_BASED_RESULT_STRUCT */
#define RDD_IPTV_RULE_BASED_RESULT_RULE_NUMBER	16
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	rule[RDD_IPTV_RULE_BASED_RESULT_RULE_NUMBER];
#else
        uint8_t	rule[RDD_IPTV_RULE_BASED_RESULT_RULE_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) IPTV_RULE_BASED_RESULT_STRUCT;

#define RDD_IPTV_RULE_BASED_RESULT_RULE_READ_G(r, g, idx, i)       GROUP_MREAD_I_8((g), (idx)*sizeof(IPTV_RULE_BASED_RESULT_STRUCT), i, (r))
#define RDD_IPTV_RULE_BASED_RESULT_RULE_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8((g), (idx)*sizeof(IPTV_RULE_BASED_RESULT_STRUCT), i, (v))
#define RDD_IPTV_RULE_BASED_RESULT_RULE_READ(r, p, i)              MREAD_I_8((uint8_t *)(p), i, (r))
#define RDD_IPTV_RULE_BASED_RESULT_RULE_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)(p), i, (v))
/* <<<IPTV_RULE_BASED_RESULT_STRUCT */

/* <<<RDD_IPTV_RULE_BASED_RESULT */


/* >>>RDD_IPTV_GPE_BASED_RESULT */
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_F_OFFSET                                            0
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_F_WIDTH                                             32
#define IPTV_GPE_BASED_RESULT_IPTV_GPE_BASED_RESULT_OFFSET                                             0
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_OFFSET                                              0
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_WORD_OFFSET                                         0
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_F_OFFSET                                           24
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_F_WIDTH                                            8
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_OFFSET                                             4
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_WORD_OFFSET                                        1
#define IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_F_OFFSET_MOD16                                     8
#define IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_F_OFFSET                                              12
#define IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_F_WIDTH                                               8
#define IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_OFFSET                                                5
#define IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_WORD_OFFSET                                           1
#define IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_F_OFFSET_MOD16                                        12
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_F_OFFSET                                                       11
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_F_WIDTH                                                        1
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_OFFSET                                                         6
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_WORD_OFFSET                                                    1
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_F_OFFSET_MOD8                                                  3
#define IPTV_GPE_BASED_RESULT_IS_ROUTED_F_OFFSET_MOD16                                                 11
#define IPTV_GPE_BASED_RESULT_MTU_F_OFFSET                                                             0
#define IPTV_GPE_BASED_RESULT_MTU_F_WIDTH                                                              11
#define IPTV_GPE_BASED_RESULT_MTU_OFFSET                                                               6
#define IPTV_GPE_BASED_RESULT_MTU_WORD_OFFSET                                                          1
#define IPTV_GPE_BASED_RESULT_MTU_F_OFFSET_MOD16                                                       0
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_F_OFFSET                                                   30
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_F_WIDTH                                                    2
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_OFFSET                                                     8
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_WORD_OFFSET                                                2
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_F_OFFSET_MOD8                                              6
#define IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_F_OFFSET_MOD16                                             14
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_F_OFFSET                                                   12
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_F_WIDTH                                                    1
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_OFFSET                                                     10
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_WORD_OFFSET                                                2
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_F_OFFSET_MOD8                                              4
#define IPTV_GPE_BASED_RESULT_ANY_INNER_VID_F_OFFSET_MOD16                                             12
#define IPTV_GPE_BASED_RESULT_INNER_VID_F_OFFSET                                                       0
#define IPTV_GPE_BASED_RESULT_INNER_VID_F_WIDTH                                                        12
#define IPTV_GPE_BASED_RESULT_INNER_VID_OFFSET                                                         10
#define IPTV_GPE_BASED_RESULT_INNER_VID_WORD_OFFSET                                                    2
#define IPTV_GPE_BASED_RESULT_INNER_VID_F_OFFSET_MOD16                                                 0
#define IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_OFFSET                                                   12
#define IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_WORD_OFFSET                                              3
#define IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_F_OFFSET_MOD16                                           8

/* >>>IPTV_GPE_BASED_RESULT_STRUCT */
#define RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_NUMBER	20
typedef union
{
    uint32_t word_32[8];
    uint64_t dword_64[4];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	port_buffer_addr_low                                                 	;
        uint8_t	port_buffer_addr_high                                                	;
        uint32_t	reserved0                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wlan_mcast_clients                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_routed                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mtu                                                                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_vlan_tags                                                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                                            	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	any_inner_vid                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	inner_vid                                                            	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	l3_command_list[RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_NUMBER];
#else
        uint32_t	port_buffer_addr_low                                                 	;
        uint32_t	mtu                                                                  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_routed                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wlan_mcast_clients                                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	port_buffer_addr_high                                                	;
        uint32_t	inner_vid                                                            	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	any_inner_vid                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                                            	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_vlan_tags                                                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	l3_command_list[RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) IPTV_GPE_BASED_RESULT_STRUCT;

#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT), (r))
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT), (v))
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p), (r))
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p), (v))
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 4, (r))
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 4, (v))
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_READ(r, p)                 MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_IPTV_GPE_BASED_RESULT_PORT_BUFFER_ADDR_HIGH_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_READ_G(r, g, idx)             GROUP_FIELD_MREAD_32((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 4, 12, 8, (r))
#define RDD_IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 4, 12, 8, (v))
#define RDD_IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_READ(r, p)                    FIELD_MREAD_32((uint8_t *)(p) + 4, 12, 8, (r))
#define RDD_IPTV_GPE_BASED_RESULT_WLAN_MCAST_CLIENTS_WRITE(v, p)                   FIELD_MWRITE_32((uint8_t *)(p) + 4, 12, 8, (v))
#define RDD_IPTV_GPE_BASED_RESULT_IS_ROUTED_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 6, 3, 1, (r))
#define RDD_IPTV_GPE_BASED_RESULT_IS_ROUTED_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 6, 3, 1, (v))
#define RDD_IPTV_GPE_BASED_RESULT_IS_ROUTED_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 6, 3, 1, (r))
#define RDD_IPTV_GPE_BASED_RESULT_IS_ROUTED_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 6, 3, 1, (v))
#define RDD_IPTV_GPE_BASED_RESULT_MTU_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 6, 0, 11, (r))
#define RDD_IPTV_GPE_BASED_RESULT_MTU_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 6, 0, 11, (v))
#define RDD_IPTV_GPE_BASED_RESULT_MTU_READ(r, p)                                   FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 11, (r))
#define RDD_IPTV_GPE_BASED_RESULT_MTU_WRITE(v, p)                                  FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 11, (v))
#define RDD_IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 8, 6, 2, (r))
#define RDD_IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 8, 6, 2, (v))
#define RDD_IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 2, (r))
#define RDD_IPTV_GPE_BASED_RESULT_NUM_VLAN_TAGS_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 2, (v))
#define RDD_IPTV_GPE_BASED_RESULT_ANY_INNER_VID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 10, 4, 1, (r))
#define RDD_IPTV_GPE_BASED_RESULT_ANY_INNER_VID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 10, 4, 1, (v))
#define RDD_IPTV_GPE_BASED_RESULT_ANY_INNER_VID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 10, 4, 1, (r))
#define RDD_IPTV_GPE_BASED_RESULT_ANY_INNER_VID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 10, 4, 1, (v))
#define RDD_IPTV_GPE_BASED_RESULT_INNER_VID_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 10, 0, 12, (r))
#define RDD_IPTV_GPE_BASED_RESULT_INNER_VID_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 10, 0, 12, (v))
#define RDD_IPTV_GPE_BASED_RESULT_INNER_VID_READ(r, p)                             FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 12, (r))
#define RDD_IPTV_GPE_BASED_RESULT_INNER_VID_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 12, (v))
#define RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_READ_G(r, g, idx, i)             GROUP_MREAD_I_8((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 12, i, (r))
#define RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_WRITE_G(v, g, idx, i)            GROUP_MWRITE_I_8((g), (idx)*sizeof(IPTV_GPE_BASED_RESULT_STRUCT) + 12, i, (v))
#define RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_READ(r, p, i)                    MREAD_I_8((uint8_t *)(p) + 12, i, (r))
#define RDD_IPTV_GPE_BASED_RESULT_L3_COMMAND_LIST_WRITE(v, p, i)                   MWRITE_I_8((uint8_t *)(p) + 12, i, (v))
/* <<<IPTV_GPE_BASED_RESULT_STRUCT */

/* <<<RDD_IPTV_GPE_BASED_RESULT */


/* >>>RDD_IPTV_CLASSIFICATION_CFG_ENTRY */
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_F_OFFSET                                              7
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_F_WIDTH                                               1
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_CLASSIFICATION_CFG_ENTRY_OFFSET                                     0
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_OFFSET                                                0
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_WORD_OFFSET                                           0
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_F_OFFSET_MOD8                                         7
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_MAC_F_OFFSET_MOD16                                        7
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_F_OFFSET                                               6
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_F_WIDTH                                                1
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_OFFSET                                                 0
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_WORD_OFFSET                                            0
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_F_OFFSET_MOD8                                          6
#define IPTV_CLASSIFICATION_CFG_ENTRY_DA_PREFIX_MODE_IP_F_OFFSET_MOD16                                         6
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_F_OFFSET                                                         5
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_F_WIDTH                                                          1
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_OFFSET                                                           0
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_WORD_OFFSET                                                      0
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_F_OFFSET_MOD8                                                    5
#define IPTV_CLASSIFICATION_CFG_ENTRY_IPTV_EN_F_OFFSET_MOD16                                                   5
/* <<<RDD_IPTV_CLASSIFICATION_CFG_ENTRY */


/* >>>RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY */
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_NATC_CONTROL_F_OFFSET                                                    0
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_NATC_CONTROL_F_WIDTH                                                     32
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_OFFSET                                0
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_NATC_CONTROL_OFFSET                                                      0
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_NATC_CONTROL_WORD_OFFSET                                                 0
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_Q_BYTES_CNT_F_OFFSET                                                     24
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_Q_BYTES_CNT_F_WIDTH                                                      8
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_Q_BYTES_CNT_OFFSET                                                       4
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_Q_BYTES_CNT_WORD_OFFSET                                                  1
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_Q_BYTES_CNT_F_OFFSET_MOD16                                               8
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_PATHSTAT_IDX_F_OFFSET                                                    24
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_PATHSTAT_IDX_F_WIDTH                                                     8
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_PATHSTAT_IDX_OFFSET                                                      8
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_PATHSTAT_IDX_WORD_OFFSET                                                 2
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_PATHSTAT_IDX_F_OFFSET_MOD16                                              8
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_SERVICE_QUEUE_F_OFFSET                                                23
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_SERVICE_QUEUE_F_WIDTH                                                 1
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_SERVICE_QUEUE_OFFSET                                                  9
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_SERVICE_QUEUE_WORD_OFFSET                                             2
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_SERVICE_QUEUE_F_OFFSET_MOD8                                           7
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_SERVICE_QUEUE_F_OFFSET_MOD16                                          7
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_SERVICE_QUEUE_F_OFFSET                                                   18
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_SERVICE_QUEUE_F_WIDTH                                                    5
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_SERVICE_QUEUE_OFFSET                                                     9
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_SERVICE_QUEUE_WORD_OFFSET                                                2
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_SERVICE_QUEUE_F_OFFSET_MOD8                                              2
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_SERVICE_QUEUE_F_OFFSET_MOD16                                             2
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_FWD_AND_TRAP_F_OFFSET                                                    15
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_FWD_AND_TRAP_F_WIDTH                                                     1
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_FWD_AND_TRAP_OFFSET                                                      10
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_FWD_AND_TRAP_WORD_OFFSET                                                 2
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_FWD_AND_TRAP_F_OFFSET_MOD8                                               7
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_FWD_AND_TRAP_F_OFFSET_MOD16                                              15
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_OFFSET                                                8
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_WIDTH                                                 3
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_RADIO_DHD_VECTOR_OFFSET                                                  10
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_RADIO_DHD_VECTOR_WORD_OFFSET                                             2
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_OFFSET_MOD8                                           0
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_RADIO_DHD_VECTOR_F_OFFSET_MOD16                                          8
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_CTX_EXT_F_OFFSET                                                      7
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_CTX_EXT_F_WIDTH                                                       1
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_CTX_EXT_OFFSET                                                        11
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_CTX_EXT_WORD_OFFSET                                                   2
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_CTX_EXT_F_OFFSET_MOD8                                                 7
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_CTX_EXT_F_OFFSET_MOD16                                                7
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_0_F_OFFSET                                              16
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_0_F_WIDTH                                               16
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_0_OFFSET                                                12
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_0_WORD_OFFSET                                           3
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_1_F_OFFSET                                              0
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_1_F_WIDTH                                               16
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_1_OFFSET                                                14
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_1_WORD_OFFSET                                           3
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_2_F_OFFSET                                              16
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_2_F_WIDTH                                               16
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_2_OFFSET                                                16
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_2_WORD_OFFSET                                           4
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_MAX_PKT_LEN_F_OFFSET                                                     0
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_MAX_PKT_LEN_F_WIDTH                                                      16
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_MAX_PKT_LEN_OFFSET                                                       18
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_MAX_PKT_LEN_WORD_OFFSET                                                  4
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ENABLE_F_OFFSET                                                  23
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ENABLE_F_WIDTH                                                   1
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ENABLE_OFFSET                                                    21
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ENABLE_WORD_OFFSET                                               5
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ENABLE_F_OFFSET_MOD8                                             7
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ENABLE_F_OFFSET_MOD16                                            7
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ID_F_OFFSET                                                      16
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ID_F_WIDTH                                                       7
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ID_OFFSET                                                        21
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ID_WORD_OFFSET                                                   5
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ID_F_OFFSET_MOD8                                                 0
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ID_F_OFFSET_MOD16                                                0
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_CLIENT_IDX_VECTOR_OFFSET                                                 28
#define MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_CLIENT_IDX_VECTOR_WORD_OFFSET                                            7

/* >>>MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT */
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_CLIENT_IDX_VECTOR_NUMBER	8
typedef union
{
    uint32_t word_32[15];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	natc_control                                                                         	;
        uint8_t	q_bytes_cnt                                                                          	;
        uint32_t	reserved0                                                                            	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	pathstat_idx                                                                         	;
        uint32_t	is_service_queue                                                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	service_queue                                                                        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                                                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fwd_and_trap                                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3                                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	radio_dhd_vector                                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_ctx_ext                                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4                                                                            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	wifi_ssid_vector_0                                                                   	;
        uint16_t	wifi_ssid_vector_1                                                                   	;
        uint16_t	wifi_ssid_vector_2                                                                   	;
        uint16_t	max_pkt_len                                                                          	;
        uint8_t	reserved5                                                                            	;
        uint32_t	policer_enable                                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	policer_id                                                                           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved6                                                                            	;
        uint32_t	reserved7                                                                            	;
        uint32_t	client_idx_vector[RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_CLIENT_IDX_VECTOR_NUMBER];
#else
        uint32_t	natc_control                                                                         	;
        uint32_t	reserved0                                                                            	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	q_bytes_cnt                                                                          	;
        uint32_t	reserved4                                                                            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_ctx_ext                                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	radio_dhd_vector                                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3                                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fwd_and_trap                                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                                                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	service_queue                                                                        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_service_queue                                                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	pathstat_idx                                                                         	;
        uint16_t	wifi_ssid_vector_1                                                                   	;
        uint16_t	wifi_ssid_vector_0                                                                   	;
        uint16_t	max_pkt_len                                                                          	;
        uint16_t	wifi_ssid_vector_2                                                                   	;
        uint16_t	reserved6                                                                            	;
        uint32_t	policer_id                                                                           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	policer_enable                                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved5                                                                            	;
        uint32_t	reserved7                                                                            	;
        uint32_t	client_idx_vector[RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_CLIENT_IDX_VECTOR_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT;

#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_NATC_CONTROL_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT), (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_NATC_CONTROL_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT), (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_NATC_CONTROL_READ(r, p)                       MREAD_32((uint8_t *)(p), (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_NATC_CONTROL_WRITE(v, p)                      MWRITE_32((uint8_t *)(p), (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_Q_BYTES_CNT_READ_G(r, g, idx)                 GROUP_MREAD_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 4, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_Q_BYTES_CNT_WRITE_G(v, g, idx)                GROUP_MWRITE_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 4, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_Q_BYTES_CNT_READ(r, p)                        MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_Q_BYTES_CNT_WRITE(v, p)                       MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_PATHSTAT_IDX_READ_G(r, g, idx)                GROUP_MREAD_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 8, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_PATHSTAT_IDX_WRITE_G(v, g, idx)               GROUP_MWRITE_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 8, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_PATHSTAT_IDX_READ(r, p)                       MREAD_8((uint8_t *)(p) + 8, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_PATHSTAT_IDX_WRITE(v, p)                      MWRITE_8((uint8_t *)(p) + 8, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_SERVICE_QUEUE_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 9, 7, 1, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_SERVICE_QUEUE_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 9, 7, 1, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_SERVICE_QUEUE_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 9, 7, 1, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_SERVICE_QUEUE_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 9, 7, 1, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_SERVICE_QUEUE_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 9, 2, 5, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_SERVICE_QUEUE_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 9, 2, 5, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_SERVICE_QUEUE_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 9, 2, 5, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_SERVICE_QUEUE_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 9, 2, 5, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_FWD_AND_TRAP_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 10, 7, 1, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_FWD_AND_TRAP_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 10, 7, 1, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_FWD_AND_TRAP_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 10, 7, 1, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_FWD_AND_TRAP_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 10, 7, 1, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_RADIO_DHD_VECTOR_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 10, 0, 3, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_RADIO_DHD_VECTOR_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 10, 0, 3, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_RADIO_DHD_VECTOR_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 10, 0, 3, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_RADIO_DHD_VECTOR_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 10, 0, 3, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_CTX_EXT_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 11, 7, 1, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_CTX_EXT_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 11, 7, 1, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_CTX_EXT_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 11, 7, 1, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_IS_CTX_EXT_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 11, 7, 1, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_0_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 12, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_0_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 12, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_0_READ(r, p)                 MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_0_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_1_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 14, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_1_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 14, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_1_READ(r, p)                 MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_1_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_2_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 16, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_2_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 16, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_2_READ(r, p)                 MREAD_16((uint8_t *)(p) + 16, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_WIFI_SSID_VECTOR_2_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 16, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_MAX_PKT_LEN_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 18, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_MAX_PKT_LEN_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 18, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_MAX_PKT_LEN_READ(r, p)                        MREAD_16((uint8_t *)(p) + 18, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_MAX_PKT_LEN_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 18, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ENABLE_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 21, 7, 1, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ENABLE_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 21, 7, 1, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ENABLE_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 21, 7, 1, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ENABLE_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 21, 7, 1, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 21, 0, 7, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 21, 0, 7, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 21, 0, 7, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_POLICER_ID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 21, 0, 7, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_CLIENT_IDX_VECTOR_READ_G(r, g, idx, i)        GROUP_MREAD_I_32((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 28, i, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_CLIENT_IDX_VECTOR_WRITE_G(v, g, idx, i)       GROUP_MWRITE_I_32((g), (idx)*sizeof(MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT) + 28, i, (v))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_CLIENT_IDX_VECTOR_READ(r, p, i)               MREAD_I_32((uint8_t *)(p) + 28, i, (r))
#define RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_CLIENT_IDX_VECTOR_WRITE(v, p, i)              MWRITE_I_32((uint8_t *)(p) + 28, i, (v))
/* <<<MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY_STRUCT */

/* <<<RDD_MASTER_MC_FLOW_CACHE_CONTEXT_ENTRY */


/* >>>RDD_MULTICAST_KEY_MASK_ENTRY */
#define MULTICAST_KEY_MASK_ENTRY_VLAN_MASK_F_OFFSET                                                       16
#define MULTICAST_KEY_MASK_ENTRY_VLAN_MASK_F_WIDTH                                                        16
#define MULTICAST_KEY_MASK_ENTRY_MULTICAST_KEY_MASK_ENTRY_OFFSET                                          0
#define MULTICAST_KEY_MASK_ENTRY_VLAN_MASK_OFFSET                                                         0
#define MULTICAST_KEY_MASK_ENTRY_VLAN_MASK_WORD_OFFSET                                                    0
#define MULTICAST_KEY_MASK_ENTRY_ETYPE_MASK_F_OFFSET                                                      0
#define MULTICAST_KEY_MASK_ENTRY_ETYPE_MASK_F_WIDTH                                                       16
#define MULTICAST_KEY_MASK_ENTRY_ETYPE_MASK_OFFSET                                                        2
#define MULTICAST_KEY_MASK_ENTRY_ETYPE_MASK_WORD_OFFSET                                                   0
/* <<<RDD_MULTICAST_KEY_MASK_ENTRY */


/* >>>RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY */
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_F_OFFSET                                                            16
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_F_WIDTH                                                             16
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_OFFSET                                                              12
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_WORD_OFFSET                                                         3
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_F_OFFSET                                                           15
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_F_WIDTH                                                            1
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_OFFSET                                                             14
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_WORD_OFFSET                                                        3
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_F_OFFSET                                                    12
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_F_WIDTH                                                     3
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_OFFSET                                                      14
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_WORD_OFFSET                                                 3
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_F_OFFSET_MOD8                                               4
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_F_OFFSET_MOD16                                              12
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_F_OFFSET                                                       11
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_F_WIDTH                                                        1
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_OFFSET                                                         14
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_WORD_OFFSET                                                    3
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_F_OFFSET_MOD8                                                  3
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_F_OFFSET_MOD16                                                 11
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_F_OFFSET                                                            0
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_F_WIDTH                                                             8
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_OFFSET                                                              15
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_WORD_OFFSET                                                         3
#define NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_F_OFFSET_MOD16                                                      0

/* >>>NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0   	;
        uint32_t	reserved1   	;
        uint32_t	reserved2   	;
        uint16_t	rule        	;
        uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sub_table_id	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	extension   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	port        	;
#else
        uint32_t	reserved0   	;
        uint32_t	reserved1   	;
        uint32_t	reserved2   	;
        uint8_t	port        	;
        uint32_t	reserved3   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	extension   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sub_table_id	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	rule        	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT;

#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_READ_G(r, g, idx)                  GROUP_MREAD_16((g), (idx)*sizeof(NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT) + 12, (r))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_WRITE_G(v, g, idx)                 GROUP_MWRITE_16((g), (idx)*sizeof(NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT) + 12, (v))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_READ(r, p)                         MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_RULE_WRITE(v, p)                        MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT) + 14, 7, 1, (r))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT) + 14, 7, 1, (v))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 14, 7, 1, (r))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_VALID_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 14, 7, 1, (v))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT) + 14, 4, 3, (r))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT) + 14, 4, 3, (v))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 14, 4, 3, (r))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_SUB_TABLE_ID_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 14, 4, 3, (v))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT) + 14, 3, 1, (r))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT) + 14, 3, 1, (v))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 14, 3, 1, (r))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_EXTENSION_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 14, 3, 1, (v))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_READ_G(r, g, idx)                  GROUP_MREAD_8((g), (idx)*sizeof(NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT) + 15, (r))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_WRITE_G(v, g, idx)                 GROUP_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT) + 15, (v))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_READ(r, p)                         MREAD_8((uint8_t *)(p) + 15, (r))
#define RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY_PORT_WRITE(v, p)                        MWRITE_8((uint8_t *)(p) + 15, (v))
/* <<<NAT_CACHE_VLAN_ACTION_KEY_ENTRY_STRUCT */

/* <<<RDD_NAT_CACHE_VLAN_ACTION_KEY_ENTRY */


/* >>>RDD_NAT_CACHE_COUNTER_LKP_ENTRY */
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_F_OFFSET                                                           31
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_F_WIDTH                                                            1
#define NAT_CACHE_COUNTER_LKP_ENTRY_NAT_CACHE_COUNTER_LKP_ENTRY_OFFSET                                       0
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_OFFSET                                                             0
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_WORD_OFFSET                                                        0
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define NAT_CACHE_COUNTER_LKP_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_F_OFFSET                                                    16
#define NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_F_WIDTH                                                     8
#define NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_OFFSET                                                      1
#define NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_WORD_OFFSET                                                 0
#define NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_F_OFFSET_MOD16                                              0
#define NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_F_OFFSET                                                     0
#define NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_F_WIDTH                                                      32
#define NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_OFFSET                                                       12
#define NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_WORD_OFFSET                                                  3

/* >>>NAT_CACHE_COUNTER_LKP_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0   	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	sub_table_id	;
        uint16_t	reserved1   	;
        uint32_t	reserved2   	;
        uint32_t	reserved3   	;
        uint32_t	counter_key 	;
#else
        uint16_t	reserved1   	;
        uint8_t	sub_table_id	;
        uint32_t	reserved0   	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2   	;
        uint32_t	reserved3   	;
        uint32_t	counter_key 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) NAT_CACHE_COUNTER_LKP_ENTRY_STRUCT;

#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_VALID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_COUNTER_LKP_ENTRY_STRUCT), 7, 1, (r))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_COUNTER_LKP_ENTRY_STRUCT), 7, 1, (v))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_VALID_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_VALID_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(NAT_CACHE_COUNTER_LKP_ENTRY_STRUCT) + 1, (r))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_COUNTER_LKP_ENTRY_STRUCT) + 1, (v))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_SUB_TABLE_ID_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(NAT_CACHE_COUNTER_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(NAT_CACHE_COUNTER_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_READ(r, p)                  MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_NAT_CACHE_COUNTER_LKP_ENTRY_COUNTER_KEY_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 12, (v))
/* <<<NAT_CACHE_COUNTER_LKP_ENTRY_STRUCT */

/* <<<RDD_NAT_CACHE_COUNTER_LKP_ENTRY */


/* >>>RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX */
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_F_OFFSET                                                    4
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_F_WIDTH                                                     4
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_OFFSET                                                      15
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_WORD_OFFSET                                                 3
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_F_OFFSET_MOD8                                               4
#define NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_F_OFFSET_MOD16                                              4

/* >>>NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved1   	;
        uint32_t	reserved2   	;
        uint32_t	reserved3   	;
        uint32_t	reserved4   	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	var_size_ctx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved1   	;
        uint32_t	reserved2   	;
        uint32_t	reserved3   	;
        uint32_t	var_size_ctx	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4   	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_STRUCT;

#define RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_STRUCT) + 15, 4, 4, (r))
#define RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_STRUCT) + 15, 4, 4, (v))
#define RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 15, 4, 4, (r))
#define RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_VAR_SIZE_CTX_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 15, 4, 4, (v))
/* <<<NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX_STRUCT */

/* <<<RDD_NAT_CACHE_LKP_ENTRY_VAR_SIZE_CTX */


/* >>>RDD_NATC_COMMAND_DATA_EXT */
#define NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_EXT_OFFSET                                             0
#define NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_OFFSET                                        0
#define NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_WORD_OFFSET                                   0
#define NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_F_OFFSET_MOD16                                0
#define NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_OFFSET                                                   40
#define NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_WORD_OFFSET                                              10
#define NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_F_OFFSET_MOD16                                           8

/* >>>NATC_COMMAND_DATA_EXT_STRUCT */
#define RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_NUMBER	40
#define RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_NUMBER	16
typedef union
{
    uint32_t word_32[14];
    uint64_t dword_64[7];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	natc_command_data_reserved[RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_NUMBER];
        uint8_t	natc_l2_crc_buf[RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_NUMBER];
#else
        uint8_t	natc_command_data_reserved[RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_NUMBER];
        uint8_t	natc_l2_crc_buf[RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) NATC_COMMAND_DATA_EXT_STRUCT;

#define RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_READ_G(r, g, idx, i)       GROUP_MREAD_I_8((g), (idx)*sizeof(NATC_COMMAND_DATA_EXT_STRUCT), i, (r))
#define RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8((g), (idx)*sizeof(NATC_COMMAND_DATA_EXT_STRUCT), i, (v))
#define RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_READ(r, p, i)              MREAD_I_8((uint8_t *)(p), i, (r))
#define RDD_NATC_COMMAND_DATA_EXT_NATC_COMMAND_DATA_RESERVED_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)(p), i, (v))
#define RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_READ_G(r, g, idx, i)                  GROUP_MREAD_I_8((g), (idx)*sizeof(NATC_COMMAND_DATA_EXT_STRUCT) + 40, i, (r))
#define RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_WRITE_G(v, g, idx, i)                 GROUP_MWRITE_I_8((g), (idx)*sizeof(NATC_COMMAND_DATA_EXT_STRUCT) + 40, i, (v))
#define RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_READ(r, p, i)                         MREAD_I_8((uint8_t *)(p) + 40, i, (r))
#define RDD_NATC_COMMAND_DATA_EXT_NATC_L2_CRC_BUF_WRITE(v, p, i)                        MWRITE_I_8((uint8_t *)(p) + 40, i, (v))
/* <<<NATC_COMMAND_DATA_EXT_STRUCT */

/* <<<RDD_NATC_COMMAND_DATA_EXT */


/* >>>RDD_NAT_CACHE_MC_LKP_ENTRY */
#define NAT_CACHE_MC_LKP_ENTRY_SRC_IP_F_OFFSET                                                          0
#define NAT_CACHE_MC_LKP_ENTRY_SRC_IP_F_WIDTH                                                           32
#define NAT_CACHE_MC_LKP_ENTRY_NAT_CACHE_MC_LKP_ENTRY_OFFSET                                            0
#define NAT_CACHE_MC_LKP_ENTRY_SRC_IP_OFFSET                                                            0
#define NAT_CACHE_MC_LKP_ENTRY_SRC_IP_WORD_OFFSET                                                       0
#define NAT_CACHE_MC_LKP_ENTRY_DST_IP_F_OFFSET                                                          0
#define NAT_CACHE_MC_LKP_ENTRY_DST_IP_F_WIDTH                                                           32
#define NAT_CACHE_MC_LKP_ENTRY_DST_IP_OFFSET                                                            4
#define NAT_CACHE_MC_LKP_ENTRY_DST_IP_WORD_OFFSET                                                       1
#define NAT_CACHE_MC_LKP_ENTRY_VLANS_ETYPE_CRC_F_OFFSET                                                 0
#define NAT_CACHE_MC_LKP_ENTRY_VLANS_ETYPE_CRC_F_WIDTH                                                  32
#define NAT_CACHE_MC_LKP_ENTRY_VLANS_ETYPE_CRC_OFFSET                                                   8
#define NAT_CACHE_MC_LKP_ENTRY_VLANS_ETYPE_CRC_WORD_OFFSET                                              2
#define NAT_CACHE_MC_LKP_ENTRY_TOS_VPORT_CLIENT_UNION_F_OFFSET                                          0
#define NAT_CACHE_MC_LKP_ENTRY_TOS_VPORT_CLIENT_UNION_F_WIDTH                                           32
#define NAT_CACHE_MC_LKP_ENTRY_TOS_VPORT_CLIENT_UNION_OFFSET                                            12
#define NAT_CACHE_MC_LKP_ENTRY_TOS_VPORT_CLIENT_UNION_WORD_OFFSET                                       3

/* >>>NAT_CACHE_MC_LKP_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	src_ip         	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dst_ip         	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	vlans_etype_crc	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tos_vport_client_union	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	tos                      	; /* Member of tos_vport_client_union union */
        uint32_t	rx_vport                 	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	num_of_vlans             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	valid                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	zero_reserved            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	is_ipv6                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	reserved2                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	client_idx               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	var_size_ctx             	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	dscp                     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	ecn                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	reserved1                	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	tos_port_vlan            	; /* Member of tos_vport_client_union union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	src_ip         	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dst_ip         	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	vlans_etype_crc	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tos_vport_client_union	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	var_size_ctx             	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	client_idx               	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	reserved2                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	is_ipv6                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	zero_reserved            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	valid                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	num_of_vlans             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	rx_vport                 	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint8_t	tos                      	; /* Member of tos_vport_client_union union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reserved1                	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	ecn                      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
        uint32_t	dscp                     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of tos_vport_client_union union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	tos_port_vlan            	; /* Member of tos_vport_client_union union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) NAT_CACHE_MC_LKP_ENTRY_STRUCT;

#define RDD_NAT_CACHE_MC_LKP_ENTRY_SRC_IP_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT), (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_SRC_IP_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT), (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_SRC_IP_READ(r, p)                          MREAD_32((uint8_t *)(p), (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_SRC_IP_WRITE(v, p)                         MWRITE_32((uint8_t *)(p), (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_DST_IP_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 4, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_DST_IP_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 4, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_DST_IP_READ(r, p)                          MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_DST_IP_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VLANS_ETYPE_CRC_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 8, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VLANS_ETYPE_CRC_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 8, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VLANS_ETYPE_CRC_READ(r, p)                 MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VLANS_ETYPE_CRC_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_VPORT_CLIENT_UNION_READ_G(r, g, idx)   GROUP_MREAD_32((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_VPORT_CLIENT_UNION_WRITE_G(v, g, idx)  GROUP_MWRITE_32((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_VPORT_CLIENT_UNION_READ(r, p)          MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_VPORT_CLIENT_UNION_WRITE(v, p)         MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_READ(r, p)                             MREAD_8((uint8_t *)(p) + 12, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_WRITE(v, p)                            MWRITE_8((uint8_t *)(p) + 12, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_RX_VPORT_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 13, 3, 5, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_RX_VPORT_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 13, 3, 5, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_RX_VPORT_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 13, 3, 5, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_RX_VPORT_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 13, 3, 5, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_NUM_OF_VLANS_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 13, 0, 3, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_NUM_OF_VLANS_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 13, 0, 3, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_NUM_OF_VLANS_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 3, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_NUM_OF_VLANS_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 3, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VALID_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 14, 7, 1, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 14, 7, 1, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VALID_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 14, 7, 1, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VALID_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 14, 7, 1, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_ZERO_RESERVED_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 14, 6, 1, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_ZERO_RESERVED_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 14, 6, 1, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_ZERO_RESERVED_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 14, 6, 1, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_ZERO_RESERVED_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 14, 6, 1, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_IS_IPV6_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 14, 5, 1, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_IS_IPV6_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 14, 5, 1, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_IS_IPV6_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 14, 5, 1, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_IS_IPV6_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 14, 5, 1, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_CLIENT_IDX_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 14, 4, 8, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_CLIENT_IDX_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 14, 4, 8, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_CLIENT_IDX_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 14, 4, 8, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_CLIENT_IDX_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 14, 4, 8, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VAR_SIZE_CTX_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 15, 0, 4, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VAR_SIZE_CTX_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 15, 0, 4, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VAR_SIZE_CTX_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 15, 0, 4, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_VAR_SIZE_CTX_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 15, 0, 4, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_DSCP_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 12, 2, 6, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_DSCP_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 12, 2, 6, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_DSCP_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 12, 2, 6, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_DSCP_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 12, 2, 6, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_ECN_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 12, 0, 2, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_ECN_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 12, 0, 2, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_ECN_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 12, 0, 2, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_ECN_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 12, 0, 2, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_PORT_VLAN_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_PORT_VLAN_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(NAT_CACHE_MC_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_PORT_VLAN_READ(r, p)                   MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_NAT_CACHE_MC_LKP_ENTRY_TOS_PORT_VLAN_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 12, (v))
/* <<<NAT_CACHE_MC_LKP_ENTRY_STRUCT */

/* <<<RDD_NAT_CACHE_MC_LKP_ENTRY */


/* >>>RDD_FC_TCAM_CONTEXT */
#define FC_TCAM_CONTEXT_ACTION_F_OFFSET                                                          30
#define FC_TCAM_CONTEXT_ACTION_F_WIDTH                                                           2
#define FC_TCAM_CONTEXT_FC_TCAM_CONTEXT_OFFSET                                                   0
#define FC_TCAM_CONTEXT_ACTION_OFFSET                                                            0
#define FC_TCAM_CONTEXT_ACTION_WORD_OFFSET                                                       0
#define FC_TCAM_CONTEXT_ACTION_F_OFFSET_MOD8                                                     6
#define FC_TCAM_CONTEXT_ACTION_F_OFFSET_MOD16                                                    14
#define FC_TCAM_CONTEXT_TRAP_REASON_F_OFFSET                                                     27
#define FC_TCAM_CONTEXT_TRAP_REASON_F_WIDTH                                                      3
#define FC_TCAM_CONTEXT_TRAP_REASON_OFFSET                                                       0
#define FC_TCAM_CONTEXT_TRAP_REASON_WORD_OFFSET                                                  0
#define FC_TCAM_CONTEXT_TRAP_REASON_F_OFFSET_MOD8                                                3
#define FC_TCAM_CONTEXT_TRAP_REASON_F_OFFSET_MOD16                                               11
#define FC_TCAM_CONTEXT_CNTR_ID_F_OFFSET                                                         16
#define FC_TCAM_CONTEXT_CNTR_ID_F_WIDTH                                                          11
#define FC_TCAM_CONTEXT_CNTR_ID_OFFSET                                                           0
#define FC_TCAM_CONTEXT_CNTR_ID_WORD_OFFSET                                                      0
#define FC_TCAM_CONTEXT_CNTR_ID_F_OFFSET_MOD16                                                   0
#define FC_TCAM_CONTEXT_CNTR_DISABLE_F_OFFSET                                                    15
#define FC_TCAM_CONTEXT_CNTR_DISABLE_F_WIDTH                                                     1
#define FC_TCAM_CONTEXT_CNTR_DISABLE_OFFSET                                                      2
#define FC_TCAM_CONTEXT_CNTR_DISABLE_WORD_OFFSET                                                 0
#define FC_TCAM_CONTEXT_CNTR_DISABLE_F_OFFSET_MOD8                                               7
#define FC_TCAM_CONTEXT_CNTR_DISABLE_F_OFFSET_MOD16                                              15
#define FC_TCAM_CONTEXT_BYTES_CNTR_ID_F_OFFSET                                                   4
#define FC_TCAM_CONTEXT_BYTES_CNTR_ID_F_WIDTH                                                    11
#define FC_TCAM_CONTEXT_BYTES_CNTR_ID_OFFSET                                                     2
#define FC_TCAM_CONTEXT_BYTES_CNTR_ID_WORD_OFFSET                                                0
#define FC_TCAM_CONTEXT_BYTES_CNTR_ID_F_OFFSET_MOD16                                             4
#define FC_TCAM_CONTEXT_BYTES_CNTR_DISABLE_F_OFFSET                                              3
#define FC_TCAM_CONTEXT_BYTES_CNTR_DISABLE_F_WIDTH                                               1
#define FC_TCAM_CONTEXT_BYTES_CNTR_DISABLE_OFFSET                                                3
#define FC_TCAM_CONTEXT_BYTES_CNTR_DISABLE_WORD_OFFSET                                           0
#define FC_TCAM_CONTEXT_BYTES_CNTR_DISABLE_F_OFFSET_MOD8                                         3
#define FC_TCAM_CONTEXT_BYTES_CNTR_DISABLE_F_OFFSET_MOD16                                        3
#define FC_TCAM_CONTEXT_IQ_PRIORITY_F_OFFSET                                                     2
#define FC_TCAM_CONTEXT_IQ_PRIORITY_F_WIDTH                                                      1
#define FC_TCAM_CONTEXT_IQ_PRIORITY_OFFSET                                                       3
#define FC_TCAM_CONTEXT_IQ_PRIORITY_WORD_OFFSET                                                  0
#define FC_TCAM_CONTEXT_IQ_PRIORITY_F_OFFSET_MOD8                                                2
#define FC_TCAM_CONTEXT_IQ_PRIORITY_F_OFFSET_MOD16                                               2

/* >>>FC_TCAM_CONTEXT_STRUCT */
#define RDD_FC_TCAM_CONTEXT_RESERVED2_NUMBER	12
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	action                                             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	trap_reason                                        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cntr_id                                            	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cntr_disable                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bytes_cntr_id                                      	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bytes_cntr_disable                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	iq_priority                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved2[RDD_FC_TCAM_CONTEXT_RESERVED2_NUMBER];
#else
        uint32_t	reserved1                                          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	iq_priority                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bytes_cntr_disable                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bytes_cntr_id                                      	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cntr_disable                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cntr_id                                            	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	trap_reason                                        	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	action                                             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved2[RDD_FC_TCAM_CONTEXT_RESERVED2_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) FC_TCAM_CONTEXT_STRUCT;

#define RDD_FC_TCAM_CONTEXT_ACTION_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT), 6, 2, (r))
#define RDD_FC_TCAM_CONTEXT_ACTION_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT), 6, 2, (v))
#define RDD_FC_TCAM_CONTEXT_ACTION_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p), 6, 2, (r))
#define RDD_FC_TCAM_CONTEXT_ACTION_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p), 6, 2, (v))
#define RDD_FC_TCAM_CONTEXT_TRAP_REASON_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT), 3, 3, (r))
#define RDD_FC_TCAM_CONTEXT_TRAP_REASON_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT), 3, 3, (v))
#define RDD_FC_TCAM_CONTEXT_TRAP_REASON_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 3, 3, (r))
#define RDD_FC_TCAM_CONTEXT_TRAP_REASON_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 3, 3, (v))
#define RDD_FC_TCAM_CONTEXT_CNTR_ID_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT), 0, 11, (r))
#define RDD_FC_TCAM_CONTEXT_CNTR_ID_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT), 0, 11, (v))
#define RDD_FC_TCAM_CONTEXT_CNTR_ID_READ(r, p)                            FIELD_MREAD_16((uint8_t *)(p), 0, 11, (r))
#define RDD_FC_TCAM_CONTEXT_CNTR_ID_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)(p), 0, 11, (v))
#define RDD_FC_TCAM_CONTEXT_CNTR_DISABLE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT) + 2, 7, 1, (r))
#define RDD_FC_TCAM_CONTEXT_CNTR_DISABLE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT) + 2, 7, 1, (v))
#define RDD_FC_TCAM_CONTEXT_CNTR_DISABLE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 2, 7, 1, (r))
#define RDD_FC_TCAM_CONTEXT_CNTR_DISABLE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 2, 7, 1, (v))
#define RDD_FC_TCAM_CONTEXT_BYTES_CNTR_ID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT) + 2, 4, 11, (r))
#define RDD_FC_TCAM_CONTEXT_BYTES_CNTR_ID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT) + 2, 4, 11, (v))
#define RDD_FC_TCAM_CONTEXT_BYTES_CNTR_ID_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 2, 4, 11, (r))
#define RDD_FC_TCAM_CONTEXT_BYTES_CNTR_ID_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 2, 4, 11, (v))
#define RDD_FC_TCAM_CONTEXT_BYTES_CNTR_DISABLE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT) + 3, 3, 1, (r))
#define RDD_FC_TCAM_CONTEXT_BYTES_CNTR_DISABLE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT) + 3, 3, 1, (v))
#define RDD_FC_TCAM_CONTEXT_BYTES_CNTR_DISABLE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 3, 3, 1, (r))
#define RDD_FC_TCAM_CONTEXT_BYTES_CNTR_DISABLE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 3, 3, 1, (v))
#define RDD_FC_TCAM_CONTEXT_IQ_PRIORITY_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT) + 3, 2, 1, (r))
#define RDD_FC_TCAM_CONTEXT_IQ_PRIORITY_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_TCAM_CONTEXT_STRUCT) + 3, 2, 1, (v))
#define RDD_FC_TCAM_CONTEXT_IQ_PRIORITY_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 3, 2, 1, (r))
#define RDD_FC_TCAM_CONTEXT_IQ_PRIORITY_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 3, 2, 1, (v))
/* <<<FC_TCAM_CONTEXT_STRUCT */

/* <<<RDD_FC_TCAM_CONTEXT */


/* >>>RDD_BRIDGE_CFG */
#define BRIDGE_CFG_HIT_F_OFFSET                                                             31
#define BRIDGE_CFG_HIT_F_WIDTH                                                              1
#define BRIDGE_CFG_BRIDGE_CFG_OFFSET                                                        0
#define BRIDGE_CFG_HIT_OFFSET                                                               0
#define BRIDGE_CFG_HIT_WORD_OFFSET                                                          0
#define BRIDGE_CFG_HIT_F_OFFSET_MOD8                                                        7
#define BRIDGE_CFG_HIT_F_OFFSET_MOD16                                                       15
#define BRIDGE_CFG_BRIDGE_FW_FAILED_F_OFFSET                                                30
#define BRIDGE_CFG_BRIDGE_FW_FAILED_F_WIDTH                                                 1
#define BRIDGE_CFG_BRIDGE_FW_FAILED_OFFSET                                                  0
#define BRIDGE_CFG_BRIDGE_FW_FAILED_WORD_OFFSET                                             0
#define BRIDGE_CFG_BRIDGE_FW_FAILED_F_OFFSET_MOD8                                           6
#define BRIDGE_CFG_BRIDGE_FW_FAILED_F_OFFSET_MOD16                                          14
#define BRIDGE_CFG_VLAN_AGGREGATION_F_OFFSET                                                29
#define BRIDGE_CFG_VLAN_AGGREGATION_F_WIDTH                                                 1
#define BRIDGE_CFG_VLAN_AGGREGATION_OFFSET                                                  0
#define BRIDGE_CFG_VLAN_AGGREGATION_WORD_OFFSET                                             0
#define BRIDGE_CFG_VLAN_AGGREGATION_F_OFFSET_MOD8                                           5
#define BRIDGE_CFG_VLAN_AGGREGATION_F_OFFSET_MOD16                                          13
#define BRIDGE_CFG_BRIDGE_RESULTS_AVAILABLE_F_OFFSET                                        16
#define BRIDGE_CFG_BRIDGE_RESULTS_AVAILABLE_F_WIDTH                                         1
#define BRIDGE_CFG_BRIDGE_RESULTS_AVAILABLE_OFFSET                                          1
#define BRIDGE_CFG_BRIDGE_RESULTS_AVAILABLE_WORD_OFFSET                                     0
#define BRIDGE_CFG_BRIDGE_RESULTS_AVAILABLE_F_OFFSET_MOD8                                   0
#define BRIDGE_CFG_BRIDGE_RESULTS_AVAILABLE_F_OFFSET_MOD16                                  0
#define BRIDGE_CFG_RES_OFFSET_F_OFFSET                                                      0
#define BRIDGE_CFG_RES_OFFSET_F_WIDTH                                                       16
#define BRIDGE_CFG_RES_OFFSET_OFFSET                                                        2
#define BRIDGE_CFG_RES_OFFSET_WORD_OFFSET                                                   0
#define BRIDGE_CFG_CONTEXT_OFFSET_F_OFFSET                                                  16
#define BRIDGE_CFG_CONTEXT_OFFSET_F_WIDTH                                                   16
#define BRIDGE_CFG_CONTEXT_OFFSET_OFFSET                                                    4
#define BRIDGE_CFG_CONTEXT_OFFSET_WORD_OFFSET                                               1
/* <<<RDD_BRIDGE_CFG */


/* >>>RDD_BRIDGE_AND_VLAN_LKP_CMD */
#define BRIDGE_AND_VLAN_LKP_CMD_VPORT_F_OFFSET                                                           12
#define BRIDGE_AND_VLAN_LKP_CMD_VPORT_F_WIDTH                                                            6
#define BRIDGE_AND_VLAN_LKP_CMD_VPORT_OFFSET                                                             5
#define BRIDGE_AND_VLAN_LKP_CMD_VPORT_WORD_OFFSET                                                        1
#define BRIDGE_AND_VLAN_LKP_CMD_VPORT_F_OFFSET_MOD8                                                      4
#define BRIDGE_AND_VLAN_LKP_CMD_VPORT_F_OFFSET_MOD16                                                     12
#define BRIDGE_AND_VLAN_LKP_CMD_VID_F_OFFSET                                                             0
#define BRIDGE_AND_VLAN_LKP_CMD_VID_F_WIDTH                                                              12
#define BRIDGE_AND_VLAN_LKP_CMD_VID_OFFSET                                                               6
#define BRIDGE_AND_VLAN_LKP_CMD_VID_WORD_OFFSET                                                          1
#define BRIDGE_AND_VLAN_LKP_CMD_VID_F_OFFSET_MOD16                                                       0

/* >>>BRIDGE_AND_VLAN_LKP_CMD_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved2 	;
        uint32_t	reserved  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vport     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vid       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved2 	;
        uint32_t	vid       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vport     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BRIDGE_AND_VLAN_LKP_CMD_STRUCT;

#define RDD_BRIDGE_AND_VLAN_LKP_CMD_VPORT_READ_G(r, g, idx)              GROUP_FIELD_MREAD_32((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_CMD_STRUCT) + 4, 12, 6, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_CMD_VPORT_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_CMD_STRUCT) + 4, 12, 6, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_CMD_VPORT_READ(r, p)                     FIELD_MREAD_32((uint8_t *)(p) + 4, 12, 6, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_CMD_VPORT_WRITE(v, p)                    FIELD_MWRITE_32((uint8_t *)(p) + 4, 12, 6, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_CMD_VID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_CMD_STRUCT) + 6, 0, 12, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_CMD_VID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_CMD_STRUCT) + 6, 0, 12, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_CMD_VID_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 12, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_CMD_VID_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 12, (v))
/* <<<BRIDGE_AND_VLAN_LKP_CMD_STRUCT */

/* <<<RDD_BRIDGE_AND_VLAN_LKP_CMD */


/* >>>RDD_BRIDGE_AND_VLAN_LKP_RESULT */
#define BRIDGE_AND_VLAN_LKP_RESULT_AGGREGATION_EN_F_OFFSET                                                  15
#define BRIDGE_AND_VLAN_LKP_RESULT_AGGREGATION_EN_F_WIDTH                                                   1
#define BRIDGE_AND_VLAN_LKP_RESULT_AGGREGATION_EN_OFFSET                                                    2
#define BRIDGE_AND_VLAN_LKP_RESULT_AGGREGATION_EN_WORD_OFFSET                                               0
#define BRIDGE_AND_VLAN_LKP_RESULT_AGGREGATION_EN_F_OFFSET_MOD8                                             7
#define BRIDGE_AND_VLAN_LKP_RESULT_AGGREGATION_EN_F_OFFSET_MOD16                                            15
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_EN_F_OFFSET                                                    14
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_EN_F_WIDTH                                                     1
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_EN_OFFSET                                                      2
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_EN_WORD_OFFSET                                                 0
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_EN_F_OFFSET_MOD8                                               6
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_EN_F_OFFSET_MOD16                                              14
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_EN_F_OFFSET                                                    13
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_EN_F_WIDTH                                                     1
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_EN_OFFSET                                                      2
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_EN_WORD_OFFSET                                                 0
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_EN_F_OFFSET_MOD8                                               5
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_EN_F_OFFSET_MOD16                                              13
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_MISS_ACTION_F_OFFSET                                           10
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_MISS_ACTION_F_WIDTH                                            3
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_MISS_ACTION_OFFSET                                             2
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_MISS_ACTION_WORD_OFFSET                                        0
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_MISS_ACTION_F_OFFSET_MOD8                                      2
#define BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_MISS_ACTION_F_OFFSET_MOD16                                     10
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_MISS_ACTION_F_OFFSET                                           8
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_MISS_ACTION_F_WIDTH                                            2
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_MISS_ACTION_OFFSET                                             2
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_MISS_ACTION_WORD_OFFSET                                        0
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_MISS_ACTION_F_OFFSET_MOD8                                      0
#define BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_MISS_ACTION_F_OFFSET_MOD16                                     8
#define BRIDGE_AND_VLAN_LKP_RESULT_PROTOCOL_FILTERS_DIS_F_OFFSET                                            4
#define BRIDGE_AND_VLAN_LKP_RESULT_PROTOCOL_FILTERS_DIS_F_WIDTH                                             4
#define BRIDGE_AND_VLAN_LKP_RESULT_PROTOCOL_FILTERS_DIS_OFFSET                                              3
#define BRIDGE_AND_VLAN_LKP_RESULT_PROTOCOL_FILTERS_DIS_WORD_OFFSET                                         0
#define BRIDGE_AND_VLAN_LKP_RESULT_PROTOCOL_FILTERS_DIS_F_OFFSET_MOD8                                       4
#define BRIDGE_AND_VLAN_LKP_RESULT_PROTOCOL_FILTERS_DIS_F_OFFSET_MOD16                                      4
#define BRIDGE_AND_VLAN_LKP_RESULT_ANTI_SPOOFING_BYPASS_F_OFFSET                                            3
#define BRIDGE_AND_VLAN_LKP_RESULT_ANTI_SPOOFING_BYPASS_F_WIDTH                                             1
#define BRIDGE_AND_VLAN_LKP_RESULT_ANTI_SPOOFING_BYPASS_OFFSET                                              3
#define BRIDGE_AND_VLAN_LKP_RESULT_ANTI_SPOOFING_BYPASS_WORD_OFFSET                                         0
#define BRIDGE_AND_VLAN_LKP_RESULT_ANTI_SPOOFING_BYPASS_F_OFFSET_MOD8                                       3
#define BRIDGE_AND_VLAN_LKP_RESULT_ANTI_SPOOFING_BYPASS_F_OFFSET_MOD16                                      3
#define BRIDGE_AND_VLAN_LKP_RESULT_PORT_ISOLATION_MAP_F_OFFSET                                              0
#define BRIDGE_AND_VLAN_LKP_RESULT_PORT_ISOLATION_MAP_F_WIDTH                                               32
#define BRIDGE_AND_VLAN_LKP_RESULT_PORT_ISOLATION_MAP_OFFSET                                                4
#define BRIDGE_AND_VLAN_LKP_RESULT_PORT_ISOLATION_MAP_WORD_OFFSET                                           1
#define BRIDGE_AND_VLAN_LKP_RESULT_BRIDGE_ID_F_OFFSET                                                       24
#define BRIDGE_AND_VLAN_LKP_RESULT_BRIDGE_ID_F_WIDTH                                                        8
#define BRIDGE_AND_VLAN_LKP_RESULT_BRIDGE_ID_OFFSET                                                         8
#define BRIDGE_AND_VLAN_LKP_RESULT_BRIDGE_ID_WORD_OFFSET                                                    2
#define BRIDGE_AND_VLAN_LKP_RESULT_BRIDGE_ID_F_OFFSET_MOD16                                                 8
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_VALID_F_OFFSET                                                22
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_VALID_F_WIDTH                                                 1
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_VALID_OFFSET                                                  9
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_VALID_WORD_OFFSET                                             2
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_VALID_F_OFFSET_MOD8                                           6
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_VALID_F_OFFSET_MOD16                                          6
#define BRIDGE_AND_VLAN_LKP_RESULT_INGRESS_FILTER_PROFILE_F_OFFSET                                          16
#define BRIDGE_AND_VLAN_LKP_RESULT_INGRESS_FILTER_PROFILE_F_WIDTH                                           6
#define BRIDGE_AND_VLAN_LKP_RESULT_INGRESS_FILTER_PROFILE_OFFSET                                            9
#define BRIDGE_AND_VLAN_LKP_RESULT_INGRESS_FILTER_PROFILE_WORD_OFFSET                                       2
#define BRIDGE_AND_VLAN_LKP_RESULT_INGRESS_FILTER_PROFILE_F_OFFSET_MOD8                                     0
#define BRIDGE_AND_VLAN_LKP_RESULT_INGRESS_FILTER_PROFILE_F_OFFSET_MOD16                                    0
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_F_OFFSET                                                      8
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_F_WIDTH                                                       8
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_OFFSET                                                        10
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_WORD_OFFSET                                                   2
#define BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_F_OFFSET_MOD16                                                8

/* >>>BRIDGE_AND_VLAN_LKP_RESULT_STRUCT */
typedef union
{
    uint32_t word_32[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	reserved              	;
        uint32_t	aggregation_en        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sa_lookup_en          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	da_lookup_en          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sa_lookup_miss_action 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_action enumeration*/
        uint32_t	da_lookup_miss_action 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_action enumeration*/
        uint32_t	protocol_filters_dis  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	anti_spoofing_bypass  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	port_isolation_map    	;
        uint8_t	bridge_id             	;
        uint32_t	reserved3             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	counter_id_valid      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_filter_profile	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	counter_id            	;
        uint8_t	reserved4             	;
#else
        uint32_t	reserved1             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	anti_spoofing_bypass  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	protocol_filters_dis  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	da_lookup_miss_action 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_action enumeration*/
        uint32_t	sa_lookup_miss_action 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_action enumeration*/
        uint32_t	da_lookup_en          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sa_lookup_en          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	aggregation_en        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved              	;
        uint32_t	port_isolation_map    	;
        uint8_t	reserved4             	;
        uint8_t	counter_id            	;
        uint32_t	ingress_filter_profile	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	counter_id_valid      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	bridge_id             	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) BRIDGE_AND_VLAN_LKP_RESULT_STRUCT;

#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_AGGREGATION_EN_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 2, 7, 1, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_AGGREGATION_EN_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 2, 7, 1, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_AGGREGATION_EN_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 2, 7, 1, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_AGGREGATION_EN_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 2, 7, 1, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_EN_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 2, 6, 1, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_EN_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 2, 6, 1, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_EN_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 2, 6, 1, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_EN_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 2, 6, 1, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_EN_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 2, 5, 1, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_EN_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 2, 5, 1, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_EN_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 2, 5, 1, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_EN_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 2, 5, 1, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_MISS_ACTION_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 2, 2, 3, (r)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_MISS_ACTION_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 2, 2, 3, (v)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_MISS_ACTION_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 2, 2, 3, (r)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_SA_LOOKUP_MISS_ACTION_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 2, 2, 3, (v)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_MISS_ACTION_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 2, 0, 2, (r)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_MISS_ACTION_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 2, 0, 2, (v)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_MISS_ACTION_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 2, (r)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_DA_LOOKUP_MISS_ACTION_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 2, (v)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_PROTOCOL_FILTERS_DIS_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 3, 4, 4, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_PROTOCOL_FILTERS_DIS_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 3, 4, 4, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_PROTOCOL_FILTERS_DIS_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 3, 4, 4, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_PROTOCOL_FILTERS_DIS_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 3, 4, 4, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_ANTI_SPOOFING_BYPASS_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 3, 3, 1, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_ANTI_SPOOFING_BYPASS_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 3, 3, 1, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_ANTI_SPOOFING_BYPASS_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 3, 3, 1, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_ANTI_SPOOFING_BYPASS_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 3, 3, 1, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_PORT_ISOLATION_MAP_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 4, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_PORT_ISOLATION_MAP_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 4, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_PORT_ISOLATION_MAP_READ(r, p)                     MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_PORT_ISOLATION_MAP_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_BRIDGE_ID_READ_G(r, g, idx)                       GROUP_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 8, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_BRIDGE_ID_WRITE_G(v, g, idx)                      GROUP_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 8, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_BRIDGE_ID_READ(r, p)                              MREAD_8((uint8_t *)(p) + 8, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_BRIDGE_ID_WRITE(v, p)                             MWRITE_8((uint8_t *)(p) + 8, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_VALID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 9, 6, 1, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_VALID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 9, 6, 1, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_VALID_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 9, 6, 1, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_VALID_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 9, 6, 1, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_INGRESS_FILTER_PROFILE_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 9, 0, 6, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_INGRESS_FILTER_PROFILE_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 9, 0, 6, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_INGRESS_FILTER_PROFILE_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 6, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_INGRESS_FILTER_PROFILE_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 6, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 10, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(BRIDGE_AND_VLAN_LKP_RESULT_STRUCT) + 10, (v))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_READ(r, p)                             MREAD_8((uint8_t *)(p) + 10, (r))
#define RDD_BRIDGE_AND_VLAN_LKP_RESULT_COUNTER_ID_WRITE(v, p)                            MWRITE_8((uint8_t *)(p) + 10, (v))
/* <<<BRIDGE_AND_VLAN_LKP_RESULT_STRUCT */

/* <<<RDD_BRIDGE_AND_VLAN_LKP_RESULT */


/* >>>RDD_BRIDGE_ARL_LKP_CMD */
#define BRIDGE_ARL_LKP_CMD_BRIDGE_ID_F_OFFSET                                                       16
#define BRIDGE_ARL_LKP_CMD_BRIDGE_ID_F_WIDTH                                                        8
#define BRIDGE_ARL_LKP_CMD_BRIDGE_ID_OFFSET                                                         1
#define BRIDGE_ARL_LKP_CMD_BRIDGE_ID_WORD_OFFSET                                                    0
#define BRIDGE_ARL_LKP_CMD_BRIDGE_ID_F_OFFSET_MOD16                                                 0
#define BRIDGE_ARL_LKP_CMD_MAC_1_2_F_OFFSET                                                         0
#define BRIDGE_ARL_LKP_CMD_MAC_1_2_F_WIDTH                                                          16
#define BRIDGE_ARL_LKP_CMD_MAC_1_2_OFFSET                                                           2
#define BRIDGE_ARL_LKP_CMD_MAC_1_2_WORD_OFFSET                                                      0
#define BRIDGE_ARL_LKP_CMD_MAC_3_6_F_OFFSET                                                         0
#define BRIDGE_ARL_LKP_CMD_MAC_3_6_F_WIDTH                                                          32
#define BRIDGE_ARL_LKP_CMD_MAC_3_6_OFFSET                                                           4
#define BRIDGE_ARL_LKP_CMD_MAC_3_6_WORD_OFFSET                                                      1

/* >>>BRIDGE_ARL_LKP_CMD_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	reserved  	;
        uint8_t	bridge_id 	;
        uint16_t	mac_1_2   	;
        uint32_t	mac_3_6   	;
#else
        uint16_t	mac_1_2   	;
        uint8_t	bridge_id 	;
        uint8_t	reserved  	;
        uint32_t	mac_3_6   	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BRIDGE_ARL_LKP_CMD_STRUCT;

#define RDD_BRIDGE_ARL_LKP_CMD_BRIDGE_ID_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(BRIDGE_ARL_LKP_CMD_STRUCT) + 1, (r))
#define RDD_BRIDGE_ARL_LKP_CMD_BRIDGE_ID_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(BRIDGE_ARL_LKP_CMD_STRUCT) + 1, (v))
#define RDD_BRIDGE_ARL_LKP_CMD_BRIDGE_ID_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_BRIDGE_ARL_LKP_CMD_BRIDGE_ID_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_BRIDGE_ARL_LKP_CMD_MAC_1_2_READ_G(r, g, idx)            GROUP_MREAD_16((g), (idx)*sizeof(BRIDGE_ARL_LKP_CMD_STRUCT) + 2, (r))
#define RDD_BRIDGE_ARL_LKP_CMD_MAC_1_2_WRITE_G(v, g, idx)           GROUP_MWRITE_16((g), (idx)*sizeof(BRIDGE_ARL_LKP_CMD_STRUCT) + 2, (v))
#define RDD_BRIDGE_ARL_LKP_CMD_MAC_1_2_READ(r, p)                   MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_BRIDGE_ARL_LKP_CMD_MAC_1_2_WRITE(v, p)                  MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_BRIDGE_ARL_LKP_CMD_MAC_3_6_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(BRIDGE_ARL_LKP_CMD_STRUCT) + 4, (r))
#define RDD_BRIDGE_ARL_LKP_CMD_MAC_3_6_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(BRIDGE_ARL_LKP_CMD_STRUCT) + 4, (v))
#define RDD_BRIDGE_ARL_LKP_CMD_MAC_3_6_READ(r, p)                   MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_BRIDGE_ARL_LKP_CMD_MAC_3_6_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<BRIDGE_ARL_LKP_CMD_STRUCT */

/* <<<RDD_BRIDGE_ARL_LKP_CMD */


/* >>>RDD_BRIDGE_ARL_LKP_RESULT */
#define BRIDGE_ARL_LKP_RESULT_SA_MATCH_ACTION_F_OFFSET                                                 14
#define BRIDGE_ARL_LKP_RESULT_SA_MATCH_ACTION_F_WIDTH                                                  2
#define BRIDGE_ARL_LKP_RESULT_SA_MATCH_ACTION_OFFSET                                                   2
#define BRIDGE_ARL_LKP_RESULT_SA_MATCH_ACTION_WORD_OFFSET                                              0
#define BRIDGE_ARL_LKP_RESULT_SA_MATCH_ACTION_F_OFFSET_MOD8                                            6
#define BRIDGE_ARL_LKP_RESULT_SA_MATCH_ACTION_F_OFFSET_MOD16                                           14
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_FWD_F_OFFSET                                             13
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_FWD_F_WIDTH                                              1
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_FWD_OFFSET                                               2
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_FWD_WORD_OFFSET                                          0
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_FWD_F_OFFSET_MOD8                                        5
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_FWD_F_OFFSET_MOD16                                       13
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_TRAP_DROP_F_OFFSET                                       12
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_TRAP_DROP_F_WIDTH                                        1
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_TRAP_DROP_OFFSET                                         2
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_TRAP_DROP_WORD_OFFSET                                    0
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_TRAP_DROP_F_OFFSET_MOD8                                  4
#define BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_TRAP_DROP_F_OFFSET_MOD16                                 12
#define BRIDGE_ARL_LKP_RESULT_LAN_VID_F_OFFSET                                                         0
#define BRIDGE_ARL_LKP_RESULT_LAN_VID_F_WIDTH                                                          12
#define BRIDGE_ARL_LKP_RESULT_LAN_VID_OFFSET                                                           2
#define BRIDGE_ARL_LKP_RESULT_LAN_VID_WORD_OFFSET                                                      0
#define BRIDGE_ARL_LKP_RESULT_LAN_VID_F_OFFSET_MOD16                                                   0
#define BRIDGE_ARL_LKP_RESULT_VPORT_F_OFFSET                                                           24
#define BRIDGE_ARL_LKP_RESULT_VPORT_F_WIDTH                                                            6
#define BRIDGE_ARL_LKP_RESULT_VPORT_OFFSET                                                             4
#define BRIDGE_ARL_LKP_RESULT_VPORT_WORD_OFFSET                                                        1
#define BRIDGE_ARL_LKP_RESULT_VPORT_F_OFFSET_MOD8                                                      0
#define BRIDGE_ARL_LKP_RESULT_VPORT_F_OFFSET_MOD16                                                     8

/* >>>BRIDGE_ARL_LKP_RESULT_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	reserved                 	;
        uint32_t	sa_match_action          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_action enumeration*/
        uint32_t	da_match_action_fwd      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	da_match_action_trap_drop	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lan_vid                  	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vport                    	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3                	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	lan_vid                  	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	da_match_action_trap_drop	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	da_match_action_fwd      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sa_match_action          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_action enumeration*/
        uint16_t	reserved                 	;
        uint32_t	reserved3                	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vport                    	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BRIDGE_ARL_LKP_RESULT_STRUCT;

#define RDD_BRIDGE_ARL_LKP_RESULT_SA_MATCH_ACTION_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_ARL_LKP_RESULT_STRUCT) + 2, 6, 2, (r)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_ARL_LKP_RESULT_SA_MATCH_ACTION_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_ARL_LKP_RESULT_STRUCT) + 2, 6, 2, (v)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_ARL_LKP_RESULT_SA_MATCH_ACTION_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 2, 6, 2, (r)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_ARL_LKP_RESULT_SA_MATCH_ACTION_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 2, 6, 2, (v)) /*defined by rdd_action enumeration*/
#define RDD_BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_FWD_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_ARL_LKP_RESULT_STRUCT) + 2, 5, 1, (r))
#define RDD_BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_FWD_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_ARL_LKP_RESULT_STRUCT) + 2, 5, 1, (v))
#define RDD_BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_FWD_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 2, 5, 1, (r))
#define RDD_BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_FWD_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 2, 5, 1, (v))
#define RDD_BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_TRAP_DROP_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_ARL_LKP_RESULT_STRUCT) + 2, 4, 1, (r))
#define RDD_BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_TRAP_DROP_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_ARL_LKP_RESULT_STRUCT) + 2, 4, 1, (v))
#define RDD_BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_TRAP_DROP_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 2, 4, 1, (r))
#define RDD_BRIDGE_ARL_LKP_RESULT_DA_MATCH_ACTION_TRAP_DROP_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 2, 4, 1, (v))
#define RDD_BRIDGE_ARL_LKP_RESULT_LAN_VID_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BRIDGE_ARL_LKP_RESULT_STRUCT) + 2, 0, 12, (r))
#define RDD_BRIDGE_ARL_LKP_RESULT_LAN_VID_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BRIDGE_ARL_LKP_RESULT_STRUCT) + 2, 0, 12, (v))
#define RDD_BRIDGE_ARL_LKP_RESULT_LAN_VID_READ(r, p)                                   FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 12, (r))
#define RDD_BRIDGE_ARL_LKP_RESULT_LAN_VID_WRITE(v, p)                                  FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 12, (v))
#define RDD_BRIDGE_ARL_LKP_RESULT_VPORT_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_ARL_LKP_RESULT_STRUCT) + 4, 0, 6, (r))
#define RDD_BRIDGE_ARL_LKP_RESULT_VPORT_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_ARL_LKP_RESULT_STRUCT) + 4, 0, 6, (v))
#define RDD_BRIDGE_ARL_LKP_RESULT_VPORT_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p) + 4, 0, 6, (r))
#define RDD_BRIDGE_ARL_LKP_RESULT_VPORT_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p) + 4, 0, 6, (v))
/* <<<BRIDGE_ARL_LKP_RESULT_STRUCT */

/* <<<RDD_BRIDGE_ARL_LKP_RESULT */


/* >>>RDD_BRIDGE_CLASSIFICATION_RESULT */
#define BRIDGE_CLASSIFICATION_RESULT_HIT_F_OFFSET                                                             31
#define BRIDGE_CLASSIFICATION_RESULT_HIT_F_WIDTH                                                              1
#define BRIDGE_CLASSIFICATION_RESULT_BRIDGE_CLASSIFICATION_RESULT_OFFSET                                      0
#define BRIDGE_CLASSIFICATION_RESULT_HIT_OFFSET                                                               0
#define BRIDGE_CLASSIFICATION_RESULT_HIT_WORD_OFFSET                                                          0
#define BRIDGE_CLASSIFICATION_RESULT_HIT_F_OFFSET_MOD8                                                        7
#define BRIDGE_CLASSIFICATION_RESULT_HIT_F_OFFSET_MOD16                                                       15
#define BRIDGE_CLASSIFICATION_RESULT_BRIDGE_FW_FAILED_F_OFFSET                                                30
#define BRIDGE_CLASSIFICATION_RESULT_BRIDGE_FW_FAILED_F_WIDTH                                                 1
#define BRIDGE_CLASSIFICATION_RESULT_BRIDGE_FW_FAILED_OFFSET                                                  0
#define BRIDGE_CLASSIFICATION_RESULT_BRIDGE_FW_FAILED_WORD_OFFSET                                             0
#define BRIDGE_CLASSIFICATION_RESULT_BRIDGE_FW_FAILED_F_OFFSET_MOD8                                           6
#define BRIDGE_CLASSIFICATION_RESULT_BRIDGE_FW_FAILED_F_OFFSET_MOD16                                          14
#define BRIDGE_CLASSIFICATION_RESULT_VLAN_AGGREGATION_F_OFFSET                                                29
#define BRIDGE_CLASSIFICATION_RESULT_VLAN_AGGREGATION_F_WIDTH                                                 1
#define BRIDGE_CLASSIFICATION_RESULT_VLAN_AGGREGATION_OFFSET                                                  0
#define BRIDGE_CLASSIFICATION_RESULT_VLAN_AGGREGATION_WORD_OFFSET                                             0
#define BRIDGE_CLASSIFICATION_RESULT_VLAN_AGGREGATION_F_OFFSET_MOD8                                           5
#define BRIDGE_CLASSIFICATION_RESULT_VLAN_AGGREGATION_F_OFFSET_MOD16                                          13
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VID_F_OFFSET                                                      16
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VID_F_WIDTH                                                       12
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VID_OFFSET                                                        0
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VID_WORD_OFFSET                                                   0
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VID_F_OFFSET_MOD16                                                0
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VPORT_F_OFFSET                                                    0
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VPORT_F_WIDTH                                                     6
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VPORT_OFFSET                                                      3
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VPORT_WORD_OFFSET                                                 0
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VPORT_F_OFFSET_MOD8                                               0
#define BRIDGE_CLASSIFICATION_RESULT_EGRESS_VPORT_F_OFFSET_MOD16                                              0

/* >>>BRIDGE_CLASSIFICATION_RESULT_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	hit             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bridge_fw_failed	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vlan_aggregation	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_vid      	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2       	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_vport    	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	egress_vport    	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2       	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_vid      	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vlan_aggregation	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bridge_fw_failed	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hit             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) BRIDGE_CLASSIFICATION_RESULT_STRUCT;

#define RDD_BRIDGE_CLASSIFICATION_RESULT_HIT_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_CLASSIFICATION_RESULT_STRUCT), 7, 1, (r))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_HIT_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_CLASSIFICATION_RESULT_STRUCT), 7, 1, (v))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_HIT_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_HIT_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_BRIDGE_FW_FAILED_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_CLASSIFICATION_RESULT_STRUCT), 6, 1, (r))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_BRIDGE_FW_FAILED_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_CLASSIFICATION_RESULT_STRUCT), 6, 1, (v))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_BRIDGE_FW_FAILED_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_BRIDGE_FW_FAILED_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_VLAN_AGGREGATION_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_CLASSIFICATION_RESULT_STRUCT), 5, 1, (r))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_VLAN_AGGREGATION_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_CLASSIFICATION_RESULT_STRUCT), 5, 1, (v))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_VLAN_AGGREGATION_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_VLAN_AGGREGATION_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_EGRESS_VID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BRIDGE_CLASSIFICATION_RESULT_STRUCT), 0, 12, (r))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_EGRESS_VID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BRIDGE_CLASSIFICATION_RESULT_STRUCT), 0, 12, (v))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_EGRESS_VID_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p), 0, 12, (r))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_EGRESS_VID_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p), 0, 12, (v))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_EGRESS_VPORT_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BRIDGE_CLASSIFICATION_RESULT_STRUCT) + 3, 0, 6, (r))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_EGRESS_VPORT_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BRIDGE_CLASSIFICATION_RESULT_STRUCT) + 3, 0, 6, (v))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_EGRESS_VPORT_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 6, (r))
#define RDD_BRIDGE_CLASSIFICATION_RESULT_EGRESS_VPORT_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 6, (v))
/* <<<BRIDGE_CLASSIFICATION_RESULT_STRUCT */

/* <<<RDD_BRIDGE_CLASSIFICATION_RESULT */


/* >>>RDD_MULTICAST_WHITELIST_LKP_ENTRY */
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_F_OFFSET                                                           31
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_F_WIDTH                                                            1
#define MULTICAST_WHITELIST_LKP_ENTRY_MULTICAST_WHITELIST_LKP_ENTRY_OFFSET                                     0
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_OFFSET                                                             0
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_WORD_OFFSET                                                        0
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define MULTICAST_WHITELIST_LKP_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_F_OFFSET                                                    1
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_F_WIDTH                                                     2
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_OFFSET                                                      3
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_WORD_OFFSET                                                 0
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_F_OFFSET_MOD8                                               1
#define MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_F_OFFSET_MOD16                                              1
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_F_OFFSET                                                         0
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_F_WIDTH                                                          1
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_OFFSET                                                           3
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_WORD_OFFSET                                                      0
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_F_OFFSET_MOD8                                                    0
#define MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_F_OFFSET_MOD16                                                   0
#define MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_F_OFFSET                                                          0
#define MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_F_WIDTH                                                           32
#define MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_OFFSET                                                            4
#define MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_WORD_OFFSET                                                       1
#define MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_F_OFFSET                                                          0
#define MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_F_WIDTH                                                           32
#define MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_OFFSET                                                            8
#define MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_WORD_OFFSET                                                       2
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_F_OFFSET                                                    16
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_F_WIDTH                                                     16
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_OFFSET                                                      12
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_WORD_OFFSET                                                 3
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_F_OFFSET                                                    0
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_F_WIDTH                                                     16
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_OFFSET                                                      14
#define MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_WORD_OFFSET                                                 3

/* >>>MULTICAST_WHITELIST_LKP_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_of_vlans	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_ipv6     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dst_ip      	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	src_ip      	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	vlan_0_union	; /* This is a field union */
        uint16_t	vlan_1_union	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint16_t	vlan0                 	; /* Member of vlan_0_union union */
        uint16_t	vlan1                 	; /* Member of vlan_1_union union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	vid0                  	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
        uint32_t	dei0                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
        uint32_t	pbit0                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
        uint32_t	vid1                  	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
        uint32_t	dei1                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
        uint32_t	pbit1                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	is_ipv6     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_of_vlans	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	dst_ip      	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	src_ip      	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	vlan_1_union	; /* This is a field union */
        uint16_t	vlan_0_union	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint16_t	vlan1                 	; /* Member of vlan_1_union union */
        uint16_t	vlan0                 	; /* Member of vlan_0_union union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	pbit1                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
        uint32_t	dei1                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
        uint32_t	vid1                  	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
        uint32_t	pbit0                 	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
        uint32_t	dei0                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
        uint32_t	vid0                  	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) MULTICAST_WHITELIST_LKP_ENTRY_STRUCT;

#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VALID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT), 7, 1, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT), 7, 1, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VALID_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VALID_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 3, 1, 2, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 3, 1, 2, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 3, 1, 2, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_NUM_OF_VLANS_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 3, 1, 2, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 3, 0, 1, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 3, 0, 1, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 1, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_IS_IPV6_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 1, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 4, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 4, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_READ(r, p)                       MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DST_IP_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 8, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 8, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_READ(r, p)                       MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_SRC_IP_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_READ(r, p)                 MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_0_UNION_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN0_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 12, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN0_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 12, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN0_READ(r, p)                        MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN0_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID0_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 12, 4, 12, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID0_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 12, 4, 12, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID0_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 12, 4, 12, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID0_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 12, 4, 12, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI0_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 13, 3, 1, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI0_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 13, 3, 1, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI0_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 13, 3, 1, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI0_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 13, 3, 1, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT0_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 13, 0, 3, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT0_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 13, 0, 3, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT0_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 3, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT0_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 3, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 14, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 14, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_READ(r, p)                 MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN_1_UNION_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN1_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 14, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN1_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 14, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN1_READ(r, p)                        MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VLAN1_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID1_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 14, 4, 12, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID1_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 14, 4, 12, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID1_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 14, 4, 12, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_VID1_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 14, 4, 12, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI1_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 15, 3, 1, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI1_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 15, 3, 1, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI1_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 15, 3, 1, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_DEI1_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 15, 3, 1, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT1_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 15, 0, 3, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT1_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_LKP_ENTRY_STRUCT) + 15, 0, 3, (v))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT1_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 15, 0, 3, (r))
#define RDD_MULTICAST_WHITELIST_LKP_ENTRY_PBIT1_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 15, 0, 3, (v))
/* <<<MULTICAST_WHITELIST_LKP_ENTRY_STRUCT */

/* <<<RDD_MULTICAST_WHITELIST_LKP_ENTRY */


/* >>>RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY */
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_F_OFFSET                                                    0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_F_WIDTH                                                     32
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_MULTICAST_WHITELIST_CONTEXT_ENTRY_OFFSET                                 0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_OFFSET                                                      0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_WORD_OFFSET                                                 0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_F_OFFSET                                                           31
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_F_WIDTH                                                            1
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_OFFSET                                                             4
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_WORD_OFFSET                                                        1
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_F_OFFSET                                                    30
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_F_WIDTH                                                     1
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_OFFSET                                                      4
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_WORD_OFFSET                                                 1
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_F_OFFSET_MOD8                                               6
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_F_OFFSET_MOD16                                              14
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_F_OFFSET                                                    28
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_F_WIDTH                                                     2
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_OFFSET                                                      4
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_WORD_OFFSET                                                 1
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_F_OFFSET_MOD8                                               4
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_F_OFFSET_MOD16                                              12
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_F_OFFSET                                                    16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_F_WIDTH                                                     16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_OFFSET                                                      8
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_WORD_OFFSET                                                 2
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_F_OFFSET                                                    0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_F_WIDTH                                                     16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_OFFSET                                                      10
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_WORD_OFFSET                                                 2
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_F_OFFSET                                                  16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_F_WIDTH                                                   16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_OFFSET                                                    12
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WORD_OFFSET                                               3
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_F_OFFSET                                                  0
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_F_WIDTH                                                   16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_OFFSET                                                    14
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_WORD_OFFSET                                               3
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_OFFSET                                                            16
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_WORD_OFFSET                                                       4
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_F_OFFSET_MOD16                                                    8
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_OFFSET                                                            32
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_WORD_OFFSET                                                       8
#define MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_F_OFFSET_MOD16                                                    8

/* >>>MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT */
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_NUMBER	16
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_NUMBER	16
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_RESERVED_LIST_NUMBER	12
typedef union
{
    uint32_t word_32[15];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	natc_control                                                                 	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	check_src_ip                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_of_vlans                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                                                                    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	vlan_0_union                                                                 	; /* This is a field union */
        uint16_t	vlan_1_union                                                                 	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint16_t	vlan0                                                                                  	; /* Member of vlan_0_union union */
        uint16_t	vlan1                                                                                  	; /* Member of vlan_1_union union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	vid0                                                                                   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
        uint32_t	dei0                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
        uint32_t	pbit0                                                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
        uint32_t	vid1                                                                                   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
        uint32_t	dei1                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
        uint32_t	pbit1                                                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	next_entry_idx                                                               	;
        uint16_t	prev_entry_idx                                                               	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	src_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_NUMBER];
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	dst_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_NUMBER];
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	reserved_list[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_RESERVED_LIST_NUMBER];
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	natc_control                                                                 	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved0                                                                    	:28	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_of_vlans                                                                 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	check_src_ip                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	vlan_1_union                                                                 	; /* This is a field union */
        uint16_t	vlan_0_union                                                                 	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint16_t	vlan1                                                                                  	; /* Member of vlan_1_union union */
        uint16_t	vlan0                                                                                  	; /* Member of vlan_0_union union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	pbit1                                                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
        uint32_t	dei1                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
        uint32_t	vid1                                                                                   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_1_union union */
        uint32_t	pbit0                                                                                  	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
        uint32_t	dei0                                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
        uint32_t	vid0                                                                                   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of vlan_0_union union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	prev_entry_idx                                                               	;
        uint16_t	next_entry_idx                                                               	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	src_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_NUMBER];
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	dst_ip[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_NUMBER];
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	reserved_list[RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_RESERVED_LIST_NUMBER];
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT;

#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT), (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT), (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_READ(r, p)                   MREAD_32((uint8_t *)(p), (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NATC_CONTROL_WRITE(v, p)                  MWRITE_32((uint8_t *)(p), (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 4, 7, 1, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 4, 7, 1, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 4, 7, 1, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VALID_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 4, 7, 1, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 4, 6, 1, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 4, 6, 1, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 4, 6, 1, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_CHECK_SRC_IP_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 4, 6, 1, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 4, 4, 2, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 4, 4, 2, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 4, 4, 2, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NUM_OF_VLANS_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 4, 4, 2, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_READ_G(r, g, idx)            GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 8, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_WRITE_G(v, g, idx)           GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 8, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_READ(r, p)                   MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_0_UNION_WRITE(v, p)                  MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN0_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 8, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN0_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 8, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN0_READ(r, p)                          MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN0_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID0_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 8, 4, 12, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID0_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 8, 4, 12, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID0_READ(r, p)                           FIELD_MREAD_16((uint8_t *)(p) + 8, 4, 12, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID0_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)(p) + 8, 4, 12, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI0_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 9, 3, 1, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI0_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 9, 3, 1, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI0_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 9, 3, 1, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI0_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 9, 3, 1, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT0_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 9, 0, 3, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT0_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 9, 0, 3, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT0_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 3, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT0_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 3, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_READ_G(r, g, idx)            GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 10, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_WRITE_G(v, g, idx)           GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 10, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_READ(r, p)                   MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN_1_UNION_WRITE(v, p)                  MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN1_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 10, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN1_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 10, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN1_READ(r, p)                          MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VLAN1_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID1_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 10, 4, 12, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID1_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 10, 4, 12, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID1_READ(r, p)                           FIELD_MREAD_16((uint8_t *)(p) + 10, 4, 12, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_VID1_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)(p) + 10, 4, 12, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI1_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 11, 3, 1, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI1_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 11, 3, 1, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI1_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 11, 3, 1, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DEI1_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 11, 3, 1, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT1_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 11, 0, 3, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT1_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 11, 0, 3, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT1_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 11, 0, 3, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PBIT1_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 11, 0, 3, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 12, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 12, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_READ(r, p)                 MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_NEXT_ENTRY_IDX_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 14, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 14, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_READ(r, p)                 MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_PREV_ENTRY_IDX_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_READ_G(r, g, idx, i)               GROUP_MREAD_I_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 16, i, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_WRITE_G(v, g, idx, i)              GROUP_MWRITE_I_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 16, i, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_READ(r, p, i)                      MREAD_I_8((uint8_t *)(p) + 16, i, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_SRC_IP_WRITE(v, p, i)                     MWRITE_I_8((uint8_t *)(p) + 16, i, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_READ_G(r, g, idx, i)               GROUP_MREAD_I_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 32, i, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_WRITE_G(v, g, idx, i)              GROUP_MWRITE_I_8((g), (idx)*sizeof(MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT) + 32, i, (v))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_READ(r, p, i)                      MREAD_I_8((uint8_t *)(p) + 32, i, (r))
#define RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY_DST_IP_WRITE(v, p, i)                     MWRITE_I_8((uint8_t *)(p) + 32, i, (v))
/* <<<MULTICAST_WHITELIST_CONTEXT_ENTRY_STRUCT */

/* <<<RDD_MULTICAST_WHITELIST_CONTEXT_ENTRY */


/* >>>RDD_MIRRORING_DESCRIPTOR */
#define MIRRORING_DESCRIPTOR_MIRROR_EN_F_OFFSET                                                       15
#define MIRRORING_DESCRIPTOR_MIRROR_EN_F_WIDTH                                                        1
#define MIRRORING_DESCRIPTOR_MIRRORING_DESCRIPTOR_OFFSET                                              0
#define MIRRORING_DESCRIPTOR_MIRROR_EN_OFFSET                                                         0
#define MIRRORING_DESCRIPTOR_MIRROR_EN_WORD_OFFSET                                                    0
#define MIRRORING_DESCRIPTOR_MIRROR_EN_F_OFFSET_MOD8                                                  7
#define MIRRORING_DESCRIPTOR_MIRROR_EN_F_OFFSET_MOD16                                                 15
#define MIRRORING_DESCRIPTOR_DST_VPORT_F_OFFSET                                                       9
#define MIRRORING_DESCRIPTOR_DST_VPORT_F_WIDTH                                                        6
#define MIRRORING_DESCRIPTOR_DST_VPORT_OFFSET                                                         0
#define MIRRORING_DESCRIPTOR_DST_VPORT_WORD_OFFSET                                                    0
#define MIRRORING_DESCRIPTOR_DST_VPORT_F_OFFSET_MOD8                                                  1
#define MIRRORING_DESCRIPTOR_DST_VPORT_F_OFFSET_MOD16                                                 9
#define MIRRORING_DESCRIPTOR_DST_QUEUE_F_OFFSET                                                       0
#define MIRRORING_DESCRIPTOR_DST_QUEUE_F_WIDTH                                                        9
#define MIRRORING_DESCRIPTOR_DST_QUEUE_OFFSET                                                         0
#define MIRRORING_DESCRIPTOR_DST_QUEUE_WORD_OFFSET                                                    0
#define MIRRORING_DESCRIPTOR_DST_QUEUE_F_OFFSET_MOD16                                                 0
/* <<<RDD_MIRRORING_DESCRIPTOR */


/* >>>RDD_REPORTING_QUEUE_DESCRIPTOR */
#define REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_F_OFFSET                                                  0
#define REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_F_WIDTH                                                   32
#define REPORTING_QUEUE_DESCRIPTOR_REPORTING_QUEUE_DESCRIPTOR_OFFSET                                        0
#define REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_OFFSET                                                    0
#define REPORTING_QUEUE_DESCRIPTOR_REPORTED_BYTES_WORD_OFFSET                                               0
#define REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_F_OFFSET                                               0
#define REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_F_WIDTH                                                32
#define REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_OFFSET                                                 4
#define REPORTING_QUEUE_DESCRIPTOR_REPORTED_OVERHEAD_WORD_OFFSET                                            1
/* <<<RDD_REPORTING_QUEUE_DESCRIPTOR */


/* >>>RDD_REPORTING_QUEUE_COUNTER */
#define REPORTING_QUEUE_COUNTER_COUNTER_PTR_F_OFFSET                                                     0
#define REPORTING_QUEUE_COUNTER_COUNTER_PTR_F_WIDTH                                                      16
#define REPORTING_QUEUE_COUNTER_REPORTING_QUEUE_COUNTER_OFFSET                                           0
#define REPORTING_QUEUE_COUNTER_COUNTER_PTR_OFFSET                                                       0
#define REPORTING_QUEUE_COUNTER_COUNTER_PTR_WORD_OFFSET                                                  0
/* <<<RDD_REPORTING_QUEUE_COUNTER */


/* >>>RDD_REPORTING_ACCUMULATED_DATA */
#define REPORTING_ACCUMULATED_DATA_ACCUMULATED_BYTES_F_OFFSET                                               0
#define REPORTING_ACCUMULATED_DATA_ACCUMULATED_BYTES_F_WIDTH                                                32
#define REPORTING_ACCUMULATED_DATA_REPORTING_ACCUMULATED_DATA_OFFSET                                        0
#define REPORTING_ACCUMULATED_DATA_ACCUMULATED_BYTES_OFFSET                                                 0
#define REPORTING_ACCUMULATED_DATA_ACCUMULATED_BYTES_WORD_OFFSET                                            0
#define REPORTING_ACCUMULATED_DATA_ACCUMULATED_OVERHEAD_F_OFFSET                                            0
#define REPORTING_ACCUMULATED_DATA_ACCUMULATED_OVERHEAD_F_WIDTH                                             32
#define REPORTING_ACCUMULATED_DATA_ACCUMULATED_OVERHEAD_OFFSET                                              4
#define REPORTING_ACCUMULATED_DATA_ACCUMULATED_OVERHEAD_WORD_OFFSET                                         1

/* >>>REPORTING_ACCUMULATED_DATA_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	accumulated_bytes   	;
        uint32_t	accumulated_overhead	;
#else
        uint32_t	accumulated_bytes   	;
        uint32_t	accumulated_overhead	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) REPORTING_ACCUMULATED_DATA_STRUCT;

#define RDD_REPORTING_ACCUMULATED_DATA_ACCUMULATED_BYTES_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(REPORTING_ACCUMULATED_DATA_STRUCT), (r))
#define RDD_REPORTING_ACCUMULATED_DATA_ACCUMULATED_BYTES_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(REPORTING_ACCUMULATED_DATA_STRUCT), (v))
#define RDD_REPORTING_ACCUMULATED_DATA_ACCUMULATED_BYTES_READ(r, p)                    MREAD_32((uint8_t *)(p), (r))
#define RDD_REPORTING_ACCUMULATED_DATA_ACCUMULATED_BYTES_WRITE(v, p)                   MWRITE_32((uint8_t *)(p), (v))
#define RDD_REPORTING_ACCUMULATED_DATA_ACCUMULATED_OVERHEAD_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(REPORTING_ACCUMULATED_DATA_STRUCT) + 4, (r))
#define RDD_REPORTING_ACCUMULATED_DATA_ACCUMULATED_OVERHEAD_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(REPORTING_ACCUMULATED_DATA_STRUCT) + 4, (v))
#define RDD_REPORTING_ACCUMULATED_DATA_ACCUMULATED_OVERHEAD_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_REPORTING_ACCUMULATED_DATA_ACCUMULATED_OVERHEAD_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<REPORTING_ACCUMULATED_DATA_STRUCT */

/* <<<RDD_REPORTING_ACCUMULATED_DATA */


/* >>>RDD_PARSER_PARAM */
#define PARSER_PARAM_PROFILE_F_OFFSET                                                         14
#define PARSER_PARAM_PROFILE_F_WIDTH                                                          2
#define PARSER_PARAM_PROFILE_OFFSET                                                           2
#define PARSER_PARAM_PROFILE_WORD_OFFSET                                                      0
#define PARSER_PARAM_PROFILE_F_OFFSET_MOD8                                                    6
#define PARSER_PARAM_PROFILE_F_OFFSET_MOD16                                                   14
#define PARSER_PARAM_PLEN_F_OFFSET                                                            0
#define PARSER_PARAM_PLEN_F_WIDTH                                                             14
#define PARSER_PARAM_PLEN_OFFSET                                                              2
#define PARSER_PARAM_PLEN_WORD_OFFSET                                                         0
#define PARSER_PARAM_PLEN_F_OFFSET_MOD16                                                      0

/* >>>PARSER_PARAM_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	reserved  	;
        uint32_t	profile   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	plen      	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	plen      	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	profile   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved  	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) PARSER_PARAM_STRUCT;

#define RDD_PARSER_PARAM_PROFILE_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_PARAM_STRUCT) + 2, 6, 2, (r))
#define RDD_PARSER_PARAM_PROFILE_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_PARAM_STRUCT) + 2, 6, 2, (v))
#define RDD_PARSER_PARAM_PROFILE_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 2, 6, 2, (r))
#define RDD_PARSER_PARAM_PROFILE_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 2, 6, 2, (v))
#define RDD_PARSER_PARAM_PLEN_READ_G(r, g, idx)              GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PARSER_PARAM_STRUCT) + 2, 0, 14, (r))
#define RDD_PARSER_PARAM_PLEN_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PARSER_PARAM_STRUCT) + 2, 0, 14, (v))
#define RDD_PARSER_PARAM_PLEN_READ(r, p)                     FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 14, (r))
#define RDD_PARSER_PARAM_PLEN_WRITE(v, p)                    FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 14, (v))
/* <<<PARSER_PARAM_STRUCT */

/* <<<RDD_PARSER_PARAM */


/* >>>RDD_PARSER_HLEN */
#define PARSER_HLEN_PARSER_HLEN_F_OFFSET                                                     0
#define PARSER_HLEN_PARSER_HLEN_F_WIDTH                                                      32
#define PARSER_HLEN_PARSER_HLEN_OFFSET                                                       0
#define PARSER_HLEN_PARSER_HLEN_WORD_OFFSET                                                  0

/* >>>PARSER_HLEN_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_hlen     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint16_t	reserved                  	; /* Member of parser_hlen union */
        uint32_t	layer_indication          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parser_hlen union */
        uint32_t	len                       	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parser_hlen union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	word                      	; /* Member of parser_hlen union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_hlen     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	len                       	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parser_hlen union */
        uint32_t	layer_indication          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of parser_hlen union */
        uint16_t	reserved                  	; /* Member of parser_hlen union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	word                      	; /* Member of parser_hlen union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) PARSER_HLEN_STRUCT;

#define RDD_PARSER_HLEN_PARSER_HLEN_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(PARSER_HLEN_STRUCT), (r))
#define RDD_PARSER_HLEN_PARSER_HLEN_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_HLEN_STRUCT), (v))
#define RDD_PARSER_HLEN_PARSER_HLEN_READ(r, p)                      MREAD_32((uint8_t *)(p), (r))
#define RDD_PARSER_HLEN_PARSER_HLEN_WRITE(v, p)                     MWRITE_32((uint8_t *)(p), (v))
#define RDD_PARSER_HLEN_LAYER_INDICATION_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_HLEN_STRUCT) + 2, 7, 1, (r))
#define RDD_PARSER_HLEN_LAYER_INDICATION_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_HLEN_STRUCT) + 2, 7, 1, (v))
#define RDD_PARSER_HLEN_LAYER_INDICATION_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 2, 7, 1, (r))
#define RDD_PARSER_HLEN_LAYER_INDICATION_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 2, 7, 1, (v))
#define RDD_PARSER_HLEN_LEN_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PARSER_HLEN_STRUCT) + 2, 0, 15, (r))
#define RDD_PARSER_HLEN_LEN_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PARSER_HLEN_STRUCT) + 2, 0, 15, (v))
#define RDD_PARSER_HLEN_LEN_READ(r, p)                              FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 15, (r))
#define RDD_PARSER_HLEN_LEN_WRITE(v, p)                             FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 15, (v))
#define RDD_PARSER_HLEN_WORD_READ_G(r, g, idx)                      GROUP_MREAD_32((g), (idx)*sizeof(PARSER_HLEN_STRUCT), (r))
#define RDD_PARSER_HLEN_WORD_WRITE_G(v, g, idx)                     GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_HLEN_STRUCT), (v))
#define RDD_PARSER_HLEN_WORD_READ(r, p)                             MREAD_32((uint8_t *)(p), (r))
#define RDD_PARSER_HLEN_WORD_WRITE(v, p)                            MWRITE_32((uint8_t *)(p), (v))
/* <<<PARSER_HLEN_STRUCT */

/* <<<RDD_PARSER_HLEN */


/* >>>RDD_PROCESSING_REORDER_DESCRIPTOR */
#define PROCESSING_REORDER_DESCRIPTOR_PD_0_F_OFFSET                                                            0
#define PROCESSING_REORDER_DESCRIPTOR_PD_0_F_WIDTH                                                             32
#define PROCESSING_REORDER_DESCRIPTOR_PROCESSING_REORDER_DESCRIPTOR_OFFSET                                     0
#define PROCESSING_REORDER_DESCRIPTOR_PD_0_OFFSET                                                              0
#define PROCESSING_REORDER_DESCRIPTOR_PD_0_WORD_OFFSET                                                         0
#define PROCESSING_REORDER_DESCRIPTOR_PD_1_F_OFFSET                                                            0
#define PROCESSING_REORDER_DESCRIPTOR_PD_1_F_WIDTH                                                             32
#define PROCESSING_REORDER_DESCRIPTOR_PD_1_OFFSET                                                              4
#define PROCESSING_REORDER_DESCRIPTOR_PD_1_WORD_OFFSET                                                         1
#define PROCESSING_REORDER_DESCRIPTOR_PD_2_F_OFFSET                                                            0
#define PROCESSING_REORDER_DESCRIPTOR_PD_2_F_WIDTH                                                             32
#define PROCESSING_REORDER_DESCRIPTOR_PD_2_OFFSET                                                              8
#define PROCESSING_REORDER_DESCRIPTOR_PD_2_WORD_OFFSET                                                         2
#define PROCESSING_REORDER_DESCRIPTOR_PD_3_F_OFFSET                                                            0
#define PROCESSING_REORDER_DESCRIPTOR_PD_3_F_WIDTH                                                             32
#define PROCESSING_REORDER_DESCRIPTOR_PD_3_OFFSET                                                              12
#define PROCESSING_REORDER_DESCRIPTOR_PD_3_WORD_OFFSET                                                         3

/* >>>PROCESSING_REORDER_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	pd_0      	;
        uint32_t	pd_1      	;
        uint32_t	pd_2      	;
        uint32_t	pd_3      	;
#else
        uint32_t	pd_0      	;
        uint32_t	pd_1      	;
        uint32_t	pd_2      	;
        uint32_t	pd_3      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PROCESSING_REORDER_DESCRIPTOR_STRUCT;

#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_0_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PROCESSING_REORDER_DESCRIPTOR_STRUCT), (r))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_0_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PROCESSING_REORDER_DESCRIPTOR_STRUCT), (v))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_0_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_0_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_1_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PROCESSING_REORDER_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_1_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PROCESSING_REORDER_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_1_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_1_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_2_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PROCESSING_REORDER_DESCRIPTOR_STRUCT) + 8, (r))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_2_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PROCESSING_REORDER_DESCRIPTOR_STRUCT) + 8, (v))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_2_READ(r, p)                 MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_2_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_3_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PROCESSING_REORDER_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_3_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PROCESSING_REORDER_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_3_READ(r, p)                 MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_PROCESSING_REORDER_DESCRIPTOR_PD_3_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 12, (v))
/* <<<PROCESSING_REORDER_DESCRIPTOR_STRUCT */

/* <<<RDD_PROCESSING_REORDER_DESCRIPTOR */


/* >>>RDD_XPE_RETURN */
#define XPE_RETURN_FIRST_GDMA_BUFFER_F_OFFSET                                               31
#define XPE_RETURN_FIRST_GDMA_BUFFER_F_WIDTH                                                1
#define XPE_RETURN_XPE_RETURN_OFFSET                                                        0
#define XPE_RETURN_FIRST_GDMA_BUFFER_OFFSET                                                 0
#define XPE_RETURN_FIRST_GDMA_BUFFER_WORD_OFFSET                                            0
#define XPE_RETURN_FIRST_GDMA_BUFFER_F_OFFSET_MOD8                                          7
#define XPE_RETURN_FIRST_GDMA_BUFFER_F_OFFSET_MOD16                                         15
#define XPE_RETURN_GDMA0_DATA_OFFSET_F_OFFSET                                               24
#define XPE_RETURN_GDMA0_DATA_OFFSET_F_WIDTH                                                7
#define XPE_RETURN_GDMA0_DATA_OFFSET_OFFSET                                                 0
#define XPE_RETURN_GDMA0_DATA_OFFSET_WORD_OFFSET                                            0
#define XPE_RETURN_GDMA0_DATA_OFFSET_F_OFFSET_MOD8                                          0
#define XPE_RETURN_GDMA0_DATA_OFFSET_F_OFFSET_MOD16                                         8
#define XPE_RETURN_GDMA0_TOTAL_LENGTH_F_OFFSET                                              16
#define XPE_RETURN_GDMA0_TOTAL_LENGTH_F_WIDTH                                               8
#define XPE_RETURN_GDMA0_TOTAL_LENGTH_OFFSET                                                1
#define XPE_RETURN_GDMA0_TOTAL_LENGTH_WORD_OFFSET                                           0
#define XPE_RETURN_GDMA0_TOTAL_LENGTH_F_OFFSET_MOD16                                        0
#define XPE_RETURN_EMPTY_CMD_LIST_F_OFFSET                                                  15
#define XPE_RETURN_EMPTY_CMD_LIST_F_WIDTH                                                   1
#define XPE_RETURN_EMPTY_CMD_LIST_OFFSET                                                    2
#define XPE_RETURN_EMPTY_CMD_LIST_WORD_OFFSET                                               0
#define XPE_RETURN_EMPTY_CMD_LIST_F_OFFSET_MOD8                                             7
#define XPE_RETURN_EMPTY_CMD_LIST_F_OFFSET_MOD16                                            15
#define XPE_RETURN_GDMA1_DATA_OFFSET_F_OFFSET                                               8
#define XPE_RETURN_GDMA1_DATA_OFFSET_F_WIDTH                                                7
#define XPE_RETURN_GDMA1_DATA_OFFSET_OFFSET                                                 2
#define XPE_RETURN_GDMA1_DATA_OFFSET_WORD_OFFSET                                            0
#define XPE_RETURN_GDMA1_DATA_OFFSET_F_OFFSET_MOD8                                          0
#define XPE_RETURN_GDMA1_DATA_OFFSET_F_OFFSET_MOD16                                         8
#define XPE_RETURN_GDMA1_TOTAL_LENGTH_F_OFFSET                                              0
#define XPE_RETURN_GDMA1_TOTAL_LENGTH_F_WIDTH                                               8
#define XPE_RETURN_GDMA1_TOTAL_LENGTH_OFFSET                                                3
#define XPE_RETURN_GDMA1_TOTAL_LENGTH_WORD_OFFSET                                           0
#define XPE_RETURN_GDMA1_TOTAL_LENGTH_F_OFFSET_MOD16                                        0

/* >>>XPE_RETURN_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	first_gdma_buffer 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	gdma0_data_offset 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	gdma0_total_length	;
        uint32_t	empty_cmd_list    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	gdma1_data_offset 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	gdma1_total_length	;
#else
        uint8_t	gdma1_total_length	;
        uint32_t	gdma1_data_offset 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	empty_cmd_list    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	gdma0_total_length	;
        uint32_t	gdma0_data_offset 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_gdma_buffer 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) XPE_RETURN_STRUCT;

#define RDD_XPE_RETURN_FIRST_GDMA_BUFFER_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(XPE_RETURN_STRUCT), 7, 1, (r))
#define RDD_XPE_RETURN_FIRST_GDMA_BUFFER_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(XPE_RETURN_STRUCT), 7, 1, (v))
#define RDD_XPE_RETURN_FIRST_GDMA_BUFFER_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_XPE_RETURN_FIRST_GDMA_BUFFER_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_XPE_RETURN_GDMA0_DATA_OFFSET_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(XPE_RETURN_STRUCT), 0, 7, (r))
#define RDD_XPE_RETURN_GDMA0_DATA_OFFSET_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(XPE_RETURN_STRUCT), 0, 7, (v))
#define RDD_XPE_RETURN_GDMA0_DATA_OFFSET_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p), 0, 7, (r))
#define RDD_XPE_RETURN_GDMA0_DATA_OFFSET_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p), 0, 7, (v))
#define RDD_XPE_RETURN_GDMA0_TOTAL_LENGTH_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(XPE_RETURN_STRUCT) + 1, (r))
#define RDD_XPE_RETURN_GDMA0_TOTAL_LENGTH_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(XPE_RETURN_STRUCT) + 1, (v))
#define RDD_XPE_RETURN_GDMA0_TOTAL_LENGTH_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_XPE_RETURN_GDMA0_TOTAL_LENGTH_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_XPE_RETURN_EMPTY_CMD_LIST_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(XPE_RETURN_STRUCT) + 2, 7, 1, (r))
#define RDD_XPE_RETURN_EMPTY_CMD_LIST_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(XPE_RETURN_STRUCT) + 2, 7, 1, (v))
#define RDD_XPE_RETURN_EMPTY_CMD_LIST_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 2, 7, 1, (r))
#define RDD_XPE_RETURN_EMPTY_CMD_LIST_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 2, 7, 1, (v))
#define RDD_XPE_RETURN_GDMA1_DATA_OFFSET_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(XPE_RETURN_STRUCT) + 2, 0, 7, (r))
#define RDD_XPE_RETURN_GDMA1_DATA_OFFSET_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(XPE_RETURN_STRUCT) + 2, 0, 7, (v))
#define RDD_XPE_RETURN_GDMA1_DATA_OFFSET_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 7, (r))
#define RDD_XPE_RETURN_GDMA1_DATA_OFFSET_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 7, (v))
#define RDD_XPE_RETURN_GDMA1_TOTAL_LENGTH_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(XPE_RETURN_STRUCT) + 3, (r))
#define RDD_XPE_RETURN_GDMA1_TOTAL_LENGTH_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(XPE_RETURN_STRUCT) + 3, (v))
#define RDD_XPE_RETURN_GDMA1_TOTAL_LENGTH_READ(r, p)                 MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_XPE_RETURN_GDMA1_TOTAL_LENGTH_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 3, (v))
/* <<<XPE_RETURN_STRUCT */

/* <<<RDD_XPE_RETURN */


/* >>>RDD_XPE_PARAMS */
#define XPE_PARAMS_CMD_LIST_ADDR_F_OFFSET                                                   16
#define XPE_PARAMS_CMD_LIST_ADDR_F_WIDTH                                                    16
#define XPE_PARAMS_XPE_PARAMS_OFFSET                                                        0
#define XPE_PARAMS_CMD_LIST_ADDR_OFFSET                                                     0
#define XPE_PARAMS_CMD_LIST_ADDR_WORD_OFFSET                                                0

/* >>>XPE_PARAMS_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	cmd_list_addr	;
        uint16_t	reserved     	;
#else
        uint16_t	reserved     	;
        uint16_t	cmd_list_addr	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) XPE_PARAMS_STRUCT;

#define RDD_XPE_PARAMS_CMD_LIST_ADDR_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(XPE_PARAMS_STRUCT), (r))
#define RDD_XPE_PARAMS_CMD_LIST_ADDR_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(XPE_PARAMS_STRUCT), (v))
#define RDD_XPE_PARAMS_CMD_LIST_ADDR_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_XPE_PARAMS_CMD_LIST_ADDR_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
/* <<<XPE_PARAMS_STRUCT */

/* <<<RDD_XPE_PARAMS */


/* >>>RDD_MAC_ADDRESS */
#define MAC_ADDRESS_BYTE_0_F_OFFSET                                                          24
#define MAC_ADDRESS_BYTE_0_F_WIDTH                                                           8
#define MAC_ADDRESS_MAC_ADDRESS_OFFSET                                                       0
#define MAC_ADDRESS_BYTE_0_OFFSET                                                            0
#define MAC_ADDRESS_BYTE_0_WORD_OFFSET                                                       0
#define MAC_ADDRESS_BYTE_0_F_OFFSET_MOD16                                                    8
#define MAC_ADDRESS_BYTE_1_F_OFFSET                                                          16
#define MAC_ADDRESS_BYTE_1_F_WIDTH                                                           8
#define MAC_ADDRESS_BYTE_1_OFFSET                                                            1
#define MAC_ADDRESS_BYTE_1_WORD_OFFSET                                                       0
#define MAC_ADDRESS_BYTE_1_F_OFFSET_MOD16                                                    0
#define MAC_ADDRESS_BYTE_2_F_OFFSET                                                          8
#define MAC_ADDRESS_BYTE_2_F_WIDTH                                                           8
#define MAC_ADDRESS_BYTE_2_OFFSET                                                            2
#define MAC_ADDRESS_BYTE_2_WORD_OFFSET                                                       0
#define MAC_ADDRESS_BYTE_2_F_OFFSET_MOD16                                                    8
#define MAC_ADDRESS_BYTE_3_F_OFFSET                                                          0
#define MAC_ADDRESS_BYTE_3_F_WIDTH                                                           8
#define MAC_ADDRESS_BYTE_3_OFFSET                                                            3
#define MAC_ADDRESS_BYTE_3_WORD_OFFSET                                                       0
#define MAC_ADDRESS_BYTE_3_F_OFFSET_MOD16                                                    0
#define MAC_ADDRESS_BYTE_4_F_OFFSET                                                          24
#define MAC_ADDRESS_BYTE_4_F_WIDTH                                                           8
#define MAC_ADDRESS_BYTE_4_OFFSET                                                            4
#define MAC_ADDRESS_BYTE_4_WORD_OFFSET                                                       1
#define MAC_ADDRESS_BYTE_4_F_OFFSET_MOD16                                                    8
#define MAC_ADDRESS_BYTE_5_F_OFFSET                                                          16
#define MAC_ADDRESS_BYTE_5_F_WIDTH                                                           8
#define MAC_ADDRESS_BYTE_5_OFFSET                                                            5
#define MAC_ADDRESS_BYTE_5_WORD_OFFSET                                                       1
#define MAC_ADDRESS_BYTE_5_F_OFFSET_MOD16                                                    0

/* >>>MAC_ADDRESS_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	byte_0    	;
        uint8_t	byte_1    	;
        uint8_t	byte_2    	;
        uint8_t	byte_3    	;
        uint8_t	byte_4    	;
        uint8_t	byte_5    	;
#else
        uint8_t	byte_3    	;
        uint8_t	byte_2    	;
        uint8_t	byte_1    	;
        uint8_t	byte_0    	;
        uint8_t	byte_5    	;
        uint8_t	byte_4    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) MAC_ADDRESS_STRUCT;

#define RDD_MAC_ADDRESS_BYTE_0_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT), (r))
#define RDD_MAC_ADDRESS_BYTE_0_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT), (v))
#define RDD_MAC_ADDRESS_BYTE_0_READ(r, p)                 MREAD_8((uint8_t *)(p), (r))
#define RDD_MAC_ADDRESS_BYTE_0_WRITE(v, p)                MWRITE_8((uint8_t *)(p), (v))
#define RDD_MAC_ADDRESS_BYTE_1_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT) + 1, (r))
#define RDD_MAC_ADDRESS_BYTE_1_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT) + 1, (v))
#define RDD_MAC_ADDRESS_BYTE_1_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_MAC_ADDRESS_BYTE_1_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_MAC_ADDRESS_BYTE_2_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT) + 2, (r))
#define RDD_MAC_ADDRESS_BYTE_2_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT) + 2, (v))
#define RDD_MAC_ADDRESS_BYTE_2_READ(r, p)                 MREAD_8((uint8_t *)(p) + 2, (r))
#define RDD_MAC_ADDRESS_BYTE_2_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 2, (v))
#define RDD_MAC_ADDRESS_BYTE_3_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT) + 3, (r))
#define RDD_MAC_ADDRESS_BYTE_3_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT) + 3, (v))
#define RDD_MAC_ADDRESS_BYTE_3_READ(r, p)                 MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_MAC_ADDRESS_BYTE_3_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_MAC_ADDRESS_BYTE_4_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT) + 4, (r))
#define RDD_MAC_ADDRESS_BYTE_4_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT) + 4, (v))
#define RDD_MAC_ADDRESS_BYTE_4_READ(r, p)                 MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_MAC_ADDRESS_BYTE_4_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_MAC_ADDRESS_BYTE_5_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT) + 5, (r))
#define RDD_MAC_ADDRESS_BYTE_5_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(MAC_ADDRESS_STRUCT) + 5, (v))
#define RDD_MAC_ADDRESS_BYTE_5_READ(r, p)                 MREAD_8((uint8_t *)(p) + 5, (r))
#define RDD_MAC_ADDRESS_BYTE_5_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 5, (v))
/* <<<MAC_ADDRESS_STRUCT */

/* <<<RDD_MAC_ADDRESS */


/* >>>RDD_VPORT_CFG_ENTRY */
#define VPORT_CFG_ENTRY_LOOPBACK_EN_F_OFFSET                                                     31
#define VPORT_CFG_ENTRY_LOOPBACK_EN_F_WIDTH                                                      1
#define VPORT_CFG_ENTRY_VPORT_CFG_ENTRY_OFFSET                                                   0
#define VPORT_CFG_ENTRY_LOOPBACK_EN_OFFSET                                                       0
#define VPORT_CFG_ENTRY_LOOPBACK_EN_WORD_OFFSET                                                  0
#define VPORT_CFG_ENTRY_LOOPBACK_EN_F_OFFSET_MOD8                                                7
#define VPORT_CFG_ENTRY_LOOPBACK_EN_F_OFFSET_MOD16                                               15
#define VPORT_CFG_ENTRY_MIRRORING_EN_F_OFFSET                                                    30
#define VPORT_CFG_ENTRY_MIRRORING_EN_F_WIDTH                                                     1
#define VPORT_CFG_ENTRY_MIRRORING_EN_OFFSET                                                      0
#define VPORT_CFG_ENTRY_MIRRORING_EN_WORD_OFFSET                                                 0
#define VPORT_CFG_ENTRY_MIRRORING_EN_F_OFFSET_MOD8                                               6
#define VPORT_CFG_ENTRY_MIRRORING_EN_F_OFFSET_MOD16                                              14
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_F_OFFSET                                          24
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_F_WIDTH                                           6
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_OFFSET                                            0
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_WORD_OFFSET                                       0
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_F_OFFSET_MOD8                                     0
#define VPORT_CFG_ENTRY_INGRESS_FILTER_PROFILE_F_OFFSET_MOD16                                    8
#define VPORT_CFG_ENTRY_NATC_TBL_ID_F_OFFSET                                                     21
#define VPORT_CFG_ENTRY_NATC_TBL_ID_F_WIDTH                                                      3
#define VPORT_CFG_ENTRY_NATC_TBL_ID_OFFSET                                                       1
#define VPORT_CFG_ENTRY_NATC_TBL_ID_WORD_OFFSET                                                  0
#define VPORT_CFG_ENTRY_NATC_TBL_ID_F_OFFSET_MOD8                                                5
#define VPORT_CFG_ENTRY_NATC_TBL_ID_F_OFFSET_MOD16                                               5
#define VPORT_CFG_ENTRY_EMAC_IDX_F_OFFSET                                                        18
#define VPORT_CFG_ENTRY_EMAC_IDX_F_WIDTH                                                         3
#define VPORT_CFG_ENTRY_EMAC_IDX_OFFSET                                                          1
#define VPORT_CFG_ENTRY_EMAC_IDX_WORD_OFFSET                                                     0
#define VPORT_CFG_ENTRY_EMAC_IDX_F_OFFSET_MOD8                                                   2
#define VPORT_CFG_ENTRY_EMAC_IDX_F_OFFSET_MOD16                                                  2
#define VPORT_CFG_ENTRY_VIQ_F_OFFSET                                                             15
#define VPORT_CFG_ENTRY_VIQ_F_WIDTH                                                              3
#define VPORT_CFG_ENTRY_VIQ_OFFSET                                                               1
#define VPORT_CFG_ENTRY_VIQ_WORD_OFFSET                                                          0
#define VPORT_CFG_ENTRY_VIQ_F_OFFSET_MOD8                                                        7
#define VPORT_CFG_ENTRY_VIQ_F_OFFSET_MOD16                                                       15
#define VPORT_CFG_ENTRY_PORT_DBG_STAT_EN_F_OFFSET                                                14
#define VPORT_CFG_ENTRY_PORT_DBG_STAT_EN_F_WIDTH                                                 1
#define VPORT_CFG_ENTRY_PORT_DBG_STAT_EN_OFFSET                                                  2
#define VPORT_CFG_ENTRY_PORT_DBG_STAT_EN_WORD_OFFSET                                             0
#define VPORT_CFG_ENTRY_PORT_DBG_STAT_EN_F_OFFSET_MOD8                                           6
#define VPORT_CFG_ENTRY_PORT_DBG_STAT_EN_F_OFFSET_MOD16                                          14
#define VPORT_CFG_ENTRY_CONGESTION_FLOW_CONTROL_F_OFFSET                                         13
#define VPORT_CFG_ENTRY_CONGESTION_FLOW_CONTROL_F_WIDTH                                          1
#define VPORT_CFG_ENTRY_CONGESTION_FLOW_CONTROL_OFFSET                                           2
#define VPORT_CFG_ENTRY_CONGESTION_FLOW_CONTROL_WORD_OFFSET                                      0
#define VPORT_CFG_ENTRY_CONGESTION_FLOW_CONTROL_F_OFFSET_MOD8                                    5
#define VPORT_CFG_ENTRY_CONGESTION_FLOW_CONTROL_F_OFFSET_MOD16                                   13
#define VPORT_CFG_ENTRY_INGRESS_RATE_LIMIT_F_OFFSET                                              12
#define VPORT_CFG_ENTRY_INGRESS_RATE_LIMIT_F_WIDTH                                               1
#define VPORT_CFG_ENTRY_INGRESS_RATE_LIMIT_OFFSET                                                2
#define VPORT_CFG_ENTRY_INGRESS_RATE_LIMIT_WORD_OFFSET                                           0
#define VPORT_CFG_ENTRY_INGRESS_RATE_LIMIT_F_OFFSET_MOD8                                         4
#define VPORT_CFG_ENTRY_INGRESS_RATE_LIMIT_F_OFFSET_MOD16                                        12
#define VPORT_CFG_ENTRY_MCAST_WHITELIST_SKIP_F_OFFSET                                            11
#define VPORT_CFG_ENTRY_MCAST_WHITELIST_SKIP_F_WIDTH                                             1
#define VPORT_CFG_ENTRY_MCAST_WHITELIST_SKIP_OFFSET                                              2
#define VPORT_CFG_ENTRY_MCAST_WHITELIST_SKIP_WORD_OFFSET                                         0
#define VPORT_CFG_ENTRY_MCAST_WHITELIST_SKIP_F_OFFSET_MOD8                                       3
#define VPORT_CFG_ENTRY_MCAST_WHITELIST_SKIP_F_OFFSET_MOD16                                      11
#define VPORT_CFG_ENTRY_DOS_ATTACK_DETECTION_DISABLE_F_OFFSET                                    10
#define VPORT_CFG_ENTRY_DOS_ATTACK_DETECTION_DISABLE_F_WIDTH                                     1
#define VPORT_CFG_ENTRY_DOS_ATTACK_DETECTION_DISABLE_OFFSET                                      2
#define VPORT_CFG_ENTRY_DOS_ATTACK_DETECTION_DISABLE_WORD_OFFSET                                 0
#define VPORT_CFG_ENTRY_DOS_ATTACK_DETECTION_DISABLE_F_OFFSET_MOD8                               2
#define VPORT_CFG_ENTRY_DOS_ATTACK_DETECTION_DISABLE_F_OFFSET_MOD16                              10
/* <<<RDD_VPORT_CFG_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_F_OFFSET                                                    0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_F_WIDTH                                                     32
#define FC_UCAST_FLOW_CONTEXT_ENTRY_FC_UCAST_FLOW_CONTEXT_ENTRY_OFFSET                                       0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_OFFSET                                                      0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_WORD_OFFSET                                                 0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_Q_BYTES_CNT_F_OFFSET                                                     24
#define FC_UCAST_FLOW_CONTEXT_ENTRY_Q_BYTES_CNT_F_WIDTH                                                      8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_Q_BYTES_CNT_OFFSET                                                       4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_Q_BYTES_CNT_WORD_OFFSET                                                  1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_Q_BYTES_CNT_F_OFFSET_MOD16                                               8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_F_OFFSET                                                  23
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_F_WIDTH                                                   1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_OFFSET                                                    5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_WORD_OFFSET                                               1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_F_OFFSET_MOD8                                             7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_F_OFFSET_MOD16                                            7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_F_OFFSET                                                       22
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_F_WIDTH                                                        1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_OFFSET                                                         5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_WORD_OFFSET                                                    1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_F_OFFSET_MOD8                                                  6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_F_OFFSET_MOD16                                                 6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_F_OFFSET                                                   21
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_F_WIDTH                                                    1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_OFFSET                                                     5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_WORD_OFFSET                                                1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_F_OFFSET_MOD8                                              5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_F_OFFSET_MOD16                                             5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_F_OFFSET                                                     20
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_F_WIDTH                                                      1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_OFFSET                                                       5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_WORD_OFFSET                                                  1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_F_OFFSET_MOD8                                                4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_F_OFFSET_MOD16                                               4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_F_OFFSET                                                            19
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_F_WIDTH                                                             1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_OFFSET                                                              5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_WORD_OFFSET                                                         1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_F_OFFSET_MOD8                                                       3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_F_OFFSET_MOD16                                                      3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_F_OFFSET                                            18
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_F_WIDTH                                             1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_OFFSET                                              5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_WORD_OFFSET                                         1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_F_OFFSET_MOD8                                       2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_F_OFFSET_MOD16                                      2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET                                               17
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_WIDTH                                                1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_OFFSET                                                 5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WORD_OFFSET                                            1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET_MOD8                                          1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET_MOD16                                         1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_F_OFFSET                                                           16
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_F_WIDTH                                                            1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_OFFSET                                                             5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_WORD_OFFSET                                                        1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_F_OFFSET_MOD8                                                      0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_F_OFFSET_MOD16                                                     0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_F_OFFSET                                               14
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_F_WIDTH                                                2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_OFFSET                                                 6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_WORD_OFFSET                                            1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_F_OFFSET_MOD8                                          6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_F_OFFSET_MOD16                                         14
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MAX_PKT_LEN_F_OFFSET                                                     0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MAX_PKT_LEN_F_WIDTH                                                      14
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MAX_PKT_LEN_OFFSET                                                       6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MAX_PKT_LEN_WORD_OFFSET                                                  1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_MAX_PKT_LEN_F_OFFSET_MOD16                                               0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_F_OFFSET                                              31
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_F_WIDTH                                               1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_OFFSET                                                8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_WORD_OFFSET                                           2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_F_OFFSET_MOD8                                         7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_F_OFFSET_MOD16                                        15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_F_OFFSET                                              30
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_F_WIDTH                                               1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_OFFSET                                                8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_WORD_OFFSET                                           2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_F_OFFSET_MOD8                                         6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_F_OFFSET_MOD16                                        14
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_F_OFFSET                                                        26
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_F_WIDTH                                                         4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_OFFSET                                                          8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_WORD_OFFSET                                                     2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_F_OFFSET_MOD8                                                   2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_F_OFFSET_MOD16                                                  10
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_F_OFFSET                                                        25
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_F_WIDTH                                                         1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_OFFSET                                                          8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_WORD_OFFSET                                                     2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_F_OFFSET_MOD8                                                   1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_F_OFFSET_MOD16                                                  9
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_F_OFFSET                                                         23
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_F_WIDTH                                                          2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_OFFSET                                                           8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_WORD_OFFSET                                                      2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_F_OFFSET_MOD8                                                    7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_F_OFFSET_MOD16                                                   7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET                                                      20
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_F_WIDTH                                                       2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_OFFSET                                                        9
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_WORD_OFFSET                                                   2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET_MOD8                                                 4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET_MOD16                                                4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_F_OFFSET                                             19
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_F_WIDTH                                              1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_OFFSET                                               9
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_WORD_OFFSET                                          2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_F_OFFSET_MOD8                                        3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_F_OFFSET_MOD16                                       3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_F_OFFSET                                             0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_F_WIDTH                                              18
#define FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_OFFSET                                               8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_WORD_OFFSET                                          2
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_F_OFFSET                                        29
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_F_WIDTH                                         3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_OFFSET                                          12
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_WORD_OFFSET                                     3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_F_OFFSET_MOD8                                   5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_F_OFFSET_MOD16                                  13
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_F_OFFSET                                                24
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_F_WIDTH                                                 5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_OFFSET                                                  12
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_WORD_OFFSET                                             3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_F_OFFSET_MOD8                                           0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_F_OFFSET_MOD16                                          8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_F_OFFSET                                                      16
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_F_WIDTH                                                       6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_OFFSET                                                        13
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_WORD_OFFSET                                                   3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_F_OFFSET_MOD8                                                 0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_F_OFFSET_MOD16                                                0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_32_F_OFFSET                                          8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_32_F_WIDTH                                           5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_32_OFFSET                                            14
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_32_WORD_OFFSET                                       3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_32_F_OFFSET_MOD8                                     0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_32_F_OFFSET_MOD16                                    8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_F_OFFSET                                                    0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_F_WIDTH                                                     8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_OFFSET                                                      15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_WORD_OFFSET                                                 3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_F_OFFSET_MOD16                                              0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_F_OFFSET                                            15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_F_WIDTH                                             1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_OFFSET                                              18
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_WORD_OFFSET                                         4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_F_OFFSET_MOD8                                       7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_F_OFFSET_MOD16                                      15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDTEST_STREAM_ID_F_OFFSET                                               12
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDTEST_STREAM_ID_F_WIDTH                                                3
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDTEST_STREAM_ID_OFFSET                                                 18
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDTEST_STREAM_ID_WORD_OFFSET                                            4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDTEST_STREAM_ID_F_OFFSET_MOD8                                          4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_SPDTEST_STREAM_ID_F_OFFSET_MOD16                                         12
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TX_ADJUST_F_OFFSET                                                       0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TX_ADJUST_F_WIDTH                                                        8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TX_ADJUST_OFFSET                                                         19
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TX_ADJUST_WORD_OFFSET                                                    4
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TX_ADJUST_F_OFFSET_MOD16                                                 0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_F_OFFSET                                                           31
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_F_WIDTH                                                            1
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_OFFSET                                                             20
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_WORD_OFFSET                                                        5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_F_OFFSET_MOD8                                                      7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_F_OFFSET_MOD16                                                     15
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_ID_F_OFFSET                                                      24
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_ID_F_WIDTH                                                       7
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_ID_OFFSET                                                        20
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_ID_WORD_OFFSET                                                   5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_ID_F_OFFSET_MOD8                                                 0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_ID_F_OFFSET_MOD16                                                8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_EXCEPTION_ACTIONS_UNION_F_OFFSET                                     16
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_EXCEPTION_ACTIONS_UNION_F_WIDTH                                      8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_EXCEPTION_ACTIONS_UNION_OFFSET                                       21
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_EXCEPTION_ACTIONS_UNION_WORD_OFFSET                                  5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_EXCEPTION_ACTIONS_UNION_F_OFFSET_MOD16                               0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POST_EXCEPTION_ACTIONS_UNION_F_OFFSET                                    8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POST_EXCEPTION_ACTIONS_UNION_F_WIDTH                                     8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POST_EXCEPTION_ACTIONS_UNION_OFFSET                                      22
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POST_EXCEPTION_ACTIONS_UNION_WORD_OFFSET                                 5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_POST_EXCEPTION_ACTIONS_UNION_F_OFFSET_MOD16                              8
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TUNNEL_INDEX_REF_F_OFFSET                                                0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TUNNEL_INDEX_REF_F_WIDTH                                                 5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TUNNEL_INDEX_REF_OFFSET                                                  23
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TUNNEL_INDEX_REF_WORD_OFFSET                                             5
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TUNNEL_INDEX_REF_F_OFFSET_MOD8                                           0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_TUNNEL_INDEX_REF_F_OFFSET_MOD16                                          0
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_OFFSET                                                      24
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_WORD_OFFSET                                                 6
#define FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_F_OFFSET_MOD16                                              8

/* >>>FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT */
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_NUMBER	100
typedef union
{
    uint32_t word_32[31];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	natc_control                                                          	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	q_bytes_cnt                                                           	;
        uint32_t	multicast_flag                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_routed                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_tos_mangle                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_l2_accel                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drop                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	connection_direction                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_wred_high_prio                                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_df                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dhd_flow_priority                                                     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	max_pkt_len                                                           	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	is_unicast_wfd_nic                                                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_unicast_wfd_any                                                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wfd_prio                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wfd_idx                                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_phy                                                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_ingqos_high_prio                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	link_specific_union                                                   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ip_addresses_table_index                                              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	service_queue_id                                                      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3                                                             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_reason                                                            	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved_1                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	command_list_length_32                                                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	pathstat_idx                                                          	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	reserved_2                                                            	;
        uint32_t	tcpspdtest_is_upload                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdtest_stream_id                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved_3                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	tx_adjust                                                             	;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	policer_id                                                            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	pre_exception_actions_union                                           	; /* This is a field union */
        uint8_t	post_exception_actions_union                                          	; /* This is a field union */
        uint32_t	reserved7                                                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tunnel_index_ref                                                      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_valid                                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_policer_id                                                          	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	policer_en                                                                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pre_exception_actions_union union */
        uint32_t	is_mapt_us                                                                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pre_exception_actions_union union */
        uint32_t	overflow                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pre_exception_actions_union union */
        uint32_t	is_tunnel                                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pre_exception_actions_union union */
        uint32_t	reserved5                                                                       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pre_exception_actions_union union */
        uint32_t	is_hit_trap                                                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	is_tcpspdtest                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	spdsvc_flow                                                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	is_service_queue                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	is_egress_phy_wlan                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	reserved6                                                                       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	reservedSU1_reserved7                                                           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_tunnel_index_ref                                                    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_valid                                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_policer_id                                                          	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	pre_mod_exception_actions                                                       	; /* Member of pre_exception_actions_union union */
        uint8_t	post_mod_exception_actions                                                      	; /* Member of post_exception_actions_union union */
        uint32_t	reservedSU2_reserved7                                                           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_tunnel_index_ref                                                    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	command_list[RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_NUMBER];
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	natc_control                                                          	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	max_pkt_len                                                           	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dhd_flow_priority                                                     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_df                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_wred_high_prio                                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	connection_direction                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drop                                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_l2_accel                                                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_tos_mangle                                                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_routed                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	multicast_flag                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	q_bytes_cnt                                                           	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	link_specific_union                                                   	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_ingqos_high_prio                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_phy                                                            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                                                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wfd_idx                                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wfd_prio                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_unicast_wfd_any                                                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_unicast_wfd_nic                                                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	pathstat_idx                                                          	;
        uint32_t	command_list_length_32                                                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved_1                                                            	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_reason                                                            	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3                                                             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	service_queue_id                                                      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_addresses_table_index                                              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	tx_adjust                                                             	;
        uint32_t	reserved_3                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdtest_stream_id                                                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcpspdtest_is_upload                                                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved_2                                                            	;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	tunnel_index_ref                                                      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved7                                                             	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	post_exception_actions_union                                          	; /* This is a field union */
        uint8_t	pre_exception_actions_union                                           	; /* This is a field union */
        uint32_t	policer_id                                                            	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid                                                                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_tunnel_index_ref                                                    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved7                                                           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved6                                                                       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	is_egress_phy_wlan                                                              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	is_service_queue                                                                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	spdsvc_flow                                                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	is_tcpspdtest                                                                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	is_hit_trap                                                                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of post_exception_actions_union union */
        uint32_t	reserved5                                                                       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pre_exception_actions_union union */
        uint32_t	is_tunnel                                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pre_exception_actions_union union */
        uint32_t	overflow                                                                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pre_exception_actions_union union */
        uint32_t	is_mapt_us                                                                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pre_exception_actions_union union */
        uint32_t	policer_en                                                                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pre_exception_actions_union union */
        uint32_t	reservedSU1_policer_id                                                          	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_valid                                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_tunnel_index_ref                                                    	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved7                                                           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	post_mod_exception_actions                                                      	; /* Member of post_exception_actions_union union */
        uint8_t	pre_mod_exception_actions                                                       	; /* Member of pre_exception_actions_union union */
        uint32_t	reservedSU2_policer_id                                                          	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_valid                                                               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	command_list[RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_NUMBER];
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT;

#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT), (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT), (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_READ(r, p)                               MREAD_32((uint8_t *)(p), (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_NATC_CONTROL_WRITE(v, p)                              MWRITE_32((uint8_t *)(p), (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_Q_BYTES_CNT_READ_G(r, g, idx)                         GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 4, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_Q_BYTES_CNT_WRITE_G(v, g, idx)                        GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 4, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_Q_BYTES_CNT_READ(r, p)                                MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_Q_BYTES_CNT_WRITE(v, p)                               MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 5, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MULTICAST_FLAG_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 5, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 6, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 6, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 5, 6, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_ROUTED_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 5, 6, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 5, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 5, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 5, 5, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TOS_MANGLE_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 5, 5, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 4, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 4, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 5, 4, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_L2_ACCEL_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 5, 4, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 3, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 3, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p) + 5, 3, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DROP_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p) + 5, 3, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 2, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 2, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 5, 2, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CONNECTION_DIRECTION_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 5, 2, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 1, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 1, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 5, 1, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 5, 1, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 0, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 5, 0, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p) + 5, 0, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_DF_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p) + 5, 0, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 6, 6, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 6, 6, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 6, 6, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_DHD_FLOW_PRIORITY_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 6, 6, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MAX_PKT_LEN_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 6, 0, 14, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MAX_PKT_LEN_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 6, 0, 14, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MAX_PKT_LEN_READ(r, p)                                FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_MAX_PKT_LEN_WRITE(v, p)                               FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_NIC_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 6, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 6, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_UNICAST_WFD_ANY_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 2, 4, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 2, 4, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 8, 2, 4, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRIORITY_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 8, 2, 4, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 1, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 1, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 8, 1, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_PRIO_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 8, 1, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 7, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 7, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_READ(r, p)                                    FIELD_MREAD_16((uint8_t *)(p) + 8, 7, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_WFD_IDX_WRITE(v, p)                                   FIELD_MWRITE_16((uint8_t *)(p) + 8, 7, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 9, 4, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 9, 4, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 9, 4, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_EGRESS_PHY_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 9, 4, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 9, 3, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 9, 3, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 9, 3, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_INGQOS_HIGH_PRIO_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 9, 3, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_32((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 0, 18, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 8, 0, 18, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_READ(r, p)                        FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 18, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_LINK_SPECIFIC_UNION_WRITE(v, p)                       FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 18, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 12, 5, 3, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 12, 5, 3, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 12, 5, 3, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IP_ADDRESSES_TABLE_INDEX_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 12, 5, 3, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 12, 0, 5, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 12, 0, 5, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 12, 0, 5, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SERVICE_QUEUE_ID_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 12, 0, 5, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 13, 0, 6, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 13, 0, 6, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 6, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_CPU_REASON_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 6, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_32_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 14, 0, 5, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_32_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 14, 0, 5, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_32_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 14, 0, 5, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_LENGTH_32_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 14, 0, 5, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_READ_G(r, g, idx)                        GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 15, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_WRITE_G(v, g, idx)                       GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 15, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_READ(r, p)                               MREAD_8((uint8_t *)(p) + 15, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PATHSTAT_IDX_WRITE(v, p)                              MWRITE_8((uint8_t *)(p) + 15, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 18, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 18, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 18, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TCPSPDTEST_IS_UPLOAD_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 18, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDTEST_STREAM_ID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 18, 4, 3, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDTEST_STREAM_ID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 18, 4, 3, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDTEST_STREAM_ID_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 18, 4, 3, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDTEST_STREAM_ID_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 18, 4, 3, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TX_ADJUST_READ_G(r, g, idx)                           GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 19, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TX_ADJUST_WRITE_G(v, g, idx)                          GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 19, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TX_ADJUST_READ(r, p)                                  MREAD_8((uint8_t *)(p) + 19, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TX_ADJUST_WRITE(v, p)                                 MWRITE_8((uint8_t *)(p) + 19, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 20, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 20, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p) + 20, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_VALID_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p) + 20, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_ID_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 20, 0, 7, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_ID_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 20, 0, 7, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_ID_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 20, 0, 7, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_ID_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 20, 0, 7, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_EXCEPTION_ACTIONS_UNION_READ_G(r, g, idx)         GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_EXCEPTION_ACTIONS_UNION_WRITE_G(v, g, idx)        GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_EXCEPTION_ACTIONS_UNION_READ(r, p)                MREAD_8((uint8_t *)(p) + 21, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_EXCEPTION_ACTIONS_UNION_WRITE(v, p)               MWRITE_8((uint8_t *)(p) + 21, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_EN_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_EN_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_EN_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 21, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POLICER_EN_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 21, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, 6, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, 6, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 21, 6, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_MAPT_US_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 21, 6, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, 5, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, 5, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 21, 5, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_OVERFLOW_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 21, 5, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TUNNEL_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, 4, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TUNNEL_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, 4, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TUNNEL_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 21, 4, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TUNNEL_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 21, 4, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_MOD_EXCEPTION_ACTIONS_READ_G(r, g, idx)           GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_MOD_EXCEPTION_ACTIONS_WRITE_G(v, g, idx)          GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 21, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_MOD_EXCEPTION_ACTIONS_READ(r, p)                  MREAD_8((uint8_t *)(p) + 21, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_PRE_MOD_EXCEPTION_ACTIONS_WRITE(v, p)                 MWRITE_8((uint8_t *)(p) + 21, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POST_EXCEPTION_ACTIONS_UNION_READ_G(r, g, idx)        GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POST_EXCEPTION_ACTIONS_UNION_WRITE_G(v, g, idx)       GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POST_EXCEPTION_ACTIONS_UNION_READ(r, p)               MREAD_8((uint8_t *)(p) + 22, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POST_EXCEPTION_ACTIONS_UNION_WRITE(v, p)              MWRITE_8((uint8_t *)(p) + 22, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 22, 7, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_HIT_TRAP_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 22, 7, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, 6, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, 6, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 22, 6, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_TCPSPDTEST_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 22, 6, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, 5, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, 5, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 22, 5, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_SPDSVC_FLOW_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 22, 5, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, 4, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, 4, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 22, 4, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_SERVICE_QUEUE_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 22, 4, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_EGRESS_PHY_WLAN_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, 3, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_EGRESS_PHY_WLAN_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, 3, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_EGRESS_PHY_WLAN_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 22, 3, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_IS_EGRESS_PHY_WLAN_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 22, 3, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POST_MOD_EXCEPTION_ACTIONS_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POST_MOD_EXCEPTION_ACTIONS_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 22, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POST_MOD_EXCEPTION_ACTIONS_READ(r, p)                 MREAD_8((uint8_t *)(p) + 22, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_POST_MOD_EXCEPTION_ACTIONS_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 22, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TUNNEL_INDEX_REF_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 23, 0, 5, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TUNNEL_INDEX_REF_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 23, 0, 5, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TUNNEL_INDEX_REF_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 23, 0, 5, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_TUNNEL_INDEX_REF_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 23, 0, 5, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_READ_G(r, g, idx, i)                     GROUP_MREAD_I_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 24, i, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_WRITE_G(v, g, idx, i)                    GROUP_MWRITE_I_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT) + 24, i, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_READ(r, p, i)                            MREAD_I_8((uint8_t *)(p) + 24, i, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ENTRY_COMMAND_LIST_WRITE(v, p, i)                           MWRITE_I_8((uint8_t *)(p) + 24, i, (v))
/* <<<FC_UCAST_FLOW_CONTEXT_ENTRY_STRUCT */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_KEY_OFFSET                                                        24
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_KEY_WORD_OFFSET                                                   6
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_MASK_F_OFFSET                                                      0
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_MASK_F_WIDTH                                                       32
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_MASK_OFFSET                                                        40
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_MASK_WORD_OFFSET                                                   10
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_TYPE_F_OFFSET                                                     24
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_TYPE_F_WIDTH                                                      4
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_TYPE_OFFSET                                                       44
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_TYPE_WORD_OFFSET                                                  11
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_TYPE_F_OFFSET_MOD8                                                0
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_TYPE_F_OFFSET_MOD16                                               8
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_INNER_PACKET_OFFSET_F_OFFSET                                             16
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_INNER_PACKET_OFFSET_F_WIDTH                                              8
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_INNER_PACKET_OFFSET_OFFSET                                               45
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_INNER_PACKET_OFFSET_WORD_OFFSET                                          11
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_INNER_PACKET_OFFSET_F_OFFSET_MOD16                                       0
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_L2_L3_INDICATION_F_OFFSET                                                12
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_L2_L3_INDICATION_F_WIDTH                                                 1
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_L2_L3_INDICATION_OFFSET                                                  46
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_L2_L3_INDICATION_WORD_OFFSET                                             11
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_L2_L3_INDICATION_F_OFFSET_MOD8                                           4
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_L2_L3_INDICATION_F_OFFSET_MOD16                                          12
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_OFFSET_F_OFFSET                                                    0
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_OFFSET_F_WIDTH                                                     8
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_OFFSET_OFFSET                                                      47
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_OFFSET_WORD_OFFSET                                                 11
#define FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_OFFSET_F_OFFSET_MOD16                                              0

/* >>>FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT */
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_KEY_NUMBER	4
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_RESERVED9_NUMBER	76
typedef union
{
    uint32_t word_32[31];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0                                                              	;
        uint32_t	reserved1                                                              	;
        uint32_t	reserved2                                                              	;
        uint32_t	reserved3                                                              	;
        uint32_t	reserved4                                                              	;
        uint32_t	reserved5                                                              	;
        uint32_t	tunnel_key[RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_KEY_NUMBER];
        uint32_t	key_0_mask                                                             	;
        uint32_t	reserved6                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tunnel_type                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	inner_packet_offset                                                    	;
        uint32_t	reserved7                                                              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_l3_indication                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved8                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	key_0_offset                                                           	;
        uint8_t	reserved9[RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_RESERVED9_NUMBER];
#else
        uint32_t	reserved0                                                              	;
        uint32_t	reserved1                                                              	;
        uint32_t	reserved2                                                              	;
        uint32_t	reserved3                                                              	;
        uint32_t	reserved4                                                              	;
        uint32_t	reserved5                                                              	;
        uint32_t	tunnel_key[RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_KEY_NUMBER];
        uint32_t	key_0_mask                                                             	;
        uint8_t	key_0_offset                                                           	;
        uint32_t	reserved8                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_l3_indication                                                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved7                                                              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	inner_packet_offset                                                    	;
        uint32_t	tunnel_type                                                            	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved6                                                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved9[RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_RESERVED9_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT;

#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_KEY_READ_G(r, g, idx, i)                GROUP_MREAD_I_32((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 24, i, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_KEY_WRITE_G(v, g, idx, i)               GROUP_MWRITE_I_32((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 24, i, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_KEY_READ(r, p, i)                       MREAD_I_32((uint8_t *)(p) + 24, i, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_KEY_WRITE(v, p, i)                      MWRITE_I_32((uint8_t *)(p) + 24, i, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_MASK_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 40, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_MASK_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 40, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_MASK_READ(r, p)                          MREAD_32((uint8_t *)(p) + 40, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_MASK_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 40, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_TYPE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 44, 0, 4, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_TYPE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 44, 0, 4, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_TYPE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 44, 0, 4, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_TUNNEL_TYPE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 44, 0, 4, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_INNER_PACKET_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 45, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_INNER_PACKET_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 45, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_INNER_PACKET_OFFSET_READ(r, p)                 MREAD_8((uint8_t *)(p) + 45, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_INNER_PACKET_OFFSET_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 45, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_L2_L3_INDICATION_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 46, 4, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_L2_L3_INDICATION_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 46, 4, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_L2_L3_INDICATION_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 46, 4, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_L2_L3_INDICATION_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 46, 4, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_OFFSET_READ_G(r, g, idx)                 GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 47, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_OFFSET_WRITE_G(v, g, idx)                GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT) + 47, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_OFFSET_READ(r, p)                        MREAD_8((uint8_t *)(p) + 47, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_KEY_0_OFFSET_WRITE(v, p)                       MWRITE_8((uint8_t *)(p) + 47, (v))
/* <<<FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY_STRUCT */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_TUNNEL_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_F_OFFSET                                                     16
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_F_WIDTH                                                      2
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_OFFSET                                                       9
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_WORD_OFFSET                                                  2
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_F_OFFSET_MOD8                                                0
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_F_OFFSET_MOD16                                               0
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_F_OFFSET                                                     8
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_F_WIDTH                                                      8
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_OFFSET                                                       10
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_WORD_OFFSET                                                  2
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_F_OFFSET_MOD16                                               8
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_F_OFFSET                                                           0
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_F_WIDTH                                                            8
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_OFFSET                                                             11
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_WORD_OFFSET                                                        2
#define FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_F_OFFSET_MOD16                                                     0

/* >>>FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved1     	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved2     	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved3     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_info   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint8_t	egress_port   	;
        uint8_t	queue         	;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_reserved3   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lag_port                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint8_t	reservedSU1_egress_port 	;
        uint8_t	reservedSU1_queue       	;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_reserved3   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_phy_ext          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint32_t	egress_mode             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint8_t	reservedSU2_egress_port 	;
        uint8_t	reservedSU2_queue       	;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved1     	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved2     	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	queue         	;
        uint8_t	egress_port   	;
        uint32_t	egress_info   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	reserved3     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reservedSU1_queue       	;
        uint8_t	reservedSU1_egress_port 	;
        uint32_t	lag_port                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint32_t	reservedSU1_reserved3   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint8_t	reservedSU2_queue       	;
        uint8_t	reservedSU2_egress_port 	;
        uint32_t	egress_mode             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint32_t	egress_phy_ext          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint32_t	reservedSU2_reserved3   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT;

#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 9, 0, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 9, 0, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_INFO_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_LAG_PORT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 9, 0, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_LAG_PORT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 9, 0, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_LAG_PORT_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_LAG_PORT_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PHY_EXT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 9, 1, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PHY_EXT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 9, 1, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PHY_EXT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 9, 1, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PHY_EXT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 9, 1, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_MODE_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 9, 0, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_MODE_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 9, 0, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_MODE_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_MODE_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_READ_G(r, g, idx)             GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_WRITE_G(v, g, idx)            GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 10, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_READ(r, p)                    MREAD_8((uint8_t *)(p) + 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_EGRESS_PORT_WRITE(v, p)                   MWRITE_8((uint8_t *)(p) + 10, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_READ_G(r, g, idx)                   GROUP_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 11, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_WRITE_G(v, g, idx)                  GROUP_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT) + 11, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_READ(r, p)                          MREAD_8((uint8_t *)(p) + 11, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_QUEUE_WRITE(v, p)                         MWRITE_8((uint8_t *)(p) + 11, (v))
/* <<<FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY_STRUCT */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_ETH_XTM_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_IS_MCAST_F_OFFSET                                                        16
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_IS_MCAST_F_WIDTH                                                         1
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_IS_MCAST_OFFSET                                                          9
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_IS_MCAST_WORD_OFFSET                                                     2
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_IS_MCAST_F_OFFSET_MOD8                                                   0
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_IS_MCAST_F_OFFSET_MOD16                                                  0
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_F_OFFSET                                                       0
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_F_WIDTH                                                        16
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_OFFSET                                                         10
#define FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_WORD_OFFSET                                                    2

/* >>>FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved1 	;
        uint32_t	reserved2 	;
        uint32_t	reserved3 	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_mcast  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	chain_idx 	;
#else
        uint32_t	reserved1 	;
        uint32_t	reserved2 	;
        uint16_t	chain_idx 	;
        uint32_t	is_mcast  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3 	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_STRUCT;

#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_IS_MCAST_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_STRUCT) + 9, 0, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_IS_MCAST_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_STRUCT) + 9, 0, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_IS_MCAST_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_IS_MCAST_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_STRUCT) + 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_STRUCT) + 10, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_READ(r, p)                 MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_CHAIN_IDX_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 10, (v))
/* <<<FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY_STRUCT */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_WFD_NIC_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_IS_MCAST_F_OFFSET                                                        16
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_IS_MCAST_F_WIDTH                                                         1
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_IS_MCAST_OFFSET                                                          9
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_IS_MCAST_WORD_OFFSET                                                     2
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_IS_MCAST_F_OFFSET_MOD8                                                   0
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_IS_MCAST_F_OFFSET_MOD16                                                  0
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FR_ID_CHAIN_ID_F_OFFSET                                                  0
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FR_ID_CHAIN_ID_F_WIDTH                                                   16
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FR_ID_CHAIN_ID_OFFSET                                                    10
#define FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FR_ID_CHAIN_ID_WORD_OFFSET                                               2

/* >>>FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved1   	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved2   	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved3   	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_mcast    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	fr_id_chain_id	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_reserved3 	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_is_mcast  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_chain_id union */
        uint32_t	wifi_ssid             	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_chain_id union */
        uint32_t	flow_ring_id          	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_chain_id union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_reserved3 	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_is_mcast  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	chain_id              	; /* Member of fr_id_chain_id union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved1   	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved2   	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	fr_id_chain_id	; /* This is a field union */
        uint32_t	is_mcast    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3   	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	flow_ring_id          	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_chain_id union */
        uint32_t	wifi_ssid             	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_chain_id union */
        uint32_t	reserved4             	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_chain_id union */
        uint32_t	reservedSU1_is_mcast  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved3 	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint16_t	chain_id              	; /* Member of fr_id_chain_id union */
        uint32_t	reservedSU2_is_mcast  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved3 	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT;

#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_IS_MCAST_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT) + 9, 0, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_IS_MCAST_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT) + 9, 0, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_IS_MCAST_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_IS_MCAST_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FR_ID_CHAIN_ID_READ_G(r, g, idx)        GROUP_MREAD_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT) + 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FR_ID_CHAIN_ID_WRITE_G(v, g, idx)       GROUP_MWRITE_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT) + 10, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FR_ID_CHAIN_ID_READ(r, p)               MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FR_ID_CHAIN_ID_WRITE(v, p)              MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT) + 10, 2, 4, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT) + 10, 2, 4, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 10, 2, 4, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_WIFI_SSID_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 10, 2, 4, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT) + 10, 0, 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT) + 10, 0, 10, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_FLOW_RING_ID_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 10, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_CHAIN_ID_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT) + 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_CHAIN_ID_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT) + 10, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_CHAIN_ID_READ(r, p)                     MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_CHAIN_ID_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 10, (v))
/* <<<FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY_STRUCT */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_WFD_DHD_ENTRY */


/* >>>RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY */
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_F_OFFSET                                                    16
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_F_WIDTH                                                     1
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_OFFSET                                                      9
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_WORD_OFFSET                                                 2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_F_OFFSET_MOD8                                               0
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_F_OFFSET_MOD16                                              0
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_F_OFFSET                                                       14
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_F_WIDTH                                                        2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_OFFSET                                                         10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_WORD_OFFSET                                                    2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_F_OFFSET_MOD8                                                  6
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_F_OFFSET_MOD16                                                 14
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_F_OFFSET                                                       10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_F_WIDTH                                                        4
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_OFFSET                                                         10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_WORD_OFFSET                                                    2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_F_OFFSET_MOD8                                                  2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_F_OFFSET_MOD16                                                 10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_F_OFFSET                                                    0
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_F_WIDTH                                                     10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_OFFSET                                                      10
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_WORD_OFFSET                                                 2
#define FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_F_OFFSET_MOD16                                              0

/* >>>FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved1   	;
        uint32_t	reserved2   	;
        uint32_t	reserved3   	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	llcsnap_flag	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	radio_idx   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wifi_ssid   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow_ring_id	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved1   	;
        uint32_t	reserved2   	;
        uint32_t	flow_ring_id	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wifi_ssid   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	radio_idx   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	llcsnap_flag	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3   	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT;

#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT) + 9, 0, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT) + 9, 0, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 1, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_LLCSNAP_FLAG_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 1, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT) + 10, 6, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT) + 10, 6, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 10, 6, 2, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_RADIO_IDX_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 10, 6, 2, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT) + 10, 2, 4, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT) + 10, 2, 4, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 10, 2, 4, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_WIFI_SSID_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 10, 2, 4, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT) + 10, 0, 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT) + 10, 0, 10, (v))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 10, (r))
#define RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_FLOW_RING_ID_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 10, (v))
/* <<<FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY_STRUCT */

/* <<<RDD_FC_UCAST_FLOW_CONTEXT_RNR_DHD_ENTRY */


/* >>>RDD_LAYER3_HEADER */
#define LAYER3_HEADER_TRAFIC_CLASS_F_OFFSET                                                    24
#define LAYER3_HEADER_TRAFIC_CLASS_F_WIDTH                                                     8
#define LAYER3_HEADER_LAYER3_HEADER_OFFSET                                                     0
#define LAYER3_HEADER_TRAFIC_CLASS_OFFSET                                                      0
#define LAYER3_HEADER_TRAFIC_CLASS_WORD_OFFSET                                                 0
#define LAYER3_HEADER_TRAFIC_CLASS_F_OFFSET_MOD16                                              8
#define LAYER3_HEADER_TOS_F_OFFSET                                                             16
#define LAYER3_HEADER_TOS_F_WIDTH                                                              8
#define LAYER3_HEADER_TOS_OFFSET                                                               1
#define LAYER3_HEADER_TOS_WORD_OFFSET                                                          0
#define LAYER3_HEADER_TOS_F_OFFSET_MOD16                                                       0
#define LAYER3_HEADER_TOTAL_LENGTH_F_OFFSET                                                    0
#define LAYER3_HEADER_TOTAL_LENGTH_F_WIDTH                                                     16
#define LAYER3_HEADER_TOTAL_LENGTH_OFFSET                                                      2
#define LAYER3_HEADER_TOTAL_LENGTH_WORD_OFFSET                                                 0
#define LAYER3_HEADER_PAYLOAD_LENGTH_F_OFFSET                                                  16
#define LAYER3_HEADER_PAYLOAD_LENGTH_F_WIDTH                                                   16
#define LAYER3_HEADER_PAYLOAD_LENGTH_OFFSET                                                    4
#define LAYER3_HEADER_PAYLOAD_LENGTH_WORD_OFFSET                                               1
#define LAYER3_HEADER_FLAGS_F_OFFSET                                                           8
#define LAYER3_HEADER_FLAGS_F_WIDTH                                                            8
#define LAYER3_HEADER_FLAGS_OFFSET                                                             6
#define LAYER3_HEADER_FLAGS_WORD_OFFSET                                                        1
#define LAYER3_HEADER_FLAGS_F_OFFSET_MOD16                                                     8
#define LAYER3_HEADER_HOP_LIMIT_F_OFFSET                                                       0
#define LAYER3_HEADER_HOP_LIMIT_F_WIDTH                                                        8
#define LAYER3_HEADER_HOP_LIMIT_OFFSET                                                         7
#define LAYER3_HEADER_HOP_LIMIT_WORD_OFFSET                                                    1
#define LAYER3_HEADER_HOP_LIMIT_F_OFFSET_MOD16                                                 0
#define LAYER3_HEADER_TTL_F_OFFSET                                                             24
#define LAYER3_HEADER_TTL_F_WIDTH                                                              8
#define LAYER3_HEADER_TTL_OFFSET                                                               8
#define LAYER3_HEADER_TTL_WORD_OFFSET                                                          2
#define LAYER3_HEADER_TTL_F_OFFSET_MOD16                                                       8
#define LAYER3_HEADER_PROTOCOL_F_OFFSET                                                        16
#define LAYER3_HEADER_PROTOCOL_F_WIDTH                                                         8
#define LAYER3_HEADER_PROTOCOL_OFFSET                                                          9
#define LAYER3_HEADER_PROTOCOL_WORD_OFFSET                                                     2
#define LAYER3_HEADER_PROTOCOL_F_OFFSET_MOD16                                                  0
#define LAYER3_HEADER_IP_CHECKSUM_F_OFFSET                                                     0
#define LAYER3_HEADER_IP_CHECKSUM_F_WIDTH                                                      16
#define LAYER3_HEADER_IP_CHECKSUM_OFFSET                                                       10
#define LAYER3_HEADER_IP_CHECKSUM_WORD_OFFSET                                                  2
#define LAYER3_HEADER_SRC_IP_F_OFFSET                                                          0
#define LAYER3_HEADER_SRC_IP_F_WIDTH                                                           32
#define LAYER3_HEADER_SRC_IP_OFFSET                                                            12
#define LAYER3_HEADER_SRC_IP_WORD_OFFSET                                                       3
#define LAYER3_HEADER_DST_IP_F_OFFSET                                                          0
#define LAYER3_HEADER_DST_IP_F_WIDTH                                                           32
#define LAYER3_HEADER_DST_IP_OFFSET                                                            16
#define LAYER3_HEADER_DST_IP_WORD_OFFSET                                                       4

/* >>>LAYER3_HEADER_STRUCT */
typedef union
{
    uint32_t word_32[6];
    uint64_t dword_64[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	trafic_class  	;
        uint8_t	tos           	;
        uint16_t	total_length  	;
        uint16_t	payload_length	;
        uint8_t	flags         	;
        uint8_t	hop_limit     	;
        uint8_t	ttl           	;
        uint8_t	protocol      	;
        uint16_t	ip_checksum   	;
        uint32_t	src_ip        	;
        uint32_t	dst_ip        	;
        uint32_t	reserved      	;
#else
        uint16_t	total_length  	;
        uint8_t	tos           	;
        uint8_t	trafic_class  	;
        uint8_t	hop_limit     	;
        uint8_t	flags         	;
        uint16_t	payload_length	;
        uint16_t	ip_checksum   	;
        uint8_t	protocol      	;
        uint8_t	ttl           	;
        uint32_t	src_ip        	;
        uint32_t	dst_ip        	;
        uint32_t	reserved      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) LAYER3_HEADER_STRUCT;

#define RDD_LAYER3_HEADER_TRAFIC_CLASS_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT), (r))
#define RDD_LAYER3_HEADER_TRAFIC_CLASS_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT), (v))
#define RDD_LAYER3_HEADER_TRAFIC_CLASS_READ(r, p)                   MREAD_8((uint8_t *)(p), (r))
#define RDD_LAYER3_HEADER_TRAFIC_CLASS_WRITE(v, p)                  MWRITE_8((uint8_t *)(p), (v))
#define RDD_LAYER3_HEADER_TOS_READ_G(r, g, idx)                     GROUP_MREAD_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 1, (r))
#define RDD_LAYER3_HEADER_TOS_WRITE_G(v, g, idx)                    GROUP_MWRITE_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 1, (v))
#define RDD_LAYER3_HEADER_TOS_READ(r, p)                            MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_LAYER3_HEADER_TOS_WRITE(v, p)                           MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_LAYER3_HEADER_TOTAL_LENGTH_READ_G(r, g, idx)            GROUP_MREAD_16((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 2, (r))
#define RDD_LAYER3_HEADER_TOTAL_LENGTH_WRITE_G(v, g, idx)           GROUP_MWRITE_16((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 2, (v))
#define RDD_LAYER3_HEADER_TOTAL_LENGTH_READ(r, p)                   MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_LAYER3_HEADER_TOTAL_LENGTH_WRITE(v, p)                  MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_LAYER3_HEADER_PAYLOAD_LENGTH_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 4, (r))
#define RDD_LAYER3_HEADER_PAYLOAD_LENGTH_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 4, (v))
#define RDD_LAYER3_HEADER_PAYLOAD_LENGTH_READ(r, p)                 MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_LAYER3_HEADER_PAYLOAD_LENGTH_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_LAYER3_HEADER_FLAGS_READ_G(r, g, idx)                   GROUP_MREAD_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 6, (r))
#define RDD_LAYER3_HEADER_FLAGS_WRITE_G(v, g, idx)                  GROUP_MWRITE_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 6, (v))
#define RDD_LAYER3_HEADER_FLAGS_READ(r, p)                          MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_LAYER3_HEADER_FLAGS_WRITE(v, p)                         MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_LAYER3_HEADER_HOP_LIMIT_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 7, (r))
#define RDD_LAYER3_HEADER_HOP_LIMIT_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 7, (v))
#define RDD_LAYER3_HEADER_HOP_LIMIT_READ(r, p)                      MREAD_8((uint8_t *)(p) + 7, (r))
#define RDD_LAYER3_HEADER_HOP_LIMIT_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 7, (v))
#define RDD_LAYER3_HEADER_TTL_READ_G(r, g, idx)                     GROUP_MREAD_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 8, (r))
#define RDD_LAYER3_HEADER_TTL_WRITE_G(v, g, idx)                    GROUP_MWRITE_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 8, (v))
#define RDD_LAYER3_HEADER_TTL_READ(r, p)                            MREAD_8((uint8_t *)(p) + 8, (r))
#define RDD_LAYER3_HEADER_TTL_WRITE(v, p)                           MWRITE_8((uint8_t *)(p) + 8, (v))
#define RDD_LAYER3_HEADER_PROTOCOL_READ_G(r, g, idx)                GROUP_MREAD_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 9, (r))
#define RDD_LAYER3_HEADER_PROTOCOL_WRITE_G(v, g, idx)               GROUP_MWRITE_8((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 9, (v))
#define RDD_LAYER3_HEADER_PROTOCOL_READ(r, p)                       MREAD_8((uint8_t *)(p) + 9, (r))
#define RDD_LAYER3_HEADER_PROTOCOL_WRITE(v, p)                      MWRITE_8((uint8_t *)(p) + 9, (v))
#define RDD_LAYER3_HEADER_IP_CHECKSUM_READ_G(r, g, idx)             GROUP_MREAD_16((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 10, (r))
#define RDD_LAYER3_HEADER_IP_CHECKSUM_WRITE_G(v, g, idx)            GROUP_MWRITE_16((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 10, (v))
#define RDD_LAYER3_HEADER_IP_CHECKSUM_READ(r, p)                    MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_LAYER3_HEADER_IP_CHECKSUM_WRITE(v, p)                   MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_LAYER3_HEADER_SRC_IP_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 12, (r))
#define RDD_LAYER3_HEADER_SRC_IP_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 12, (v))
#define RDD_LAYER3_HEADER_SRC_IP_READ(r, p)                         MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_LAYER3_HEADER_SRC_IP_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_LAYER3_HEADER_DST_IP_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 16, (r))
#define RDD_LAYER3_HEADER_DST_IP_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(LAYER3_HEADER_STRUCT) + 16, (v))
#define RDD_LAYER3_HEADER_DST_IP_READ(r, p)                         MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_LAYER3_HEADER_DST_IP_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 16, (v))
/* <<<LAYER3_HEADER_STRUCT */

/* <<<RDD_LAYER3_HEADER */


/* >>>RDD_LAYER3_IPV6_HEADER */
#define LAYER3_IPV6_HEADER_VERSION_F_OFFSET                                                         28
#define LAYER3_IPV6_HEADER_VERSION_F_WIDTH                                                          4
#define LAYER3_IPV6_HEADER_LAYER3_IPV6_HEADER_OFFSET                                                0
#define LAYER3_IPV6_HEADER_VERSION_OFFSET                                                           0
#define LAYER3_IPV6_HEADER_VERSION_WORD_OFFSET                                                      0
#define LAYER3_IPV6_HEADER_VERSION_F_OFFSET_MOD8                                                    4
#define LAYER3_IPV6_HEADER_VERSION_F_OFFSET_MOD16                                                   12
#define LAYER3_IPV6_HEADER_TRAFIC_CLASS_F_OFFSET                                                    20
#define LAYER3_IPV6_HEADER_TRAFIC_CLASS_F_WIDTH                                                     8
#define LAYER3_IPV6_HEADER_TRAFIC_CLASS_OFFSET                                                      0
#define LAYER3_IPV6_HEADER_TRAFIC_CLASS_WORD_OFFSET                                                 0
#define LAYER3_IPV6_HEADER_TRAFIC_CLASS_F_OFFSET_MOD16                                              4
#define LAYER3_IPV6_HEADER_FLOW_LABEL_F_OFFSET                                                      0
#define LAYER3_IPV6_HEADER_FLOW_LABEL_F_WIDTH                                                       20
#define LAYER3_IPV6_HEADER_FLOW_LABEL_OFFSET                                                        0
#define LAYER3_IPV6_HEADER_FLOW_LABEL_WORD_OFFSET                                                   0
#define LAYER3_IPV6_HEADER_PAYLOAD_LENGTH_F_OFFSET                                                  16
#define LAYER3_IPV6_HEADER_PAYLOAD_LENGTH_F_WIDTH                                                   16
#define LAYER3_IPV6_HEADER_PAYLOAD_LENGTH_OFFSET                                                    4
#define LAYER3_IPV6_HEADER_PAYLOAD_LENGTH_WORD_OFFSET                                               1
#define LAYER3_IPV6_HEADER_NEXT_HEADER_F_OFFSET                                                     8
#define LAYER3_IPV6_HEADER_NEXT_HEADER_F_WIDTH                                                      8
#define LAYER3_IPV6_HEADER_NEXT_HEADER_OFFSET                                                       6
#define LAYER3_IPV6_HEADER_NEXT_HEADER_WORD_OFFSET                                                  1
#define LAYER3_IPV6_HEADER_NEXT_HEADER_F_OFFSET_MOD16                                               8
#define LAYER3_IPV6_HEADER_HOP_LIMIT_F_OFFSET                                                       0
#define LAYER3_IPV6_HEADER_HOP_LIMIT_F_WIDTH                                                        8
#define LAYER3_IPV6_HEADER_HOP_LIMIT_OFFSET                                                         7
#define LAYER3_IPV6_HEADER_HOP_LIMIT_WORD_OFFSET                                                    1
#define LAYER3_IPV6_HEADER_HOP_LIMIT_F_OFFSET_MOD16                                                 0
#define LAYER3_IPV6_HEADER_SRC_IP_OFFSET                                                            8
#define LAYER3_IPV6_HEADER_SRC_IP_WORD_OFFSET                                                       2
#define LAYER3_IPV6_HEADER_DST_IP_OFFSET                                                            24
#define LAYER3_IPV6_HEADER_DST_IP_WORD_OFFSET                                                       6

/* >>>LAYER3_IPV6_HEADER_STRUCT */
#define RDD_LAYER3_IPV6_HEADER_SRC_IP_NUMBER	4
#define RDD_LAYER3_IPV6_HEADER_DST_IP_NUMBER	4
typedef union
{
    uint32_t word_32[10];
    uint64_t dword_64[5];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	version                                        	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	trafic_class                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow_label                                     	:20	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	payload_length                                 	;
        uint8_t	next_header                                    	;
        uint8_t	hop_limit                                      	;
        uint32_t	src_ip[RDD_LAYER3_IPV6_HEADER_SRC_IP_NUMBER];
        uint32_t	dst_ip[RDD_LAYER3_IPV6_HEADER_DST_IP_NUMBER];
#else
        uint32_t	flow_label                                     	:20	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	trafic_class                                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	version                                        	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	hop_limit                                      	;
        uint8_t	next_header                                    	;
        uint16_t	payload_length                                 	;
        uint32_t	src_ip[RDD_LAYER3_IPV6_HEADER_SRC_IP_NUMBER];
        uint32_t	dst_ip[RDD_LAYER3_IPV6_HEADER_DST_IP_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) LAYER3_IPV6_HEADER_STRUCT;

#define RDD_LAYER3_IPV6_HEADER_VERSION_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT), 4, 4, (r))
#define RDD_LAYER3_IPV6_HEADER_VERSION_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT), 4, 4, (v))
#define RDD_LAYER3_IPV6_HEADER_VERSION_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 4, 4, (r))
#define RDD_LAYER3_IPV6_HEADER_VERSION_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 4, 4, (v))
#define RDD_LAYER3_IPV6_HEADER_TRAFIC_CLASS_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT), 4, 8, (r))
#define RDD_LAYER3_IPV6_HEADER_TRAFIC_CLASS_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT), 4, 8, (v))
#define RDD_LAYER3_IPV6_HEADER_TRAFIC_CLASS_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p), 4, 8, (r))
#define RDD_LAYER3_IPV6_HEADER_TRAFIC_CLASS_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p), 4, 8, (v))
#define RDD_LAYER3_IPV6_HEADER_FLOW_LABEL_READ_G(r, g, idx)              GROUP_FIELD_MREAD_32((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 0, 0, 20, (r))
#define RDD_LAYER3_IPV6_HEADER_FLOW_LABEL_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 0, 0, 20, (v))
#define RDD_LAYER3_IPV6_HEADER_FLOW_LABEL_READ(r, p)                     FIELD_MREAD_32((uint8_t *)(p) + 0, 0, 20, (r))
#define RDD_LAYER3_IPV6_HEADER_FLOW_LABEL_WRITE(v, p)                    FIELD_MWRITE_32((uint8_t *)(p) + 0, 0, 20, (v))
#define RDD_LAYER3_IPV6_HEADER_PAYLOAD_LENGTH_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 4, (r))
#define RDD_LAYER3_IPV6_HEADER_PAYLOAD_LENGTH_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 4, (v))
#define RDD_LAYER3_IPV6_HEADER_PAYLOAD_LENGTH_READ(r, p)                 MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_LAYER3_IPV6_HEADER_PAYLOAD_LENGTH_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_LAYER3_IPV6_HEADER_NEXT_HEADER_READ_G(r, g, idx)             GROUP_MREAD_8((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 6, (r))
#define RDD_LAYER3_IPV6_HEADER_NEXT_HEADER_WRITE_G(v, g, idx)            GROUP_MWRITE_8((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 6, (v))
#define RDD_LAYER3_IPV6_HEADER_NEXT_HEADER_READ(r, p)                    MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_LAYER3_IPV6_HEADER_NEXT_HEADER_WRITE(v, p)                   MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_LAYER3_IPV6_HEADER_HOP_LIMIT_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 7, (r))
#define RDD_LAYER3_IPV6_HEADER_HOP_LIMIT_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 7, (v))
#define RDD_LAYER3_IPV6_HEADER_HOP_LIMIT_READ(r, p)                      MREAD_8((uint8_t *)(p) + 7, (r))
#define RDD_LAYER3_IPV6_HEADER_HOP_LIMIT_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 7, (v))
#define RDD_LAYER3_IPV6_HEADER_SRC_IP_READ_G(r, g, idx, i)               GROUP_MREAD_I_32((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 8, i, (r))
#define RDD_LAYER3_IPV6_HEADER_SRC_IP_WRITE_G(v, g, idx, i)              GROUP_MWRITE_I_32((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 8, i, (v))
#define RDD_LAYER3_IPV6_HEADER_SRC_IP_READ(r, p, i)                      MREAD_I_32((uint8_t *)(p) + 8, i, (r))
#define RDD_LAYER3_IPV6_HEADER_SRC_IP_WRITE(v, p, i)                     MWRITE_I_32((uint8_t *)(p) + 8, i, (v))
#define RDD_LAYER3_IPV6_HEADER_DST_IP_READ_G(r, g, idx, i)               GROUP_MREAD_I_32((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 24, i, (r))
#define RDD_LAYER3_IPV6_HEADER_DST_IP_WRITE_G(v, g, idx, i)              GROUP_MWRITE_I_32((g), (idx)*sizeof(LAYER3_IPV6_HEADER_STRUCT) + 24, i, (v))
#define RDD_LAYER3_IPV6_HEADER_DST_IP_READ(r, p, i)                      MREAD_I_32((uint8_t *)(p) + 24, i, (r))
#define RDD_LAYER3_IPV6_HEADER_DST_IP_WRITE(v, p, i)                     MWRITE_I_32((uint8_t *)(p) + 24, i, (v))
/* <<<LAYER3_IPV6_HEADER_STRUCT */

/* <<<RDD_LAYER3_IPV6_HEADER */


/* >>>RDD_LAYER4_HEADER */
#define LAYER4_HEADER_SRC_PORT_F_OFFSET                                                        16
#define LAYER4_HEADER_SRC_PORT_F_WIDTH                                                         16
#define LAYER4_HEADER_LAYER4_HEADER_OFFSET                                                     0
#define LAYER4_HEADER_SRC_PORT_OFFSET                                                          0
#define LAYER4_HEADER_SRC_PORT_WORD_OFFSET                                                     0
#define LAYER4_HEADER_DST_PORT_F_OFFSET                                                        0
#define LAYER4_HEADER_DST_PORT_F_WIDTH                                                         16
#define LAYER4_HEADER_DST_PORT_OFFSET                                                          2
#define LAYER4_HEADER_DST_PORT_WORD_OFFSET                                                     0
#define LAYER4_HEADER_UDP_LITE_CHECKSUM_COVERAGE_F_OFFSET                                      16
#define LAYER4_HEADER_UDP_LITE_CHECKSUM_COVERAGE_F_WIDTH                                       16
#define LAYER4_HEADER_UDP_LITE_CHECKSUM_COVERAGE_OFFSET                                        4
#define LAYER4_HEADER_UDP_LITE_CHECKSUM_COVERAGE_WORD_OFFSET                                   1
#define LAYER4_HEADER_UDP_CHECKSUM_F_OFFSET                                                    0
#define LAYER4_HEADER_UDP_CHECKSUM_F_WIDTH                                                     16
#define LAYER4_HEADER_UDP_CHECKSUM_OFFSET                                                      6
#define LAYER4_HEADER_UDP_CHECKSUM_WORD_OFFSET                                                 1
#define LAYER4_HEADER_ACK_NUMBER_F_OFFSET                                                      0
#define LAYER4_HEADER_ACK_NUMBER_F_WIDTH                                                       32
#define LAYER4_HEADER_ACK_NUMBER_OFFSET                                                        8
#define LAYER4_HEADER_ACK_NUMBER_WORD_OFFSET                                                   2
#define LAYER4_HEADER_TCP_LENGTH_F_OFFSET                                                      28
#define LAYER4_HEADER_TCP_LENGTH_F_WIDTH                                                       4
#define LAYER4_HEADER_TCP_LENGTH_OFFSET                                                        12
#define LAYER4_HEADER_TCP_LENGTH_WORD_OFFSET                                                   3
#define LAYER4_HEADER_TCP_LENGTH_F_OFFSET_MOD8                                                 4
#define LAYER4_HEADER_TCP_LENGTH_F_OFFSET_MOD16                                                12
#define LAYER4_HEADER_TCP_FLAGS_F_OFFSET                                                       16
#define LAYER4_HEADER_TCP_FLAGS_F_WIDTH                                                        8
#define LAYER4_HEADER_TCP_FLAGS_OFFSET                                                         13
#define LAYER4_HEADER_TCP_FLAGS_WORD_OFFSET                                                    3
#define LAYER4_HEADER_TCP_FLAGS_F_OFFSET_MOD16                                                 0
#define LAYER4_HEADER_WINDOW_SIZE_F_OFFSET                                                     0
#define LAYER4_HEADER_WINDOW_SIZE_F_WIDTH                                                      16
#define LAYER4_HEADER_WINDOW_SIZE_OFFSET                                                       14
#define LAYER4_HEADER_WINDOW_SIZE_WORD_OFFSET                                                  3
#define LAYER4_HEADER_TCP_CHECKSUM_F_OFFSET                                                    16
#define LAYER4_HEADER_TCP_CHECKSUM_F_WIDTH                                                     16
#define LAYER4_HEADER_TCP_CHECKSUM_OFFSET                                                      16
#define LAYER4_HEADER_TCP_CHECKSUM_WORD_OFFSET                                                 4
#define LAYER4_HEADER_URGENT_POINTER_F_OFFSET                                                  0
#define LAYER4_HEADER_URGENT_POINTER_F_WIDTH                                                   16
#define LAYER4_HEADER_URGENT_POINTER_OFFSET                                                    18
#define LAYER4_HEADER_URGENT_POINTER_WORD_OFFSET                                               4

/* >>>LAYER4_HEADER_STRUCT */
typedef union
{
    uint32_t word_32[6];
    uint64_t dword_64[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	src_port                  	;
        uint16_t	dst_port                  	;
        uint16_t	udp_lite_checksum_coverage	;
        uint16_t	udp_checksum              	;
        uint32_t	ack_number                	;
        uint32_t	tcp_length                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	tcp_flags                 	;
        uint16_t	window_size               	;
        uint16_t	tcp_checksum              	;
        uint16_t	urgent_pointer            	;
        uint32_t	reserved                  	;
#else
        uint16_t	dst_port                  	;
        uint16_t	src_port                  	;
        uint16_t	udp_checksum              	;
        uint16_t	udp_lite_checksum_coverage	;
        uint32_t	ack_number                	;
        uint16_t	window_size               	;
        uint8_t	tcp_flags                 	;
        uint32_t	reserved1                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcp_length                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	urgent_pointer            	;
        uint16_t	tcp_checksum              	;
        uint32_t	reserved                  	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) LAYER4_HEADER_STRUCT;

#define RDD_LAYER4_HEADER_SRC_PORT_READ_G(r, g, idx)                            GROUP_MREAD_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT), (r))
#define RDD_LAYER4_HEADER_SRC_PORT_WRITE_G(v, g, idx)                           GROUP_MWRITE_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT), (v))
#define RDD_LAYER4_HEADER_SRC_PORT_READ(r, p)                                   MREAD_16((uint8_t *)(p), (r))
#define RDD_LAYER4_HEADER_SRC_PORT_WRITE(v, p)                                  MWRITE_16((uint8_t *)(p), (v))
#define RDD_LAYER4_HEADER_DST_PORT_READ_G(r, g, idx)                            GROUP_MREAD_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 2, (r))
#define RDD_LAYER4_HEADER_DST_PORT_WRITE_G(v, g, idx)                           GROUP_MWRITE_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 2, (v))
#define RDD_LAYER4_HEADER_DST_PORT_READ(r, p)                                   MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_LAYER4_HEADER_DST_PORT_WRITE(v, p)                                  MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_LAYER4_HEADER_UDP_LITE_CHECKSUM_COVERAGE_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 4, (r))
#define RDD_LAYER4_HEADER_UDP_LITE_CHECKSUM_COVERAGE_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 4, (v))
#define RDD_LAYER4_HEADER_UDP_LITE_CHECKSUM_COVERAGE_READ(r, p)                 MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_LAYER4_HEADER_UDP_LITE_CHECKSUM_COVERAGE_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_LAYER4_HEADER_UDP_CHECKSUM_READ_G(r, g, idx)                        GROUP_MREAD_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 6, (r))
#define RDD_LAYER4_HEADER_UDP_CHECKSUM_WRITE_G(v, g, idx)                       GROUP_MWRITE_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 6, (v))
#define RDD_LAYER4_HEADER_UDP_CHECKSUM_READ(r, p)                               MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_LAYER4_HEADER_UDP_CHECKSUM_WRITE(v, p)                              MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_LAYER4_HEADER_ACK_NUMBER_READ_G(r, g, idx)                          GROUP_MREAD_32((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 8, (r))
#define RDD_LAYER4_HEADER_ACK_NUMBER_WRITE_G(v, g, idx)                         GROUP_MWRITE_32((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 8, (v))
#define RDD_LAYER4_HEADER_ACK_NUMBER_READ(r, p)                                 MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_LAYER4_HEADER_ACK_NUMBER_WRITE(v, p)                                MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_LAYER4_HEADER_TCP_LENGTH_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 12, 4, 4, (r))
#define RDD_LAYER4_HEADER_TCP_LENGTH_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 12, 4, 4, (v))
#define RDD_LAYER4_HEADER_TCP_LENGTH_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 12, 4, 4, (r))
#define RDD_LAYER4_HEADER_TCP_LENGTH_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 12, 4, 4, (v))
#define RDD_LAYER4_HEADER_TCP_FLAGS_READ_G(r, g, idx)                           GROUP_MREAD_8((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 13, (r))
#define RDD_LAYER4_HEADER_TCP_FLAGS_WRITE_G(v, g, idx)                          GROUP_MWRITE_8((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 13, (v))
#define RDD_LAYER4_HEADER_TCP_FLAGS_READ(r, p)                                  MREAD_8((uint8_t *)(p) + 13, (r))
#define RDD_LAYER4_HEADER_TCP_FLAGS_WRITE(v, p)                                 MWRITE_8((uint8_t *)(p) + 13, (v))
#define RDD_LAYER4_HEADER_WINDOW_SIZE_READ_G(r, g, idx)                         GROUP_MREAD_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 14, (r))
#define RDD_LAYER4_HEADER_WINDOW_SIZE_WRITE_G(v, g, idx)                        GROUP_MWRITE_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 14, (v))
#define RDD_LAYER4_HEADER_WINDOW_SIZE_READ(r, p)                                MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_LAYER4_HEADER_WINDOW_SIZE_WRITE(v, p)                               MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_LAYER4_HEADER_TCP_CHECKSUM_READ_G(r, g, idx)                        GROUP_MREAD_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 16, (r))
#define RDD_LAYER4_HEADER_TCP_CHECKSUM_WRITE_G(v, g, idx)                       GROUP_MWRITE_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 16, (v))
#define RDD_LAYER4_HEADER_TCP_CHECKSUM_READ(r, p)                               MREAD_16((uint8_t *)(p) + 16, (r))
#define RDD_LAYER4_HEADER_TCP_CHECKSUM_WRITE(v, p)                              MWRITE_16((uint8_t *)(p) + 16, (v))
#define RDD_LAYER4_HEADER_URGENT_POINTER_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 18, (r))
#define RDD_LAYER4_HEADER_URGENT_POINTER_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(LAYER4_HEADER_STRUCT) + 18, (v))
#define RDD_LAYER4_HEADER_URGENT_POINTER_READ(r, p)                             MREAD_16((uint8_t *)(p) + 18, (r))
#define RDD_LAYER4_HEADER_URGENT_POINTER_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 18, (v))
/* <<<LAYER4_HEADER_STRUCT */

/* <<<RDD_LAYER4_HEADER */


/* >>>RDD_LAYER3_PSEUDO_HEADER */
#define LAYER3_PSEUDO_HEADER_SRC_IP_F_OFFSET                                                          0
#define LAYER3_PSEUDO_HEADER_SRC_IP_F_WIDTH                                                           32
#define LAYER3_PSEUDO_HEADER_LAYER3_PSEUDO_HEADER_OFFSET                                              0
#define LAYER3_PSEUDO_HEADER_SRC_IP_OFFSET                                                            0
#define LAYER3_PSEUDO_HEADER_SRC_IP_WORD_OFFSET                                                       0
#define LAYER3_PSEUDO_HEADER_DST_IP_F_OFFSET                                                          0
#define LAYER3_PSEUDO_HEADER_DST_IP_F_WIDTH                                                           32
#define LAYER3_PSEUDO_HEADER_DST_IP_OFFSET                                                            4
#define LAYER3_PSEUDO_HEADER_DST_IP_WORD_OFFSET                                                       1
#define LAYER3_PSEUDO_HEADER_PROTOCOL_F_OFFSET                                                        16
#define LAYER3_PSEUDO_HEADER_PROTOCOL_F_WIDTH                                                         16
#define LAYER3_PSEUDO_HEADER_PROTOCOL_OFFSET                                                          8
#define LAYER3_PSEUDO_HEADER_PROTOCOL_WORD_OFFSET                                                     2
#define LAYER3_PSEUDO_HEADER_LENGTH_F_OFFSET                                                          0
#define LAYER3_PSEUDO_HEADER_LENGTH_F_WIDTH                                                           16
#define LAYER3_PSEUDO_HEADER_LENGTH_OFFSET                                                            10
#define LAYER3_PSEUDO_HEADER_LENGTH_WORD_OFFSET                                                       2
#define LAYER3_PSEUDO_HEADER_PAD_F_OFFSET                                                             0
#define LAYER3_PSEUDO_HEADER_PAD_F_WIDTH                                                              32
#define LAYER3_PSEUDO_HEADER_PAD_OFFSET                                                               12
#define LAYER3_PSEUDO_HEADER_PAD_WORD_OFFSET                                                          3

/* >>>LAYER3_PSEUDO_HEADER_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	src_ip    	;
        uint32_t	dst_ip    	;
        uint16_t	protocol  	;
        uint16_t	length    	;
        uint32_t	pad       	;
#else
        uint32_t	src_ip    	;
        uint32_t	dst_ip    	;
        uint16_t	length    	;
        uint16_t	protocol  	;
        uint32_t	pad       	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) LAYER3_PSEUDO_HEADER_STRUCT;

#define RDD_LAYER3_PSEUDO_HEADER_SRC_IP_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(LAYER3_PSEUDO_HEADER_STRUCT), (r))
#define RDD_LAYER3_PSEUDO_HEADER_SRC_IP_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(LAYER3_PSEUDO_HEADER_STRUCT), (v))
#define RDD_LAYER3_PSEUDO_HEADER_SRC_IP_READ(r, p)                   MREAD_32((uint8_t *)(p), (r))
#define RDD_LAYER3_PSEUDO_HEADER_SRC_IP_WRITE(v, p)                  MWRITE_32((uint8_t *)(p), (v))
#define RDD_LAYER3_PSEUDO_HEADER_DST_IP_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(LAYER3_PSEUDO_HEADER_STRUCT) + 4, (r))
#define RDD_LAYER3_PSEUDO_HEADER_DST_IP_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(LAYER3_PSEUDO_HEADER_STRUCT) + 4, (v))
#define RDD_LAYER3_PSEUDO_HEADER_DST_IP_READ(r, p)                   MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_LAYER3_PSEUDO_HEADER_DST_IP_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_LAYER3_PSEUDO_HEADER_PROTOCOL_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(LAYER3_PSEUDO_HEADER_STRUCT) + 8, (r))
#define RDD_LAYER3_PSEUDO_HEADER_PROTOCOL_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(LAYER3_PSEUDO_HEADER_STRUCT) + 8, (v))
#define RDD_LAYER3_PSEUDO_HEADER_PROTOCOL_READ(r, p)                 MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_LAYER3_PSEUDO_HEADER_PROTOCOL_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_LAYER3_PSEUDO_HEADER_LENGTH_READ_G(r, g, idx)            GROUP_MREAD_16((g), (idx)*sizeof(LAYER3_PSEUDO_HEADER_STRUCT) + 10, (r))
#define RDD_LAYER3_PSEUDO_HEADER_LENGTH_WRITE_G(v, g, idx)           GROUP_MWRITE_16((g), (idx)*sizeof(LAYER3_PSEUDO_HEADER_STRUCT) + 10, (v))
#define RDD_LAYER3_PSEUDO_HEADER_LENGTH_READ(r, p)                   MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_LAYER3_PSEUDO_HEADER_LENGTH_WRITE(v, p)                  MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_LAYER3_PSEUDO_HEADER_PAD_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(LAYER3_PSEUDO_HEADER_STRUCT) + 12, (r))
#define RDD_LAYER3_PSEUDO_HEADER_PAD_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(LAYER3_PSEUDO_HEADER_STRUCT) + 12, (v))
#define RDD_LAYER3_PSEUDO_HEADER_PAD_READ(r, p)                      MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_LAYER3_PSEUDO_HEADER_PAD_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 12, (v))
/* <<<LAYER3_PSEUDO_HEADER_STRUCT */

/* <<<RDD_LAYER3_PSEUDO_HEADER */


/* >>>RDD_LAYER3_IPV6_PSEUDO_HEADER */
#define LAYER3_IPV6_PSEUDO_HEADER_LAYER3_IPV6_PSEUDO_HEADER_OFFSET                                         0
#define LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_OFFSET                                                            0
#define LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_WORD_OFFSET                                                       0
#define LAYER3_IPV6_PSEUDO_HEADER_DST_IP_OFFSET                                                            16
#define LAYER3_IPV6_PSEUDO_HEADER_DST_IP_WORD_OFFSET                                                       4
#define LAYER3_IPV6_PSEUDO_HEADER_LENGTH_F_OFFSET                                                          0
#define LAYER3_IPV6_PSEUDO_HEADER_LENGTH_F_WIDTH                                                           32
#define LAYER3_IPV6_PSEUDO_HEADER_LENGTH_OFFSET                                                            32
#define LAYER3_IPV6_PSEUDO_HEADER_LENGTH_WORD_OFFSET                                                       8
#define LAYER3_IPV6_PSEUDO_HEADER_PROTOCOL_F_OFFSET                                                        0
#define LAYER3_IPV6_PSEUDO_HEADER_PROTOCOL_F_WIDTH                                                         32
#define LAYER3_IPV6_PSEUDO_HEADER_PROTOCOL_OFFSET                                                          36
#define LAYER3_IPV6_PSEUDO_HEADER_PROTOCOL_WORD_OFFSET                                                     9

/* >>>LAYER3_IPV6_PSEUDO_HEADER_STRUCT */
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_NUMBER	4
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_DST_IP_NUMBER	4
typedef union
{
    uint32_t word_32[10];
    uint64_t dword_64[5];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	src_ip[RDD_LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_NUMBER];
        uint32_t	dst_ip[RDD_LAYER3_IPV6_PSEUDO_HEADER_DST_IP_NUMBER];
        uint32_t	length                                                	;
        uint32_t	protocol                                              	;
#else
        uint32_t	src_ip[RDD_LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_NUMBER];
        uint32_t	dst_ip[RDD_LAYER3_IPV6_PSEUDO_HEADER_DST_IP_NUMBER];
        uint32_t	length                                                	;
        uint32_t	protocol                                              	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) LAYER3_IPV6_PSEUDO_HEADER_STRUCT;

#define RDD_LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_READ_G(r, g, idx, i)         GROUP_MREAD_I_32((g), (idx)*sizeof(LAYER3_IPV6_PSEUDO_HEADER_STRUCT), i, (r))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_WRITE_G(v, g, idx, i)        GROUP_MWRITE_I_32((g), (idx)*sizeof(LAYER3_IPV6_PSEUDO_HEADER_STRUCT), i, (v))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_READ(r, p, i)                MREAD_I_32((uint8_t *)(p), i, (r))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_SRC_IP_WRITE(v, p, i)               MWRITE_I_32((uint8_t *)(p), i, (v))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_DST_IP_READ_G(r, g, idx, i)         GROUP_MREAD_I_32((g), (idx)*sizeof(LAYER3_IPV6_PSEUDO_HEADER_STRUCT) + 16, i, (r))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_DST_IP_WRITE_G(v, g, idx, i)        GROUP_MWRITE_I_32((g), (idx)*sizeof(LAYER3_IPV6_PSEUDO_HEADER_STRUCT) + 16, i, (v))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_DST_IP_READ(r, p, i)                MREAD_I_32((uint8_t *)(p) + 16, i, (r))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_DST_IP_WRITE(v, p, i)               MWRITE_I_32((uint8_t *)(p) + 16, i, (v))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_LENGTH_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(LAYER3_IPV6_PSEUDO_HEADER_STRUCT) + 32, (r))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_LENGTH_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(LAYER3_IPV6_PSEUDO_HEADER_STRUCT) + 32, (v))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_LENGTH_READ(r, p)                   MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_LENGTH_WRITE(v, p)                  MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_PROTOCOL_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(LAYER3_IPV6_PSEUDO_HEADER_STRUCT) + 36, (r))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_PROTOCOL_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(LAYER3_IPV6_PSEUDO_HEADER_STRUCT) + 36, (v))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_PROTOCOL_READ(r, p)                 MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_LAYER3_IPV6_PSEUDO_HEADER_PROTOCOL_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 36, (v))
/* <<<LAYER3_IPV6_PSEUDO_HEADER_STRUCT */

/* <<<RDD_LAYER3_IPV6_PSEUDO_HEADER */


/* >>>RDD_PROCESSING_MCAST_PARAMS_ENTRY */
#define PROCESSING_MCAST_PARAMS_ENTRY_PACKET_BUFFER_PTR_F_OFFSET                                               0
#define PROCESSING_MCAST_PARAMS_ENTRY_PACKET_BUFFER_PTR_F_WIDTH                                                32
#define PROCESSING_MCAST_PARAMS_ENTRY_PROCESSING_MCAST_PARAMS_ENTRY_OFFSET                                     0
#define PROCESSING_MCAST_PARAMS_ENTRY_PACKET_BUFFER_PTR_OFFSET                                                 0
#define PROCESSING_MCAST_PARAMS_ENTRY_PACKET_BUFFER_PTR_WORD_OFFSET                                            0
#define PROCESSING_MCAST_PARAMS_ENTRY_TX_PD_PTR_F_OFFSET                                                       0
#define PROCESSING_MCAST_PARAMS_ENTRY_TX_PD_PTR_F_WIDTH                                                        32
#define PROCESSING_MCAST_PARAMS_ENTRY_TX_PD_PTR_OFFSET                                                         4
#define PROCESSING_MCAST_PARAMS_ENTRY_TX_PD_PTR_WORD_OFFSET                                                    1
#define PROCESSING_MCAST_PARAMS_ENTRY_INGRESS_VPORT_F_OFFSET                                                   0
#define PROCESSING_MCAST_PARAMS_ENTRY_INGRESS_VPORT_F_WIDTH                                                    32
#define PROCESSING_MCAST_PARAMS_ENTRY_INGRESS_VPORT_OFFSET                                                     8
#define PROCESSING_MCAST_PARAMS_ENTRY_INGRESS_VPORT_WORD_OFFSET                                                2
#define PROCESSING_MCAST_PARAMS_ENTRY_TASK_ID_F_OFFSET                                                         16
#define PROCESSING_MCAST_PARAMS_ENTRY_TASK_ID_F_WIDTH                                                          16
#define PROCESSING_MCAST_PARAMS_ENTRY_TASK_ID_OFFSET                                                           12
#define PROCESSING_MCAST_PARAMS_ENTRY_TASK_ID_WORD_OFFSET                                                      3
#define PROCESSING_MCAST_PARAMS_ENTRY_XPE_FUNC_ADDR_F_OFFSET                                                   0
#define PROCESSING_MCAST_PARAMS_ENTRY_XPE_FUNC_ADDR_F_WIDTH                                                    16
#define PROCESSING_MCAST_PARAMS_ENTRY_XPE_FUNC_ADDR_OFFSET                                                     14
#define PROCESSING_MCAST_PARAMS_ENTRY_XPE_FUNC_ADDR_WORD_OFFSET                                                3

/* >>>PROCESSING_MCAST_PARAMS_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	packet_buffer_ptr	;
        uint32_t	tx_pd_ptr        	;
        uint32_t	ingress_vport    	;
        uint16_t	task_id          	;
        uint16_t	xpe_func_addr    	;
#else
        uint32_t	packet_buffer_ptr	;
        uint32_t	tx_pd_ptr        	;
        uint32_t	ingress_vport    	;
        uint16_t	xpe_func_addr    	;
        uint16_t	task_id          	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PROCESSING_MCAST_PARAMS_ENTRY_STRUCT;

#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_PACKET_BUFFER_PTR_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PROCESSING_MCAST_PARAMS_ENTRY_STRUCT), (r))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_PACKET_BUFFER_PTR_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PROCESSING_MCAST_PARAMS_ENTRY_STRUCT), (v))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_PACKET_BUFFER_PTR_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_PACKET_BUFFER_PTR_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_TX_PD_PTR_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(PROCESSING_MCAST_PARAMS_ENTRY_STRUCT) + 4, (r))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_TX_PD_PTR_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(PROCESSING_MCAST_PARAMS_ENTRY_STRUCT) + 4, (v))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_TX_PD_PTR_READ(r, p)                         MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_TX_PD_PTR_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_INGRESS_VPORT_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(PROCESSING_MCAST_PARAMS_ENTRY_STRUCT) + 8, (r))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_INGRESS_VPORT_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(PROCESSING_MCAST_PARAMS_ENTRY_STRUCT) + 8, (v))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_INGRESS_VPORT_READ(r, p)                     MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_INGRESS_VPORT_WRITE(v, p)                    MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_TASK_ID_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(PROCESSING_MCAST_PARAMS_ENTRY_STRUCT) + 12, (r))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_TASK_ID_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(PROCESSING_MCAST_PARAMS_ENTRY_STRUCT) + 12, (v))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_TASK_ID_READ(r, p)                           MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_TASK_ID_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_XPE_FUNC_ADDR_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(PROCESSING_MCAST_PARAMS_ENTRY_STRUCT) + 14, (r))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_XPE_FUNC_ADDR_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(PROCESSING_MCAST_PARAMS_ENTRY_STRUCT) + 14, (v))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_XPE_FUNC_ADDR_READ(r, p)                     MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_PROCESSING_MCAST_PARAMS_ENTRY_XPE_FUNC_ADDR_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 14, (v))
/* <<<PROCESSING_MCAST_PARAMS_ENTRY_STRUCT */

/* <<<RDD_PROCESSING_MCAST_PARAMS_ENTRY */


/* >>>RDD_IPTV_PORT_CONTEXT_ENTRY */
#define IPTV_PORT_CONTEXT_ENTRY_STATE_F_OFFSET                                                           31
#define IPTV_PORT_CONTEXT_ENTRY_STATE_F_WIDTH                                                            1
#define IPTV_PORT_CONTEXT_ENTRY_IPTV_PORT_CONTEXT_ENTRY_OFFSET                                           0
#define IPTV_PORT_CONTEXT_ENTRY_STATE_OFFSET                                                             0
#define IPTV_PORT_CONTEXT_ENTRY_STATE_WORD_OFFSET                                                        0
#define IPTV_PORT_CONTEXT_ENTRY_STATE_F_OFFSET_MOD8                                                      7
#define IPTV_PORT_CONTEXT_ENTRY_STATE_F_OFFSET_MOD16                                                     15
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_F_OFFSET                                                13
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_F_WIDTH                                                 5
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_OFFSET                                                  1
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_WORD_OFFSET                                             0
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_F_OFFSET_MOD8                                           5
#define IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_F_OFFSET_MOD16                                          13
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_F_OFFSET                                                         12
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_F_WIDTH                                                          1
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_OFFSET                                                           2
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_WORD_OFFSET                                                      0
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_F_OFFSET_MOD8                                                    4
#define IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_F_OFFSET_MOD16                                                   12
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_F_OFFSET                                          5
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_F_WIDTH                                           7
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_OFFSET                                            2
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_WORD_OFFSET                                       0
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_F_OFFSET_MOD8                                     5
#define IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_F_OFFSET_MOD16                                    5
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_F_OFFSET                                                       0
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_F_WIDTH                                                        5
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_OFFSET                                                         3
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_WORD_OFFSET                                                    0
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_F_OFFSET_MOD8                                                  0
#define IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_F_OFFSET_MOD16                                                 0
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET                                               20
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_WIDTH                                                1
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_OFFSET                                                 5
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WORD_OFFSET                                            1
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET_MOD8                                          4
#define IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_F_OFFSET_MOD16                                         4
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET                                                      18
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_F_WIDTH                                                       2
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_OFFSET                                                        5
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_WORD_OFFSET                                                   1
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET_MOD8                                                 2
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_F_OFFSET_MOD16                                                2
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_F_OFFSET                                                     16
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_F_WIDTH                                                      2
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_OFFSET                                                       5
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_WORD_OFFSET                                                  1
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_F_OFFSET_MOD8                                                0
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_F_OFFSET_MOD16                                               0
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_F_OFFSET                                                     8
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_F_WIDTH                                                      8
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_OFFSET                                                       6
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_WORD_OFFSET                                                  1
#define IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_F_OFFSET_MOD16                                               8
#define IPTV_PORT_CONTEXT_ENTRY_QUEUE_F_OFFSET                                                           0
#define IPTV_PORT_CONTEXT_ENTRY_QUEUE_F_WIDTH                                                            8
#define IPTV_PORT_CONTEXT_ENTRY_QUEUE_OFFSET                                                             7
#define IPTV_PORT_CONTEXT_ENTRY_QUEUE_WORD_OFFSET                                                        1
#define IPTV_PORT_CONTEXT_ENTRY_QUEUE_F_OFFSET_MOD16                                                     0

/* >>>IPTV_PORT_CONTEXT_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	state                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0             	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_header_length      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_push               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_command_list_length	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_offset             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved1             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_wred_high_prio     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_phy            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_info           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint8_t	egress_port           	;
        uint8_t	queue                 	;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_reserved1           	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_is_wred_high_prio   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_egress_phy          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lag_port                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint8_t	reservedSU1_egress_port         	;
        uint8_t	reservedSU1_queue               	;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_reserved1           	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_is_wred_high_prio   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_egress_phy          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_phy_ext                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint32_t	egress_mode                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint8_t	reservedSU2_egress_port         	;
        uint8_t	reservedSU2_queue               	;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	l2_offset             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_command_list_length	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_push               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_header_length      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0             	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	state                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	queue                 	;
        uint8_t	egress_port           	;
        uint32_t	egress_info           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	egress_phy            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_wred_high_prio     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reservedSU1_queue               	;
        uint8_t	reservedSU1_egress_port         	;
        uint32_t	lag_port                        	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint32_t	reservedSU1_egress_phy          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_is_wred_high_prio   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved1           	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint8_t	reservedSU2_queue               	;
        uint8_t	reservedSU2_egress_port         	;
        uint32_t	egress_mode                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint32_t	egress_phy_ext                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of egress_info union */
        uint32_t	reservedSU2_egress_phy          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_is_wred_high_prio   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved1           	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) IPTV_PORT_CONTEXT_ENTRY_STRUCT;

#define RDD_IPTV_PORT_CONTEXT_ENTRY_STATE_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT), 7, 1, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_STATE_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT), 7, 1, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_STATE_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_STATE_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_READ_G(r, g, idx)                GROUP_FIELD_MREAD_32((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 0, 13, 5, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 0, 13, 5, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_READ(r, p)                       FIELD_MREAD_32((uint8_t *)(p) + 0, 13, 5, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_HEADER_LENGTH_WRITE(v, p)                      FIELD_MWRITE_32((uint8_t *)(p) + 0, 13, 5, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 2, 4, 1, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 2, 4, 1, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 2, 4, 1, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_PUSH_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 2, 4, 1, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 2, 5, 7, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 2, 5, 7, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 2, 5, 7, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_COMMAND_LIST_LENGTH_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 2, 5, 7, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 3, 0, 5, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 3, 0, 5, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 5, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_L2_OFFSET_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 5, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 4, 1, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 4, 1, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 5, 4, 1, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_IS_WRED_HIGH_PRIO_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 5, 4, 1, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 2, 2, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 2, 2, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 5, 2, 2, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 5, 2, 2, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 0, 2, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 0, 2, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 5, 0, 2, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_INFO_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 5, 0, 2, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_LAG_PORT_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 0, 2, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_LAG_PORT_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 0, 2, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_LAG_PORT_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 5, 0, 2, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_LAG_PORT_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 5, 0, 2, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_EXT_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 1, 1, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_EXT_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 1, 1, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_EXT_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 5, 1, 1, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PHY_EXT_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 5, 1, 1, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_MODE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 0, 1, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_MODE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 5, 0, 1, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_MODE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 5, 0, 1, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_MODE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 5, 0, 1, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_READ_G(r, g, idx)                     GROUP_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 6, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_WRITE_G(v, g, idx)                    GROUP_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 6, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_READ(r, p)                            MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_EGRESS_PORT_WRITE(v, p)                           MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_QUEUE_READ_G(r, g, idx)                           GROUP_MREAD_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 7, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_QUEUE_WRITE_G(v, g, idx)                          GROUP_MWRITE_8((g), (idx)*sizeof(IPTV_PORT_CONTEXT_ENTRY_STRUCT) + 7, (v))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_QUEUE_READ(r, p)                                  MREAD_8((uint8_t *)(p) + 7, (r))
#define RDD_IPTV_PORT_CONTEXT_ENTRY_QUEUE_WRITE(v, p)                                 MWRITE_8((uint8_t *)(p) + 7, (v))
/* <<<IPTV_PORT_CONTEXT_ENTRY_STRUCT */

/* <<<RDD_IPTV_PORT_CONTEXT_ENTRY */


/* >>>RDD_IPTV_DDR_PORT_BUFFER_ENTRY */
#define IPTV_DDR_PORT_BUFFER_ENTRY_IPTV_DDR_PORT_BUFFER_ENTRY_OFFSET                                        0
#define IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_OFFSET                                                            0
#define IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_WORD_OFFSET                                                       0
#define IPTV_DDR_PORT_BUFFER_ENTRY_HEADER_F_OFFSET_MOD16                                                    0
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_F_OFFSET                                                       0
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_F_WIDTH                                                        32
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_OFFSET                                                         56
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_0_WORD_OFFSET                                                    14
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_F_OFFSET                                                       0
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_F_WIDTH                                                        32
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_OFFSET                                                         60
#define IPTV_DDR_PORT_BUFFER_ENTRY_CONTEXT_1_WORD_OFFSET                                                    15
/* <<<RDD_IPTV_DDR_PORT_BUFFER_ENTRY */


/* >>>RDD_FPM_GLOBAL_CFG */
#define FPM_GLOBAL_CFG_FPM_BASE_LOW_F_OFFSET                                                    0
#define FPM_GLOBAL_CFG_FPM_BASE_LOW_F_WIDTH                                                     32
#define FPM_GLOBAL_CFG_FPM_GLOBAL_CFG_OFFSET                                                    0
#define FPM_GLOBAL_CFG_FPM_BASE_LOW_OFFSET                                                      0
#define FPM_GLOBAL_CFG_FPM_BASE_LOW_WORD_OFFSET                                                 0
#define FPM_GLOBAL_CFG_FPM_BASE_HIGH_F_OFFSET                                                   0
#define FPM_GLOBAL_CFG_FPM_BASE_HIGH_F_WIDTH                                                    32
#define FPM_GLOBAL_CFG_FPM_BASE_HIGH_OFFSET                                                     4
#define FPM_GLOBAL_CFG_FPM_BASE_HIGH_WORD_OFFSET                                                1
#define FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_F_OFFSET                                                  16
#define FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_F_WIDTH                                                   16
#define FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_OFFSET                                                    8
#define FPM_GLOBAL_CFG_FPM_TOKEN_SIZE_WORD_OFFSET                                               2
#define FPM_GLOBAL_CFG_FPM_TOKEN_SHIFT_F_OFFSET                                                 8
#define FPM_GLOBAL_CFG_FPM_TOKEN_SHIFT_F_WIDTH                                                  8
#define FPM_GLOBAL_CFG_FPM_TOKEN_SHIFT_OFFSET                                                   10
#define FPM_GLOBAL_CFG_FPM_TOKEN_SHIFT_WORD_OFFSET                                              2
#define FPM_GLOBAL_CFG_FPM_TOKEN_SHIFT_F_OFFSET_MOD16                                           8
#define FPM_GLOBAL_CFG_FPM_TOKEN_ADD_SHIFT_F_OFFSET                                             0
#define FPM_GLOBAL_CFG_FPM_TOKEN_ADD_SHIFT_F_WIDTH                                              8
#define FPM_GLOBAL_CFG_FPM_TOKEN_ADD_SHIFT_OFFSET                                               11
#define FPM_GLOBAL_CFG_FPM_TOKEN_ADD_SHIFT_WORD_OFFSET                                          2
#define FPM_GLOBAL_CFG_FPM_TOKEN_ADD_SHIFT_F_OFFSET_MOD16                                       0
#define FPM_GLOBAL_CFG_FPM_TOKEN_INV_MANT_F_OFFSET                                              16
#define FPM_GLOBAL_CFG_FPM_TOKEN_INV_MANT_F_WIDTH                                               16
#define FPM_GLOBAL_CFG_FPM_TOKEN_INV_MANT_OFFSET                                                12
#define FPM_GLOBAL_CFG_FPM_TOKEN_INV_MANT_WORD_OFFSET                                           3
#define FPM_GLOBAL_CFG_FPM_TOKEN_INV_EXP_F_OFFSET                                               8
#define FPM_GLOBAL_CFG_FPM_TOKEN_INV_EXP_F_WIDTH                                                8
#define FPM_GLOBAL_CFG_FPM_TOKEN_INV_EXP_OFFSET                                                 14
#define FPM_GLOBAL_CFG_FPM_TOKEN_INV_EXP_WORD_OFFSET                                            3
#define FPM_GLOBAL_CFG_FPM_TOKEN_INV_EXP_F_OFFSET_MOD16                                         8
/* <<<RDD_FPM_GLOBAL_CFG */


/* >>>RDD_TC_TO_QUEUE_8 */
#define TC_TO_QUEUE_8_TC_TO_QUEUE_8_OFFSET                                                     0
#define TC_TO_QUEUE_8_QUEUE_OFFSET_OFFSET                                                      0
#define TC_TO_QUEUE_8_QUEUE_OFFSET_WORD_OFFSET                                                 0
#define TC_TO_QUEUE_8_QUEUE_OFFSET_F_OFFSET_MOD16                                              0

/* >>>TC_TO_QUEUE_8_STRUCT */
#define RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_NUMBER	8
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	queue_offset[RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_NUMBER];
#else
        uint8_t	queue_offset[RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) TC_TO_QUEUE_8_STRUCT;

#define RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_READ_G(r, g, idx, i)       GROUP_MREAD_I_8((g), (idx)*sizeof(TC_TO_QUEUE_8_STRUCT), i, (r))
#define RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8((g), (idx)*sizeof(TC_TO_QUEUE_8_STRUCT), i, (v))
#define RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_READ(r, p, i)              MREAD_I_8((uint8_t *)(p), i, (r))
#define RDD_TC_TO_QUEUE_8_QUEUE_OFFSET_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)(p), i, (v))
/* <<<TC_TO_QUEUE_8_STRUCT */

/* <<<RDD_TC_TO_QUEUE_8 */


/* >>>RDD_FLUSH_CFG_ENABLE_ENTRY */
#define FLUSH_CFG_ENABLE_ENTRY_ENABLE_FW_F_OFFSET                                                       8
#define FLUSH_CFG_ENABLE_ENTRY_ENABLE_FW_F_WIDTH                                                        8
#define FLUSH_CFG_ENABLE_ENTRY_FLUSH_CFG_ENABLE_ENTRY_OFFSET                                            0
#define FLUSH_CFG_ENABLE_ENTRY_ENABLE_FW_OFFSET                                                         0
#define FLUSH_CFG_ENABLE_ENTRY_ENABLE_FW_WORD_OFFSET                                                    0
#define FLUSH_CFG_ENABLE_ENTRY_ENABLE_FW_F_OFFSET_MOD16                                                 8
#define FLUSH_CFG_ENABLE_ENTRY_ENABLE_CPU_F_OFFSET                                                      0
#define FLUSH_CFG_ENABLE_ENTRY_ENABLE_CPU_F_WIDTH                                                       8
#define FLUSH_CFG_ENABLE_ENTRY_ENABLE_CPU_OFFSET                                                        1
#define FLUSH_CFG_ENABLE_ENTRY_ENABLE_CPU_WORD_OFFSET                                                   0
#define FLUSH_CFG_ENABLE_ENTRY_ENABLE_CPU_F_OFFSET_MOD16                                                0
/* <<<RDD_FLUSH_CFG_ENABLE_ENTRY */


/* >>>RDD_FLUSH_CFG_ENTRY */
#define FLUSH_CFG_ENTRY_ENABLE_F_OFFSET                                                          31
#define FLUSH_CFG_ENTRY_ENABLE_F_WIDTH                                                           1
#define FLUSH_CFG_ENTRY_FLUSH_CFG_ENTRY_OFFSET                                                   0
#define FLUSH_CFG_ENTRY_ENABLE_OFFSET                                                            0
#define FLUSH_CFG_ENTRY_ENABLE_WORD_OFFSET                                                       0
#define FLUSH_CFG_ENTRY_ENABLE_F_OFFSET_MOD8                                                     7
#define FLUSH_CFG_ENTRY_ENABLE_F_OFFSET_MOD16                                                    15
#define FLUSH_CFG_ENTRY_DRAIN_Q_F_OFFSET                                                         30
#define FLUSH_CFG_ENTRY_DRAIN_Q_F_WIDTH                                                          1
#define FLUSH_CFG_ENTRY_DRAIN_Q_OFFSET                                                           0
#define FLUSH_CFG_ENTRY_DRAIN_Q_WORD_OFFSET                                                      0
#define FLUSH_CFG_ENTRY_DRAIN_Q_F_OFFSET_MOD8                                                    6
#define FLUSH_CFG_ENTRY_DRAIN_Q_F_OFFSET_MOD16                                                   14
#define FLUSH_CFG_ENTRY_HW_FLUSH_EN_F_OFFSET                                                     29
#define FLUSH_CFG_ENTRY_HW_FLUSH_EN_F_WIDTH                                                      1
#define FLUSH_CFG_ENTRY_HW_FLUSH_EN_OFFSET                                                       0
#define FLUSH_CFG_ENTRY_HW_FLUSH_EN_WORD_OFFSET                                                  0
#define FLUSH_CFG_ENTRY_HW_FLUSH_EN_F_OFFSET_MOD8                                                5
#define FLUSH_CFG_ENTRY_HW_FLUSH_EN_F_OFFSET_MOD16                                               13
#define FLUSH_CFG_ENTRY_BUFFER_CONG_MGT_F_OFFSET                                                 28
#define FLUSH_CFG_ENTRY_BUFFER_CONG_MGT_F_WIDTH                                                  1
#define FLUSH_CFG_ENTRY_BUFFER_CONG_MGT_OFFSET                                                   0
#define FLUSH_CFG_ENTRY_BUFFER_CONG_MGT_WORD_OFFSET                                              0
#define FLUSH_CFG_ENTRY_BUFFER_CONG_MGT_F_OFFSET_MOD8                                            4
#define FLUSH_CFG_ENTRY_BUFFER_CONG_MGT_F_OFFSET_MOD16                                           12
#define FLUSH_CFG_ENTRY_PD_NUM_F_OFFSET                                                          16
#define FLUSH_CFG_ENTRY_PD_NUM_F_WIDTH                                                           8
#define FLUSH_CFG_ENTRY_PD_NUM_OFFSET                                                            1
#define FLUSH_CFG_ENTRY_PD_NUM_WORD_OFFSET                                                       0
#define FLUSH_CFG_ENTRY_PD_NUM_F_OFFSET_MOD16                                                    0
#define FLUSH_CFG_ENTRY_FLUSH_AGGR_F_OFFSET                                                      8
#define FLUSH_CFG_ENTRY_FLUSH_AGGR_F_WIDTH                                                       8
#define FLUSH_CFG_ENTRY_FLUSH_AGGR_OFFSET                                                        2
#define FLUSH_CFG_ENTRY_FLUSH_AGGR_WORD_OFFSET                                                   0
#define FLUSH_CFG_ENTRY_FLUSH_AGGR_F_OFFSET_MOD16                                                8
#define FLUSH_CFG_ENTRY_QM_QUEUE_F_OFFSET                                                        0
#define FLUSH_CFG_ENTRY_QM_QUEUE_F_WIDTH                                                         8
#define FLUSH_CFG_ENTRY_QM_QUEUE_OFFSET                                                          3
#define FLUSH_CFG_ENTRY_QM_QUEUE_WORD_OFFSET                                                     0
#define FLUSH_CFG_ENTRY_QM_QUEUE_F_OFFSET_MOD16                                                  0
#define FLUSH_CFG_ENTRY_UG_COUNTER_ADDRESS_F_OFFSET                                              0
#define FLUSH_CFG_ENTRY_UG_COUNTER_ADDRESS_F_WIDTH                                               32
#define FLUSH_CFG_ENTRY_UG_COUNTER_ADDRESS_OFFSET                                                4
#define FLUSH_CFG_ENTRY_UG_COUNTER_ADDRESS_WORD_OFFSET                                           1
#define FLUSH_CFG_ENTRY_UG_THRESHOLD_LOW_F_OFFSET                                                0
#define FLUSH_CFG_ENTRY_UG_THRESHOLD_LOW_F_WIDTH                                                 16
#define FLUSH_CFG_ENTRY_UG_THRESHOLD_LOW_OFFSET                                                  10
#define FLUSH_CFG_ENTRY_UG_THRESHOLD_LOW_WORD_OFFSET                                             2
#define FLUSH_CFG_ENTRY_UG_COUNTER_F_OFFSET                                                      0
#define FLUSH_CFG_ENTRY_UG_COUNTER_F_WIDTH                                                       32
#define FLUSH_CFG_ENTRY_UG_COUNTER_OFFSET                                                        12
#define FLUSH_CFG_ENTRY_UG_COUNTER_WORD_OFFSET                                                   3
/* <<<RDD_FLUSH_CFG_ENTRY */


/* >>>RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY */
#define TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_F_OFFSET                                                           0
#define TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_F_WIDTH                                                            32
#define TX_ABS_RECYCLE_COUNTERS_ENTRY_TX_ABS_RECYCLE_COUNTERS_ENTRY_OFFSET                                     0
#define TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_OFFSET                                                             0
#define TX_ABS_RECYCLE_COUNTERS_ENTRY_TOTAL_WORD_OFFSET                                                        0
#define TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_F_OFFSET                                                          0
#define TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_F_WIDTH                                                           32
#define TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_OFFSET                                                            4
#define TX_ABS_RECYCLE_COUNTERS_ENTRY_SPDSVC_WORD_OFFSET                                                       1
/* <<<RDD_TX_ABS_RECYCLE_COUNTERS_ENTRY */


/* >>>RDD_CRC_CMD_ADDRESS */
#define CRC_CMD_ADDRESS_REPLY_ADDRESS_F_OFFSET                                                   16
#define CRC_CMD_ADDRESS_REPLY_ADDRESS_F_WIDTH                                                    16
#define CRC_CMD_ADDRESS_CRC_CMD_ADDRESS_OFFSET                                                   0
#define CRC_CMD_ADDRESS_REPLY_ADDRESS_OFFSET                                                     0
#define CRC_CMD_ADDRESS_REPLY_ADDRESS_WORD_OFFSET                                                0
#define CRC_CMD_ADDRESS_SRC_ADDRESS_F_OFFSET                                                     0
#define CRC_CMD_ADDRESS_SRC_ADDRESS_F_WIDTH                                                      16
#define CRC_CMD_ADDRESS_SRC_ADDRESS_OFFSET                                                       2
#define CRC_CMD_ADDRESS_SRC_ADDRESS_WORD_OFFSET                                                  0

/* >>>CRC_CMD_ADDRESS_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	reply_address	;
        uint16_t	src_address  	;
#else
        uint16_t	src_address  	;
        uint16_t	reply_address	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) CRC_CMD_ADDRESS_STRUCT;

#define RDD_CRC_CMD_ADDRESS_REPLY_ADDRESS_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(CRC_CMD_ADDRESS_STRUCT), (r))
#define RDD_CRC_CMD_ADDRESS_REPLY_ADDRESS_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(CRC_CMD_ADDRESS_STRUCT), (v))
#define RDD_CRC_CMD_ADDRESS_REPLY_ADDRESS_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_CRC_CMD_ADDRESS_REPLY_ADDRESS_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
#define RDD_CRC_CMD_ADDRESS_SRC_ADDRESS_READ_G(r, g, idx)            GROUP_MREAD_16((g), (idx)*sizeof(CRC_CMD_ADDRESS_STRUCT) + 2, (r))
#define RDD_CRC_CMD_ADDRESS_SRC_ADDRESS_WRITE_G(v, g, idx)           GROUP_MWRITE_16((g), (idx)*sizeof(CRC_CMD_ADDRESS_STRUCT) + 2, (v))
#define RDD_CRC_CMD_ADDRESS_SRC_ADDRESS_READ(r, p)                   MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_CRC_CMD_ADDRESS_SRC_ADDRESS_WRITE(v, p)                  MWRITE_16((uint8_t *)(p) + 2, (v))
/* <<<CRC_CMD_ADDRESS_STRUCT */

/* <<<RDD_CRC_CMD_ADDRESS */


/* >>>RDD_GENERAL_TIMER_ENTRY */
#define GENERAL_TIMER_ENTRY_COUNTER_F_OFFSET                                                         16
#define GENERAL_TIMER_ENTRY_COUNTER_F_WIDTH                                                          16
#define GENERAL_TIMER_ENTRY_GENERAL_TIMER_ENTRY_OFFSET                                               0
#define GENERAL_TIMER_ENTRY_COUNTER_OFFSET                                                           0
#define GENERAL_TIMER_ENTRY_COUNTER_WORD_OFFSET                                                      0
#define GENERAL_TIMER_ENTRY_TIMEOUT_F_OFFSET                                                         0
#define GENERAL_TIMER_ENTRY_TIMEOUT_F_WIDTH                                                          16
#define GENERAL_TIMER_ENTRY_TIMEOUT_OFFSET                                                           2
#define GENERAL_TIMER_ENTRY_TIMEOUT_WORD_OFFSET                                                      0
#define GENERAL_TIMER_ENTRY_FUNC_PTR_F_OFFSET                                                        16
#define GENERAL_TIMER_ENTRY_FUNC_PTR_F_WIDTH                                                         16
#define GENERAL_TIMER_ENTRY_FUNC_PTR_OFFSET                                                          4
#define GENERAL_TIMER_ENTRY_FUNC_PTR_WORD_OFFSET                                                     1
#define GENERAL_TIMER_ENTRY_ENABLE_F_OFFSET                                                          8
#define GENERAL_TIMER_ENTRY_ENABLE_F_WIDTH                                                           8
#define GENERAL_TIMER_ENTRY_ENABLE_OFFSET                                                            6
#define GENERAL_TIMER_ENTRY_ENABLE_WORD_OFFSET                                                       1
#define GENERAL_TIMER_ENTRY_ENABLE_F_OFFSET_MOD16                                                    8
/* <<<RDD_GENERAL_TIMER_ENTRY */


/* >>>RDD_BBH_QUEUE_DESCRIPTOR */
#define BBH_QUEUE_DESCRIPTOR_WAN_TYPE_UNION_F_OFFSET                                                  26
#define BBH_QUEUE_DESCRIPTOR_WAN_TYPE_UNION_F_WIDTH                                                   6
#define BBH_QUEUE_DESCRIPTOR_WAN_TYPE_UNION_OFFSET                                                    0
#define BBH_QUEUE_DESCRIPTOR_WAN_TYPE_UNION_WORD_OFFSET                                               0
#define BBH_QUEUE_DESCRIPTOR_WAN_TYPE_UNION_F_OFFSET_MOD8                                             2
#define BBH_QUEUE_DESCRIPTOR_WAN_TYPE_UNION_F_OFFSET_MOD16                                            10
#define BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_F_OFFSET                                                    25
#define BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_F_WIDTH                                                     1
#define BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_OFFSET                                                      0
#define BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_WORD_OFFSET                                                 0
#define BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_F_OFFSET_MOD8                                               1
#define BBH_QUEUE_DESCRIPTOR_MIRRORING_EN_F_OFFSET_MOD16                                              9
#define BBH_QUEUE_DESCRIPTOR_PRIORITY_F_OFFSET                                                        24
#define BBH_QUEUE_DESCRIPTOR_PRIORITY_F_WIDTH                                                         1
#define BBH_QUEUE_DESCRIPTOR_PRIORITY_OFFSET                                                          0
#define BBH_QUEUE_DESCRIPTOR_PRIORITY_WORD_OFFSET                                                     0
#define BBH_QUEUE_DESCRIPTOR_PRIORITY_F_OFFSET_MOD8                                                   0
#define BBH_QUEUE_DESCRIPTOR_PRIORITY_F_OFFSET_MOD16                                                  8
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_F_OFFSET                                                 17
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_F_WIDTH                                                  7
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_OFFSET                                                   1
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_WORD_OFFSET                                              0
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_F_OFFSET_MOD8                                            1
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_INDEX_F_OFFSET_MOD16                                           1
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_F_OFFSET                                                  16
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_F_WIDTH                                                   1
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_OFFSET                                                    1
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_WORD_OFFSET                                               0
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_F_OFFSET_MOD8                                             0
#define BBH_QUEUE_DESCRIPTOR_SCHEDULER_TYPE_F_OFFSET_MOD16                                            0
#define BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_F_OFFSET                                                  8
#define BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_F_WIDTH                                                   8
#define BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_OFFSET                                                    2
#define BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_WORD_OFFSET                                               0
#define BBH_QUEUE_DESCRIPTOR_BB_DESTINATION_F_OFFSET_MOD16                                            8
#define BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_F_OFFSET                                                 0
#define BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_F_WIDTH                                                  8
#define BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_OFFSET                                                   3
#define BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_WORD_OFFSET                                              0
#define BBH_QUEUE_DESCRIPTOR_INGRESS_COUNTER_F_OFFSET_MOD16                                           0
/* <<<RDD_BBH_QUEUE_DESCRIPTOR */


/* >>>RDD_CPU_TX_DESCRIPTOR */
#define CPU_TX_DESCRIPTOR_VALID_F_OFFSET                                                           31
#define CPU_TX_DESCRIPTOR_VALID_F_WIDTH                                                            1
#define CPU_TX_DESCRIPTOR_CPU_TX_DESCRIPTOR_OFFSET                                                 0
#define CPU_TX_DESCRIPTOR_VALID_OFFSET                                                             0
#define CPU_TX_DESCRIPTOR_VALID_WORD_OFFSET                                                        0
#define CPU_TX_DESCRIPTOR_VALID_F_OFFSET_MOD8                                                      7
#define CPU_TX_DESCRIPTOR_VALID_F_OFFSET_MOD16                                                     15
#define CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   22
#define CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     0
#define CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             6
#define CPU_TX_DESCRIPTOR_ABS_DATA1_F_OFFSET                                                       0
#define CPU_TX_DESCRIPTOR_ABS_DATA1_F_WIDTH                                                        22
#define CPU_TX_DESCRIPTOR_ABS_DATA1_OFFSET                                                         0
#define CPU_TX_DESCRIPTOR_ABS_DATA1_WORD_OFFSET                                                    0
#define CPU_TX_DESCRIPTOR_ABS_DATA0_F_OFFSET                                                       14
#define CPU_TX_DESCRIPTOR_ABS_DATA0_F_WIDTH                                                        18
#define CPU_TX_DESCRIPTOR_ABS_DATA0_OFFSET                                                         4
#define CPU_TX_DESCRIPTOR_ABS_DATA0_WORD_OFFSET                                                    1
#define CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   0
#define CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define CPU_TX_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     6
#define CPU_TX_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                1
#define CPU_TX_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             0
#define CPU_TX_DESCRIPTOR_DROP_F_OFFSET                                                            31
#define CPU_TX_DESCRIPTOR_DROP_F_WIDTH                                                             1
#define CPU_TX_DESCRIPTOR_DROP_OFFSET                                                              8
#define CPU_TX_DESCRIPTOR_DROP_WORD_OFFSET                                                         2
#define CPU_TX_DESCRIPTOR_DROP_F_OFFSET_MOD8                                                       7
#define CPU_TX_DESCRIPTOR_DROP_F_OFFSET_MOD16                                                      15
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET                                                    30
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_F_WIDTH                                                     1
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_OFFSET                                                      8
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_WORD_OFFSET                                                 2
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD8                                               6
#define CPU_TX_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD16                                              14
#define CPU_TX_DESCRIPTOR_COLOR_F_OFFSET                                                           29
#define CPU_TX_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define CPU_TX_DESCRIPTOR_COLOR_OFFSET                                                             8
#define CPU_TX_DESCRIPTOR_COLOR_WORD_OFFSET                                                        2
#define CPU_TX_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      5
#define CPU_TX_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     13
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET                                                  28
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_WIDTH                                                   1
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_OFFSET                                                    8
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WORD_OFFSET                                               2
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET_MOD8                                             4
#define CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_F_OFFSET_MOD16                                            12
#define CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET                                                       27
#define CPU_TX_DESCRIPTOR_FLAG_1588_F_WIDTH                                                        1
#define CPU_TX_DESCRIPTOR_FLAG_1588_OFFSET                                                         8
#define CPU_TX_DESCRIPTOR_FLAG_1588_WORD_OFFSET                                                    2
#define CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD8                                                  3
#define CPU_TX_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD16                                                 11
#define CPU_TX_DESCRIPTOR_LAN_F_OFFSET                                                             26
#define CPU_TX_DESCRIPTOR_LAN_F_WIDTH                                                              1
#define CPU_TX_DESCRIPTOR_LAN_OFFSET                                                               8
#define CPU_TX_DESCRIPTOR_LAN_WORD_OFFSET                                                          2
#define CPU_TX_DESCRIPTOR_LAN_F_OFFSET_MOD8                                                        2
#define CPU_TX_DESCRIPTOR_LAN_F_OFFSET_MOD16                                                       10
#define CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_F_OFFSET                                      18
#define CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_F_WIDTH                                       8
#define CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_OFFSET                                        8
#define CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_WORD_OFFSET                                   2
#define CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_F_OFFSET_MOD16                                2
#define CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_F_OFFSET                                             0
#define CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_F_WIDTH                                              18
#define CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_OFFSET                                               8
#define CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_WORD_OFFSET                                          2
#define CPU_TX_DESCRIPTOR_AGG_PD_F_OFFSET                                                          31
#define CPU_TX_DESCRIPTOR_AGG_PD_F_WIDTH                                                           1
#define CPU_TX_DESCRIPTOR_AGG_PD_OFFSET                                                            12
#define CPU_TX_DESCRIPTOR_AGG_PD_WORD_OFFSET                                                       3
#define CPU_TX_DESCRIPTOR_AGG_PD_F_OFFSET_MOD8                                                     7
#define CPU_TX_DESCRIPTOR_AGG_PD_F_OFFSET_MOD16                                                    15
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    30
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      12
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 3
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               6
#define CPU_TX_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              14
#define CPU_TX_DESCRIPTOR_ABS_F_OFFSET                                                             29
#define CPU_TX_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define CPU_TX_DESCRIPTOR_ABS_OFFSET                                                               12
#define CPU_TX_DESCRIPTOR_ABS_WORD_OFFSET                                                          3
#define CPU_TX_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        5
#define CPU_TX_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       13
#define CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_F_OFFSET                                         18
#define CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_F_WIDTH                                          11
#define CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_OFFSET                                           12
#define CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WORD_OFFSET                                      3
#define CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_F_OFFSET_MOD16                                   2
#define CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_F_OFFSET                                        0
#define CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_F_WIDTH                                         18
#define CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_OFFSET                                          12
#define CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WORD_OFFSET                                     3

/* >>>CPU_TX_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_flow_source_port_union	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	bn1_or_abs2_or_1588 	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_do_not_recycle    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_flow_source_port          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	ssid                          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	fpm_fallback                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	sbpm_copy                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	bn1_first                     	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_do_not_recycle    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_vport                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	flow_or_port_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	_ssid                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	_fpm_fallback                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	_sbpm_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	abs2                          	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_do_not_recycle    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_wan_flow_source_port_union	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	data_1588                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sop                           	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
        uint32_t	bn0_first                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs1                          	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
        uint32_t	abs0                          	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	abs_data1           	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q       	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_length       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs_data0           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	bn1_or_abs2_or_1588 	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	wan_flow_source_port_union	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	lan                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	do_not_recycle      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drop                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn1_first                     	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	sbpm_copy                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	fpm_fallback                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	ssid                          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	wan_flow_source_port          	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	reservedSU1_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_do_not_recycle    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	abs2                          	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	_sbpm_copy                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	_fpm_fallback                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	_ssid                         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	flow_or_port_id               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	is_vport                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of wan_flow_source_port_union union */
        uint32_t	reservedSU2_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_do_not_recycle    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	data_1588                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs2_or_1588 union */
        uint32_t	reservedSU3_wan_flow_source_port_union	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_do_not_recycle    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	buffer_number_0_or_abs_0	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	payload_offset_or_abs_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	abs                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg_pd              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn0_first                     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
        uint32_t	sop                           	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
        uint32_t	reservedSU1_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	abs0                          	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of buffer_number_0_or_abs_0 union */
        uint32_t	abs1                          	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_or_abs_1 union */
        uint32_t	reservedSU2_abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CPU_TX_DESCRIPTOR_STRUCT;

#define RDD_CPU_TX_DESCRIPTOR_VALID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_VALID_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_VALID_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT), 6, 9, (r))
#define RDD_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT), 6, 9, (v))
#define RDD_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p), 6, 9, (r))
#define RDD_CPU_TX_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p), 6, 9, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA1_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 0, 0, 22, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA1_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 0, 0, 22, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA1_READ(r, p)                            FIELD_MREAD_32((uint8_t *)(p) + 0, 0, 22, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA1_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)(p) + 0, 0, 22, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA0_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 4, 14, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA0_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 4, 14, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA0_READ(r, p)                            FIELD_MREAD_32((uint8_t *)(p) + 4, 14, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS_DATA0_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)(p) + 4, 14, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 6, 0, 14, (r))
#define RDD_CPU_TX_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 6, 0, 14, (v))
#define RDD_CPU_TX_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_CPU_TX_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
#define RDD_CPU_TX_DESCRIPTOR_DROP_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 7, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 7, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_DROP_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_DROP_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 6, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 6, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 5, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 5, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_COLOR_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 8, 5, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_COLOR_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 8, 5, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 4, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 4, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 8, 4, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_DO_NOT_RECYCLE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 8, 4, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 3, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 3, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_FLAG_1588_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 8, 3, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_FLAG_1588_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 8, 3, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_LAN_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 2, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 2, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_LAN_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 8, 2, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_LAN_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 8, 2, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_READ_G(r, g, idx)    GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 2, 8, (r))
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_WRITE_G(v, g, idx)   GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 2, 8, (v))
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_READ(r, p)           FIELD_MREAD_16((uint8_t *)(p) + 8, 2, 8, (r))
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_UNION_WRITE(v, p)          FIELD_MWRITE_16((uint8_t *)(p) + 8, 2, 8, (v))
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 2, 8, (r))
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 2, 8, (v))
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 8, 2, 8, (r))
#define RDD_CPU_TX_DESCRIPTOR_WAN_FLOW_SOURCE_PORT_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 8, 2, 8, (v))
#define RDD_CPU_TX_DESCRIPTOR_IS_VPORT_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 1, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_IS_VPORT_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 1, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_IS_VPORT_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 8, 1, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_IS_VPORT_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 8, 1, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 2, 7, (r))
#define RDD_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 2, 7, (v))
#define RDD_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 8, 2, 7, (r))
#define RDD_CPU_TX_DESCRIPTOR_FLOW_OR_PORT_ID_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 8, 2, 7, (v))
#define RDD_CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_READ_G(r, g, idx)           GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 0, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 0, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_READ(r, p)                  FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_BN1_OR_ABS2_OR_1588_WRITE(v, p)                 FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_SSID_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 14, 4, (r))
#define RDD_CPU_TX_DESCRIPTOR_SSID_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 14, 4, (v))
#define RDD_CPU_TX_DESCRIPTOR_SSID_READ(r, p)                                 FIELD_MREAD_32((uint8_t *)(p) + 8, 14, 4, (r))
#define RDD_CPU_TX_DESCRIPTOR_SSID_WRITE(v, p)                                FIELD_MWRITE_32((uint8_t *)(p) + 8, 14, 4, (v))
#define RDD_CPU_TX_DESCRIPTOR_FPM_FALLBACK_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 5, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_FPM_FALLBACK_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 5, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_FPM_FALLBACK_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 10, 5, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_FPM_FALLBACK_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 10, 5, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_SBPM_COPY_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 4, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_SBPM_COPY_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 4, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_SBPM_COPY_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 10, 4, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_SBPM_COPY_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 10, 4, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_BN1_FIRST_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 0, 12, (r))
#define RDD_CPU_TX_DESCRIPTOR_BN1_FIRST_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 0, 12, (v))
#define RDD_CPU_TX_DESCRIPTOR_BN1_FIRST_READ(r, p)                            FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 12, (r))
#define RDD_CPU_TX_DESCRIPTOR_BN1_FIRST_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 12, (v))
#define RDD_CPU_TX_DESCRIPTOR__SSID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 14, 4, (r))
#define RDD_CPU_TX_DESCRIPTOR__SSID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 14, 4, (v))
#define RDD_CPU_TX_DESCRIPTOR__SSID_READ(r, p)                                FIELD_MREAD_32((uint8_t *)(p) + 8, 14, 4, (r))
#define RDD_CPU_TX_DESCRIPTOR__SSID_WRITE(v, p)                               FIELD_MWRITE_32((uint8_t *)(p) + 8, 14, 4, (v))
#define RDD_CPU_TX_DESCRIPTOR__FPM_FALLBACK_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 5, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR__FPM_FALLBACK_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 5, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR__FPM_FALLBACK_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 10, 5, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR__FPM_FALLBACK_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 10, 5, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR__SBPM_COPY_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 4, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR__SBPM_COPY_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 4, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR__SBPM_COPY_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 10, 4, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR__SBPM_COPY_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 10, 4, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS2_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 0, 12, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS2_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 10, 0, 12, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS2_READ(r, p)                                 FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 12, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS2_WRITE(v, p)                                FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 12, (v))
#define RDD_CPU_TX_DESCRIPTOR_DATA_1588_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 0, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_DATA_1588_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 8, 0, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_DATA_1588_READ(r, p)                            FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_DATA_1588_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 7, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 7, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_AGG_PD_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_AGG_PD_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 6, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 6, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 5, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 5, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 12, 5, 1, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 12, 5, 1, (v))
#define RDD_CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_READ_G(r, g, idx)       GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 2, 11, (r))
#define RDD_CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WRITE_G(v, g, idx)      GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 2, 11, (v))
#define RDD_CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_READ(r, p)              FIELD_MREAD_16((uint8_t *)(p) + 12, 2, 11, (r))
#define RDD_CPU_TX_DESCRIPTOR_PAYLOAD_OFFSET_OR_ABS_1_WRITE(v, p)             FIELD_MWRITE_16((uint8_t *)(p) + 12, 2, 11, (v))
#define RDD_CPU_TX_DESCRIPTOR_SOP_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 2, 11, (r))
#define RDD_CPU_TX_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 2, 11, (v))
#define RDD_CPU_TX_DESCRIPTOR_SOP_READ(r, p)                                  FIELD_MREAD_16((uint8_t *)(p) + 12, 2, 11, (r))
#define RDD_CPU_TX_DESCRIPTOR_SOP_WRITE(v, p)                                 FIELD_MWRITE_16((uint8_t *)(p) + 12, 2, 11, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS1_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 2, 11, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS1_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 2, 11, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS1_READ(r, p)                                 FIELD_MREAD_16((uint8_t *)(p) + 12, 2, 11, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS1_WRITE(v, p)                                FIELD_MWRITE_16((uint8_t *)(p) + 12, 2, 11, (v))
#define RDD_CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_READ_G(r, g, idx)      GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 0, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WRITE_G(v, g, idx)     GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 0, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_READ(r, p)             FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_BUFFER_NUMBER_0_OR_ABS_0_WRITE(v, p)            FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 0, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 0, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_BN0_FIRST_READ(r, p)                            FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS0_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 0, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS0_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_TX_DESCRIPTOR_STRUCT) + 12, 0, 18, (v))
#define RDD_CPU_TX_DESCRIPTOR_ABS0_READ(r, p)                                 FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 18, (r))
#define RDD_CPU_TX_DESCRIPTOR_ABS0_WRITE(v, p)                                FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 18, (v))
/* <<<CPU_TX_DESCRIPTOR_STRUCT */

/* <<<RDD_CPU_TX_DESCRIPTOR */


/* >>>RDD_TX_EXCEPTION_ENTRY */
#define TX_EXCEPTION_ENTRY_DBG_STAT_EN_F_OFFSET                                                     1
#define TX_EXCEPTION_ENTRY_DBG_STAT_EN_F_WIDTH                                                      1
#define TX_EXCEPTION_ENTRY_DBG_STAT_EN_OFFSET                                                       0
#define TX_EXCEPTION_ENTRY_DBG_STAT_EN_WORD_OFFSET                                                  0
#define TX_EXCEPTION_ENTRY_DBG_STAT_EN_F_OFFSET_MOD8                                                1
#define TX_EXCEPTION_ENTRY_DBG_STAT_EN_F_OFFSET_MOD16                                               1
#define TX_EXCEPTION_ENTRY_VLAN_CNTR_EN_F_OFFSET                                                    0
#define TX_EXCEPTION_ENTRY_VLAN_CNTR_EN_F_WIDTH                                                     1
#define TX_EXCEPTION_ENTRY_VLAN_CNTR_EN_OFFSET                                                      0
#define TX_EXCEPTION_ENTRY_VLAN_CNTR_EN_WORD_OFFSET                                                 0
#define TX_EXCEPTION_ENTRY_VLAN_CNTR_EN_F_OFFSET_MOD8                                               0
#define TX_EXCEPTION_ENTRY_VLAN_CNTR_EN_F_OFFSET_MOD16                                              0
/* <<<RDD_TX_EXCEPTION_ENTRY */


/* >>>RDD_EMAC_FLOW_CTRL_BUDGET_ENTRY */
#define EMAC_FLOW_CTRL_BUDGET_ENTRY_BUDGET_F_OFFSET                                                          0
#define EMAC_FLOW_CTRL_BUDGET_ENTRY_BUDGET_F_WIDTH                                                           32
#define EMAC_FLOW_CTRL_BUDGET_ENTRY_EMAC_FLOW_CTRL_BUDGET_ENTRY_OFFSET                                       0
#define EMAC_FLOW_CTRL_BUDGET_ENTRY_BUDGET_OFFSET                                                            0
#define EMAC_FLOW_CTRL_BUDGET_ENTRY_BUDGET_WORD_OFFSET                                                       0

/* >>>EMAC_FLOW_CTRL_BUDGET_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	budget    	;
#else
        uint32_t	budget    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) EMAC_FLOW_CTRL_BUDGET_ENTRY_STRUCT;

#define RDD_EMAC_FLOW_CTRL_BUDGET_ENTRY_BUDGET_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(EMAC_FLOW_CTRL_BUDGET_ENTRY_STRUCT), (r))
#define RDD_EMAC_FLOW_CTRL_BUDGET_ENTRY_BUDGET_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(EMAC_FLOW_CTRL_BUDGET_ENTRY_STRUCT), (v))
#define RDD_EMAC_FLOW_CTRL_BUDGET_ENTRY_BUDGET_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_EMAC_FLOW_CTRL_BUDGET_ENTRY_BUDGET_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
/* <<<EMAC_FLOW_CTRL_BUDGET_ENTRY_STRUCT */

/* <<<RDD_EMAC_FLOW_CTRL_BUDGET_ENTRY */


/* >>>RDD_DHD_PROCESSING_QM_DESCRIPTOR */
#define DHD_PROCESSING_QM_DESCRIPTOR_VALID_F_OFFSET                                                           31
#define DHD_PROCESSING_QM_DESCRIPTOR_VALID_F_WIDTH                                                            1
#define DHD_PROCESSING_QM_DESCRIPTOR_DHD_PROCESSING_QM_DESCRIPTOR_OFFSET                                      0
#define DHD_PROCESSING_QM_DESCRIPTOR_VALID_OFFSET                                                             0
#define DHD_PROCESSING_QM_DESCRIPTOR_VALID_WORD_OFFSET                                                        0
#define DHD_PROCESSING_QM_DESCRIPTOR_VALID_F_OFFSET_MOD8                                                      7
#define DHD_PROCESSING_QM_DESCRIPTOR_VALID_F_OFFSET_MOD16                                                     15
#define DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_F_OFFSET                                                        30
#define DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_F_WIDTH                                                         1
#define DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_OFFSET                                                          0
#define DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_WORD_OFFSET                                                     0
#define DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_F_OFFSET_MOD8                                                   6
#define DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_F_OFFSET_MOD16                                                  14
#define DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_F_OFFSET                                                        29
#define DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_F_WIDTH                                                         1
#define DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_OFFSET                                                          0
#define DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_WORD_OFFSET                                                     0
#define DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_F_OFFSET_MOD8                                                   5
#define DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_F_OFFSET_MOD16                                                  13
#define DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_F_OFFSET                                                         28
#define DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_F_WIDTH                                                          1
#define DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_OFFSET                                                           0
#define DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_WORD_OFFSET                                                      0
#define DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_F_OFFSET_MOD8                                                    4
#define DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_F_OFFSET_MOD16                                                   12
#define DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_F_OFFSET                                                       27
#define DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_F_WIDTH                                                        1
#define DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_OFFSET                                                         0
#define DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_WORD_OFFSET                                                    0
#define DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_F_OFFSET_MOD8                                                  3
#define DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_F_OFFSET_MOD16                                                 11
#define DHD_PROCESSING_QM_DESCRIPTOR_COLOR_F_OFFSET                                                           26
#define DHD_PROCESSING_QM_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define DHD_PROCESSING_QM_DESCRIPTOR_COLOR_OFFSET                                                             0
#define DHD_PROCESSING_QM_DESCRIPTOR_COLOR_WORD_OFFSET                                                        0
#define DHD_PROCESSING_QM_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      2
#define DHD_PROCESSING_QM_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     10
#define DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_F_OFFSET                                                      25
#define DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_F_WIDTH                                                       1
#define DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_OFFSET                                                        0
#define DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_WORD_OFFSET                                                   0
#define DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_F_OFFSET_MOD8                                                 1
#define DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_F_OFFSET_MOD16                                                9
#define DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_OFFSET                                              20
#define DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_WIDTH                                               1
#define DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_OFFSET                                                1
#define DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_WORD_OFFSET                                           0
#define DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_OFFSET_MOD8                                         4
#define DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_OFFSET_MOD16                                        4
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_F_OFFSET                                                          17
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_F_WIDTH                                                           1
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_OFFSET                                                            1
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_WORD_OFFSET                                                       0
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_F_OFFSET_MOD8                                                     1
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_F_OFFSET_MOD16                                                    1
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_F_OFFSET                                                         16
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_F_WIDTH                                                          1
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_OFFSET                                                           1
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_WORD_OFFSET                                                      0
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_F_OFFSET_MOD8                                                    0
#define DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_F_OFFSET_MOD16                                                   0
#define DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   7
#define DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     2
#define DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             7
#define DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_F_OFFSET                                                       6
#define DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_F_WIDTH                                                        1
#define DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_OFFSET                                                         3
#define DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_WORD_OFFSET                                                    0
#define DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD8                                                  6
#define DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD16                                                 6
#define DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_F_OFFSET                                                        5
#define DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_F_WIDTH                                                         1
#define DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_OFFSET                                                          3
#define DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_WORD_OFFSET                                                     0
#define DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_F_OFFSET_MOD8                                                   5
#define DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_F_OFFSET_MOD16                                                  5
#define DHD_PROCESSING_QM_DESCRIPTOR_HN_F_OFFSET                                                              0
#define DHD_PROCESSING_QM_DESCRIPTOR_HN_F_WIDTH                                                               5
#define DHD_PROCESSING_QM_DESCRIPTOR_HN_OFFSET                                                                3
#define DHD_PROCESSING_QM_DESCRIPTOR_HN_WORD_OFFSET                                                           0
#define DHD_PROCESSING_QM_DESCRIPTOR_HN_F_OFFSET_MOD8                                                         0
#define DHD_PROCESSING_QM_DESCRIPTOR_HN_F_OFFSET_MOD16                                                        0
#define DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_F_OFFSET                                                    22
#define DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_F_WIDTH                                                     10
#define DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_OFFSET                                                      4
#define DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_WORD_OFFSET                                                 1
#define DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_F_OFFSET_MOD16                                              6
#define DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_F_OFFSET                                                        21
#define DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_F_WIDTH                                                         1
#define DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_OFFSET                                                          5
#define DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_WORD_OFFSET                                                     1
#define DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_F_OFFSET_MOD8                                                   5
#define DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_F_OFFSET_MOD16                                                  5
#define DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_F_OFFSET                                                    20
#define DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_F_WIDTH                                                     1
#define DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_OFFSET                                                      5
#define DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_WORD_OFFSET                                                 1
#define DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_F_OFFSET_MOD8                                               4
#define DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_F_OFFSET_MOD16                                              4
#define DHD_PROCESSING_QM_DESCRIPTOR_ABS_F_OFFSET                                                             19
#define DHD_PROCESSING_QM_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define DHD_PROCESSING_QM_DESCRIPTOR_ABS_OFFSET                                                               5
#define DHD_PROCESSING_QM_DESCRIPTOR_ABS_WORD_OFFSET                                                          1
#define DHD_PROCESSING_QM_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        3
#define DHD_PROCESSING_QM_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       3
#define DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   0
#define DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     6
#define DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                1
#define DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             0
#define DHD_PROCESSING_QM_DESCRIPTOR_DROP_F_OFFSET                                                            31
#define DHD_PROCESSING_QM_DESCRIPTOR_DROP_F_WIDTH                                                             1
#define DHD_PROCESSING_QM_DESCRIPTOR_DROP_OFFSET                                                              8
#define DHD_PROCESSING_QM_DESCRIPTOR_DROP_WORD_OFFSET                                                         2
#define DHD_PROCESSING_QM_DESCRIPTOR_DROP_F_OFFSET_MOD8                                                       7
#define DHD_PROCESSING_QM_DESCRIPTOR_DROP_F_OFFSET_MOD16                                                      15
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_F_OFFSET                                                    30
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_F_WIDTH                                                     1
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_OFFSET                                                      8
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_WORD_OFFSET                                                 2
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD8                                               6
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD16                                              14
#define DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_F_OFFSET                                                       28
#define DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_F_WIDTH                                                        2
#define DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_OFFSET                                                         8
#define DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_WORD_OFFSET                                                    2
#define DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_F_OFFSET_MOD8                                                  4
#define DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_F_OFFSET_MOD16                                                 12
#define DHD_PROCESSING_QM_DESCRIPTOR_LAN_F_OFFSET                                                             27
#define DHD_PROCESSING_QM_DESCRIPTOR_LAN_F_WIDTH                                                              1
#define DHD_PROCESSING_QM_DESCRIPTOR_LAN_OFFSET                                                               8
#define DHD_PROCESSING_QM_DESCRIPTOR_LAN_WORD_OFFSET                                                          2
#define DHD_PROCESSING_QM_DESCRIPTOR_LAN_F_OFFSET_MOD8                                                        3
#define DHD_PROCESSING_QM_DESCRIPTOR_LAN_F_OFFSET_MOD16                                                       11
#define DHD_PROCESSING_QM_DESCRIPTOR_WLAN_F_OFFSET                                                            26
#define DHD_PROCESSING_QM_DESCRIPTOR_WLAN_F_WIDTH                                                             1
#define DHD_PROCESSING_QM_DESCRIPTOR_WLAN_OFFSET                                                              8
#define DHD_PROCESSING_QM_DESCRIPTOR_WLAN_WORD_OFFSET                                                         2
#define DHD_PROCESSING_QM_DESCRIPTOR_WLAN_F_OFFSET_MOD8                                                       2
#define DHD_PROCESSING_QM_DESCRIPTOR_WLAN_F_OFFSET_MOD16                                                      10
#define DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_F_OFFSET                                                     22
#define DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_F_WIDTH                                                      4
#define DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_OFFSET                                                       8
#define DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_WORD_OFFSET                                                  2
#define DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_F_OFFSET_MOD8                                                6
#define DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_F_OFFSET_MOD16                                               6
#define DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_F_OFFSET                                                   19
#define DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_F_WIDTH                                                    3
#define DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_OFFSET                                                     9
#define DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_WORD_OFFSET                                                2
#define DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_F_OFFSET_MOD8                                              3
#define DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_F_OFFSET_MOD16                                             3
#define DHD_PROCESSING_QM_DESCRIPTOR_MCAST_F_OFFSET                                                           18
#define DHD_PROCESSING_QM_DESCRIPTOR_MCAST_F_WIDTH                                                            1
#define DHD_PROCESSING_QM_DESCRIPTOR_MCAST_OFFSET                                                             9
#define DHD_PROCESSING_QM_DESCRIPTOR_MCAST_WORD_OFFSET                                                        2
#define DHD_PROCESSING_QM_DESCRIPTOR_MCAST_F_OFFSET_MOD8                                                      2
#define DHD_PROCESSING_QM_DESCRIPTOR_MCAST_F_OFFSET_MOD16                                                     2
#define DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_F_OFFSET                                                          17
#define DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_F_WIDTH                                                           1
#define DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_OFFSET                                                            9
#define DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_WORD_OFFSET                                                       2
#define DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_F_OFFSET_MOD8                                                     1
#define DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_F_OFFSET_MOD16                                                    1
#define DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_F_OFFSET                                                     0
#define DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_F_WIDTH                                                      14
#define DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_OFFSET                                                       10
#define DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_WORD_OFFSET                                                  2
#define DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_F_OFFSET_MOD16                                               0
#define DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_F_OFFSET                                                          31
#define DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_F_WIDTH                                                           1
#define DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_OFFSET                                                            12
#define DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_WORD_OFFSET                                                       3
#define DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_F_OFFSET_MOD8                                                     7
#define DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_F_OFFSET_MOD16                                                    15
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    30
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      12
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 3
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               6
#define DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              14
#define DHD_PROCESSING_QM_DESCRIPTOR_PAYLOAD_OFFSET_SOP_F_OFFSET                                              0
#define DHD_PROCESSING_QM_DESCRIPTOR_PAYLOAD_OFFSET_SOP_F_WIDTH                                               30
#define DHD_PROCESSING_QM_DESCRIPTOR_PAYLOAD_OFFSET_SOP_OFFSET                                                12
#define DHD_PROCESSING_QM_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WORD_OFFSET                                           3

/* >>>DHD_PROCESSING_QM_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	headroom          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reprocess         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	force_copy        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tx_complete_wakeup	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_msg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	coherent          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hn                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	flow_ring_id      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	radio_idx         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wlan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l4_protocol       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wifi_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mcast             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdsvc            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn1_or_abs3       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_drop            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_radio_idx       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lan             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_wlan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_l4_protocol     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_wifi_priority   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mcast           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_spdsvc          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved3       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn1_first                   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_drop            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_radio_idx       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lan             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_wlan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_l4_protocol     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_wifi_priority   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mcast           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_spdsvc          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved3       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	abs3                        	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	payload_offset_sop	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sop_fpm                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm                      	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fpm_sop                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	fpm_pool                    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	fpm_idx                     	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn_num                      	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop                         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint16_t	bn0_first                   	; /* Member of payload_offset_sop union */
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reservedSU4_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved_abs                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	abs_0                       	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	hn                	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	coherent          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_msg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tx_complete_wakeup	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	force_copy        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reprocess         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_copy           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	headroom          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow_ring_id      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	bn1_or_abs3       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	reserved3         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdsvc            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mcast             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wifi_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l4_protocol       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wlan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	lan               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	radio_idx         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn1_first                   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	reservedSU1_reserved3       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_spdsvc          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_mcast           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_wifi_priority   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_l4_protocol     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_wlan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_lan             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_radio_idx       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_drop            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	abs3                        	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	reserved4                   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of bn1_or_abs3 union */
        uint32_t	reservedSU2_reserved3       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_spdsvc          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_mcast           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_wifi_priority   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_l4_protocol     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_wlan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_lan             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_radio_idx       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_drop            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	payload_offset_sop	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn_fpm                      	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop_fpm                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU1_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	fpm_idx                     	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	fpm_pool                    	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	fpm_sop                     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU2_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint16_t	bn0_first                   	; /* Member of payload_offset_sop union */
        uint32_t	sop                         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_num                      	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU3_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
        uint32_t	abs_0                       	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved_abs                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU4_target_mem_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU4_agg_pd          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_PROCESSING_QM_DESCRIPTOR_STRUCT;

#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_VALID_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_VALID_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_VALID_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_VALID_L_READ( wv )                            FIELD_GET( wv, 31, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_VALID_L_WRITE( v, wv )                        FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 6, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 6, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_L_READ( wv )                         FIELD_GET( wv, 30, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HEADROOM_L_WRITE( v, wv )                     FIELD_SET( v, 30, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 5, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 5, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_L_READ( wv )                         FIELD_GET( wv, 29, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DONT_AGG_L_WRITE( v, wv )                     FIELD_SET( v, 29, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 4, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 4, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_L_READ( wv )                          FIELD_GET( wv, 28, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MC_COPY_L_WRITE( v, wv )                      FIELD_SET( v, 28, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 3, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 3, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_L_READ( wv )                        FIELD_GET( wv, 27, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_REPROCESS_L_WRITE( v, wv )                    FIELD_SET( v, 27, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COLOR_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 2, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 2, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COLOR_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COLOR_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COLOR_L_READ( wv )                            FIELD_GET( wv, 26, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COLOR_L_WRITE( v, wv )                        FIELD_SET( v, 26, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 1, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT), 1, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_L_READ( wv )                       FIELD_GET( wv, 25, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FORCE_COPY_L_WRITE( v, wv )                   FIELD_SET( v, 25, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 1, 4, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 1, 4, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 4, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 4, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_L_READ( wv )               FIELD_GET( wv, 20, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_L_WRITE( v, wv )           FIELD_SET( v, 20, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 1, 1, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 1, 1, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 1, 1, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 1, 1, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_L_READ( wv )                           FIELD_GET( wv, 17, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_PD_L_WRITE( v, wv )                       FIELD_SET( v, 17, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 1, 0, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 1, 0, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_L_READ( wv )                          FIELD_GET( wv, 16, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_CPU_MSG_L_WRITE( v, wv )                      FIELD_SET( v, 16, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 2, 7, 9, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 2, 7, 9, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 2, 7, 9, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 2, 7, 9, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_L_READ( wv )                    FIELD_GET( wv, 7, 9 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FIRST_LEVEL_Q_L_WRITE( v, wv )                FIELD_SET( v, 7, 9, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 3, 6, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 3, 6, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_L_READ( wv )                        FIELD_GET( wv, 6, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLAG_1588_L_WRITE( v, wv )                    FIELD_SET( v, 6, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 3, 5, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 3, 5, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 3, 5, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 3, 5, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_L_READ( wv )                         FIELD_GET( wv, 5, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_COHERENT_L_WRITE( v, wv )                     FIELD_SET( v, 5, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HN_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 3, 0, 5, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HN_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 3, 0, 5, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HN_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 5, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HN_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 5, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HN_L_READ( wv )                               FIELD_GET( wv, 0, 5 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_HN_L_WRITE( v, wv )                           FIELD_SET( v, 0, 5, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 4, 6, 10, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 4, 6, 10, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p) + 4, 6, 10, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p) + 4, 6, 10, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_L_READ( wv )                     FIELD_GET( wv, 22, 10 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FLOW_RING_ID_L_WRITE( v, wv )                 FIELD_SET( v, 22, 10, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 5, 5, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 5, 5, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 5, 5, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 5, 5, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_L_READ( wv )                         FIELD_GET( wv, 21, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PRIORITY_L_WRITE( v, wv )                     FIELD_SET( v, 21, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 5, 4, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 5, 4, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 5, 4, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 5, 4, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_L_READ( wv )                     FIELD_GET( wv, 20, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_INGRESS_CONG_L_WRITE( v, wv )                 FIELD_SET( v, 20, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 5, 3, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 5, 3, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 5, 3, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 5, 3, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_L_READ( wv )                              FIELD_GET( wv, 19, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_L_WRITE( v, wv )                          FIELD_SET( v, 19, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 6, 0, 14, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 6, 0, 14, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_L_READ( wv )                    FIELD_GET( wv, 0, 14 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PACKET_LENGTH_L_WRITE( v, wv )                FIELD_SET( v, 0, 14, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DROP_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 7, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 7, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DROP_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DROP_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DROP_L_READ( wv )                             FIELD_GET( wv, 31, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_DROP_L_WRITE( v, wv )                         FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 6, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 6, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_L_READ( wv )                     FIELD_GET( wv, 30, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_1_L_WRITE( v, wv )                 FIELD_SET( v, 30, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 4, 2, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 4, 2, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 8, 4, 2, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 8, 4, 2, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_L_READ( wv )                        FIELD_GET( wv, 28, 2 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_RADIO_IDX_L_WRITE( v, wv )                    FIELD_SET( v, 28, 2, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_LAN_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 3, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_LAN_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 3, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_LAN_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 8, 3, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_LAN_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 8, 3, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_LAN_L_READ( wv )                              FIELD_GET( wv, 27, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_LAN_L_WRITE( v, wv )                          FIELD_SET( v, 27, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WLAN_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 2, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WLAN_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 2, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WLAN_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 8, 2, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WLAN_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 8, 2, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WLAN_L_READ( wv )                             FIELD_GET( wv, 26, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WLAN_L_WRITE( v, wv )                         FIELD_SET( v, 26, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 6, 4, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 8, 6, 4, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p) + 8, 6, 4, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p) + 8, 6, 4, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_L_READ( wv )                      FIELD_GET( wv, 22, 4 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_L4_PROTOCOL_L_WRITE( v, wv )                  FIELD_SET( v, 22, 4, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 9, 3, 3, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 9, 3, 3, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 9, 3, 3, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 9, 3, 3, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_L_READ( wv )                    FIELD_GET( wv, 19, 3 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_WIFI_PRIORITY_L_WRITE( v, wv )                FIELD_SET( v, 19, 3, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MCAST_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 9, 2, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MCAST_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 9, 2, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MCAST_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 9, 2, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MCAST_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 9, 2, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MCAST_L_READ( wv )                            FIELD_GET( wv, 18, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_MCAST_L_WRITE( v, wv )                        FIELD_SET( v, 18, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 9, 1, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 9, 1, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 9, 1, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 9, 1, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_L_READ( wv )                           FIELD_GET( wv, 17, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SPDSVC_L_WRITE( v, wv )                       FIELD_SET( v, 17, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 10, 0, 14, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 10, 0, 14, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 14, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 14, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_L_READ( wv )                      FIELD_GET( wv, 0, 14 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_OR_ABS3_L_WRITE( v, wv )                  FIELD_SET( v, 0, 14, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_FIRST_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 10, 0, 14, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_FIRST_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 10, 0, 14, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_FIRST_READ(r, p)                          FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 14, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_FIRST_WRITE(v, p)                         FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 14, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_FIRST_L_READ( wv )                        FIELD_GET( wv, 0, 14 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN1_FIRST_L_WRITE( v, wv )                    FIELD_SET( v, 0, 14, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS3_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 10, 0, 11, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS3_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 10, 0, 11, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS3_READ(r, p)                               FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 11, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS3_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 11, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS3_L_READ( wv )                             FIELD_GET( wv, 0, 11 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS3_L_WRITE( v, wv )                         FIELD_SET( v, 0, 11, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 7, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 7, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_L_READ( wv )                           FIELD_GET( wv, 31, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_AGG_PD_L_WRITE( v, wv )                       FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 6, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 6, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_L_READ( wv )                     FIELD_GET( wv, 30, 1 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_TARGET_MEM_0_L_WRITE( v, wv )                 FIELD_SET( v, 30, 1, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 0, 30, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 0, 30, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 30, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 30, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PAYLOAD_OFFSET_SOP_L_READ( wv )               FIELD_GET( wv, 0, 30 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_PAYLOAD_OFFSET_SOP_L_WRITE( v, wv )           FIELD_SET( v, 0, 30, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_FPM_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 3, 11, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_FPM_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 3, 11, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_FPM_READ(r, p)                            FIELD_MREAD_16((uint8_t *)(p) + 12, 3, 11, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_FPM_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)(p) + 12, 3, 11, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_FPM_L_READ( wv )                          FIELD_GET( wv, 19, 11 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_FPM_L_WRITE( v, wv )                      FIELD_SET( v, 19, 11, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_FPM_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 0, 19, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_FPM_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 0, 19, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_FPM_READ(r, p)                             FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 19, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_FPM_WRITE(v, p)                            FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 19, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_FPM_L_READ( wv )                           FIELD_GET( wv, 0, 19 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_FPM_L_WRITE( v, wv )                       FIELD_SET( v, 0, 19, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_SOP_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 3, 11, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_SOP_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 3, 11, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_SOP_READ(r, p)                            FIELD_MREAD_16((uint8_t *)(p) + 12, 3, 11, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_SOP_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)(p) + 12, 3, 11, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_SOP_L_READ( wv )                          FIELD_GET( wv, 19, 11 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_SOP_L_WRITE( v, wv )                      FIELD_SET( v, 19, 11, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_POOL_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 13, 1, 2, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_POOL_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 13, 1, 2, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_POOL_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 13, 1, 2, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_POOL_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 13, 1, 2, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_POOL_L_READ( wv )                         FIELD_GET( wv, 17, 2 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_POOL_L_WRITE( v, wv )                     FIELD_SET( v, 17, 2, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_IDX_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 0, 17, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_IDX_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 0, 17, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_IDX_READ(r, p)                            FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 17, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_IDX_WRITE(v, p)                           FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 17, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_IDX_L_READ( wv )                          FIELD_GET( wv, 0, 17 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_FPM_IDX_L_WRITE( v, wv )                      FIELD_SET( v, 0, 17, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_NUM_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 7, 7, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_NUM_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 7, 7, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_NUM_READ(r, p)                             FIELD_MREAD_16((uint8_t *)(p) + 12, 7, 7, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_NUM_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)(p) + 12, 7, 7, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_NUM_L_READ( wv )                           FIELD_GET( wv, 23, 7 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN_NUM_L_WRITE( v, wv )                       FIELD_SET( v, 23, 7, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 13, 0, 7, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 13, 0, 7, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 7, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 7, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_L_READ( wv )                              FIELD_GET( wv, 16, 7 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_SOP_L_WRITE( v, wv )                          FIELD_SET( v, 16, 7, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN0_FIRST_READ(r, p)                          MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN0_FIRST_L_READ( wv )                        FIELD_GET( wv, 0, 16 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_BN0_FIRST_L_WRITE( v, wv )                    FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_0_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 0, 29, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_0_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_PROCESSING_QM_DESCRIPTOR_STRUCT) + 12, 0, 29, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_0_READ(r, p)                              FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 29, (r))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_0_WRITE(v, p)                             FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 29, (v))
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_0_L_READ( wv )                            FIELD_GET( wv, 0, 29 )
#define RDD_DHD_PROCESSING_QM_DESCRIPTOR_ABS_0_L_WRITE( v, wv )                        FIELD_SET( v, 0, 29, wv )
/* <<<DHD_PROCESSING_QM_DESCRIPTOR_STRUCT */

/* <<<RDD_DHD_PROCESSING_QM_DESCRIPTOR */


/* >>>RDD_DHD_CPU_QM_DESCRIPTOR */
#define DHD_CPU_QM_DESCRIPTOR_VALID_F_OFFSET                                                           31
#define DHD_CPU_QM_DESCRIPTOR_VALID_F_WIDTH                                                            1
#define DHD_CPU_QM_DESCRIPTOR_DHD_CPU_QM_DESCRIPTOR_OFFSET                                             0
#define DHD_CPU_QM_DESCRIPTOR_VALID_OFFSET                                                             0
#define DHD_CPU_QM_DESCRIPTOR_VALID_WORD_OFFSET                                                        0
#define DHD_CPU_QM_DESCRIPTOR_VALID_F_OFFSET_MOD8                                                      7
#define DHD_CPU_QM_DESCRIPTOR_VALID_F_OFFSET_MOD16                                                     15
#define DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_F_OFFSET                                                    21
#define DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_F_WIDTH                                                     10
#define DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_OFFSET                                                      0
#define DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_WORD_OFFSET                                                 0
#define DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_F_OFFSET_MOD16                                              5
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_OFFSET                                              20
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_WIDTH                                               1
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_OFFSET                                                1
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_WORD_OFFSET                                           0
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_OFFSET_MOD8                                         4
#define DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_F_OFFSET_MOD16                                        4
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_F_OFFSET                                                    18
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_F_WIDTH                                                     2
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_OFFSET                                                      1
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_WORD_OFFSET                                                 0
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_F_OFFSET_MOD8                                               2
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_F_OFFSET_MOD16                                              2
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_F_OFFSET                                                          17
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_F_WIDTH                                                           1
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_OFFSET                                                            1
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_WORD_OFFSET                                                       0
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_F_OFFSET_MOD8                                                     1
#define DHD_CPU_QM_DESCRIPTOR_CPU_PD_F_OFFSET_MOD16                                                    1
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_F_OFFSET                                                         16
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_F_WIDTH                                                          1
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_OFFSET                                                           1
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_WORD_OFFSET                                                      0
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_F_OFFSET_MOD8                                                    0
#define DHD_CPU_QM_DESCRIPTOR_CPU_MSG_F_OFFSET_MOD16                                                   0
#define DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   7
#define DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     2
#define DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             7
#define DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_F_OFFSET                                              20
#define DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_F_WIDTH                                               12
#define DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_OFFSET                                                4
#define DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_WORD_OFFSET                                           1
#define DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_F_OFFSET_MOD16                                        4
#define DHD_CPU_QM_DESCRIPTOR_ABS_F_OFFSET                                                             19
#define DHD_CPU_QM_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define DHD_CPU_QM_DESCRIPTOR_ABS_OFFSET                                                               5
#define DHD_CPU_QM_DESCRIPTOR_ABS_WORD_OFFSET                                                          1
#define DHD_CPU_QM_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        3
#define DHD_CPU_QM_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       3
#define DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   0
#define DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     6
#define DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                1
#define DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             0
#define DHD_CPU_QM_DESCRIPTOR_DROP_F_OFFSET                                                            31
#define DHD_CPU_QM_DESCRIPTOR_DROP_F_WIDTH                                                             1
#define DHD_CPU_QM_DESCRIPTOR_DROP_OFFSET                                                              8
#define DHD_CPU_QM_DESCRIPTOR_DROP_WORD_OFFSET                                                         2
#define DHD_CPU_QM_DESCRIPTOR_DROP_F_OFFSET_MOD8                                                       7
#define DHD_CPU_QM_DESCRIPTOR_DROP_F_OFFSET_MOD16                                                      15
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_F_OFFSET                                                       28
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_F_WIDTH                                                        2
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_OFFSET                                                         8
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_WORD_OFFSET                                                    2
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_F_OFFSET_MOD8                                                  4
#define DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_F_OFFSET_MOD16                                                 12
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_F_OFFSET                                                   19
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_F_WIDTH                                                    3
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_OFFSET                                                     9
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_WORD_OFFSET                                                2
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_F_OFFSET_MOD8                                              3
#define DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_F_OFFSET_MOD16                                             3
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_F_OFFSET                                                          17
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_F_WIDTH                                                           1
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_OFFSET                                                            9
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_WORD_OFFSET                                                       2
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_F_OFFSET_MOD8                                                     1
#define DHD_CPU_QM_DESCRIPTOR_SPDSVC_F_OFFSET_MOD16                                                    1
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_F_OFFSET                                                        0
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_F_WIDTH                                                         11
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_OFFSET                                                          10
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_WORD_OFFSET                                                     2
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_F_OFFSET_MOD16                                                  0
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_F_OFFSET                                                          31
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_F_WIDTH                                                           1
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_OFFSET                                                            12
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_WORD_OFFSET                                                       3
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_F_OFFSET_MOD8                                                     7
#define DHD_CPU_QM_DESCRIPTOR_AGG_PD_F_OFFSET_MOD16                                                    15
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    30
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      12
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 3
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               6
#define DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              14
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_F_OFFSET                                                        0
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_F_WIDTH                                                         29
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_OFFSET                                                          12
#define DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_WORD_OFFSET                                                     3

/* >>>DHD_CPU_QM_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow_ring_id      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tx_complete_wakeup	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_msg_type      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_msg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	pkt_id_or_read_idx	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	pkt_id                      	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
        uint32_t	reservedSU1_abs             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved3       	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_length   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	read_idx_valid              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
        uint32_t	reserved2                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
        uint32_t	read_idx                    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
        uint32_t	reservedSU2_abs             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved3       	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_length   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	radio_idx         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved5         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wifi_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved6         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdsvc            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved7         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs_ptr2          	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved8         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs_ptr1          	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved1         	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_msg           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_msg_type      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tx_complete_wakeup	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flow_ring_id      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_length     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pkt_id_or_read_idx	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_packet_length   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved3       	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_abs             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pkt_id                      	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_packet_length   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved3       	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_abs             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	read_idx                    	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
        uint32_t	reserved2                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
        uint32_t	read_idx_valid              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of pkt_id_or_read_idx union */
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	abs_ptr2          	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved7         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	spdsvc            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved6         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wifi_priority     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved5         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	radio_idx         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drop              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	abs_ptr1          	:29	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved8         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg_pd            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_CPU_QM_DESCRIPTOR_STRUCT;

#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_L_READ( wv )                            FIELD_GET( wv, 31, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_VALID_L_WRITE( v, wv )                        FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT), 5, 10, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT), 5, 10, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p), 5, 10, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p), 5, 10, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_L_READ( wv )                     FIELD_GET( wv, 21, 10 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_FLOW_RING_ID_L_WRITE( v, wv )                 FIELD_SET( v, 21, 10, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 1, 4, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 1, 4, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 4, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 4, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_L_READ( wv )               FIELD_GET( wv, 20, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_TX_COMPLETE_WAKEUP_L_WRITE( v, wv )           FIELD_SET( v, 20, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 1, 2, 2, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 1, 2, 2, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 1, 2, 2, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 1, 2, 2, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_L_READ( wv )                     FIELD_GET( wv, 18, 2 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_TYPE_L_WRITE( v, wv )                 FIELD_SET( v, 18, 2, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 1, 1, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 1, 1, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 1, 1, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 1, 1, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_L_READ( wv )                           FIELD_GET( wv, 17, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_PD_L_WRITE( v, wv )                       FIELD_SET( v, 17, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 1, 0, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 1, 0, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_L_READ( wv )                          FIELD_GET( wv, 16, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_CPU_MSG_L_WRITE( v, wv )                      FIELD_SET( v, 16, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 2, 7, 9, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 2, 7, 9, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 2, 7, 9, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 2, 7, 9, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_L_READ( wv )                    FIELD_GET( wv, 7, 9 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_FIRST_LEVEL_Q_L_WRITE( v, wv )                FIELD_SET( v, 7, 9, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 4, 4, 12, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 4, 4, 12, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 4, 4, 12, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 4, 4, 12, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_L_READ( wv )               FIELD_GET( wv, 20, 12 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_OR_READ_IDX_L_WRITE( v, wv )           FIELD_SET( v, 20, 12, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 4, 4, 12, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 4, 4, 12, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_READ(r, p)                             FIELD_MREAD_16((uint8_t *)(p) + 4, 4, 12, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)(p) + 4, 4, 12, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_L_READ( wv )                           FIELD_GET( wv, 20, 12 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PKT_ID_L_WRITE( v, wv )                       FIELD_SET( v, 20, 12, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 4, 7, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 4, 7, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 4, 7, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 4, 7, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_L_READ( wv )                   FIELD_GET( wv, 31, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_VALID_L_WRITE( v, wv )               FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 4, 4, 10, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 4, 4, 10, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_READ(r, p)                           FIELD_MREAD_16((uint8_t *)(p) + 4, 4, 10, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)(p) + 4, 4, 10, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_L_READ( wv )                         FIELD_GET( wv, 20, 10 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_READ_IDX_L_WRITE( v, wv )                     FIELD_SET( v, 20, 10, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 5, 3, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 5, 3, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 5, 3, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 5, 3, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_L_READ( wv )                              FIELD_GET( wv, 19, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_L_WRITE( v, wv )                          FIELD_SET( v, 19, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 6, 0, 14, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 6, 0, 14, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_L_READ( wv )                    FIELD_GET( wv, 0, 14 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_PACKET_LENGTH_L_WRITE( v, wv )                FIELD_SET( v, 0, 14, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 8, 7, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 8, 7, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_L_READ( wv )                             FIELD_GET( wv, 31, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_DROP_L_WRITE( v, wv )                         FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 8, 4, 2, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 8, 4, 2, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 8, 4, 2, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 8, 4, 2, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_L_READ( wv )                        FIELD_GET( wv, 28, 2 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_RADIO_IDX_L_WRITE( v, wv )                    FIELD_SET( v, 28, 2, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 9, 3, 3, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 9, 3, 3, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 9, 3, 3, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 9, 3, 3, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_L_READ( wv )                    FIELD_GET( wv, 19, 3 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_WIFI_PRIORITY_L_WRITE( v, wv )                FIELD_SET( v, 19, 3, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 9, 1, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 9, 1, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 9, 1, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 9, 1, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_L_READ( wv )                           FIELD_GET( wv, 17, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_SPDSVC_L_WRITE( v, wv )                       FIELD_SET( v, 17, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 10, 0, 11, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 10, 0, 11, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_READ(r, p)                           FIELD_MREAD_16((uint8_t *)(p) + 10, 0, 11, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)(p) + 10, 0, 11, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_L_READ( wv )                         FIELD_GET( wv, 0, 11 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR2_L_WRITE( v, wv )                     FIELD_SET( v, 0, 11, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 12, 7, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 12, 7, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_L_READ( wv )                           FIELD_GET( wv, 31, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_AGG_PD_L_WRITE( v, wv )                       FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 12, 6, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 12, 6, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_L_READ( wv )                     FIELD_GET( wv, 30, 1 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_TARGET_MEM_0_L_WRITE( v, wv )                 FIELD_SET( v, 30, 1, wv )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 12, 0, 29, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_CPU_QM_DESCRIPTOR_STRUCT) + 12, 0, 29, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_READ(r, p)                           FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 29, (r))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 29, (v))
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_L_READ( wv )                         FIELD_GET( wv, 0, 29 )
#define RDD_DHD_CPU_QM_DESCRIPTOR_ABS_PTR1_L_WRITE( v, wv )                     FIELD_SET( v, 0, 29, wv )
/* <<<DHD_CPU_QM_DESCRIPTOR_STRUCT */

/* <<<RDD_DHD_CPU_QM_DESCRIPTOR */


/* >>>RDD_QM_QUEUE_COUNTER_DATA */
#define QM_QUEUE_COUNTER_DATA_PACKETS_F_OFFSET                                                         0
#define QM_QUEUE_COUNTER_DATA_PACKETS_F_WIDTH                                                          32
#define QM_QUEUE_COUNTER_DATA_QM_QUEUE_COUNTER_DATA_OFFSET                                             0
#define QM_QUEUE_COUNTER_DATA_PACKETS_OFFSET                                                           0
#define QM_QUEUE_COUNTER_DATA_PACKETS_WORD_OFFSET                                                      0
#define QM_QUEUE_COUNTER_DATA_BYTES_F_OFFSET                                                           0
#define QM_QUEUE_COUNTER_DATA_BYTES_F_WIDTH                                                            32
#define QM_QUEUE_COUNTER_DATA_BYTES_OFFSET                                                             4
#define QM_QUEUE_COUNTER_DATA_BYTES_WORD_OFFSET                                                        1
/* <<<RDD_QM_QUEUE_COUNTER_DATA */


/* >>>RDD_COPY_TO_ABS_DESCRIPTOR */
#define COPY_TO_ABS_DESCRIPTOR_VALID_F_OFFSET                                                           31
#define COPY_TO_ABS_DESCRIPTOR_VALID_F_WIDTH                                                            1
#define COPY_TO_ABS_DESCRIPTOR_COPY_TO_ABS_DESCRIPTOR_OFFSET                                            0
#define COPY_TO_ABS_DESCRIPTOR_VALID_OFFSET                                                             0
#define COPY_TO_ABS_DESCRIPTOR_VALID_WORD_OFFSET                                                        0
#define COPY_TO_ABS_DESCRIPTOR_VALID_F_OFFSET_MOD8                                                      7
#define COPY_TO_ABS_DESCRIPTOR_VALID_F_OFFSET_MOD16                                                     15
#define COPY_TO_ABS_DESCRIPTOR_HEADROOM_F_OFFSET                                                        30
#define COPY_TO_ABS_DESCRIPTOR_HEADROOM_F_WIDTH                                                         1
#define COPY_TO_ABS_DESCRIPTOR_HEADROOM_OFFSET                                                          0
#define COPY_TO_ABS_DESCRIPTOR_HEADROOM_WORD_OFFSET                                                     0
#define COPY_TO_ABS_DESCRIPTOR_HEADROOM_F_OFFSET_MOD8                                                   6
#define COPY_TO_ABS_DESCRIPTOR_HEADROOM_F_OFFSET_MOD16                                                  14
#define COPY_TO_ABS_DESCRIPTOR_DONT_AGG_F_OFFSET                                                        29
#define COPY_TO_ABS_DESCRIPTOR_DONT_AGG_F_WIDTH                                                         1
#define COPY_TO_ABS_DESCRIPTOR_DONT_AGG_OFFSET                                                          0
#define COPY_TO_ABS_DESCRIPTOR_DONT_AGG_WORD_OFFSET                                                     0
#define COPY_TO_ABS_DESCRIPTOR_DONT_AGG_F_OFFSET_MOD8                                                   5
#define COPY_TO_ABS_DESCRIPTOR_DONT_AGG_F_OFFSET_MOD16                                                  13
#define COPY_TO_ABS_DESCRIPTOR_MC_COPY_F_OFFSET                                                         28
#define COPY_TO_ABS_DESCRIPTOR_MC_COPY_F_WIDTH                                                          1
#define COPY_TO_ABS_DESCRIPTOR_MC_COPY_OFFSET                                                           0
#define COPY_TO_ABS_DESCRIPTOR_MC_COPY_WORD_OFFSET                                                      0
#define COPY_TO_ABS_DESCRIPTOR_MC_COPY_F_OFFSET_MOD8                                                    4
#define COPY_TO_ABS_DESCRIPTOR_MC_COPY_F_OFFSET_MOD16                                                   12
#define COPY_TO_ABS_DESCRIPTOR_REPROCESS_F_OFFSET                                                       27
#define COPY_TO_ABS_DESCRIPTOR_REPROCESS_F_WIDTH                                                        1
#define COPY_TO_ABS_DESCRIPTOR_REPROCESS_OFFSET                                                         0
#define COPY_TO_ABS_DESCRIPTOR_REPROCESS_WORD_OFFSET                                                    0
#define COPY_TO_ABS_DESCRIPTOR_REPROCESS_F_OFFSET_MOD8                                                  3
#define COPY_TO_ABS_DESCRIPTOR_REPROCESS_F_OFFSET_MOD16                                                 11
#define COPY_TO_ABS_DESCRIPTOR_COLOR_F_OFFSET                                                           26
#define COPY_TO_ABS_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define COPY_TO_ABS_DESCRIPTOR_COLOR_OFFSET                                                             0
#define COPY_TO_ABS_DESCRIPTOR_COLOR_WORD_OFFSET                                                        0
#define COPY_TO_ABS_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      2
#define COPY_TO_ABS_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     10
#define COPY_TO_ABS_DESCRIPTOR_FORCE_COPY_F_OFFSET                                                      25
#define COPY_TO_ABS_DESCRIPTOR_FORCE_COPY_F_WIDTH                                                       1
#define COPY_TO_ABS_DESCRIPTOR_FORCE_COPY_OFFSET                                                        0
#define COPY_TO_ABS_DESCRIPTOR_FORCE_COPY_WORD_OFFSET                                                   0
#define COPY_TO_ABS_DESCRIPTOR_FORCE_COPY_F_OFFSET_MOD8                                                 1
#define COPY_TO_ABS_DESCRIPTOR_FORCE_COPY_F_OFFSET_MOD16                                                9
#define COPY_TO_ABS_DESCRIPTOR_SECOND_LEVEL_Q_F_OFFSET                                                  16
#define COPY_TO_ABS_DESCRIPTOR_SECOND_LEVEL_Q_F_WIDTH                                                   9
#define COPY_TO_ABS_DESCRIPTOR_SECOND_LEVEL_Q_OFFSET                                                    0
#define COPY_TO_ABS_DESCRIPTOR_SECOND_LEVEL_Q_WORD_OFFSET                                               0
#define COPY_TO_ABS_DESCRIPTOR_SECOND_LEVEL_Q_F_OFFSET_MOD16                                            0
#define COPY_TO_ABS_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET                                                   7
#define COPY_TO_ABS_DESCRIPTOR_FIRST_LEVEL_Q_F_WIDTH                                                    9
#define COPY_TO_ABS_DESCRIPTOR_FIRST_LEVEL_Q_OFFSET                                                     2
#define COPY_TO_ABS_DESCRIPTOR_FIRST_LEVEL_Q_WORD_OFFSET                                                0
#define COPY_TO_ABS_DESCRIPTOR_FIRST_LEVEL_Q_F_OFFSET_MOD16                                             7
#define COPY_TO_ABS_DESCRIPTOR_FLAG_1588_F_OFFSET                                                       6
#define COPY_TO_ABS_DESCRIPTOR_FLAG_1588_F_WIDTH                                                        1
#define COPY_TO_ABS_DESCRIPTOR_FLAG_1588_OFFSET                                                         3
#define COPY_TO_ABS_DESCRIPTOR_FLAG_1588_WORD_OFFSET                                                    0
#define COPY_TO_ABS_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD8                                                  6
#define COPY_TO_ABS_DESCRIPTOR_FLAG_1588_F_OFFSET_MOD16                                                 6
#define COPY_TO_ABS_DESCRIPTOR_COHERENT_F_OFFSET                                                        5
#define COPY_TO_ABS_DESCRIPTOR_COHERENT_F_WIDTH                                                         1
#define COPY_TO_ABS_DESCRIPTOR_COHERENT_OFFSET                                                          3
#define COPY_TO_ABS_DESCRIPTOR_COHERENT_WORD_OFFSET                                                     0
#define COPY_TO_ABS_DESCRIPTOR_COHERENT_F_OFFSET_MOD8                                                   5
#define COPY_TO_ABS_DESCRIPTOR_COHERENT_F_OFFSET_MOD16                                                  5
#define COPY_TO_ABS_DESCRIPTOR_HN_F_OFFSET                                                              0
#define COPY_TO_ABS_DESCRIPTOR_HN_F_WIDTH                                                               5
#define COPY_TO_ABS_DESCRIPTOR_HN_OFFSET                                                                3
#define COPY_TO_ABS_DESCRIPTOR_HN_WORD_OFFSET                                                           0
#define COPY_TO_ABS_DESCRIPTOR_HN_F_OFFSET_MOD8                                                         0
#define COPY_TO_ABS_DESCRIPTOR_HN_F_OFFSET_MOD16                                                        0
#define COPY_TO_ABS_DESCRIPTOR_ABS_1_F_OFFSET                                                           22
#define COPY_TO_ABS_DESCRIPTOR_ABS_1_F_WIDTH                                                            10
#define COPY_TO_ABS_DESCRIPTOR_ABS_1_OFFSET                                                             4
#define COPY_TO_ABS_DESCRIPTOR_ABS_1_WORD_OFFSET                                                        1
#define COPY_TO_ABS_DESCRIPTOR_ABS_1_F_OFFSET_MOD16                                                     6
#define COPY_TO_ABS_DESCRIPTOR_PRIORITY_F_OFFSET                                                        21
#define COPY_TO_ABS_DESCRIPTOR_PRIORITY_F_WIDTH                                                         1
#define COPY_TO_ABS_DESCRIPTOR_PRIORITY_OFFSET                                                          5
#define COPY_TO_ABS_DESCRIPTOR_PRIORITY_WORD_OFFSET                                                     1
#define COPY_TO_ABS_DESCRIPTOR_PRIORITY_F_OFFSET_MOD8                                                   5
#define COPY_TO_ABS_DESCRIPTOR_PRIORITY_F_OFFSET_MOD16                                                  5
#define COPY_TO_ABS_DESCRIPTOR_INGRESS_CONG_F_OFFSET                                                    20
#define COPY_TO_ABS_DESCRIPTOR_INGRESS_CONG_F_WIDTH                                                     1
#define COPY_TO_ABS_DESCRIPTOR_INGRESS_CONG_OFFSET                                                      5
#define COPY_TO_ABS_DESCRIPTOR_INGRESS_CONG_WORD_OFFSET                                                 1
#define COPY_TO_ABS_DESCRIPTOR_INGRESS_CONG_F_OFFSET_MOD8                                               4
#define COPY_TO_ABS_DESCRIPTOR_INGRESS_CONG_F_OFFSET_MOD16                                              4
#define COPY_TO_ABS_DESCRIPTOR_ABS_F_OFFSET                                                             19
#define COPY_TO_ABS_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define COPY_TO_ABS_DESCRIPTOR_ABS_OFFSET                                                               5
#define COPY_TO_ABS_DESCRIPTOR_ABS_WORD_OFFSET                                                          1
#define COPY_TO_ABS_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        3
#define COPY_TO_ABS_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       3
#define COPY_TO_ABS_DESCRIPTOR_PACKET_LENGTH_F_OFFSET                                                   0
#define COPY_TO_ABS_DESCRIPTOR_PACKET_LENGTH_F_WIDTH                                                    14
#define COPY_TO_ABS_DESCRIPTOR_PACKET_LENGTH_OFFSET                                                     6
#define COPY_TO_ABS_DESCRIPTOR_PACKET_LENGTH_WORD_OFFSET                                                1
#define COPY_TO_ABS_DESCRIPTOR_PACKET_LENGTH_F_OFFSET_MOD16                                             0
#define COPY_TO_ABS_DESCRIPTOR_DROP_F_OFFSET                                                            31
#define COPY_TO_ABS_DESCRIPTOR_DROP_F_WIDTH                                                             1
#define COPY_TO_ABS_DESCRIPTOR_DROP_OFFSET                                                              8
#define COPY_TO_ABS_DESCRIPTOR_DROP_WORD_OFFSET                                                         2
#define COPY_TO_ABS_DESCRIPTOR_DROP_F_OFFSET_MOD8                                                       7
#define COPY_TO_ABS_DESCRIPTOR_DROP_F_OFFSET_MOD16                                                      15
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_1_F_OFFSET                                                    30
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_1_F_WIDTH                                                     1
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_1_OFFSET                                                      8
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_1_WORD_OFFSET                                                 2
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD8                                               6
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_1_F_OFFSET_MOD16                                              14
#define COPY_TO_ABS_DESCRIPTOR_ABS_0_F_OFFSET                                                           0
#define COPY_TO_ABS_DESCRIPTOR_ABS_0_F_WIDTH                                                            30
#define COPY_TO_ABS_DESCRIPTOR_ABS_0_OFFSET                                                             8
#define COPY_TO_ABS_DESCRIPTOR_ABS_0_WORD_OFFSET                                                        2
#define COPY_TO_ABS_DESCRIPTOR_AGG_PD_F_OFFSET                                                          31
#define COPY_TO_ABS_DESCRIPTOR_AGG_PD_F_WIDTH                                                           1
#define COPY_TO_ABS_DESCRIPTOR_AGG_PD_OFFSET                                                            12
#define COPY_TO_ABS_DESCRIPTOR_AGG_PD_WORD_OFFSET                                                       3
#define COPY_TO_ABS_DESCRIPTOR_AGG_PD_F_OFFSET_MOD8                                                     7
#define COPY_TO_ABS_DESCRIPTOR_AGG_PD_F_OFFSET_MOD16                                                    15
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_0_F_OFFSET                                                    30
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_0_F_WIDTH                                                     1
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_0_OFFSET                                                      12
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_0_WORD_OFFSET                                                 3
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD8                                               6
#define COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_0_F_OFFSET_MOD16                                              14
#define COPY_TO_ABS_DESCRIPTOR_PAYLOAD_OFFSET_SOP_F_OFFSET                                              0
#define COPY_TO_ABS_DESCRIPTOR_PAYLOAD_OFFSET_SOP_F_WIDTH                                               30
#define COPY_TO_ABS_DESCRIPTOR_PAYLOAD_OFFSET_SOP_OFFSET                                                12
#define COPY_TO_ABS_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WORD_OFFSET                                           3

/* >>>COPY_TO_ABS_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	abs_1         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0     	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs_0         	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	payload_offset_sop	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_agg_pd      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_target_mem_0	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sop_fpm                 	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm                  	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_agg_pd      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_target_mem_0	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn_num                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint16_t	bn0_first               	; /* Member of payload_offset_sop union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	hn            	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	coherent      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flag_1588     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_level_q 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	second_level_q	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	force_copy    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reprocess     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_copy       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dont_agg      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	headroom      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_length 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0     	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ingress_cong  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	priority      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs_1         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	abs_0         	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem_1  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	drop          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	payload_offset_sop	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	target_mem_0  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg_pd        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	bn_fpm                  	:19	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop_fpm                 	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU1_target_mem_0	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_agg_pd      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint16_t	bn0_first               	; /* Member of payload_offset_sop union */
        uint32_t	sop                     	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_num                  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU2_target_mem_0	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_agg_pd      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) COPY_TO_ABS_DESCRIPTOR_STRUCT;

#define RDD_COPY_TO_ABS_DESCRIPTOR_VALID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_VALID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_VALID_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_VALID_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_HEADROOM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 6, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_HEADROOM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 6, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_HEADROOM_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_HEADROOM_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_DONT_AGG_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 5, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_DONT_AGG_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 5, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_DONT_AGG_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_DONT_AGG_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_MC_COPY_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 4, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_MC_COPY_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 4, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_MC_COPY_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_MC_COPY_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_REPROCESS_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 3, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_REPROCESS_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 3, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_REPROCESS_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_REPROCESS_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_COLOR_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 2, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 2, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_COLOR_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_COLOR_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FORCE_COPY_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 1, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FORCE_COPY_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 1, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FORCE_COPY_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FORCE_COPY_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SECOND_LEVEL_Q_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 0, 9, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SECOND_LEVEL_Q_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT), 0, 9, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SECOND_LEVEL_Q_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p), 0, 9, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SECOND_LEVEL_Q_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p), 0, 9, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FIRST_LEVEL_Q_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 2, 7, 9, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FIRST_LEVEL_Q_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 2, 7, 9, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FIRST_LEVEL_Q_READ(r, p)                  FIELD_MREAD_16((uint8_t *)(p) + 2, 7, 9, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FIRST_LEVEL_Q_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)(p) + 2, 7, 9, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FLAG_1588_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 3, 6, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FLAG_1588_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 3, 6, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FLAG_1588_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_FLAG_1588_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_COHERENT_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 3, 5, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_COHERENT_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 3, 5, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_COHERENT_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 3, 5, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_COHERENT_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 3, 5, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_HN_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 3, 0, 5, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_HN_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 3, 0, 5, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_HN_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 5, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_HN_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 5, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_1_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 4, 6, 10, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_1_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 4, 6, 10, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_1_READ(r, p)                          FIELD_MREAD_16((uint8_t *)(p) + 4, 6, 10, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_1_WRITE(v, p)                         FIELD_MWRITE_16((uint8_t *)(p) + 4, 6, 10, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PRIORITY_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 5, 5, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PRIORITY_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 5, 5, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PRIORITY_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 5, 5, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PRIORITY_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 5, 5, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_INGRESS_CONG_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 5, 4, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_INGRESS_CONG_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 5, 4, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_INGRESS_CONG_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 5, 4, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_INGRESS_CONG_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 5, 4, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 5, 3, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 5, 3, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 5, 3, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 5, 3, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PACKET_LENGTH_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 6, 0, 14, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PACKET_LENGTH_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 6, 0, 14, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PACKET_LENGTH_READ(r, p)                  FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PACKET_LENGTH_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_DROP_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 8, 7, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_DROP_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 8, 7, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_DROP_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_DROP_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_1_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 8, 6, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_1_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 8, 6, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_1_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_1_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_0_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 8, 0, 30, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_0_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 8, 0, 30, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_0_READ(r, p)                          FIELD_MREAD_32((uint8_t *)(p) + 8, 0, 30, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_ABS_0_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)(p) + 8, 0, 30, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_AGG_PD_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 7, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_AGG_PD_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 7, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_AGG_PD_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_AGG_PD_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_0_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 6, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_0_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 6, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_0_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_TARGET_MEM_0_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ_G(r, g, idx)      GROUP_FIELD_MREAD_32((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 0, 30, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE_G(v, g, idx)     GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 0, 30, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PAYLOAD_OFFSET_SOP_READ(r, p)             FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 30, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_PAYLOAD_OFFSET_SOP_WRITE(v, p)            FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 30, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SOP_FPM_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 3, 11, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SOP_FPM_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 3, 11, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SOP_FPM_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p) + 12, 3, 11, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SOP_FPM_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p) + 12, 3, 11, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN_FPM_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 0, 19, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN_FPM_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 0, 19, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN_FPM_READ(r, p)                         FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 19, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN_FPM_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 19, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN_NUM_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 7, 7, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN_NUM_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 12, 7, 7, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN_NUM_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 12, 7, 7, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN_NUM_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 12, 7, 7, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SOP_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 13, 0, 7, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SOP_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 13, 0, 7, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SOP_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 7, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_SOP_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 7, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN0_FIRST_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN0_FIRST_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(COPY_TO_ABS_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN0_FIRST_READ(r, p)                      MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_COPY_TO_ABS_DESCRIPTOR_BN0_FIRST_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 14, (v))
/* <<<COPY_TO_ABS_DESCRIPTOR_STRUCT */

/* <<<RDD_COPY_TO_ABS_DESCRIPTOR */


/* >>>RDD_BBH_TX_REPORT_DESCRIPTOR */
#define BBH_TX_REPORT_DESCRIPTOR_LAST_F_OFFSET                                                            31
#define BBH_TX_REPORT_DESCRIPTOR_LAST_F_WIDTH                                                             1
#define BBH_TX_REPORT_DESCRIPTOR_LAST_OFFSET                                                              4
#define BBH_TX_REPORT_DESCRIPTOR_LAST_WORD_OFFSET                                                         1
#define BBH_TX_REPORT_DESCRIPTOR_LAST_F_OFFSET_MOD8                                                       7
#define BBH_TX_REPORT_DESCRIPTOR_LAST_F_OFFSET_MOD16                                                      15
#define BBH_TX_REPORT_DESCRIPTOR_CHANNEL_NUMBER_F_OFFSET                                                  24
#define BBH_TX_REPORT_DESCRIPTOR_CHANNEL_NUMBER_F_WIDTH                                                   5
#define BBH_TX_REPORT_DESCRIPTOR_CHANNEL_NUMBER_OFFSET                                                    4
#define BBH_TX_REPORT_DESCRIPTOR_CHANNEL_NUMBER_WORD_OFFSET                                               1
#define BBH_TX_REPORT_DESCRIPTOR_CHANNEL_NUMBER_F_OFFSET_MOD8                                             0
#define BBH_TX_REPORT_DESCRIPTOR_CHANNEL_NUMBER_F_OFFSET_MOD16                                            8
#define BBH_TX_REPORT_DESCRIPTOR_CHANNEL_REPORT_F_OFFSET                                                  0
#define BBH_TX_REPORT_DESCRIPTOR_CHANNEL_REPORT_F_WIDTH                                                   24
#define BBH_TX_REPORT_DESCRIPTOR_CHANNEL_REPORT_OFFSET                                                    4
#define BBH_TX_REPORT_DESCRIPTOR_CHANNEL_REPORT_WORD_OFFSET                                               1

/* >>>BBH_TX_REPORT_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved1     	;
        uint32_t	last          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	channel_number	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	channel_report	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved1     	;
        uint32_t	channel_report	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	channel_number	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	last          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BBH_TX_REPORT_DESCRIPTOR_STRUCT;

#define RDD_BBH_TX_REPORT_DESCRIPTOR_LAST_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBH_TX_REPORT_DESCRIPTOR_STRUCT) + 4, 7, 1, (r))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_LAST_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBH_TX_REPORT_DESCRIPTOR_STRUCT) + 4, 7, 1, (v))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_LAST_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 4, 7, 1, (r))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_LAST_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 4, 7, 1, (v))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_CHANNEL_NUMBER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBH_TX_REPORT_DESCRIPTOR_STRUCT) + 4, 0, 5, (r))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_CHANNEL_NUMBER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBH_TX_REPORT_DESCRIPTOR_STRUCT) + 4, 0, 5, (v))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_CHANNEL_NUMBER_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 4, 0, 5, (r))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_CHANNEL_NUMBER_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 4, 0, 5, (v))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_CHANNEL_REPORT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(BBH_TX_REPORT_DESCRIPTOR_STRUCT) + 4, 0, 24, (r))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_CHANNEL_REPORT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(BBH_TX_REPORT_DESCRIPTOR_STRUCT) + 4, 0, 24, (v))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_CHANNEL_REPORT_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 4, 0, 24, (r))
#define RDD_BBH_TX_REPORT_DESCRIPTOR_CHANNEL_REPORT_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 4, 0, 24, (v))
/* <<<BBH_TX_REPORT_DESCRIPTOR_STRUCT */

/* <<<RDD_BBH_TX_REPORT_DESCRIPTOR */


/* >>>RDD_BBH_TX_DBR_REPORT_DESCRIPTOR */
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_3_F_OFFSET                                                   16
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_3_F_WIDTH                                                    16
#define BBH_TX_DBR_REPORT_DESCRIPTOR_BBH_TX_DBR_REPORT_DESCRIPTOR_OFFSET                                      0
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_3_OFFSET                                                     0
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_3_WORD_OFFSET                                                0
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_2_F_OFFSET                                                   0
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_2_F_WIDTH                                                    16
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_2_OFFSET                                                     2
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_2_WORD_OFFSET                                                0
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_1_F_OFFSET                                                   16
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_1_F_WIDTH                                                    16
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_1_OFFSET                                                     4
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_1_WORD_OFFSET                                                1
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_0_F_OFFSET                                                   0
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_0_F_WIDTH                                                    16
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_0_OFFSET                                                     6
#define BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_0_WORD_OFFSET                                                1

/* >>>BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	wan_channel_3	;
        uint16_t	wan_channel_2	;
        uint16_t	wan_channel_1	;
        uint16_t	wan_channel_0	;
#else
        uint16_t	wan_channel_2	;
        uint16_t	wan_channel_3	;
        uint16_t	wan_channel_0	;
        uint16_t	wan_channel_1	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT;

#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_3_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT), (r))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_3_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT), (v))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_3_READ(r, p)                 MREAD_16((uint8_t *)(p), (r))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_3_WRITE(v, p)                MWRITE_16((uint8_t *)(p), (v))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_2_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT) + 2, (r))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_2_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT) + 2, (v))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_2_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_2_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_1_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_1_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_1_READ(r, p)                 MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_1_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_0_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT) + 6, (r))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_0_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT) + 6, (v))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_0_READ(r, p)                 MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_BBH_TX_DBR_REPORT_DESCRIPTOR_WAN_CHANNEL_0_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 6, (v))
/* <<<BBH_TX_DBR_REPORT_DESCRIPTOR_STRUCT */

/* <<<RDD_BBH_TX_DBR_REPORT_DESCRIPTOR */


/* >>>RDD_PARSER_SUMMARY */
#define PARSER_SUMMARY_DA_FILTER_MATCH_F_OFFSET                                                 31
#define PARSER_SUMMARY_DA_FILTER_MATCH_F_WIDTH                                                  1
#define PARSER_SUMMARY_PARSER_SUMMARY_OFFSET                                                    0
#define PARSER_SUMMARY_DA_FILTER_MATCH_OFFSET                                                   0
#define PARSER_SUMMARY_DA_FILTER_MATCH_WORD_OFFSET                                              0
#define PARSER_SUMMARY_DA_FILTER_MATCH_F_OFFSET_MOD8                                            7
#define PARSER_SUMMARY_DA_FILTER_MATCH_F_OFFSET_MOD16                                           15
#define PARSER_SUMMARY_IP_FRAGMENT_F_OFFSET                                                     30
#define PARSER_SUMMARY_IP_FRAGMENT_F_WIDTH                                                      1
#define PARSER_SUMMARY_IP_FRAGMENT_OFFSET                                                       0
#define PARSER_SUMMARY_IP_FRAGMENT_WORD_OFFSET                                                  0
#define PARSER_SUMMARY_IP_FRAGMENT_F_OFFSET_MOD8                                                6
#define PARSER_SUMMARY_IP_FRAGMENT_F_OFFSET_MOD16                                               14
#define PARSER_SUMMARY_L4_1588_F_OFFSET                                                         29
#define PARSER_SUMMARY_L4_1588_F_WIDTH                                                          1
#define PARSER_SUMMARY_L4_1588_OFFSET                                                           0
#define PARSER_SUMMARY_L4_1588_WORD_OFFSET                                                      0
#define PARSER_SUMMARY_L4_1588_F_OFFSET_MOD8                                                    5
#define PARSER_SUMMARY_L4_1588_F_OFFSET_MOD16                                                   13
#define PARSER_SUMMARY_TCP_UDP_F_OFFSET                                                         28
#define PARSER_SUMMARY_TCP_UDP_F_WIDTH                                                          1
#define PARSER_SUMMARY_TCP_UDP_OFFSET                                                           0
#define PARSER_SUMMARY_TCP_UDP_WORD_OFFSET                                                      0
#define PARSER_SUMMARY_TCP_UDP_F_OFFSET_MOD8                                                    4
#define PARSER_SUMMARY_TCP_UDP_F_OFFSET_MOD16                                                   12
#define PARSER_SUMMARY_DHCP_F_OFFSET                                                            27
#define PARSER_SUMMARY_DHCP_F_WIDTH                                                             1
#define PARSER_SUMMARY_DHCP_OFFSET                                                              0
#define PARSER_SUMMARY_DHCP_WORD_OFFSET                                                         0
#define PARSER_SUMMARY_DHCP_F_OFFSET_MOD8                                                       3
#define PARSER_SUMMARY_DHCP_F_OFFSET_MOD16                                                      11
#define PARSER_SUMMARY_BROADCAST_F_OFFSET                                                       26
#define PARSER_SUMMARY_BROADCAST_F_WIDTH                                                        1
#define PARSER_SUMMARY_BROADCAST_OFFSET                                                         0
#define PARSER_SUMMARY_BROADCAST_WORD_OFFSET                                                    0
#define PARSER_SUMMARY_BROADCAST_F_OFFSET_MOD8                                                  2
#define PARSER_SUMMARY_BROADCAST_F_OFFSET_MOD16                                                 10
#define PARSER_SUMMARY_MULTICAST_F_OFFSET                                                       25
#define PARSER_SUMMARY_MULTICAST_F_WIDTH                                                        1
#define PARSER_SUMMARY_MULTICAST_OFFSET                                                         0
#define PARSER_SUMMARY_MULTICAST_WORD_OFFSET                                                    0
#define PARSER_SUMMARY_MULTICAST_F_OFFSET_MOD8                                                  1
#define PARSER_SUMMARY_MULTICAST_F_OFFSET_MOD16                                                 9
#define PARSER_SUMMARY_DOS_ATTACK_F_OFFSET                                                      24
#define PARSER_SUMMARY_DOS_ATTACK_F_WIDTH                                                       1
#define PARSER_SUMMARY_DOS_ATTACK_OFFSET                                                        0
#define PARSER_SUMMARY_DOS_ATTACK_WORD_OFFSET                                                   0
#define PARSER_SUMMARY_DOS_ATTACK_F_OFFSET_MOD8                                                 0
#define PARSER_SUMMARY_DOS_ATTACK_F_OFFSET_MOD16                                                8
#define PARSER_SUMMARY_MC_L3_CTL_F_OFFSET                                                       23
#define PARSER_SUMMARY_MC_L3_CTL_F_WIDTH                                                        1
#define PARSER_SUMMARY_MC_L3_CTL_OFFSET                                                         1
#define PARSER_SUMMARY_MC_L3_CTL_WORD_OFFSET                                                    0
#define PARSER_SUMMARY_MC_L3_CTL_F_OFFSET_MOD8                                                  7
#define PARSER_SUMMARY_MC_L3_CTL_F_OFFSET_MOD16                                                 7
#define PARSER_SUMMARY_IP_LENGTH_ERROR_F_OFFSET                                                 22
#define PARSER_SUMMARY_IP_LENGTH_ERROR_F_WIDTH                                                  1
#define PARSER_SUMMARY_IP_LENGTH_ERROR_OFFSET                                                   1
#define PARSER_SUMMARY_IP_LENGTH_ERROR_WORD_OFFSET                                              0
#define PARSER_SUMMARY_IP_LENGTH_ERROR_F_OFFSET_MOD8                                            6
#define PARSER_SUMMARY_IP_LENGTH_ERROR_F_OFFSET_MOD16                                           6
#define PARSER_SUMMARY_ICMPV6_F_OFFSET                                                          21
#define PARSER_SUMMARY_ICMPV6_F_WIDTH                                                           1
#define PARSER_SUMMARY_ICMPV6_OFFSET                                                            1
#define PARSER_SUMMARY_ICMPV6_WORD_OFFSET                                                       0
#define PARSER_SUMMARY_ICMPV6_F_OFFSET_MOD8                                                     5
#define PARSER_SUMMARY_ICMPV6_F_OFFSET_MOD16                                                    5
#define PARSER_SUMMARY_HEADER_LENGTH_ERROR_F_OFFSET                                             20
#define PARSER_SUMMARY_HEADER_LENGTH_ERROR_F_WIDTH                                              1
#define PARSER_SUMMARY_HEADER_LENGTH_ERROR_OFFSET                                               1
#define PARSER_SUMMARY_HEADER_LENGTH_ERROR_WORD_OFFSET                                          0
#define PARSER_SUMMARY_HEADER_LENGTH_ERROR_F_OFFSET_MOD8                                        4
#define PARSER_SUMMARY_HEADER_LENGTH_ERROR_F_OFFSET_MOD16                                       4
#define PARSER_SUMMARY_CHECKSUM_ERROR_F_OFFSET                                                  19
#define PARSER_SUMMARY_CHECKSUM_ERROR_F_WIDTH                                                   1
#define PARSER_SUMMARY_CHECKSUM_ERROR_OFFSET                                                    1
#define PARSER_SUMMARY_CHECKSUM_ERROR_WORD_OFFSET                                               0
#define PARSER_SUMMARY_CHECKSUM_ERROR_F_OFFSET_MOD8                                             3
#define PARSER_SUMMARY_CHECKSUM_ERROR_F_OFFSET_MOD16                                            3
#define PARSER_SUMMARY_VERSION_MISMATCH_F_OFFSET                                                18
#define PARSER_SUMMARY_VERSION_MISMATCH_F_WIDTH                                                 1
#define PARSER_SUMMARY_VERSION_MISMATCH_OFFSET                                                  1
#define PARSER_SUMMARY_VERSION_MISMATCH_WORD_OFFSET                                             0
#define PARSER_SUMMARY_VERSION_MISMATCH_F_OFFSET_MOD8                                           2
#define PARSER_SUMMARY_VERSION_MISMATCH_F_OFFSET_MOD16                                          2
#define PARSER_SUMMARY_L3_PROTOCOL_F_OFFSET                                                     16
#define PARSER_SUMMARY_L3_PROTOCOL_F_WIDTH                                                      2
#define PARSER_SUMMARY_L3_PROTOCOL_OFFSET                                                       1
#define PARSER_SUMMARY_L3_PROTOCOL_WORD_OFFSET                                                  0
#define PARSER_SUMMARY_L3_PROTOCOL_F_OFFSET_MOD8                                                0
#define PARSER_SUMMARY_L3_PROTOCOL_F_OFFSET_MOD16                                               0
#define PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_F_OFFSET                                          15
#define PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_F_WIDTH                                           1
#define PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_OFFSET                                            2
#define PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_WORD_OFFSET                                       0
#define PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_F_OFFSET_MOD8                                     7
#define PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_F_OFFSET_MOD16                                    15
#define PARSER_SUMMARY_TCP_FLAG_F_OFFSET                                                        14
#define PARSER_SUMMARY_TCP_FLAG_F_WIDTH                                                         1
#define PARSER_SUMMARY_TCP_FLAG_OFFSET                                                          2
#define PARSER_SUMMARY_TCP_FLAG_WORD_OFFSET                                                     0
#define PARSER_SUMMARY_TCP_FLAG_F_OFFSET_MOD8                                                   6
#define PARSER_SUMMARY_TCP_FLAG_F_OFFSET_MOD16                                                  14
#define PARSER_SUMMARY_EXCEPTION_F_OFFSET                                                       13
#define PARSER_SUMMARY_EXCEPTION_F_WIDTH                                                        1
#define PARSER_SUMMARY_EXCEPTION_OFFSET                                                         2
#define PARSER_SUMMARY_EXCEPTION_WORD_OFFSET                                                    0
#define PARSER_SUMMARY_EXCEPTION_F_OFFSET_MOD8                                                  5
#define PARSER_SUMMARY_EXCEPTION_F_OFFSET_MOD16                                                 13
#define PARSER_SUMMARY_IP_MC_L2_F_OFFSET                                                        12
#define PARSER_SUMMARY_IP_MC_L2_F_WIDTH                                                         1
#define PARSER_SUMMARY_IP_MC_L2_OFFSET                                                          2
#define PARSER_SUMMARY_IP_MC_L2_WORD_OFFSET                                                     0
#define PARSER_SUMMARY_IP_MC_L2_F_OFFSET_MOD8                                                   4
#define PARSER_SUMMARY_IP_MC_L2_F_OFFSET_MOD16                                                  12
#define PARSER_SUMMARY_MC_L3_F_OFFSET                                                           11
#define PARSER_SUMMARY_MC_L3_F_WIDTH                                                            1
#define PARSER_SUMMARY_MC_L3_OFFSET                                                             2
#define PARSER_SUMMARY_MC_L3_WORD_OFFSET                                                        0
#define PARSER_SUMMARY_MC_L3_F_OFFSET_MOD8                                                      3
#define PARSER_SUMMARY_MC_L3_F_OFFSET_MOD16                                                     11
#define PARSER_SUMMARY_ERROR_F_OFFSET                                                           10
#define PARSER_SUMMARY_ERROR_F_WIDTH                                                            1
#define PARSER_SUMMARY_ERROR_OFFSET                                                             2
#define PARSER_SUMMARY_ERROR_WORD_OFFSET                                                        0
#define PARSER_SUMMARY_ERROR_F_OFFSET_MOD8                                                      2
#define PARSER_SUMMARY_ERROR_F_OFFSET_MOD16                                                     10
#define PARSER_SUMMARY_TUNNEL_F_OFFSET                                                          9
#define PARSER_SUMMARY_TUNNEL_F_WIDTH                                                           1
#define PARSER_SUMMARY_TUNNEL_OFFSET                                                            2
#define PARSER_SUMMARY_TUNNEL_WORD_OFFSET                                                       0
#define PARSER_SUMMARY_TUNNEL_F_OFFSET_MOD8                                                     1
#define PARSER_SUMMARY_TUNNEL_F_OFFSET_MOD16                                                    9
#define PARSER_SUMMARY__5_TUP_VALID_F_OFFSET                                                    8
#define PARSER_SUMMARY__5_TUP_VALID_F_WIDTH                                                     1
#define PARSER_SUMMARY__5_TUP_VALID_OFFSET                                                      2
#define PARSER_SUMMARY__5_TUP_VALID_WORD_OFFSET                                                 0
#define PARSER_SUMMARY__5_TUP_VALID_F_OFFSET_MOD8                                               0
#define PARSER_SUMMARY__5_TUP_VALID_F_OFFSET_MOD16                                              8
#define PARSER_SUMMARY_ETHERNET_VERSION_F_OFFSET                                                6
#define PARSER_SUMMARY_ETHERNET_VERSION_F_WIDTH                                                 2
#define PARSER_SUMMARY_ETHERNET_VERSION_OFFSET                                                  3
#define PARSER_SUMMARY_ETHERNET_VERSION_WORD_OFFSET                                             0
#define PARSER_SUMMARY_ETHERNET_VERSION_F_OFFSET_MOD8                                           6
#define PARSER_SUMMARY_ETHERNET_VERSION_F_OFFSET_MOD16                                          6
#define PARSER_SUMMARY_DNS_F_OFFSET                                                             5
#define PARSER_SUMMARY_DNS_F_WIDTH                                                              1
#define PARSER_SUMMARY_DNS_OFFSET                                                               3
#define PARSER_SUMMARY_DNS_WORD_OFFSET                                                          0
#define PARSER_SUMMARY_DNS_F_OFFSET_MOD8                                                        5
#define PARSER_SUMMARY_DNS_F_OFFSET_MOD16                                                       5
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_OFFSET                                               4
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_WIDTH                                                1
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_OFFSET                                                 3
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_WORD_OFFSET                                            0
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_OFFSET_MOD8                                          4
#define PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_OFFSET_MOD16                                         4
#define PARSER_SUMMARY_L2_PROTOCOL_F_OFFSET                                                     0
#define PARSER_SUMMARY_L2_PROTOCOL_F_WIDTH                                                      4
#define PARSER_SUMMARY_L2_PROTOCOL_OFFSET                                                       3
#define PARSER_SUMMARY_L2_PROTOCOL_WORD_OFFSET                                                  0
#define PARSER_SUMMARY_L2_PROTOCOL_F_OFFSET_MOD8                                                0
#define PARSER_SUMMARY_L2_PROTOCOL_F_OFFSET_MOD16                                               0

/* >>>PARSER_SUMMARY_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	da_filter_match       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_fragment           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l4_1588               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcp_udp               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dhcp                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	broadcast             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	multicast             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dos_attack            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_l3_ctl             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_length_error       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	icmpv6                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	header_length_error   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	checksum_error        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	version_mismatch      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l3_protocol           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ipv6_ext_header_filter	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcp_flag              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	exception             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_mc_l2              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_l3                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	error                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tunnel                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	_5_tup_valid          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ethernet_version      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dns                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_ip_fragment     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l2_protocol           	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	l2_protocol           	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	first_ip_fragment     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dns                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ethernet_version      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	_5_tup_valid          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tunnel                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	error                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_l3                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_mc_l2              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	exception             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcp_flag              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ipv6_ext_header_filter	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l3_protocol           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	version_mismatch      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	checksum_error        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	header_length_error   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	icmpv6                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_length_error       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mc_l3_ctl             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dos_attack            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	multicast             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	broadcast             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dhcp                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	tcp_udp               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	l4_1588               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ip_fragment           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	da_filter_match       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) PARSER_SUMMARY_STRUCT;

#define RDD_PARSER_SUMMARY_DA_FILTER_MATCH_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 7, 1, (r))
#define RDD_PARSER_SUMMARY_DA_FILTER_MATCH_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 7, 1, (v))
#define RDD_PARSER_SUMMARY_DA_FILTER_MATCH_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_PARSER_SUMMARY_DA_FILTER_MATCH_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_PARSER_SUMMARY_IP_FRAGMENT_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 6, 1, (r))
#define RDD_PARSER_SUMMARY_IP_FRAGMENT_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 6, 1, (v))
#define RDD_PARSER_SUMMARY_IP_FRAGMENT_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_PARSER_SUMMARY_IP_FRAGMENT_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_PARSER_SUMMARY_L4_1588_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 5, 1, (r))
#define RDD_PARSER_SUMMARY_L4_1588_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 5, 1, (v))
#define RDD_PARSER_SUMMARY_L4_1588_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_PARSER_SUMMARY_L4_1588_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_PARSER_SUMMARY_TCP_UDP_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 4, 1, (r))
#define RDD_PARSER_SUMMARY_TCP_UDP_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 4, 1, (v))
#define RDD_PARSER_SUMMARY_TCP_UDP_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_PARSER_SUMMARY_TCP_UDP_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_PARSER_SUMMARY_DHCP_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 3, 1, (r))
#define RDD_PARSER_SUMMARY_DHCP_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 3, 1, (v))
#define RDD_PARSER_SUMMARY_DHCP_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_PARSER_SUMMARY_DHCP_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_PARSER_SUMMARY_BROADCAST_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 2, 1, (r))
#define RDD_PARSER_SUMMARY_BROADCAST_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 2, 1, (v))
#define RDD_PARSER_SUMMARY_BROADCAST_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_PARSER_SUMMARY_BROADCAST_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_PARSER_SUMMARY_MULTICAST_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 1, 1, (r))
#define RDD_PARSER_SUMMARY_MULTICAST_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 1, 1, (v))
#define RDD_PARSER_SUMMARY_MULTICAST_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_PARSER_SUMMARY_MULTICAST_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_PARSER_SUMMARY_DOS_ATTACK_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 0, 1, (r))
#define RDD_PARSER_SUMMARY_DOS_ATTACK_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT), 0, 1, (v))
#define RDD_PARSER_SUMMARY_DOS_ATTACK_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p), 0, 1, (r))
#define RDD_PARSER_SUMMARY_DOS_ATTACK_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p), 0, 1, (v))
#define RDD_PARSER_SUMMARY_MC_L3_CTL_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 7, 1, (r))
#define RDD_PARSER_SUMMARY_MC_L3_CTL_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 7, 1, (v))
#define RDD_PARSER_SUMMARY_MC_L3_CTL_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 1, 7, 1, (r))
#define RDD_PARSER_SUMMARY_MC_L3_CTL_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 1, 7, 1, (v))
#define RDD_PARSER_SUMMARY_IP_LENGTH_ERROR_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 6, 1, (r))
#define RDD_PARSER_SUMMARY_IP_LENGTH_ERROR_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 6, 1, (v))
#define RDD_PARSER_SUMMARY_IP_LENGTH_ERROR_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 1, 6, 1, (r))
#define RDD_PARSER_SUMMARY_IP_LENGTH_ERROR_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 1, 6, 1, (v))
#define RDD_PARSER_SUMMARY_ICMPV6_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 5, 1, (r))
#define RDD_PARSER_SUMMARY_ICMPV6_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 5, 1, (v))
#define RDD_PARSER_SUMMARY_ICMPV6_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 1, 5, 1, (r))
#define RDD_PARSER_SUMMARY_ICMPV6_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 1, 5, 1, (v))
#define RDD_PARSER_SUMMARY_HEADER_LENGTH_ERROR_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 4, 1, (r))
#define RDD_PARSER_SUMMARY_HEADER_LENGTH_ERROR_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 4, 1, (v))
#define RDD_PARSER_SUMMARY_HEADER_LENGTH_ERROR_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 1, 4, 1, (r))
#define RDD_PARSER_SUMMARY_HEADER_LENGTH_ERROR_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 1, 4, 1, (v))
#define RDD_PARSER_SUMMARY_CHECKSUM_ERROR_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 3, 1, (r))
#define RDD_PARSER_SUMMARY_CHECKSUM_ERROR_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 3, 1, (v))
#define RDD_PARSER_SUMMARY_CHECKSUM_ERROR_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 1, 3, 1, (r))
#define RDD_PARSER_SUMMARY_CHECKSUM_ERROR_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 1, 3, 1, (v))
#define RDD_PARSER_SUMMARY_VERSION_MISMATCH_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 2, 1, (r))
#define RDD_PARSER_SUMMARY_VERSION_MISMATCH_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 2, 1, (v))
#define RDD_PARSER_SUMMARY_VERSION_MISMATCH_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 1, 2, 1, (r))
#define RDD_PARSER_SUMMARY_VERSION_MISMATCH_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 1, 2, 1, (v))
#define RDD_PARSER_SUMMARY_L3_PROTOCOL_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 0, 2, (r))
#define RDD_PARSER_SUMMARY_L3_PROTOCOL_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 1, 0, 2, (v))
#define RDD_PARSER_SUMMARY_L3_PROTOCOL_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 2, (r))
#define RDD_PARSER_SUMMARY_L3_PROTOCOL_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 2, (v))
#define RDD_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 7, 1, (r))
#define RDD_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 7, 1, (v))
#define RDD_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 2, 7, 1, (r))
#define RDD_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 2, 7, 1, (v))
#define RDD_PARSER_SUMMARY_TCP_FLAG_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 6, 1, (r))
#define RDD_PARSER_SUMMARY_TCP_FLAG_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 6, 1, (v))
#define RDD_PARSER_SUMMARY_TCP_FLAG_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 2, 6, 1, (r))
#define RDD_PARSER_SUMMARY_TCP_FLAG_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 2, 6, 1, (v))
#define RDD_PARSER_SUMMARY_EXCEPTION_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 5, 1, (r))
#define RDD_PARSER_SUMMARY_EXCEPTION_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 5, 1, (v))
#define RDD_PARSER_SUMMARY_EXCEPTION_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 2, 5, 1, (r))
#define RDD_PARSER_SUMMARY_EXCEPTION_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 2, 5, 1, (v))
#define RDD_PARSER_SUMMARY_IP_MC_L2_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 4, 1, (r))
#define RDD_PARSER_SUMMARY_IP_MC_L2_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 4, 1, (v))
#define RDD_PARSER_SUMMARY_IP_MC_L2_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 2, 4, 1, (r))
#define RDD_PARSER_SUMMARY_IP_MC_L2_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 2, 4, 1, (v))
#define RDD_PARSER_SUMMARY_MC_L3_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 3, 1, (r))
#define RDD_PARSER_SUMMARY_MC_L3_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 3, 1, (v))
#define RDD_PARSER_SUMMARY_MC_L3_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 1, (r))
#define RDD_PARSER_SUMMARY_MC_L3_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 1, (v))
#define RDD_PARSER_SUMMARY_ERROR_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 2, 1, (r))
#define RDD_PARSER_SUMMARY_ERROR_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 2, 1, (v))
#define RDD_PARSER_SUMMARY_ERROR_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 2, 2, 1, (r))
#define RDD_PARSER_SUMMARY_ERROR_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 2, 2, 1, (v))
#define RDD_PARSER_SUMMARY_TUNNEL_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 1, 1, (r))
#define RDD_PARSER_SUMMARY_TUNNEL_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 1, 1, (v))
#define RDD_PARSER_SUMMARY_TUNNEL_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 2, 1, 1, (r))
#define RDD_PARSER_SUMMARY_TUNNEL_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 2, 1, 1, (v))
#define RDD_PARSER_SUMMARY__5_TUP_VALID_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 0, 1, (r))
#define RDD_PARSER_SUMMARY__5_TUP_VALID_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 2, 0, 1, (v))
#define RDD_PARSER_SUMMARY__5_TUP_VALID_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 1, (r))
#define RDD_PARSER_SUMMARY__5_TUP_VALID_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 1, (v))
#define RDD_PARSER_SUMMARY_ETHERNET_VERSION_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 3, 6, 2, (r))
#define RDD_PARSER_SUMMARY_ETHERNET_VERSION_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 3, 6, 2, (v))
#define RDD_PARSER_SUMMARY_ETHERNET_VERSION_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 2, (r))
#define RDD_PARSER_SUMMARY_ETHERNET_VERSION_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 2, (v))
#define RDD_PARSER_SUMMARY_DNS_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 3, 5, 1, (r))
#define RDD_PARSER_SUMMARY_DNS_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 3, 5, 1, (v))
#define RDD_PARSER_SUMMARY_DNS_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 3, 5, 1, (r))
#define RDD_PARSER_SUMMARY_DNS_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 3, 5, 1, (v))
#define RDD_PARSER_SUMMARY_FIRST_IP_FRAGMENT_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 3, 4, 1, (r))
#define RDD_PARSER_SUMMARY_FIRST_IP_FRAGMENT_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 3, 4, 1, (v))
#define RDD_PARSER_SUMMARY_FIRST_IP_FRAGMENT_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 3, 4, 1, (r))
#define RDD_PARSER_SUMMARY_FIRST_IP_FRAGMENT_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 3, 4, 1, (v))
#define RDD_PARSER_SUMMARY_L2_PROTOCOL_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 3, 0, 4, (r))
#define RDD_PARSER_SUMMARY_L2_PROTOCOL_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_SUMMARY_STRUCT) + 3, 0, 4, (v))
#define RDD_PARSER_SUMMARY_L2_PROTOCOL_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 4, (r))
#define RDD_PARSER_SUMMARY_L2_PROTOCOL_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 4, (v))
/* <<<PARSER_SUMMARY_STRUCT */

/* <<<RDD_PARSER_SUMMARY */


/* >>>RDD_PARSER_RESULTS */
#define PARSER_RESULTS_PARSER_SUMMARY_DA_FILTER_MATCH_F_OFFSET                                  31
#define PARSER_RESULTS_PARSER_SUMMARY_DA_FILTER_MATCH_F_WIDTH                                   1
#define PARSER_RESULTS_PARSER_SUMMARY_OFFSET                                                    0
#define PARSER_RESULTS_PARSER_SUMMARY_DA_FILTER_MATCH_OFFSET                                    0
#define PARSER_RESULTS_PARSER_SUMMARY_DA_FILTER_MATCH_WORD_OFFSET                               0
#define PARSER_RESULTS_PARSER_SUMMARY_DA_FILTER_MATCH_F_OFFSET_MOD8                             7
#define PARSER_RESULTS_PARSER_SUMMARY_DA_FILTER_MATCH_F_OFFSET_MOD16                            15
#define PARSER_RESULTS_PARSER_SUMMARY_IP_FRAGMENT_F_OFFSET                                      30
#define PARSER_RESULTS_PARSER_SUMMARY_IP_FRAGMENT_F_WIDTH                                       1
#define PARSER_RESULTS_PARSER_SUMMARY_IP_FRAGMENT_OFFSET                                        0
#define PARSER_RESULTS_PARSER_SUMMARY_IP_FRAGMENT_WORD_OFFSET                                   0
#define PARSER_RESULTS_PARSER_SUMMARY_IP_FRAGMENT_F_OFFSET_MOD8                                 6
#define PARSER_RESULTS_PARSER_SUMMARY_IP_FRAGMENT_F_OFFSET_MOD16                                14
#define PARSER_RESULTS_PARSER_SUMMARY_L4_1588_F_OFFSET                                          29
#define PARSER_RESULTS_PARSER_SUMMARY_L4_1588_F_WIDTH                                           1
#define PARSER_RESULTS_PARSER_SUMMARY_L4_1588_OFFSET                                            0
#define PARSER_RESULTS_PARSER_SUMMARY_L4_1588_WORD_OFFSET                                       0
#define PARSER_RESULTS_PARSER_SUMMARY_L4_1588_F_OFFSET_MOD8                                     5
#define PARSER_RESULTS_PARSER_SUMMARY_L4_1588_F_OFFSET_MOD16                                    13
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_UDP_F_OFFSET                                          28
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_UDP_F_WIDTH                                           1
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_UDP_OFFSET                                            0
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_UDP_WORD_OFFSET                                       0
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_UDP_F_OFFSET_MOD8                                     4
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_UDP_F_OFFSET_MOD16                                    12
#define PARSER_RESULTS_PARSER_SUMMARY_DHCP_F_OFFSET                                             27
#define PARSER_RESULTS_PARSER_SUMMARY_DHCP_F_WIDTH                                              1
#define PARSER_RESULTS_PARSER_SUMMARY_DHCP_OFFSET                                               0
#define PARSER_RESULTS_PARSER_SUMMARY_DHCP_WORD_OFFSET                                          0
#define PARSER_RESULTS_PARSER_SUMMARY_DHCP_F_OFFSET_MOD8                                        3
#define PARSER_RESULTS_PARSER_SUMMARY_DHCP_F_OFFSET_MOD16                                       11
#define PARSER_RESULTS_PARSER_SUMMARY_BROADCAST_F_OFFSET                                        26
#define PARSER_RESULTS_PARSER_SUMMARY_BROADCAST_F_WIDTH                                         1
#define PARSER_RESULTS_PARSER_SUMMARY_BROADCAST_OFFSET                                          0
#define PARSER_RESULTS_PARSER_SUMMARY_BROADCAST_WORD_OFFSET                                     0
#define PARSER_RESULTS_PARSER_SUMMARY_BROADCAST_F_OFFSET_MOD8                                   2
#define PARSER_RESULTS_PARSER_SUMMARY_BROADCAST_F_OFFSET_MOD16                                  10
#define PARSER_RESULTS_PARSER_SUMMARY_MULTICAST_F_OFFSET                                        25
#define PARSER_RESULTS_PARSER_SUMMARY_MULTICAST_F_WIDTH                                         1
#define PARSER_RESULTS_PARSER_SUMMARY_MULTICAST_OFFSET                                          0
#define PARSER_RESULTS_PARSER_SUMMARY_MULTICAST_WORD_OFFSET                                     0
#define PARSER_RESULTS_PARSER_SUMMARY_MULTICAST_F_OFFSET_MOD8                                   1
#define PARSER_RESULTS_PARSER_SUMMARY_MULTICAST_F_OFFSET_MOD16                                  9
#define PARSER_RESULTS_PARSER_SUMMARY_DOS_ATTACK_F_OFFSET                                       24
#define PARSER_RESULTS_PARSER_SUMMARY_DOS_ATTACK_F_WIDTH                                        1
#define PARSER_RESULTS_PARSER_SUMMARY_DOS_ATTACK_OFFSET                                         0
#define PARSER_RESULTS_PARSER_SUMMARY_DOS_ATTACK_WORD_OFFSET                                    0
#define PARSER_RESULTS_PARSER_SUMMARY_DOS_ATTACK_F_OFFSET_MOD8                                  0
#define PARSER_RESULTS_PARSER_SUMMARY_DOS_ATTACK_F_OFFSET_MOD16                                 8
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_CTL_F_OFFSET                                        23
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_CTL_F_WIDTH                                         1
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_CTL_OFFSET                                          1
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_CTL_WORD_OFFSET                                     0
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_CTL_F_OFFSET_MOD8                                   7
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_CTL_F_OFFSET_MOD16                                  7
#define PARSER_RESULTS_PARSER_SUMMARY_IP_LENGTH_ERROR_F_OFFSET                                  22
#define PARSER_RESULTS_PARSER_SUMMARY_IP_LENGTH_ERROR_F_WIDTH                                   1
#define PARSER_RESULTS_PARSER_SUMMARY_IP_LENGTH_ERROR_OFFSET                                    1
#define PARSER_RESULTS_PARSER_SUMMARY_IP_LENGTH_ERROR_WORD_OFFSET                               0
#define PARSER_RESULTS_PARSER_SUMMARY_IP_LENGTH_ERROR_F_OFFSET_MOD8                             6
#define PARSER_RESULTS_PARSER_SUMMARY_IP_LENGTH_ERROR_F_OFFSET_MOD16                            6
#define PARSER_RESULTS_PARSER_SUMMARY_ICMPV6_F_OFFSET                                           21
#define PARSER_RESULTS_PARSER_SUMMARY_ICMPV6_F_WIDTH                                            1
#define PARSER_RESULTS_PARSER_SUMMARY_ICMPV6_OFFSET                                             1
#define PARSER_RESULTS_PARSER_SUMMARY_ICMPV6_WORD_OFFSET                                        0
#define PARSER_RESULTS_PARSER_SUMMARY_ICMPV6_F_OFFSET_MOD8                                      5
#define PARSER_RESULTS_PARSER_SUMMARY_ICMPV6_F_OFFSET_MOD16                                     5
#define PARSER_RESULTS_PARSER_SUMMARY_HEADER_LENGTH_ERROR_F_OFFSET                              20
#define PARSER_RESULTS_PARSER_SUMMARY_HEADER_LENGTH_ERROR_F_WIDTH                               1
#define PARSER_RESULTS_PARSER_SUMMARY_HEADER_LENGTH_ERROR_OFFSET                                1
#define PARSER_RESULTS_PARSER_SUMMARY_HEADER_LENGTH_ERROR_WORD_OFFSET                           0
#define PARSER_RESULTS_PARSER_SUMMARY_HEADER_LENGTH_ERROR_F_OFFSET_MOD8                         4
#define PARSER_RESULTS_PARSER_SUMMARY_HEADER_LENGTH_ERROR_F_OFFSET_MOD16                        4
#define PARSER_RESULTS_PARSER_SUMMARY_CHECKSUM_ERROR_F_OFFSET                                   19
#define PARSER_RESULTS_PARSER_SUMMARY_CHECKSUM_ERROR_F_WIDTH                                    1
#define PARSER_RESULTS_PARSER_SUMMARY_CHECKSUM_ERROR_OFFSET                                     1
#define PARSER_RESULTS_PARSER_SUMMARY_CHECKSUM_ERROR_WORD_OFFSET                                0
#define PARSER_RESULTS_PARSER_SUMMARY_CHECKSUM_ERROR_F_OFFSET_MOD8                              3
#define PARSER_RESULTS_PARSER_SUMMARY_CHECKSUM_ERROR_F_OFFSET_MOD16                             3
#define PARSER_RESULTS_PARSER_SUMMARY_VERSION_MISMATCH_F_OFFSET                                 18
#define PARSER_RESULTS_PARSER_SUMMARY_VERSION_MISMATCH_F_WIDTH                                  1
#define PARSER_RESULTS_PARSER_SUMMARY_VERSION_MISMATCH_OFFSET                                   1
#define PARSER_RESULTS_PARSER_SUMMARY_VERSION_MISMATCH_WORD_OFFSET                              0
#define PARSER_RESULTS_PARSER_SUMMARY_VERSION_MISMATCH_F_OFFSET_MOD8                            2
#define PARSER_RESULTS_PARSER_SUMMARY_VERSION_MISMATCH_F_OFFSET_MOD16                           2
#define PARSER_RESULTS_PARSER_SUMMARY_L3_PROTOCOL_F_OFFSET                                      16
#define PARSER_RESULTS_PARSER_SUMMARY_L3_PROTOCOL_F_WIDTH                                       2
#define PARSER_RESULTS_PARSER_SUMMARY_L3_PROTOCOL_OFFSET                                        1
#define PARSER_RESULTS_PARSER_SUMMARY_L3_PROTOCOL_WORD_OFFSET                                   0
#define PARSER_RESULTS_PARSER_SUMMARY_L3_PROTOCOL_F_OFFSET_MOD8                                 0
#define PARSER_RESULTS_PARSER_SUMMARY_L3_PROTOCOL_F_OFFSET_MOD16                                0
#define PARSER_RESULTS_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_F_OFFSET                           15
#define PARSER_RESULTS_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_F_WIDTH                            1
#define PARSER_RESULTS_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_OFFSET                             2
#define PARSER_RESULTS_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_WORD_OFFSET                        0
#define PARSER_RESULTS_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_F_OFFSET_MOD8                      7
#define PARSER_RESULTS_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_F_OFFSET_MOD16                     15
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_FLAG_F_OFFSET                                         14
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_FLAG_F_WIDTH                                          1
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_FLAG_OFFSET                                           2
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_FLAG_WORD_OFFSET                                      0
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_FLAG_F_OFFSET_MOD8                                    6
#define PARSER_RESULTS_PARSER_SUMMARY_TCP_FLAG_F_OFFSET_MOD16                                   14
#define PARSER_RESULTS_PARSER_SUMMARY_EXCEPTION_F_OFFSET                                        13
#define PARSER_RESULTS_PARSER_SUMMARY_EXCEPTION_F_WIDTH                                         1
#define PARSER_RESULTS_PARSER_SUMMARY_EXCEPTION_OFFSET                                          2
#define PARSER_RESULTS_PARSER_SUMMARY_EXCEPTION_WORD_OFFSET                                     0
#define PARSER_RESULTS_PARSER_SUMMARY_EXCEPTION_F_OFFSET_MOD8                                   5
#define PARSER_RESULTS_PARSER_SUMMARY_EXCEPTION_F_OFFSET_MOD16                                  13
#define PARSER_RESULTS_PARSER_SUMMARY_IP_MC_L2_F_OFFSET                                         12
#define PARSER_RESULTS_PARSER_SUMMARY_IP_MC_L2_F_WIDTH                                          1
#define PARSER_RESULTS_PARSER_SUMMARY_IP_MC_L2_OFFSET                                           2
#define PARSER_RESULTS_PARSER_SUMMARY_IP_MC_L2_WORD_OFFSET                                      0
#define PARSER_RESULTS_PARSER_SUMMARY_IP_MC_L2_F_OFFSET_MOD8                                    4
#define PARSER_RESULTS_PARSER_SUMMARY_IP_MC_L2_F_OFFSET_MOD16                                   12
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_F_OFFSET                                            11
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_F_WIDTH                                             1
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_OFFSET                                              2
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_WORD_OFFSET                                         0
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_F_OFFSET_MOD8                                       3
#define PARSER_RESULTS_PARSER_SUMMARY_MC_L3_F_OFFSET_MOD16                                      11
#define PARSER_RESULTS_PARSER_SUMMARY_ERROR_F_OFFSET                                            10
#define PARSER_RESULTS_PARSER_SUMMARY_ERROR_F_WIDTH                                             1
#define PARSER_RESULTS_PARSER_SUMMARY_ERROR_OFFSET                                              2
#define PARSER_RESULTS_PARSER_SUMMARY_ERROR_WORD_OFFSET                                         0
#define PARSER_RESULTS_PARSER_SUMMARY_ERROR_F_OFFSET_MOD8                                       2
#define PARSER_RESULTS_PARSER_SUMMARY_ERROR_F_OFFSET_MOD16                                      10
#define PARSER_RESULTS_PARSER_SUMMARY_TUNNEL_F_OFFSET                                           9
#define PARSER_RESULTS_PARSER_SUMMARY_TUNNEL_F_WIDTH                                            1
#define PARSER_RESULTS_PARSER_SUMMARY_TUNNEL_OFFSET                                             2
#define PARSER_RESULTS_PARSER_SUMMARY_TUNNEL_WORD_OFFSET                                        0
#define PARSER_RESULTS_PARSER_SUMMARY_TUNNEL_F_OFFSET_MOD8                                      1
#define PARSER_RESULTS_PARSER_SUMMARY_TUNNEL_F_OFFSET_MOD16                                     9
#define PARSER_RESULTS_PARSER_SUMMARY__5_TUP_VALID_F_OFFSET                                     8
#define PARSER_RESULTS_PARSER_SUMMARY__5_TUP_VALID_F_WIDTH                                      1
#define PARSER_RESULTS_PARSER_SUMMARY__5_TUP_VALID_OFFSET                                       2
#define PARSER_RESULTS_PARSER_SUMMARY__5_TUP_VALID_WORD_OFFSET                                  0
#define PARSER_RESULTS_PARSER_SUMMARY__5_TUP_VALID_F_OFFSET_MOD8                                0
#define PARSER_RESULTS_PARSER_SUMMARY__5_TUP_VALID_F_OFFSET_MOD16                               8
#define PARSER_RESULTS_PARSER_SUMMARY_ETHERNET_VERSION_F_OFFSET                                 6
#define PARSER_RESULTS_PARSER_SUMMARY_ETHERNET_VERSION_F_WIDTH                                  2
#define PARSER_RESULTS_PARSER_SUMMARY_ETHERNET_VERSION_OFFSET                                   3
#define PARSER_RESULTS_PARSER_SUMMARY_ETHERNET_VERSION_WORD_OFFSET                              0
#define PARSER_RESULTS_PARSER_SUMMARY_ETHERNET_VERSION_F_OFFSET_MOD8                            6
#define PARSER_RESULTS_PARSER_SUMMARY_ETHERNET_VERSION_F_OFFSET_MOD16                           6
#define PARSER_RESULTS_PARSER_SUMMARY_DNS_F_OFFSET                                              5
#define PARSER_RESULTS_PARSER_SUMMARY_DNS_F_WIDTH                                               1
#define PARSER_RESULTS_PARSER_SUMMARY_DNS_OFFSET                                                3
#define PARSER_RESULTS_PARSER_SUMMARY_DNS_WORD_OFFSET                                           0
#define PARSER_RESULTS_PARSER_SUMMARY_DNS_F_OFFSET_MOD8                                         5
#define PARSER_RESULTS_PARSER_SUMMARY_DNS_F_OFFSET_MOD16                                        5
#define PARSER_RESULTS_PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_OFFSET                                4
#define PARSER_RESULTS_PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_WIDTH                                 1
#define PARSER_RESULTS_PARSER_SUMMARY_FIRST_IP_FRAGMENT_OFFSET                                  3
#define PARSER_RESULTS_PARSER_SUMMARY_FIRST_IP_FRAGMENT_WORD_OFFSET                             0
#define PARSER_RESULTS_PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_OFFSET_MOD8                           4
#define PARSER_RESULTS_PARSER_SUMMARY_FIRST_IP_FRAGMENT_F_OFFSET_MOD16                          4
#define PARSER_RESULTS_PARSER_SUMMARY_L2_PROTOCOL_F_OFFSET                                      0
#define PARSER_RESULTS_PARSER_SUMMARY_L2_PROTOCOL_F_WIDTH                                       4
#define PARSER_RESULTS_PARSER_SUMMARY_L2_PROTOCOL_OFFSET                                        3
#define PARSER_RESULTS_PARSER_SUMMARY_L2_PROTOCOL_WORD_OFFSET                                   0
#define PARSER_RESULTS_PARSER_SUMMARY_L2_PROTOCOL_F_OFFSET_MOD8                                 0
#define PARSER_RESULTS_PARSER_SUMMARY_L2_PROTOCOL_F_OFFSET_MOD16                                0
#define PARSER_RESULTS_PARSER_L4_PROTOCOL_F_OFFSET                                              28
#define PARSER_RESULTS_PARSER_L4_PROTOCOL_F_WIDTH                                               4
#define PARSER_RESULTS_PARSER_OFFSET                                                            4
#define PARSER_RESULTS_PARSER_L4_PROTOCOL_OFFSET                                                4
#define PARSER_RESULTS_PARSER_L4_PROTOCOL_WORD_OFFSET                                           1
#define PARSER_RESULTS_PARSER_L4_PROTOCOL_F_OFFSET_MOD8                                         4
#define PARSER_RESULTS_PARSER_L4_PROTOCOL_F_OFFSET_MOD16                                        12
#define PARSER_RESULTS_PARSER_V6_AH_F_OFFSET                                                    27
#define PARSER_RESULTS_PARSER_V6_AH_F_WIDTH                                                     1
#define PARSER_RESULTS_PARSER_V6_AH_OFFSET                                                      4
#define PARSER_RESULTS_PARSER_V6_AH_WORD_OFFSET                                                 1
#define PARSER_RESULTS_PARSER_V6_AH_F_OFFSET_MOD8                                               3
#define PARSER_RESULTS_PARSER_V6_AH_F_OFFSET_MOD16                                              11
#define PARSER_RESULTS_PARSER_V6_DEST_OPT_F_OFFSET                                              26
#define PARSER_RESULTS_PARSER_V6_DEST_OPT_F_WIDTH                                               1
#define PARSER_RESULTS_PARSER_V6_DEST_OPT_OFFSET                                                4
#define PARSER_RESULTS_PARSER_V6_DEST_OPT_WORD_OFFSET                                           1
#define PARSER_RESULTS_PARSER_V6_DEST_OPT_F_OFFSET_MOD8                                         2
#define PARSER_RESULTS_PARSER_V6_DEST_OPT_F_OFFSET_MOD16                                        10
#define PARSER_RESULTS_PARSER_V6_ROUTE_F_OFFSET                                                 25
#define PARSER_RESULTS_PARSER_V6_ROUTE_F_WIDTH                                                  1
#define PARSER_RESULTS_PARSER_V6_ROUTE_OFFSET                                                   4
#define PARSER_RESULTS_PARSER_V6_ROUTE_WORD_OFFSET                                              1
#define PARSER_RESULTS_PARSER_V6_ROUTE_F_OFFSET_MOD8                                            1
#define PARSER_RESULTS_PARSER_V6_ROUTE_F_OFFSET_MOD16                                           9
#define PARSER_RESULTS_PARSER_V6_HOP_F_OFFSET                                                   24
#define PARSER_RESULTS_PARSER_V6_HOP_F_WIDTH                                                    1
#define PARSER_RESULTS_PARSER_V6_HOP_OFFSET                                                     4
#define PARSER_RESULTS_PARSER_V6_HOP_WORD_OFFSET                                                1
#define PARSER_RESULTS_PARSER_V6_HOP_F_OFFSET_MOD8                                              0
#define PARSER_RESULTS_PARSER_V6_HOP_F_OFFSET_MOD16                                             8
#define PARSER_RESULTS_PARSER_TCP_FLAGS_F_OFFSET                                                16
#define PARSER_RESULTS_PARSER_TCP_FLAGS_F_WIDTH                                                 8
#define PARSER_RESULTS_PARSER_TCP_FLAGS_OFFSET                                                  5
#define PARSER_RESULTS_PARSER_TCP_FLAGS_WORD_OFFSET                                             1
#define PARSER_RESULTS_PARSER_TCP_FLAGS_F_OFFSET_MOD16                                          0
#define PARSER_RESULTS_PARSER_LAYER3_OFFSET_F_OFFSET                                            8
#define PARSER_RESULTS_PARSER_LAYER3_OFFSET_F_WIDTH                                             8
#define PARSER_RESULTS_PARSER_LAYER3_OFFSET_OFFSET                                              6
#define PARSER_RESULTS_PARSER_LAYER3_OFFSET_WORD_OFFSET                                         1
#define PARSER_RESULTS_PARSER_LAYER3_OFFSET_F_OFFSET_MOD16                                      8
#define PARSER_RESULTS_PARSER_LAYER4_OFFSET_F_OFFSET                                            0
#define PARSER_RESULTS_PARSER_LAYER4_OFFSET_F_WIDTH                                             8
#define PARSER_RESULTS_PARSER_LAYER4_OFFSET_OFFSET                                              7
#define PARSER_RESULTS_PARSER_LAYER4_OFFSET_WORD_OFFSET                                         1
#define PARSER_RESULTS_PARSER_LAYER4_OFFSET_F_OFFSET_MOD16                                      0
#define PARSER_RESULTS_PARSER_OUTER_VLAN_F_OFFSET                                               16
#define PARSER_RESULTS_PARSER_OUTER_VLAN_F_WIDTH                                                16
#define PARSER_RESULTS_PARSER_OUTER_VLAN_OFFSET                                                 8
#define PARSER_RESULTS_PARSER_OUTER_VLAN_WORD_OFFSET                                            2
#define PARSER_RESULTS_PARSER_INNER_VLAN_F_OFFSET                                               0
#define PARSER_RESULTS_PARSER_INNER_VLAN_F_WIDTH                                                16
#define PARSER_RESULTS_PARSER_INNER_VLAN_OFFSET                                                 10
#define PARSER_RESULTS_PARSER_INNER_VLAN_WORD_OFFSET                                            2
#define PARSER_RESULTS_PARSER_ETHENRNET_VERSION_F_OFFSET                                        30
#define PARSER_RESULTS_PARSER_ETHENRNET_VERSION_F_WIDTH                                         2
#define PARSER_RESULTS_PARSER_ETHENRNET_VERSION_OFFSET                                          12
#define PARSER_RESULTS_PARSER_ETHENRNET_VERSION_WORD_OFFSET                                     3
#define PARSER_RESULTS_PARSER_ETHENRNET_VERSION_F_OFFSET_MOD8                                   6
#define PARSER_RESULTS_PARSER_ETHENRNET_VERSION_F_OFFSET_MOD16                                  14
#define PARSER_RESULTS_PARSER_P_TAG_F_OFFSET                                                    29
#define PARSER_RESULTS_PARSER_P_TAG_F_WIDTH                                                     1
#define PARSER_RESULTS_PARSER_P_TAG_OFFSET                                                      12
#define PARSER_RESULTS_PARSER_P_TAG_WORD_OFFSET                                                 3
#define PARSER_RESULTS_PARSER_P_TAG_F_OFFSET_MOD8                                               5
#define PARSER_RESULTS_PARSER_P_TAG_F_OFFSET_MOD16                                              13
#define PARSER_RESULTS_PARSER_VID_FILTER_HIT_F_OFFSET                                           28
#define PARSER_RESULTS_PARSER_VID_FILTER_HIT_F_WIDTH                                            1
#define PARSER_RESULTS_PARSER_VID_FILTER_HIT_OFFSET                                             12
#define PARSER_RESULTS_PARSER_VID_FILTER_HIT_WORD_OFFSET                                        3
#define PARSER_RESULTS_PARSER_VID_FILTER_HIT_F_OFFSET_MOD8                                      4
#define PARSER_RESULTS_PARSER_VID_FILTER_HIT_F_OFFSET_MOD16                                     12
#define PARSER_RESULTS_PARSER_VID_FILTER_MATCH_F_OFFSET                                         24
#define PARSER_RESULTS_PARSER_VID_FILTER_MATCH_F_WIDTH                                          4
#define PARSER_RESULTS_PARSER_VID_FILTER_MATCH_OFFSET                                           12
#define PARSER_RESULTS_PARSER_VID_FILTER_MATCH_WORD_OFFSET                                      3
#define PARSER_RESULTS_PARSER_VID_FILTER_MATCH_F_OFFSET_MOD8                                    0
#define PARSER_RESULTS_PARSER_VID_FILTER_MATCH_F_OFFSET_MOD16                                   8
#define PARSER_RESULTS_PARSER_TAG_TYPE_F_OFFSET                                                 22
#define PARSER_RESULTS_PARSER_TAG_TYPE_F_WIDTH                                                  2
#define PARSER_RESULTS_PARSER_TAG_TYPE_OFFSET                                                   13
#define PARSER_RESULTS_PARSER_TAG_TYPE_WORD_OFFSET                                              3
#define PARSER_RESULTS_PARSER_TAG_TYPE_F_OFFSET_MOD8                                            6
#define PARSER_RESULTS_PARSER_TAG_TYPE_F_OFFSET_MOD16                                           6
#define PARSER_RESULTS_PARSER_TPID_VLAN_0_F_OFFSET                                              19
#define PARSER_RESULTS_PARSER_TPID_VLAN_0_F_WIDTH                                               3
#define PARSER_RESULTS_PARSER_TPID_VLAN_0_OFFSET                                                13
#define PARSER_RESULTS_PARSER_TPID_VLAN_0_WORD_OFFSET                                           3
#define PARSER_RESULTS_PARSER_TPID_VLAN_0_F_OFFSET_MOD8                                         3
#define PARSER_RESULTS_PARSER_TPID_VLAN_0_F_OFFSET_MOD16                                        3
#define PARSER_RESULTS_PARSER_TPID_VLAN_1_F_OFFSET                                              16
#define PARSER_RESULTS_PARSER_TPID_VLAN_1_F_WIDTH                                               3
#define PARSER_RESULTS_PARSER_TPID_VLAN_1_OFFSET                                                13
#define PARSER_RESULTS_PARSER_TPID_VLAN_1_WORD_OFFSET                                           3
#define PARSER_RESULTS_PARSER_TPID_VLAN_1_F_OFFSET_MOD8                                         0
#define PARSER_RESULTS_PARSER_TPID_VLAN_1_F_OFFSET_MOD16                                        0
#define PARSER_RESULTS_PARSER_DA_FILTER_NUMBER_F_OFFSET                                         12
#define PARSER_RESULTS_PARSER_DA_FILTER_NUMBER_F_WIDTH                                          4
#define PARSER_RESULTS_PARSER_DA_FILTER_NUMBER_OFFSET                                           14
#define PARSER_RESULTS_PARSER_DA_FILTER_NUMBER_WORD_OFFSET                                      3
#define PARSER_RESULTS_PARSER_DA_FILTER_NUMBER_F_OFFSET_MOD8                                    4
#define PARSER_RESULTS_PARSER_DA_FILTER_NUMBER_F_OFFSET_MOD16                                   12
#define PARSER_RESULTS_PARSER_UNUSED_F_OFFSET                                                   8
#define PARSER_RESULTS_PARSER_UNUSED_F_WIDTH                                                    4
#define PARSER_RESULTS_PARSER_UNUSED_OFFSET                                                     14
#define PARSER_RESULTS_PARSER_UNUSED_WORD_OFFSET                                                3
#define PARSER_RESULTS_PARSER_UNUSED_F_OFFSET_MOD8                                              0
#define PARSER_RESULTS_PARSER_UNUSED_F_OFFSET_MOD16                                             8
#define PARSER_RESULTS_PARSER_LAYER2_OFFSET_F_OFFSET                                            0
#define PARSER_RESULTS_PARSER_LAYER2_OFFSET_F_WIDTH                                             8
#define PARSER_RESULTS_PARSER_LAYER2_OFFSET_OFFSET                                              15
#define PARSER_RESULTS_PARSER_LAYER2_OFFSET_WORD_OFFSET                                         3
#define PARSER_RESULTS_PARSER_LAYER2_OFFSET_F_OFFSET_MOD16                                      0
#define PARSER_RESULTS_PARSER_IP_FILTER_MATCH_F_OFFSET                                          31
#define PARSER_RESULTS_PARSER_IP_FILTER_MATCH_F_WIDTH                                           1
#define PARSER_RESULTS_PARSER_IP_FILTER_MATCH_OFFSET                                            16
#define PARSER_RESULTS_PARSER_IP_FILTER_MATCH_WORD_OFFSET                                       4
#define PARSER_RESULTS_PARSER_IP_FILTER_MATCH_F_OFFSET_MOD8                                     7
#define PARSER_RESULTS_PARSER_IP_FILTER_MATCH_F_OFFSET_MOD16                                    15
#define PARSER_RESULTS_PARSER_IP_FILTER_NUM_F_OFFSET                                            30
#define PARSER_RESULTS_PARSER_IP_FILTER_NUM_F_WIDTH                                             1
#define PARSER_RESULTS_PARSER_IP_FILTER_NUM_OFFSET                                              16
#define PARSER_RESULTS_PARSER_IP_FILTER_NUM_WORD_OFFSET                                         4
#define PARSER_RESULTS_PARSER_IP_FILTER_NUM_F_OFFSET_MOD8                                       6
#define PARSER_RESULTS_PARSER_IP_FILTER_NUM_F_OFFSET_MOD16                                      14
#define PARSER_RESULTS_PARSER_UNUSED1_F_OFFSET                                                  25
#define PARSER_RESULTS_PARSER_UNUSED1_F_WIDTH                                                   5
#define PARSER_RESULTS_PARSER_UNUSED1_OFFSET                                                    16
#define PARSER_RESULTS_PARSER_UNUSED1_WORD_OFFSET                                               4
#define PARSER_RESULTS_PARSER_UNUSED1_F_OFFSET_MOD8                                             1
#define PARSER_RESULTS_PARSER_UNUSED1_F_OFFSET_MOD16                                            9
#define PARSER_RESULTS_PARSER_IPV6_F_OFFSET                                                     24
#define PARSER_RESULTS_PARSER_IPV6_F_WIDTH                                                      1
#define PARSER_RESULTS_PARSER_IPV6_OFFSET                                                       16
#define PARSER_RESULTS_PARSER_IPV6_WORD_OFFSET                                                  4
#define PARSER_RESULTS_PARSER_IPV6_F_OFFSET_MOD8                                                0
#define PARSER_RESULTS_PARSER_IPV6_F_OFFSET_MOD16                                               8
#define PARSER_RESULTS_PARSER_PROTOCOL_F_OFFSET                                                 16
#define PARSER_RESULTS_PARSER_PROTOCOL_F_WIDTH                                                  8
#define PARSER_RESULTS_PARSER_PROTOCOL_OFFSET                                                   17
#define PARSER_RESULTS_PARSER_PROTOCOL_WORD_OFFSET                                              4
#define PARSER_RESULTS_PARSER_PROTOCOL_F_OFFSET_MOD16                                           0
#define PARSER_RESULTS_PARSER_FRAGMENT_HEADER_OFFSET_F_OFFSET                                   8
#define PARSER_RESULTS_PARSER_FRAGMENT_HEADER_OFFSET_F_WIDTH                                    8
#define PARSER_RESULTS_PARSER_FRAGMENT_HEADER_OFFSET_OFFSET                                     18
#define PARSER_RESULTS_PARSER_FRAGMENT_HEADER_OFFSET_WORD_OFFSET                                4
#define PARSER_RESULTS_PARSER_FRAGMENT_HEADER_OFFSET_F_OFFSET_MOD16                             8
#define PARSER_RESULTS_PARSER_UNUSED3_F_OFFSET                                                  4
#define PARSER_RESULTS_PARSER_UNUSED3_F_WIDTH                                                   4
#define PARSER_RESULTS_PARSER_UNUSED3_OFFSET                                                    19
#define PARSER_RESULTS_PARSER_UNUSED3_WORD_OFFSET                                               4
#define PARSER_RESULTS_PARSER_UNUSED3_F_OFFSET_MOD8                                             4
#define PARSER_RESULTS_PARSER_UNUSED3_F_OFFSET_MOD16                                            4
#define PARSER_RESULTS_PARSER_DOS_ATTACK_REASON_F_OFFSET                                        0
#define PARSER_RESULTS_PARSER_DOS_ATTACK_REASON_F_WIDTH                                         4
#define PARSER_RESULTS_PARSER_DOS_ATTACK_REASON_OFFSET                                          19
#define PARSER_RESULTS_PARSER_DOS_ATTACK_REASON_WORD_OFFSET                                     4
#define PARSER_RESULTS_PARSER_DOS_ATTACK_REASON_F_OFFSET_MOD8                                   0
#define PARSER_RESULTS_PARSER_DOS_ATTACK_REASON_F_OFFSET_MOD16                                  0
#define PARSER_RESULTS_PARSER_ICMPV6_TYPE_F_OFFSET                                              24
#define PARSER_RESULTS_PARSER_ICMPV6_TYPE_F_WIDTH                                               8
#define PARSER_RESULTS_PARSER_ICMPV6_TYPE_OFFSET                                                20
#define PARSER_RESULTS_PARSER_ICMPV6_TYPE_WORD_OFFSET                                           5
#define PARSER_RESULTS_PARSER_ICMPV6_TYPE_F_OFFSET_MOD16                                        8
#define PARSER_RESULTS_PARSER_IP_TTL_F_OFFSET                                                   16
#define PARSER_RESULTS_PARSER_IP_TTL_F_WIDTH                                                    8
#define PARSER_RESULTS_PARSER_IP_TTL_OFFSET                                                     21
#define PARSER_RESULTS_PARSER_IP_TTL_WORD_OFFSET                                                5
#define PARSER_RESULTS_PARSER_IP_TTL_F_OFFSET_MOD16                                             0
#define PARSER_RESULTS_PARSER_IP_LENGTH_F_OFFSET                                                0
#define PARSER_RESULTS_PARSER_IP_LENGTH_F_WIDTH                                                 16
#define PARSER_RESULTS_PARSER_IP_LENGTH_OFFSET                                                  22
#define PARSER_RESULTS_PARSER_IP_LENGTH_WORD_OFFSET                                             5
#define PARSER_RESULTS_PARSER_NOT_WRITTEN_F_OFFSET                                              0
#define PARSER_RESULTS_PARSER_NOT_WRITTEN_F_WIDTH                                               32
#define PARSER_RESULTS_PARSER_NOT_WRITTEN_OFFSET                                                24
#define PARSER_RESULTS_PARSER_NOT_WRITTEN_WORD_OFFSET                                           6
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_DA_CRC_F_OFFSET                                      0
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_DA_CRC_F_WIDTH                                       32
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_OFFSET                                               28
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_DA_CRC_OFFSET                                        28
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_DA_CRC_WORD_OFFSET                                   7
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_SA_CRC_F_OFFSET                                      0
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_SA_CRC_F_WIDTH                                       32
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_SA_CRC_OFFSET                                        32
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_SA_CRC_WORD_OFFSET                                   8
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_F_OFFSET                              0
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_F_WIDTH                               32
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_OFFSET                                36
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_WORD_OFFSET                           9
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TOS_F_OFFSET                                         24
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TOS_F_WIDTH                                          8
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TOS_OFFSET                                           40
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TOS_WORD_OFFSET                                      10
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TOS_F_OFFSET_MOD16                                   8
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_OFFSET                                 19
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_WIDTH                                  5
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_OFFSET                                   41
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_WORD_OFFSET                              10
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_OFFSET_MOD8                            3
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_F_OFFSET_MOD16                           3
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLANS_NUM_F_OFFSET                                   16
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLANS_NUM_F_WIDTH                                    3
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLANS_NUM_OFFSET                                     41
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLANS_NUM_WORD_OFFSET                                10
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLANS_NUM_F_OFFSET_MOD8                              0
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLANS_NUM_F_OFFSET_MOD16                             0
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VALID_F_OFFSET                                       15
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VALID_F_WIDTH                                        1
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VALID_OFFSET                                         42
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VALID_WORD_OFFSET                                    10
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VALID_F_OFFSET_MOD8                                  7
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VALID_F_OFFSET_MOD16                                 15
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET                                14
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_WIDTH                                 1
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_OFFSET                                  42
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_WORD_OFFSET                             10
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET_MOD8                           6
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_F_OFFSET_MOD16                          14
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LLC_SNAP_F_OFFSET                                    13
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LLC_SNAP_F_WIDTH                                     1
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LLC_SNAP_OFFSET                                      42
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LLC_SNAP_WORD_OFFSET                                 10
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LLC_SNAP_F_OFFSET_MOD8                               5
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LLC_SNAP_F_OFFSET_MOD16                              13
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_CTX_EXT_F_OFFSET                                     12
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_CTX_EXT_F_WIDTH                                      1
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_CTX_EXT_OFFSET                                       42
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_CTX_EXT_WORD_OFFSET                                  10
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_CTX_EXT_F_OFFSET_MOD8                                4
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_CTX_EXT_F_OFFSET_MOD16                               12
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_RESERVED1_F_OFFSET                                   4
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_RESERVED1_F_WIDTH                                    8
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_RESERVED1_OFFSET                                     42
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_RESERVED1_WORD_OFFSET                                10
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_RESERVED1_F_OFFSET_MOD16                             4
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_OFFSET                                 0
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_WIDTH                                  4
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_OFFSET                                   43
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_WORD_OFFSET                              10
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_OFFSET_MOD8                            0
#define PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_F_OFFSET_MOD16                           0
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_IP_F_OFFSET                                      0
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_IP_F_WIDTH                                       32
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_OFFSET                                               44
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_IP_OFFSET                                        44
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_IP_WORD_OFFSET                                   11
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_IP_F_OFFSET                                      0
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_IP_F_WIDTH                                       32
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_IP_OFFSET                                        48
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_IP_WORD_OFFSET                                   12
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_PORT_F_OFFSET                                    16
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_PORT_F_WIDTH                                     16
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_PORT_OFFSET                                      52
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_PORT_WORD_OFFSET                                 13
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_PORT_F_OFFSET                                    0
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_PORT_F_WIDTH                                     16
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_PORT_OFFSET                                      54
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_PORT_WORD_OFFSET                                 13
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_F_OFFSET                                  0
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_F_WIDTH                                   32
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_OFFSET                                    56
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_WORD_OFFSET                               14
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_F_OFFSET                                 0
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_F_WIDTH                                  32
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_OFFSET                                   60
#define PARSER_RESULTS_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_WORD_OFFSET                              15
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DA_CRC_F_OFFSET                                      0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DA_CRC_F_WIDTH                                       32
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OFFSET                                               64
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DA_CRC_OFFSET                                        64
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DA_CRC_WORD_OFFSET                                   16
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SA_CRC_F_OFFSET                                      0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SA_CRC_F_WIDTH                                       32
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SA_CRC_OFFSET                                        68
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SA_CRC_WORD_OFFSET                                   17
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_IP_F_OFFSET                                      0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_IP_F_WIDTH                                       32
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_IP_OFFSET                                        72
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_IP_WORD_OFFSET                                   18
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_IP_F_OFFSET                                      0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_IP_F_WIDTH                                       32
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_IP_OFFSET                                        76
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_IP_WORD_OFFSET                                   19
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_PORT_F_OFFSET                                    16
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_PORT_F_WIDTH                                     16
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_PORT_OFFSET                                      80
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_PORT_WORD_OFFSET                                 20
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_PORT_F_OFFSET                                    0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_PORT_F_WIDTH                                     16
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_PORT_OFFSET                                      82
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_PORT_WORD_OFFSET                                 20
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_F_OFFSET                               16
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_F_WIDTH                                16
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_OFFSET                                 84
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_WORD_OFFSET                            21
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_PROTOCOL_F_OFFSET                                    8
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_PROTOCOL_F_WIDTH                                     8
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_PROTOCOL_OFFSET                                      86
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_PROTOCOL_WORD_OFFSET                                 21
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_PROTOCOL_F_OFFSET_MOD16                              8
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_F_OFFSET                                 5
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_F_WIDTH                                  3
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_OFFSET                                   87
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_WORD_OFFSET                              21
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_F_OFFSET_MOD8                            5
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_F_OFFSET_MOD16                           5
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_F_OFFSET                                 2
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_F_WIDTH                                  3
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_OFFSET                                   87
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_WORD_OFFSET                              21
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_F_OFFSET_MOD8                            2
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_F_OFFSET_MOD16                           2
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV6_F_OFFSET                                        1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV6_F_WIDTH                                         1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV6_OFFSET                                          87
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV6_WORD_OFFSET                                     21
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV6_F_OFFSET_MOD8                                   1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV6_F_OFFSET_MOD16                                  1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV4_F_OFFSET                                        0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV4_F_WIDTH                                         1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV4_OFFSET                                          87
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV4_WORD_OFFSET                                     21
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV4_F_OFFSET_MOD8                                   0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV4_F_OFFSET_MOD16                                  0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_PBIT_F_OFFSET                                  29
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_PBIT_F_WIDTH                                   3
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_PBIT_OFFSET                                    88
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_PBIT_WORD_OFFSET                               22
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_PBIT_F_OFFSET_MOD8                             5
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_PBIT_F_OFFSET_MOD16                            13
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_CFI_F_OFFSET                                   28
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_CFI_F_WIDTH                                    1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_CFI_OFFSET                                     88
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_CFI_WORD_OFFSET                                22
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_CFI_F_OFFSET_MOD8                              4
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_CFI_F_OFFSET_MOD16                             12
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_VID_F_OFFSET                                   16
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_VID_F_WIDTH                                    12
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_VID_OFFSET                                     88
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_VID_WORD_OFFSET                                22
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_VID_F_OFFSET_MOD16                             0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_PBIT_F_OFFSET                                  13
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_PBIT_F_WIDTH                                   3
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_PBIT_OFFSET                                    90
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_PBIT_WORD_OFFSET                               22
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_PBIT_F_OFFSET_MOD8                             5
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_PBIT_F_OFFSET_MOD16                            13
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_CFI_F_OFFSET                                   12
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_CFI_F_WIDTH                                    1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_CFI_OFFSET                                     90
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_CFI_WORD_OFFSET                                22
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_CFI_F_OFFSET_MOD8                              4
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_CFI_F_OFFSET_MOD16                             12
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_VID_F_OFFSET                                   0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_VID_F_WIDTH                                    12
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_VID_OFFSET                                     90
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_VID_WORD_OFFSET                                22
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_VID_F_OFFSET_MOD16                             0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TOS_F_OFFSET                                         24
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TOS_F_WIDTH                                          8
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TOS_OFFSET                                           92
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TOS_WORD_OFFSET                                      23
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TOS_F_OFFSET_MOD16                                   8
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_F_OFFSET                                 19
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_F_WIDTH                                  5
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_OFFSET                                   93
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_WORD_OFFSET                              23
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_F_OFFSET_MOD8                            3
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_F_OFFSET_MOD16                           3
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_VLANS_NUM_F_OFFSET                                   16
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_VLANS_NUM_F_WIDTH                                    3
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_VLANS_NUM_OFFSET                                     93
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_VLANS_NUM_WORD_OFFSET                                23
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_VLANS_NUM_F_OFFSET_MOD8                              0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_VLANS_NUM_F_OFFSET_MOD16                             0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_L3_F_OFFSET                                       15
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_L3_F_WIDTH                                        1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_L3_OFFSET                                         94
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_L3_WORD_OFFSET                                    23
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_L3_F_OFFSET_MOD8                                  7
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_L3_F_OFFSET_MOD16                                 15
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_BC_F_OFFSET                                          14
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_BC_F_WIDTH                                           1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_BC_OFFSET                                            94
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_BC_WORD_OFFSET                                       23
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_BC_F_OFFSET_MOD8                                     6
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_BC_F_OFFSET_MOD16                                    14
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_F_OFFSET                                          13
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_F_WIDTH                                           1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_OFFSET                                            94
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_WORD_OFFSET                                       23
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_F_OFFSET_MOD8                                     5
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_F_OFFSET_MOD16                                    13
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_F_OFFSET                               12
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_F_WIDTH                                1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_OFFSET                                 94
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_WORD_OFFSET                            23
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_F_OFFSET_MOD8                          4
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_F_OFFSET_MOD16                         12
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_RESERVED3_F_OFFSET                                   9
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_RESERVED3_F_WIDTH                                    3
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_RESERVED3_OFFSET                                     94
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_RESERVED3_WORD_OFFSET                                23
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_RESERVED3_F_OFFSET_MOD8                              1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_RESERVED3_F_OFFSET_MOD16                             9
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TABLE_ID_F_OFFSET                                    8
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TABLE_ID_F_WIDTH                                     1
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TABLE_ID_OFFSET                                      94
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TABLE_ID_WORD_OFFSET                                 23
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TABLE_ID_F_OFFSET_MOD8                               0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TABLE_ID_F_OFFSET_MOD16                              8
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_SSID_F_OFFSET                                    0
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_SSID_F_WIDTH                                     8
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_SSID_OFFSET                                      95
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_SSID_WORD_OFFSET                                 23
#define PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_SSID_F_OFFSET_MOD16                              0

/* >>>PARSER_RESULTS_STRUCT */
typedef union
{
    uint32_t word_32[24];
    uint64_t dword_64[12];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_summary_da_filter_match          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_ip_fragment              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_l4_1588                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_tcp_udp                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_dhcp                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_broadcast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_multicast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_dos_attack               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_mc_l3_ctl                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_ip_length_error          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_icmpv6                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_header_length_error      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_checksum_error           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_version_mismatch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_l3_protocol              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_ipv6_ext_header_filter   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_tcp_flag                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_exception                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_ip_mc_l2                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_mc_l3                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_error                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_tunnel                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary__5_tup_valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_ethernet_version         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_dns                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_first_ip_fragment        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_l2_protocol              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l4_protocol                      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l4_protocol enumeration*/
        uint32_t	parser_v6_ah                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_v6_dest_opt                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_v6_route                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_v6_hop                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	parser_tcp_flags                        	;
        uint8_t	parser_layer3_offset                    	;
        uint8_t	parser_layer4_offset                    	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	parser_outer_vlan                       	;
        uint16_t	parser_inner_vlan                       	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ethenrnet_version                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_p_tag                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_vid_filter_hit                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_vid_filter_match                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_tag_type                         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_tpid_vlan_0                      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_tpid_vlan_1                      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_da_filter_number                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_unused                           	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	parser_layer2_offset                    	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ip_filter_match                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ip_filter_num                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_unused1                          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ipv6                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	parser_protocol                         	;
        uint8_t	parser_fragment_header_offset           	;
        uint32_t	parser_unused3                          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_dos_attack_reason                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	parser_icmpv6_type                      	;
        uint8_t	parser_ip_ttl                           	;
        uint16_t	parser_ip_length                        	;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_not_written                      	;
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l2_lkp_entry_da_crc              	;
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l2_lkp_entry_sa_crc              	;
		};
	};
	/* Union WORD 9 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l2_lkp_entry_vlan_etype_crc      	;
		};
	};
	/* Union WORD 10 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	parser_l2_lkp_entry_tos                 	;
        uint32_t	parser_l2_lkp_entry_lookup_port         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_vlans_num           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_tcp_pure_ack        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_llc_snap            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_ctx_ext             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_reserved1           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_var_len_ctx         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 11 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_src_ip              	;
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_dst_ip              	;
		};
	};
	/* Union WORD 13 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	parser_l3_lkp_entry_src_port            	;
        uint16_t	parser_l3_lkp_entry_dst_port            	;
		};
	};
	/* Union WORD 14 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_l3_lkp_tos          	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	parser_l3_lkp_entry_tos                           	; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_lookup_port                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_vlans_num                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_valid                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_tcp_pure_ack                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_ipv6                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_ctx_ext                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_protocol                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */ /*defined by rdd_parser_l3_protocol enumeration*/
        uint32_t	parser_l3_lkp_entry_var_len_ctx                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	parser_l3_lkp_entry_l3_lkp_tos_port_vlan          	; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
		};
	};
	/* Union WORD 15 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_not_written         	;
		};
	};
	/* Union WORD 16 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_da_crc              	;
		};
	};
	/* Union WORD 17 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_sa_crc              	;
		};
	};
	/* Union WORD 18 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_src_ip              	;
		};
	};
	/* Union WORD 19 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_dst_ip              	;
		};
	};
	/* Union WORD 20 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	parser_ic_lkp_entry_src_port            	;
        uint16_t	parser_ic_lkp_entry_dst_port            	;
		};
	};
	/* Union WORD 21 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	parser_ic_lkp_entry_ethernet_type       	;
        uint8_t	parser_ic_lkp_entry_protocol            	;
        uint32_t	parser_ic_lkp_entry_tpid_vlan_0         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_tpid_vlan_1         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_ipv6                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_ipv4                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 22 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_outer_pbit          	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_outer_cfi           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_outer_vid           	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_inner_pbit          	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_inner_cfi           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_inner_vid           	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 23 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	parser_ic_lkp_entry_tos                 	;
        uint32_t	parser_ic_lkp_entry_lookup_port         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_vlans_num           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_mc_l3               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_bc                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_mc                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_network_layer       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_table_id            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	parser_ic_lkp_entry_gem_ssid            	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reservedSU1_parser_ic_lkp_entry_tos               	;
        uint32_t	reservedSU1_parser_ic_lkp_entry_lookup_port       	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_vlans_num         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_mc_l3             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_bc                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_mc                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_network_layer     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_reserved3         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_table_id          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	parser_ic_lkp_entry_gem                           	; /* Member of PARSER_IC_LKP_ENTRY_gem_ssid union */
		};
		/* Sub Union 2 */
		struct{
        uint8_t	reservedSU2_parser_ic_lkp_entry_tos               	;
        uint32_t	reservedSU2_parser_ic_lkp_entry_lookup_port       	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_vlans_num         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_mc_l3             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_bc                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_mc                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_network_layer     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_reserved3         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_table_id          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4                                         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_IC_LKP_ENTRY_gem_ssid union */
        uint32_t	parser_ic_lkp_entry_ssid                          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_IC_LKP_ENTRY_gem_ssid union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_summary_l2_protocol              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_first_ip_fragment        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_dns                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_ethernet_version         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary__5_tup_valid             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_tunnel                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_error                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_mc_l3                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_ip_mc_l2                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_exception                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_tcp_flag                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_ipv6_ext_header_filter   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_l3_protocol              	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_version_mismatch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_checksum_error           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_header_length_error      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_icmpv6                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_ip_length_error          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_mc_l3_ctl                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_dos_attack               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_multicast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_broadcast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_dhcp                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_tcp_udp                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_l4_1588                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_ip_fragment              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_summary_da_filter_match          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	parser_layer4_offset                    	;
        uint8_t	parser_layer3_offset                    	;
        uint8_t	parser_tcp_flags                        	;
        uint32_t	parser_v6_hop                           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_v6_route                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_v6_dest_opt                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_v6_ah                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l4_protocol                      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /*defined by rdd_parser_l4_protocol enumeration*/
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	parser_inner_vlan                       	;
        uint16_t	parser_outer_vlan                       	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	parser_layer2_offset                    	;
        uint32_t	parser_unused                           	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_da_filter_number                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_tpid_vlan_1                      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_tpid_vlan_0                      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_tag_type                         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_vid_filter_match                 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_vid_filter_hit                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_p_tag                            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ethenrnet_version                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_dos_attack_reason                	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_unused3                          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	parser_fragment_header_offset           	;
        uint8_t	parser_protocol                         	;
        uint32_t	parser_ipv6                             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_unused1                          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ip_filter_num                    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ip_filter_match                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	parser_ip_length                        	;
        uint8_t	parser_ip_ttl                           	;
        uint8_t	parser_icmpv6_type                      	;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_not_written                      	;
		};
	};
	/* Union WORD 7 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l2_lkp_entry_da_crc              	;
		};
	};
	/* Union WORD 8 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l2_lkp_entry_sa_crc              	;
		};
	};
	/* Union WORD 9 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l2_lkp_entry_vlan_etype_crc      	;
		};
	};
	/* Union WORD 10 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l2_lkp_entry_var_len_ctx         	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_reserved1           	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_ctx_ext             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_llc_snap            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_tcp_pure_ack        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_valid               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_vlans_num           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_l2_lkp_entry_lookup_port         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	parser_l2_lkp_entry_tos                 	;
		};
	};
	/* Union WORD 11 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_src_ip              	;
		};
	};
	/* Union WORD 12 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_dst_ip              	;
		};
	};
	/* Union WORD 13 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	parser_l3_lkp_entry_dst_port            	;
        uint16_t	parser_l3_lkp_entry_src_port            	;
		};
	};
	/* Union WORD 14 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_l3_lkp_tos          	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	parser_l3_lkp_entry_var_len_ctx                   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_protocol                      	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */ /*defined by rdd_parser_l3_protocol enumeration*/
        uint32_t	parser_l3_lkp_entry_ctx_ext                       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_ipv6                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_tcp_pure_ack                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_valid                         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_vlans_num                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint32_t	parser_l3_lkp_entry_lookup_port                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
        uint8_t	parser_l3_lkp_entry_tos                           	; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	parser_l3_lkp_entry_l3_lkp_tos_port_vlan          	; /* Member of PARSER_L3_LKP_ENTRY_L3_LKP_TOS union */
		};
	};
	/* Union WORD 15 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_l3_lkp_entry_not_written         	;
		};
	};
	/* Union WORD 16 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_da_crc              	;
		};
	};
	/* Union WORD 17 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_sa_crc              	;
		};
	};
	/* Union WORD 18 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_src_ip              	;
		};
	};
	/* Union WORD 19 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_dst_ip              	;
		};
	};
	/* Union WORD 20 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	parser_ic_lkp_entry_dst_port            	;
        uint16_t	parser_ic_lkp_entry_src_port            	;
		};
	};
	/* Union WORD 21 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_ipv4                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_ipv6                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_tpid_vlan_1         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_tpid_vlan_0         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	parser_ic_lkp_entry_protocol            	;
        uint16_t	parser_ic_lkp_entry_ethernet_type       	;
		};
	};
	/* Union WORD 22 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	parser_ic_lkp_entry_inner_vid           	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_inner_cfi           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_inner_pbit          	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_outer_vid           	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_outer_cfi           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_outer_pbit          	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 23 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	parser_ic_lkp_entry_gem_ssid            	; /* This is a field union */
        uint32_t	parser_ic_lkp_entry_table_id            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_network_layer       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_mc                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_bc                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_mc_l3               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_vlans_num           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	parser_ic_lkp_entry_lookup_port         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	parser_ic_lkp_entry_tos                 	;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	parser_ic_lkp_entry_gem                           	; /* Member of PARSER_IC_LKP_ENTRY_gem_ssid union */
        uint32_t	reservedSU1_parser_ic_lkp_entry_table_id          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_reserved3         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_network_layer     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_mc                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_bc                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_mc_l3             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_vlans_num         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_parser_ic_lkp_entry_lookup_port       	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reservedSU1_parser_ic_lkp_entry_tos               	;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	parser_ic_lkp_entry_ssid                          	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_IC_LKP_ENTRY_gem_ssid union */
        uint32_t	reserved4                                         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of PARSER_IC_LKP_ENTRY_gem_ssid union */
        uint32_t	reservedSU2_parser_ic_lkp_entry_table_id          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_reserved3         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_network_layer     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_mc                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_bc                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_mc_l3             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_vlans_num         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_parser_ic_lkp_entry_lookup_port       	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reservedSU2_parser_ic_lkp_entry_tos               	;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) PARSER_RESULTS_STRUCT;

#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DA_FILTER_MATCH_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DA_FILTER_MATCH_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DA_FILTER_MATCH_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DA_FILTER_MATCH_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_FRAGMENT_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_FRAGMENT_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_FRAGMENT_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_FRAGMENT_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L4_1588_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L4_1588_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L4_1588_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L4_1588_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TCP_UDP_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TCP_UDP_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TCP_UDP_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p), 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TCP_UDP_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p), 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DHCP_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 3, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DHCP_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 3, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DHCP_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p), 3, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DHCP_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p), 3, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_BROADCAST_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 2, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_BROADCAST_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 2, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_BROADCAST_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_BROADCAST_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MULTICAST_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 1, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MULTICAST_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 1, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MULTICAST_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p), 1, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MULTICAST_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p), 1, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DOS_ATTACK_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DOS_ATTACK_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT), 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DOS_ATTACK_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p), 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DOS_ATTACK_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p), 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MC_L3_CTL_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MC_L3_CTL_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MC_L3_CTL_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 1, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MC_L3_CTL_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 1, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_LENGTH_ERROR_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_LENGTH_ERROR_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_LENGTH_ERROR_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 1, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_LENGTH_ERROR_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 1, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ICMPV6_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ICMPV6_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ICMPV6_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 1, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ICMPV6_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 1, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_HEADER_LENGTH_ERROR_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_HEADER_LENGTH_ERROR_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_HEADER_LENGTH_ERROR_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 1, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_HEADER_LENGTH_ERROR_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 1, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_CHECKSUM_ERROR_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 3, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_CHECKSUM_ERROR_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 3, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_CHECKSUM_ERROR_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 1, 3, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_CHECKSUM_ERROR_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 1, 3, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_VERSION_MISMATCH_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 2, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_VERSION_MISMATCH_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 2, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_VERSION_MISMATCH_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 1, 2, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_VERSION_MISMATCH_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 1, 2, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L3_PROTOCOL_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 0, 2, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L3_PROTOCOL_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 1, 0, 2, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L3_PROTOCOL_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 2, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L3_PROTOCOL_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 2, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 2, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IPV6_EXT_HEADER_FILTER_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 2, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TCP_FLAG_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TCP_FLAG_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TCP_FLAG_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 2, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TCP_FLAG_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 2, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_EXCEPTION_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_EXCEPTION_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_EXCEPTION_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 2, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_EXCEPTION_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 2, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_MC_L2_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_MC_L2_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_MC_L2_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 2, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_IP_MC_L2_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 2, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MC_L3_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 3, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MC_L3_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 3, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MC_L3_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_MC_L3_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ERROR_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 2, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ERROR_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 2, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ERROR_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p) + 2, 2, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ERROR_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p) + 2, 2, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TUNNEL_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 1, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TUNNEL_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 1, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TUNNEL_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 2, 1, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_TUNNEL_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 2, 1, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY__5_TUP_VALID_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY__5_TUP_VALID_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 2, 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY__5_TUP_VALID_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY__5_TUP_VALID_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ETHERNET_VERSION_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 3, 6, 2, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ETHERNET_VERSION_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 3, 6, 2, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ETHERNET_VERSION_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 2, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_ETHERNET_VERSION_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 2, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DNS_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 3, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DNS_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 3, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DNS_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p) + 3, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_DNS_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p) + 3, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_FIRST_IP_FRAGMENT_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 3, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_FIRST_IP_FRAGMENT_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 3, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_FIRST_IP_FRAGMENT_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 3, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_FIRST_IP_FRAGMENT_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 3, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L2_PROTOCOL_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 3, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L2_PROTOCOL_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 3, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L2_PROTOCOL_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_SUMMARY_L2_PROTOCOL_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_L4_PROTOCOL_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 4, 4, 4, (r)) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_RESULTS_PARSER_L4_PROTOCOL_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 4, 4, 4, (v)) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_RESULTS_PARSER_L4_PROTOCOL_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p) + 4, 4, 4, (r)) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_RESULTS_PARSER_L4_PROTOCOL_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p) + 4, 4, 4, (v)) /*defined by rdd_parser_l4_protocol enumeration*/
#define RDD_PARSER_RESULTS_PARSER_V6_AH_READ_G(r, g, idx)                                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 4, 3, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_V6_AH_WRITE_G(v, g, idx)                                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 4, 3, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_V6_AH_READ(r, p)                                             FIELD_MREAD_8((uint8_t *)(p) + 4, 3, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_V6_AH_WRITE(v, p)                                            FIELD_MWRITE_8((uint8_t *)(p) + 4, 3, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_V6_DEST_OPT_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 4, 2, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_V6_DEST_OPT_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 4, 2, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_V6_DEST_OPT_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p) + 4, 2, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_V6_DEST_OPT_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p) + 4, 2, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_V6_ROUTE_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 4, 1, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_V6_ROUTE_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 4, 1, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_V6_ROUTE_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)(p) + 4, 1, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_V6_ROUTE_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)(p) + 4, 1, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_V6_HOP_READ_G(r, g, idx)                                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 4, 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_V6_HOP_WRITE_G(v, g, idx)                                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 4, 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_V6_HOP_READ(r, p)                                            FIELD_MREAD_8((uint8_t *)(p) + 4, 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_V6_HOP_WRITE(v, p)                                           FIELD_MWRITE_8((uint8_t *)(p) + 4, 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_TCP_FLAGS_READ_G(r, g, idx)                                  GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 5, (r))
#define RDD_PARSER_RESULTS_PARSER_TCP_FLAGS_WRITE_G(v, g, idx)                                 GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 5, (v))
#define RDD_PARSER_RESULTS_PARSER_TCP_FLAGS_READ(r, p)                                         MREAD_8((uint8_t *)(p) + 5, (r))
#define RDD_PARSER_RESULTS_PARSER_TCP_FLAGS_WRITE(v, p)                                        MWRITE_8((uint8_t *)(p) + 5, (v))
#define RDD_PARSER_RESULTS_PARSER_LAYER3_OFFSET_READ_G(r, g, idx)                              GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 6, (r))
#define RDD_PARSER_RESULTS_PARSER_LAYER3_OFFSET_WRITE_G(v, g, idx)                             GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 6, (v))
#define RDD_PARSER_RESULTS_PARSER_LAYER3_OFFSET_READ(r, p)                                     MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_PARSER_RESULTS_PARSER_LAYER3_OFFSET_WRITE(v, p)                                    MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_PARSER_RESULTS_PARSER_LAYER4_OFFSET_READ_G(r, g, idx)                              GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 7, (r))
#define RDD_PARSER_RESULTS_PARSER_LAYER4_OFFSET_WRITE_G(v, g, idx)                             GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 7, (v))
#define RDD_PARSER_RESULTS_PARSER_LAYER4_OFFSET_READ(r, p)                                     MREAD_8((uint8_t *)(p) + 7, (r))
#define RDD_PARSER_RESULTS_PARSER_LAYER4_OFFSET_WRITE(v, p)                                    MWRITE_8((uint8_t *)(p) + 7, (v))
#define RDD_PARSER_RESULTS_PARSER_OUTER_VLAN_READ_G(r, g, idx)                                 GROUP_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 8, (r))
#define RDD_PARSER_RESULTS_PARSER_OUTER_VLAN_WRITE_G(v, g, idx)                                GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 8, (v))
#define RDD_PARSER_RESULTS_PARSER_OUTER_VLAN_READ(r, p)                                        MREAD_16((uint8_t *)(p) + 8, (r))
#define RDD_PARSER_RESULTS_PARSER_OUTER_VLAN_WRITE(v, p)                                       MWRITE_16((uint8_t *)(p) + 8, (v))
#define RDD_PARSER_RESULTS_PARSER_INNER_VLAN_READ_G(r, g, idx)                                 GROUP_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 10, (r))
#define RDD_PARSER_RESULTS_PARSER_INNER_VLAN_WRITE_G(v, g, idx)                                GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 10, (v))
#define RDD_PARSER_RESULTS_PARSER_INNER_VLAN_READ(r, p)                                        MREAD_16((uint8_t *)(p) + 10, (r))
#define RDD_PARSER_RESULTS_PARSER_INNER_VLAN_WRITE(v, p)                                       MWRITE_16((uint8_t *)(p) + 10, (v))
#define RDD_PARSER_RESULTS_PARSER_ETHENRNET_VERSION_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 12, 6, 2, (r))
#define RDD_PARSER_RESULTS_PARSER_ETHENRNET_VERSION_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 12, 6, 2, (v))
#define RDD_PARSER_RESULTS_PARSER_ETHENRNET_VERSION_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 2, (r))
#define RDD_PARSER_RESULTS_PARSER_ETHENRNET_VERSION_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 2, (v))
#define RDD_PARSER_RESULTS_PARSER_P_TAG_READ_G(r, g, idx)                                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 12, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_P_TAG_WRITE_G(v, g, idx)                                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 12, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_P_TAG_READ(r, p)                                             FIELD_MREAD_8((uint8_t *)(p) + 12, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_P_TAG_WRITE(v, p)                                            FIELD_MWRITE_8((uint8_t *)(p) + 12, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_VID_FILTER_HIT_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 12, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_VID_FILTER_HIT_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 12, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_VID_FILTER_HIT_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 12, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_VID_FILTER_HIT_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 12, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_VID_FILTER_MATCH_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 12, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_VID_FILTER_MATCH_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 12, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_VID_FILTER_MATCH_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 12, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_VID_FILTER_MATCH_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 12, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_TAG_TYPE_READ_G(r, g, idx)                                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 13, 6, 2, (r))
#define RDD_PARSER_RESULTS_PARSER_TAG_TYPE_WRITE_G(v, g, idx)                                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 13, 6, 2, (v))
#define RDD_PARSER_RESULTS_PARSER_TAG_TYPE_READ(r, p)                                          FIELD_MREAD_8((uint8_t *)(p) + 13, 6, 2, (r))
#define RDD_PARSER_RESULTS_PARSER_TAG_TYPE_WRITE(v, p)                                         FIELD_MWRITE_8((uint8_t *)(p) + 13, 6, 2, (v))
#define RDD_PARSER_RESULTS_PARSER_TPID_VLAN_0_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 13, 3, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_TPID_VLAN_0_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 13, 3, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_TPID_VLAN_0_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p) + 13, 3, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_TPID_VLAN_0_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p) + 13, 3, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_TPID_VLAN_1_READ_G(r, g, idx)                                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 13, 0, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_TPID_VLAN_1_WRITE_G(v, g, idx)                               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 13, 0, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_TPID_VLAN_1_READ(r, p)                                       FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_TPID_VLAN_1_WRITE(v, p)                                      FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_DA_FILTER_NUMBER_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 14, 4, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_DA_FILTER_NUMBER_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 14, 4, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_DA_FILTER_NUMBER_READ(r, p)                                  FIELD_MREAD_8((uint8_t *)(p) + 14, 4, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_DA_FILTER_NUMBER_WRITE(v, p)                                 FIELD_MWRITE_8((uint8_t *)(p) + 14, 4, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_UNUSED_READ_G(r, g, idx)                                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 14, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_UNUSED_WRITE_G(v, g, idx)                                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 14, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_UNUSED_READ(r, p)                                            FIELD_MREAD_8((uint8_t *)(p) + 14, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_UNUSED_WRITE(v, p)                                           FIELD_MWRITE_8((uint8_t *)(p) + 14, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_LAYER2_OFFSET_READ_G(r, g, idx)                              GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 15, (r))
#define RDD_PARSER_RESULTS_PARSER_LAYER2_OFFSET_WRITE_G(v, g, idx)                             GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 15, (v))
#define RDD_PARSER_RESULTS_PARSER_LAYER2_OFFSET_READ(r, p)                                     MREAD_8((uint8_t *)(p) + 15, (r))
#define RDD_PARSER_RESULTS_PARSER_LAYER2_OFFSET_WRITE(v, p)                                    MWRITE_8((uint8_t *)(p) + 15, (v))
#define RDD_PARSER_RESULTS_PARSER_IP_FILTER_MATCH_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 16, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IP_FILTER_MATCH_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 16, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IP_FILTER_MATCH_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 16, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IP_FILTER_MATCH_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 16, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IP_FILTER_NUM_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 16, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IP_FILTER_NUM_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 16, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IP_FILTER_NUM_READ(r, p)                                     FIELD_MREAD_8((uint8_t *)(p) + 16, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IP_FILTER_NUM_WRITE(v, p)                                    FIELD_MWRITE_8((uint8_t *)(p) + 16, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_UNUSED1_READ_G(r, g, idx)                                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 16, 1, 5, (r))
#define RDD_PARSER_RESULTS_PARSER_UNUSED1_WRITE_G(v, g, idx)                                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 16, 1, 5, (v))
#define RDD_PARSER_RESULTS_PARSER_UNUSED1_READ(r, p)                                           FIELD_MREAD_8((uint8_t *)(p) + 16, 1, 5, (r))
#define RDD_PARSER_RESULTS_PARSER_UNUSED1_WRITE(v, p)                                          FIELD_MWRITE_8((uint8_t *)(p) + 16, 1, 5, (v))
#define RDD_PARSER_RESULTS_PARSER_IPV6_READ_G(r, g, idx)                                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 16, 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IPV6_WRITE_G(v, g, idx)                                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 16, 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IPV6_READ(r, p)                                              FIELD_MREAD_8((uint8_t *)(p) + 16, 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IPV6_WRITE(v, p)                                             FIELD_MWRITE_8((uint8_t *)(p) + 16, 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_PROTOCOL_READ_G(r, g, idx)                                   GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 17, (r))
#define RDD_PARSER_RESULTS_PARSER_PROTOCOL_WRITE_G(v, g, idx)                                  GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 17, (v))
#define RDD_PARSER_RESULTS_PARSER_PROTOCOL_READ(r, p)                                          MREAD_8((uint8_t *)(p) + 17, (r))
#define RDD_PARSER_RESULTS_PARSER_PROTOCOL_WRITE(v, p)                                         MWRITE_8((uint8_t *)(p) + 17, (v))
#define RDD_PARSER_RESULTS_PARSER_FRAGMENT_HEADER_OFFSET_READ_G(r, g, idx)                     GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 18, (r))
#define RDD_PARSER_RESULTS_PARSER_FRAGMENT_HEADER_OFFSET_WRITE_G(v, g, idx)                    GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 18, (v))
#define RDD_PARSER_RESULTS_PARSER_FRAGMENT_HEADER_OFFSET_READ(r, p)                            MREAD_8((uint8_t *)(p) + 18, (r))
#define RDD_PARSER_RESULTS_PARSER_FRAGMENT_HEADER_OFFSET_WRITE(v, p)                           MWRITE_8((uint8_t *)(p) + 18, (v))
#define RDD_PARSER_RESULTS_PARSER_UNUSED3_READ_G(r, g, idx)                                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 19, 4, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_UNUSED3_WRITE_G(v, g, idx)                                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 19, 4, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_UNUSED3_READ(r, p)                                           FIELD_MREAD_8((uint8_t *)(p) + 19, 4, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_UNUSED3_WRITE(v, p)                                          FIELD_MWRITE_8((uint8_t *)(p) + 19, 4, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_DOS_ATTACK_REASON_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 19, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_DOS_ATTACK_REASON_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 19, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_DOS_ATTACK_REASON_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 19, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_DOS_ATTACK_REASON_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 19, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_ICMPV6_TYPE_READ_G(r, g, idx)                                GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 20, (r))
#define RDD_PARSER_RESULTS_PARSER_ICMPV6_TYPE_WRITE_G(v, g, idx)                               GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 20, (v))
#define RDD_PARSER_RESULTS_PARSER_ICMPV6_TYPE_READ(r, p)                                       MREAD_8((uint8_t *)(p) + 20, (r))
#define RDD_PARSER_RESULTS_PARSER_ICMPV6_TYPE_WRITE(v, p)                                      MWRITE_8((uint8_t *)(p) + 20, (v))
#define RDD_PARSER_RESULTS_PARSER_IP_TTL_READ_G(r, g, idx)                                     GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 21, (r))
#define RDD_PARSER_RESULTS_PARSER_IP_TTL_WRITE_G(v, g, idx)                                    GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 21, (v))
#define RDD_PARSER_RESULTS_PARSER_IP_TTL_READ(r, p)                                            MREAD_8((uint8_t *)(p) + 21, (r))
#define RDD_PARSER_RESULTS_PARSER_IP_TTL_WRITE(v, p)                                           MWRITE_8((uint8_t *)(p) + 21, (v))
#define RDD_PARSER_RESULTS_PARSER_IP_LENGTH_READ_G(r, g, idx)                                  GROUP_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 22, (r))
#define RDD_PARSER_RESULTS_PARSER_IP_LENGTH_WRITE_G(v, g, idx)                                 GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 22, (v))
#define RDD_PARSER_RESULTS_PARSER_IP_LENGTH_READ(r, p)                                         MREAD_16((uint8_t *)(p) + 22, (r))
#define RDD_PARSER_RESULTS_PARSER_IP_LENGTH_WRITE(v, p)                                        MWRITE_16((uint8_t *)(p) + 22, (v))
#define RDD_PARSER_RESULTS_PARSER_NOT_WRITTEN_READ_G(r, g, idx)                                GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 24, (r))
#define RDD_PARSER_RESULTS_PARSER_NOT_WRITTEN_WRITE_G(v, g, idx)                               GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 24, (v))
#define RDD_PARSER_RESULTS_PARSER_NOT_WRITTEN_READ(r, p)                                       MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_PARSER_RESULTS_PARSER_NOT_WRITTEN_WRITE(v, p)                                      MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_DA_CRC_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 28, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_DA_CRC_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 28, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_DA_CRC_READ(r, p)                               MREAD_32((uint8_t *)(p) + 28, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_DA_CRC_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 28, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_SA_CRC_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 32, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_SA_CRC_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 32, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_SA_CRC_READ(r, p)                               MREAD_32((uint8_t *)(p) + 32, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_SA_CRC_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 32, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 36, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 36, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_READ(r, p)                       MREAD_32((uint8_t *)(p) + 36, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLAN_ETYPE_CRC_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 36, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TOS_READ_G(r, g, idx)                           GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 40, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TOS_WRITE_G(v, g, idx)                          GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 40, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TOS_READ(r, p)                                  MREAD_8((uint8_t *)(p) + 40, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TOS_WRITE(v, p)                                 MWRITE_8((uint8_t *)(p) + 40, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 41, 3, 5, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 41, 3, 5, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 41, 3, 5, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LOOKUP_PORT_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 41, 3, 5, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLANS_NUM_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 41, 0, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLANS_NUM_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 41, 0, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLANS_NUM_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 41, 0, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VLANS_NUM_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 41, 0, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VALID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 42, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 42, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VALID_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 42, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VALID_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 42, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 42, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 42, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 42, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_TCP_PURE_ACK_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 42, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LLC_SNAP_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 42, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LLC_SNAP_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 42, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LLC_SNAP_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 42, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_LLC_SNAP_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 42, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_CTX_EXT_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 42, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_CTX_EXT_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 42, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_CTX_EXT_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 42, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_CTX_EXT_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 42, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_RESERVED1_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 42, 4, 8, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_RESERVED1_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 42, 4, 8, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_RESERVED1_READ(r, p)                            FIELD_MREAD_16((uint8_t *)(p) + 42, 4, 8, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_RESERVED1_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)(p) + 42, 4, 8, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 43, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 43, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 43, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_L2_LKP_ENTRY_VAR_LEN_CTX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 43, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_IP_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 44, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_IP_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 44, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_IP_READ(r, p)                               MREAD_32((uint8_t *)(p) + 44, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_IP_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 44, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_IP_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 48, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_IP_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 48, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_IP_READ(r, p)                               MREAD_32((uint8_t *)(p) + 48, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_IP_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 48, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_PORT_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 52, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_PORT_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 52, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_PORT_READ(r, p)                             MREAD_16((uint8_t *)(p) + 52, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_SRC_PORT_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 52, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_PORT_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 54, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_PORT_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 54, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_PORT_READ(r, p)                             MREAD_16((uint8_t *)(p) + 54, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_DST_PORT_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 54, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 56, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 56, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_READ(r, p)                           MREAD_32((uint8_t *)(p) + 56, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 56, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_TOS_READ_G(r, g, idx)                           GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 56, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_TOS_WRITE_G(v, g, idx)                          GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 56, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_TOS_READ(r, p)                                  MREAD_8((uint8_t *)(p) + 56, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_TOS_WRITE(v, p)                                 MWRITE_8((uint8_t *)(p) + 56, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 57, 3, 5, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 57, 3, 5, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 57, 3, 5, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_LOOKUP_PORT_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 57, 3, 5, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VLANS_NUM_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 57, 0, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VLANS_NUM_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 57, 0, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VLANS_NUM_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 57, 0, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VLANS_NUM_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 57, 0, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VALID_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 58, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VALID_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 58, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VALID_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 58, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VALID_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 58, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 58, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 58, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 58, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_TCP_PURE_ACK_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 58, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_IPV6_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 58, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_IPV6_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 58, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_IPV6_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 58, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_IPV6_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 58, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_CTX_EXT_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 58, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_CTX_EXT_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 58, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_CTX_EXT_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 58, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_CTX_EXT_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 58, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_PROTOCOL_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 58, 4, 8, (r)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_PROTOCOL_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 58, 4, 8, (v)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_PROTOCOL_READ(r, p)                             FIELD_MREAD_16((uint8_t *)(p) + 58, 4, 8, (r)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_PROTOCOL_WRITE(v, p)                            FIELD_MWRITE_16((uint8_t *)(p) + 58, 4, 8, (v)) /*defined by rdd_parser_l3_protocol enumeration*/
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 59, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 59, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 59, 0, 4, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_VAR_LEN_CTX_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 59, 0, 4, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 56, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 56, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_READ(r, p)                 MREAD_32((uint8_t *)(p) + 56, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_L3_LKP_TOS_PORT_VLAN_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 56, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_READ_G(r, g, idx)                   GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 60, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_WRITE_G(v, g, idx)                  GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 60, (v))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_READ(r, p)                          MREAD_32((uint8_t *)(p) + 60, (r))
#define RDD_PARSER_RESULTS_PARSER_L3_LKP_ENTRY_NOT_WRITTEN_WRITE(v, p)                         MWRITE_32((uint8_t *)(p) + 60, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DA_CRC_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 64, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DA_CRC_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 64, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DA_CRC_READ(r, p)                               MREAD_32((uint8_t *)(p) + 64, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DA_CRC_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 64, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SA_CRC_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 68, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SA_CRC_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 68, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SA_CRC_READ(r, p)                               MREAD_32((uint8_t *)(p) + 68, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SA_CRC_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 68, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_IP_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 72, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_IP_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 72, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_IP_READ(r, p)                               MREAD_32((uint8_t *)(p) + 72, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_IP_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 72, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_IP_READ_G(r, g, idx)                        GROUP_MREAD_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 76, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_IP_WRITE_G(v, g, idx)                       GROUP_MWRITE_32((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 76, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_IP_READ(r, p)                               MREAD_32((uint8_t *)(p) + 76, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_IP_WRITE(v, p)                              MWRITE_32((uint8_t *)(p) + 76, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_PORT_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 80, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_PORT_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 80, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_PORT_READ(r, p)                             MREAD_16((uint8_t *)(p) + 80, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SRC_PORT_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 80, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_PORT_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 82, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_PORT_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 82, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_PORT_READ(r, p)                             MREAD_16((uint8_t *)(p) + 82, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_DST_PORT_WRITE(v, p)                            MWRITE_16((uint8_t *)(p) + 82, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 84, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 84, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_READ(r, p)                        MREAD_16((uint8_t *)(p) + 84, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_ETHERNET_TYPE_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 84, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_PROTOCOL_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 86, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_PROTOCOL_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 86, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_PROTOCOL_READ(r, p)                             MREAD_8((uint8_t *)(p) + 86, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_PROTOCOL_WRITE(v, p)                            MWRITE_8((uint8_t *)(p) + 86, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 87, 5, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 87, 5, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 87, 5, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_0_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 87, 5, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 87, 2, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 87, 2, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 87, 2, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TPID_VLAN_1_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 87, 2, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV6_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 87, 1, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV6_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 87, 1, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV6_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 87, 1, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV6_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 87, 1, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV4_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 87, 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV4_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 87, 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV4_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 87, 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_IPV4_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 87, 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_PBIT_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 88, 5, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_PBIT_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 88, 5, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_PBIT_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 88, 5, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_PBIT_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 88, 5, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_CFI_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 88, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_CFI_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 88, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_CFI_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 88, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_CFI_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 88, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_VID_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 88, 0, 12, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_VID_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 88, 0, 12, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_VID_READ(r, p)                            FIELD_MREAD_16((uint8_t *)(p) + 88, 0, 12, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_OUTER_VID_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)(p) + 88, 0, 12, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_PBIT_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 90, 5, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_PBIT_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 90, 5, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_PBIT_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 90, 5, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_PBIT_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 90, 5, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_CFI_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 90, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_CFI_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 90, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_CFI_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 90, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_CFI_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 90, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_VID_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 90, 0, 12, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_VID_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 90, 0, 12, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_VID_READ(r, p)                            FIELD_MREAD_16((uint8_t *)(p) + 90, 0, 12, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_INNER_VID_WRITE(v, p)                           FIELD_MWRITE_16((uint8_t *)(p) + 90, 0, 12, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TOS_READ_G(r, g, idx)                           GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 92, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TOS_WRITE_G(v, g, idx)                          GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 92, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TOS_READ(r, p)                                  MREAD_8((uint8_t *)(p) + 92, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TOS_WRITE(v, p)                                 MWRITE_8((uint8_t *)(p) + 92, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 93, 3, 5, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 93, 3, 5, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 93, 3, 5, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_LOOKUP_PORT_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 93, 3, 5, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_VLANS_NUM_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 93, 0, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_VLANS_NUM_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 93, 0, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_VLANS_NUM_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 93, 0, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_VLANS_NUM_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 93, 0, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_L3_READ_G(r, g, idx)                         GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_L3_WRITE_G(v, g, idx)                        GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_L3_READ(r, p)                                FIELD_MREAD_8((uint8_t *)(p) + 94, 7, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_L3_WRITE(v, p)                               FIELD_MWRITE_8((uint8_t *)(p) + 94, 7, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_BC_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_BC_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_BC_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 94, 6, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_BC_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 94, 6, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 94, 5, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_MC_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 94, 5, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 94, 4, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_NETWORK_LAYER_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 94, 4, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_RESERVED3_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 1, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_RESERVED3_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 1, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_RESERVED3_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 94, 1, 3, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_RESERVED3_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 94, 1, 3, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TABLE_ID_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TABLE_ID_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 94, 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TABLE_ID_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 94, 0, 1, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_TABLE_ID_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 94, 0, 1, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_SSID_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 95, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_SSID_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 95, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_SSID_READ(r, p)                             MREAD_8((uint8_t *)(p) + 95, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_SSID_WRITE(v, p)                            MWRITE_8((uint8_t *)(p) + 95, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_READ_G(r, g, idx)                           GROUP_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 95, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_WRITE_G(v, g, idx)                          GROUP_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 95, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_READ(r, p)                                  MREAD_8((uint8_t *)(p) + 95, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_GEM_WRITE(v, p)                                 MWRITE_8((uint8_t *)(p) + 95, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SSID_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 95, 0, 5, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SSID_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PARSER_RESULTS_STRUCT) + 95, 0, 5, (v))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SSID_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 95, 0, 5, (r))
#define RDD_PARSER_RESULTS_PARSER_IC_LKP_ENTRY_SSID_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 95, 0, 5, (v))
/* <<<PARSER_RESULTS_STRUCT */

/* <<<RDD_PARSER_RESULTS */


/* >>>RDD_BBMSG_NEW_TASK_MODE */
#define BBMSG_NEW_TASK_MODE_TASK_NUM_F_OFFSET                                                        24
#define BBMSG_NEW_TASK_MODE_TASK_NUM_F_WIDTH                                                         4
#define BBMSG_NEW_TASK_MODE_TASK_NUM_OFFSET                                                          0
#define BBMSG_NEW_TASK_MODE_TASK_NUM_WORD_OFFSET                                                     0
#define BBMSG_NEW_TASK_MODE_TASK_NUM_F_OFFSET_MOD8                                                   0
#define BBMSG_NEW_TASK_MODE_TASK_NUM_F_OFFSET_MOD16                                                  8

/* >>>BBMSG_NEW_TASK_MODE_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1 	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2 	;
#else
        uint32_t	reserved1 	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BBMSG_NEW_TASK_MODE_STRUCT;

#define RDD_BBMSG_NEW_TASK_MODE_TASK_NUM_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_NEW_TASK_MODE_STRUCT), 0, 4, (r))
#define RDD_BBMSG_NEW_TASK_MODE_TASK_NUM_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_NEW_TASK_MODE_STRUCT), 0, 4, (v))
#define RDD_BBMSG_NEW_TASK_MODE_TASK_NUM_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p), 0, 4, (r))
#define RDD_BBMSG_NEW_TASK_MODE_TASK_NUM_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p), 0, 4, (v))
/* <<<BBMSG_NEW_TASK_MODE_STRUCT */

/* <<<RDD_BBMSG_NEW_TASK_MODE */


/* >>>RDD_SBPM_ALLOC_REQUEST */
#define SBPM_ALLOC_REQUEST_SYNCH_F_OFFSET                                                           31
#define SBPM_ALLOC_REQUEST_SYNCH_F_WIDTH                                                            1
#define SBPM_ALLOC_REQUEST_SBPM_ALLOC_REQUEST_OFFSET                                                0
#define SBPM_ALLOC_REQUEST_SYNCH_OFFSET                                                             0
#define SBPM_ALLOC_REQUEST_SYNCH_WORD_OFFSET                                                        0
#define SBPM_ALLOC_REQUEST_SYNCH_F_OFFSET_MOD8                                                      7
#define SBPM_ALLOC_REQUEST_SYNCH_F_OFFSET_MOD16                                                     15
#define SBPM_ALLOC_REQUEST_WAKEUP_F_OFFSET                                                          30
#define SBPM_ALLOC_REQUEST_WAKEUP_F_WIDTH                                                           1
#define SBPM_ALLOC_REQUEST_WAKEUP_OFFSET                                                            0
#define SBPM_ALLOC_REQUEST_WAKEUP_WORD_OFFSET                                                       0
#define SBPM_ALLOC_REQUEST_WAKEUP_F_OFFSET_MOD8                                                     6
#define SBPM_ALLOC_REQUEST_WAKEUP_F_OFFSET_MOD16                                                    14
#define SBPM_ALLOC_REQUEST_TASK_NUM_F_OFFSET                                                        24
#define SBPM_ALLOC_REQUEST_TASK_NUM_F_WIDTH                                                         4
#define SBPM_ALLOC_REQUEST_TASK_NUM_OFFSET                                                          0
#define SBPM_ALLOC_REQUEST_TASK_NUM_WORD_OFFSET                                                     0
#define SBPM_ALLOC_REQUEST_TASK_NUM_F_OFFSET_MOD8                                                   0
#define SBPM_ALLOC_REQUEST_TASK_NUM_F_OFFSET_MOD16                                                  8
#define SBPM_ALLOC_REQUEST_TARGET_ADDRESS_F_OFFSET                                                  8
#define SBPM_ALLOC_REQUEST_TARGET_ADDRESS_F_WIDTH                                                   11
#define SBPM_ALLOC_REQUEST_TARGET_ADDRESS_OFFSET                                                    0
#define SBPM_ALLOC_REQUEST_TARGET_ADDRESS_WORD_OFFSET                                               0
#define SBPM_ALLOC_REQUEST_TARGET_ADDRESS_F_OFFSET_MOD16                                            8
#define SBPM_ALLOC_REQUEST_BB_ID_F_OFFSET                                                           14
#define SBPM_ALLOC_REQUEST_BB_ID_F_WIDTH                                                            6
#define SBPM_ALLOC_REQUEST_BB_ID_OFFSET                                                             5
#define SBPM_ALLOC_REQUEST_BB_ID_WORD_OFFSET                                                        1
#define SBPM_ALLOC_REQUEST_BB_ID_F_OFFSET_MOD8                                                      6
#define SBPM_ALLOC_REQUEST_BB_ID_F_OFFSET_MOD16                                                     14

/* >>>SBPM_ALLOC_REQUEST_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1     	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_address	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved2     	;
        uint32_t	reserved3     	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bb_id         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	reserved2     	;
        uint32_t	target_address	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1     	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bb_id         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3     	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_ALLOC_REQUEST_STRUCT;

#define RDD_SBPM_ALLOC_REQUEST_SYNCH_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_ALLOC_REQUEST_STRUCT), 7, 1, (r))
#define RDD_SBPM_ALLOC_REQUEST_SYNCH_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_ALLOC_REQUEST_STRUCT), 7, 1, (v))
#define RDD_SBPM_ALLOC_REQUEST_SYNCH_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_SBPM_ALLOC_REQUEST_SYNCH_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_SBPM_ALLOC_REQUEST_WAKEUP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_ALLOC_REQUEST_STRUCT), 6, 1, (r))
#define RDD_SBPM_ALLOC_REQUEST_WAKEUP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_ALLOC_REQUEST_STRUCT), 6, 1, (v))
#define RDD_SBPM_ALLOC_REQUEST_WAKEUP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_SBPM_ALLOC_REQUEST_WAKEUP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_SBPM_ALLOC_REQUEST_TASK_NUM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_ALLOC_REQUEST_STRUCT), 0, 4, (r))
#define RDD_SBPM_ALLOC_REQUEST_TASK_NUM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_ALLOC_REQUEST_STRUCT), 0, 4, (v))
#define RDD_SBPM_ALLOC_REQUEST_TASK_NUM_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 0, 4, (r))
#define RDD_SBPM_ALLOC_REQUEST_TASK_NUM_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 0, 4, (v))
#define RDD_SBPM_ALLOC_REQUEST_TARGET_ADDRESS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(SBPM_ALLOC_REQUEST_STRUCT) + 0, 8, 11, (r))
#define RDD_SBPM_ALLOC_REQUEST_TARGET_ADDRESS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(SBPM_ALLOC_REQUEST_STRUCT) + 0, 8, 11, (v))
#define RDD_SBPM_ALLOC_REQUEST_TARGET_ADDRESS_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 0, 8, 11, (r))
#define RDD_SBPM_ALLOC_REQUEST_TARGET_ADDRESS_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 0, 8, 11, (v))
#define RDD_SBPM_ALLOC_REQUEST_BB_ID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(SBPM_ALLOC_REQUEST_STRUCT) + 4, 14, 6, (r))
#define RDD_SBPM_ALLOC_REQUEST_BB_ID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(SBPM_ALLOC_REQUEST_STRUCT) + 4, 14, 6, (v))
#define RDD_SBPM_ALLOC_REQUEST_BB_ID_READ(r, p)                          FIELD_MREAD_32((uint8_t *)(p) + 4, 14, 6, (r))
#define RDD_SBPM_ALLOC_REQUEST_BB_ID_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)(p) + 4, 14, 6, (v))
/* <<<SBPM_ALLOC_REQUEST_STRUCT */

/* <<<RDD_SBPM_ALLOC_REQUEST */


/* >>>RDD_SBPM_FREE_REQUEST */
#define SBPM_FREE_REQUEST_LAST_F_OFFSET                                                            14
#define SBPM_FREE_REQUEST_LAST_F_WIDTH                                                             1
#define SBPM_FREE_REQUEST_LAST_OFFSET                                                              2
#define SBPM_FREE_REQUEST_LAST_WORD_OFFSET                                                         0
#define SBPM_FREE_REQUEST_LAST_F_OFFSET_MOD8                                                       6
#define SBPM_FREE_REQUEST_LAST_F_OFFSET_MOD16                                                      14
#define SBPM_FREE_REQUEST_LAST_BN_F_OFFSET                                                         0
#define SBPM_FREE_REQUEST_LAST_BN_F_WIDTH                                                          14
#define SBPM_FREE_REQUEST_LAST_BN_OFFSET                                                           2
#define SBPM_FREE_REQUEST_LAST_BN_WORD_OFFSET                                                      0
#define SBPM_FREE_REQUEST_LAST_BN_F_OFFSET_MOD16                                                   0
#define SBPM_FREE_REQUEST_OFFSET_F_OFFSET                                                          24
#define SBPM_FREE_REQUEST_OFFSET_F_WIDTH                                                           7
#define SBPM_FREE_REQUEST_OFFSET_OFFSET                                                            4
#define SBPM_FREE_REQUEST_OFFSET_WORD_OFFSET                                                       1
#define SBPM_FREE_REQUEST_OFFSET_F_OFFSET_MOD8                                                     0
#define SBPM_FREE_REQUEST_OFFSET_F_OFFSET_MOD16                                                    8
#define SBPM_FREE_REQUEST_BB_ID_F_OFFSET                                                           14
#define SBPM_FREE_REQUEST_BB_ID_F_WIDTH                                                            6
#define SBPM_FREE_REQUEST_BB_ID_OFFSET                                                             5
#define SBPM_FREE_REQUEST_BB_ID_WORD_OFFSET                                                        1
#define SBPM_FREE_REQUEST_BB_ID_F_OFFSET_MOD8                                                      6
#define SBPM_FREE_REQUEST_BB_ID_F_OFFSET_MOD16                                                     14
#define SBPM_FREE_REQUEST_HEAD_BN_F_OFFSET                                                         0
#define SBPM_FREE_REQUEST_HEAD_BN_F_WIDTH                                                          14
#define SBPM_FREE_REQUEST_HEAD_BN_OFFSET                                                           6
#define SBPM_FREE_REQUEST_HEAD_BN_WORD_OFFSET                                                      1
#define SBPM_FREE_REQUEST_HEAD_BN_F_OFFSET_MOD16                                                   0

/* >>>SBPM_FREE_REQUEST_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved  	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	last      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	last_bn   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	offset    	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bb_id     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	head_bn   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	last_bn   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	last      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved  	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	head_bn   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bb_id     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3 	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	offset    	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_FREE_REQUEST_STRUCT;

#define RDD_SBPM_FREE_REQUEST_LAST_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_FREE_REQUEST_STRUCT) + 2, 6, 1, (r))
#define RDD_SBPM_FREE_REQUEST_LAST_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_FREE_REQUEST_STRUCT) + 2, 6, 1, (v))
#define RDD_SBPM_FREE_REQUEST_LAST_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 2, 6, 1, (r))
#define RDD_SBPM_FREE_REQUEST_LAST_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 2, 6, 1, (v))
#define RDD_SBPM_FREE_REQUEST_LAST_BN_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_FREE_REQUEST_STRUCT) + 2, 0, 14, (r))
#define RDD_SBPM_FREE_REQUEST_LAST_BN_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_FREE_REQUEST_STRUCT) + 2, 0, 14, (v))
#define RDD_SBPM_FREE_REQUEST_LAST_BN_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 14, (r))
#define RDD_SBPM_FREE_REQUEST_LAST_BN_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 14, (v))
#define RDD_SBPM_FREE_REQUEST_OFFSET_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_FREE_REQUEST_STRUCT) + 4, 0, 7, (r))
#define RDD_SBPM_FREE_REQUEST_OFFSET_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_FREE_REQUEST_STRUCT) + 4, 0, 7, (v))
#define RDD_SBPM_FREE_REQUEST_OFFSET_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 4, 0, 7, (r))
#define RDD_SBPM_FREE_REQUEST_OFFSET_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 4, 0, 7, (v))
#define RDD_SBPM_FREE_REQUEST_BB_ID_READ_G(r, g, idx)              GROUP_FIELD_MREAD_32((g), (idx)*sizeof(SBPM_FREE_REQUEST_STRUCT) + 4, 14, 6, (r))
#define RDD_SBPM_FREE_REQUEST_BB_ID_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(SBPM_FREE_REQUEST_STRUCT) + 4, 14, 6, (v))
#define RDD_SBPM_FREE_REQUEST_BB_ID_READ(r, p)                     FIELD_MREAD_32((uint8_t *)(p) + 4, 14, 6, (r))
#define RDD_SBPM_FREE_REQUEST_BB_ID_WRITE(v, p)                    FIELD_MWRITE_32((uint8_t *)(p) + 4, 14, 6, (v))
#define RDD_SBPM_FREE_REQUEST_HEAD_BN_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_FREE_REQUEST_STRUCT) + 6, 0, 14, (r))
#define RDD_SBPM_FREE_REQUEST_HEAD_BN_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_FREE_REQUEST_STRUCT) + 6, 0, 14, (v))
#define RDD_SBPM_FREE_REQUEST_HEAD_BN_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_SBPM_FREE_REQUEST_HEAD_BN_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
/* <<<SBPM_FREE_REQUEST_STRUCT */

/* <<<RDD_SBPM_FREE_REQUEST */


/* >>>RDD_SBPM_FREE_WO_CONTEXT_REQUEST */
#define SBPM_FREE_WO_CONTEXT_REQUEST_SYNCH_F_OFFSET                                                           31
#define SBPM_FREE_WO_CONTEXT_REQUEST_SYNCH_F_WIDTH                                                            1
#define SBPM_FREE_WO_CONTEXT_REQUEST_SBPM_FREE_WO_CONTEXT_REQUEST_OFFSET                                      0
#define SBPM_FREE_WO_CONTEXT_REQUEST_SYNCH_OFFSET                                                             0
#define SBPM_FREE_WO_CONTEXT_REQUEST_SYNCH_WORD_OFFSET                                                        0
#define SBPM_FREE_WO_CONTEXT_REQUEST_SYNCH_F_OFFSET_MOD8                                                      7
#define SBPM_FREE_WO_CONTEXT_REQUEST_SYNCH_F_OFFSET_MOD16                                                     15
#define SBPM_FREE_WO_CONTEXT_REQUEST_WAKEUP_F_OFFSET                                                          30
#define SBPM_FREE_WO_CONTEXT_REQUEST_WAKEUP_F_WIDTH                                                           1
#define SBPM_FREE_WO_CONTEXT_REQUEST_WAKEUP_OFFSET                                                            0
#define SBPM_FREE_WO_CONTEXT_REQUEST_WAKEUP_WORD_OFFSET                                                       0
#define SBPM_FREE_WO_CONTEXT_REQUEST_WAKEUP_F_OFFSET_MOD8                                                     6
#define SBPM_FREE_WO_CONTEXT_REQUEST_WAKEUP_F_OFFSET_MOD16                                                    14
#define SBPM_FREE_WO_CONTEXT_REQUEST_TASK_NUM_F_OFFSET                                                        24
#define SBPM_FREE_WO_CONTEXT_REQUEST_TASK_NUM_F_WIDTH                                                         4
#define SBPM_FREE_WO_CONTEXT_REQUEST_TASK_NUM_OFFSET                                                          0
#define SBPM_FREE_WO_CONTEXT_REQUEST_TASK_NUM_WORD_OFFSET                                                     0
#define SBPM_FREE_WO_CONTEXT_REQUEST_TASK_NUM_F_OFFSET_MOD8                                                   0
#define SBPM_FREE_WO_CONTEXT_REQUEST_TASK_NUM_F_OFFSET_MOD16                                                  8
#define SBPM_FREE_WO_CONTEXT_REQUEST_TARGET_ADDRESS_F_OFFSET                                                  8
#define SBPM_FREE_WO_CONTEXT_REQUEST_TARGET_ADDRESS_F_WIDTH                                                   12
#define SBPM_FREE_WO_CONTEXT_REQUEST_TARGET_ADDRESS_OFFSET                                                    0
#define SBPM_FREE_WO_CONTEXT_REQUEST_TARGET_ADDRESS_WORD_OFFSET                                               0
#define SBPM_FREE_WO_CONTEXT_REQUEST_TARGET_ADDRESS_F_OFFSET_MOD16                                            8
#define SBPM_FREE_WO_CONTEXT_REQUEST_ACK_REQUEST_F_OFFSET                                                     31
#define SBPM_FREE_WO_CONTEXT_REQUEST_ACK_REQUEST_F_WIDTH                                                      1
#define SBPM_FREE_WO_CONTEXT_REQUEST_ACK_REQUEST_OFFSET                                                       4
#define SBPM_FREE_WO_CONTEXT_REQUEST_ACK_REQUEST_WORD_OFFSET                                                  1
#define SBPM_FREE_WO_CONTEXT_REQUEST_ACK_REQUEST_F_OFFSET_MOD8                                                7
#define SBPM_FREE_WO_CONTEXT_REQUEST_ACK_REQUEST_F_OFFSET_MOD16                                               15
#define SBPM_FREE_WO_CONTEXT_REQUEST_BB_ID_F_OFFSET                                                           14
#define SBPM_FREE_WO_CONTEXT_REQUEST_BB_ID_F_WIDTH                                                            6
#define SBPM_FREE_WO_CONTEXT_REQUEST_BB_ID_OFFSET                                                             5
#define SBPM_FREE_WO_CONTEXT_REQUEST_BB_ID_WORD_OFFSET                                                        1
#define SBPM_FREE_WO_CONTEXT_REQUEST_BB_ID_F_OFFSET_MOD8                                                      6
#define SBPM_FREE_WO_CONTEXT_REQUEST_BB_ID_F_OFFSET_MOD16                                                     14
#define SBPM_FREE_WO_CONTEXT_REQUEST_HEAD_BN_F_OFFSET                                                         0
#define SBPM_FREE_WO_CONTEXT_REQUEST_HEAD_BN_F_WIDTH                                                          14
#define SBPM_FREE_WO_CONTEXT_REQUEST_HEAD_BN_OFFSET                                                           6
#define SBPM_FREE_WO_CONTEXT_REQUEST_HEAD_BN_WORD_OFFSET                                                      1
#define SBPM_FREE_WO_CONTEXT_REQUEST_HEAD_BN_F_OFFSET_MOD16                                                   0

/* >>>SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_address	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved3     	;
        uint32_t	ack_request   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bb_id         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	head_bn       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	reserved3     	;
        uint32_t	target_address	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	head_bn       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bb_id         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4     	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ack_request   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT;

#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_SYNCH_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT), 7, 1, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_SYNCH_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT), 7, 1, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_SYNCH_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_SYNCH_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_WAKEUP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT), 6, 1, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_WAKEUP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT), 6, 1, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_WAKEUP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_WAKEUP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_TASK_NUM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT), 0, 4, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_TASK_NUM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT), 0, 4, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_TASK_NUM_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 0, 4, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_TASK_NUM_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 0, 4, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_TARGET_ADDRESS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT) + 0, 8, 12, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_TARGET_ADDRESS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT) + 0, 8, 12, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_TARGET_ADDRESS_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 0, 8, 12, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_TARGET_ADDRESS_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 0, 8, 12, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_ACK_REQUEST_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT) + 4, 7, 1, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_ACK_REQUEST_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT) + 4, 7, 1, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_ACK_REQUEST_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 4, 7, 1, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_ACK_REQUEST_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 4, 7, 1, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_BB_ID_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT) + 4, 14, 6, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_BB_ID_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT) + 4, 14, 6, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_BB_ID_READ(r, p)                          FIELD_MREAD_32((uint8_t *)(p) + 4, 14, 6, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_BB_ID_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)(p) + 4, 14, 6, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_HEAD_BN_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT) + 6, 0, 14, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_HEAD_BN_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT) + 6, 0, 14, (v))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_HEAD_BN_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_SBPM_FREE_WO_CONTEXT_REQUEST_HEAD_BN_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
/* <<<SBPM_FREE_WO_CONTEXT_REQUEST_STRUCT */

/* <<<RDD_SBPM_FREE_WO_CONTEXT_REQUEST */


/* >>>RDD_SBPM_MULTICAST_REQUEST */
#define SBPM_MULTICAST_REQUEST_SYNCH_F_OFFSET                                                           31
#define SBPM_MULTICAST_REQUEST_SYNCH_F_WIDTH                                                            1
#define SBPM_MULTICAST_REQUEST_SBPM_MULTICAST_REQUEST_OFFSET                                            0
#define SBPM_MULTICAST_REQUEST_SYNCH_OFFSET                                                             0
#define SBPM_MULTICAST_REQUEST_SYNCH_WORD_OFFSET                                                        0
#define SBPM_MULTICAST_REQUEST_SYNCH_F_OFFSET_MOD8                                                      7
#define SBPM_MULTICAST_REQUEST_SYNCH_F_OFFSET_MOD16                                                     15
#define SBPM_MULTICAST_REQUEST_WAKEUP_F_OFFSET                                                          30
#define SBPM_MULTICAST_REQUEST_WAKEUP_F_WIDTH                                                           1
#define SBPM_MULTICAST_REQUEST_WAKEUP_OFFSET                                                            0
#define SBPM_MULTICAST_REQUEST_WAKEUP_WORD_OFFSET                                                       0
#define SBPM_MULTICAST_REQUEST_WAKEUP_F_OFFSET_MOD8                                                     6
#define SBPM_MULTICAST_REQUEST_WAKEUP_F_OFFSET_MOD16                                                    14
#define SBPM_MULTICAST_REQUEST_TASK_NUM_F_OFFSET                                                        24
#define SBPM_MULTICAST_REQUEST_TASK_NUM_F_WIDTH                                                         4
#define SBPM_MULTICAST_REQUEST_TASK_NUM_OFFSET                                                          0
#define SBPM_MULTICAST_REQUEST_TASK_NUM_WORD_OFFSET                                                     0
#define SBPM_MULTICAST_REQUEST_TASK_NUM_F_OFFSET_MOD8                                                   0
#define SBPM_MULTICAST_REQUEST_TASK_NUM_F_OFFSET_MOD16                                                  8
#define SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_F_OFFSET                                                  8
#define SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_F_WIDTH                                                   12
#define SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_OFFSET                                                    0
#define SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_WORD_OFFSET                                               0
#define SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_F_OFFSET_MOD16                                            8
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_F_OFFSET                                                     22
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_F_WIDTH                                                      1
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_OFFSET                                                       5
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_WORD_OFFSET                                                  1
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_F_OFFSET_MOD8                                                6
#define SBPM_MULTICAST_REQUEST_ACK_REQUEST_F_OFFSET_MOD16                                               6
#define SBPM_MULTICAST_REQUEST_VALUE_F_OFFSET                                                           14
#define SBPM_MULTICAST_REQUEST_VALUE_F_WIDTH                                                            8
#define SBPM_MULTICAST_REQUEST_VALUE_OFFSET                                                             5
#define SBPM_MULTICAST_REQUEST_VALUE_WORD_OFFSET                                                        1
#define SBPM_MULTICAST_REQUEST_VALUE_F_OFFSET_MOD16                                                     14
#define SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_F_OFFSET                                                   0
#define SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_F_WIDTH                                                    14
#define SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_OFFSET                                                     6
#define SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_WORD_OFFSET                                                1
#define SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_F_OFFSET_MOD16                                             0

/* >>>SBPM_MULTICAST_REQUEST_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_address	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved3     	;
        uint32_t	reserved4     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ack_request   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	value         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_number 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	reserved3     	;
        uint32_t	target_address	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_number 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	value         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ack_request   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4     	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_MULTICAST_REQUEST_STRUCT;

#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT), 7, 1, (r))
#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT), 7, 1, (v))
#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_L_READ( wv )                        FIELD_GET( wv, 31, 1 )
#define RDD_SBPM_MULTICAST_REQUEST_SYNCH_L_WRITE( v, wv )                    FIELD_SET( v, 31, 1, wv )
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT), 6, 1, (r))
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT), 6, 1, (v))
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_L_READ( wv )                       FIELD_GET( wv, 30, 1 )
#define RDD_SBPM_MULTICAST_REQUEST_WAKEUP_L_WRITE( v, wv )                   FIELD_SET( v, 30, 1, wv )
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT), 0, 4, (r))
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT), 0, 4, (v))
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 0, 4, (r))
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 0, 4, (v))
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_L_READ( wv )                     FIELD_GET( wv, 24, 4 )
#define RDD_SBPM_MULTICAST_REQUEST_TASK_NUM_L_WRITE( v, wv )                 FIELD_SET( v, 24, 4, wv )
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT) + 0, 8, 12, (r))
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT) + 0, 8, 12, (v))
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 0, 8, 12, (r))
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 0, 8, 12, (v))
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_L_READ( wv )               FIELD_GET( wv, 8, 12 )
#define RDD_SBPM_MULTICAST_REQUEST_TARGET_ADDRESS_L_WRITE( v, wv )           FIELD_SET( v, 8, 12, wv )
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT) + 5, 6, 1, (r))
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT) + 5, 6, 1, (v))
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 5, 6, 1, (r))
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 5, 6, 1, (v))
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_L_READ( wv )                  FIELD_GET( wv, 22, 1 )
#define RDD_SBPM_MULTICAST_REQUEST_ACK_REQUEST_L_WRITE( v, wv )              FIELD_SET( v, 22, 1, wv )
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_32((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT) + 4, 14, 8, (r))
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT) + 4, 14, 8, (v))
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_READ(r, p)                          FIELD_MREAD_32((uint8_t *)(p) + 4, 14, 8, (r))
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_WRITE(v, p)                         FIELD_MWRITE_32((uint8_t *)(p) + 4, 14, 8, (v))
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_L_READ( wv )                        FIELD_GET( wv, 14, 8 )
#define RDD_SBPM_MULTICAST_REQUEST_VALUE_L_WRITE( v, wv )                    FIELD_SET( v, 14, 8, wv )
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT) + 6, 0, 14, (r))
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_MULTICAST_REQUEST_STRUCT) + 6, 0, 14, (v))
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_READ(r, p)                  FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_L_READ( wv )                FIELD_GET( wv, 0, 14 )
#define RDD_SBPM_MULTICAST_REQUEST_BUFFER_NUMBER_L_WRITE( v, wv )            FIELD_SET( v, 0, 14, wv )
/* <<<SBPM_MULTICAST_REQUEST_STRUCT */

/* <<<RDD_SBPM_MULTICAST_REQUEST */


/* >>>RDD_SBPM_CONNECT_REQUEST */
#define SBPM_CONNECT_REQUEST_SYNCH_F_OFFSET                                                           31
#define SBPM_CONNECT_REQUEST_SYNCH_F_WIDTH                                                            1
#define SBPM_CONNECT_REQUEST_SBPM_CONNECT_REQUEST_OFFSET                                              0
#define SBPM_CONNECT_REQUEST_SYNCH_OFFSET                                                             0
#define SBPM_CONNECT_REQUEST_SYNCH_WORD_OFFSET                                                        0
#define SBPM_CONNECT_REQUEST_SYNCH_F_OFFSET_MOD8                                                      7
#define SBPM_CONNECT_REQUEST_SYNCH_F_OFFSET_MOD16                                                     15
#define SBPM_CONNECT_REQUEST_WAKEUP_F_OFFSET                                                          30
#define SBPM_CONNECT_REQUEST_WAKEUP_F_WIDTH                                                           1
#define SBPM_CONNECT_REQUEST_WAKEUP_OFFSET                                                            0
#define SBPM_CONNECT_REQUEST_WAKEUP_WORD_OFFSET                                                       0
#define SBPM_CONNECT_REQUEST_WAKEUP_F_OFFSET_MOD8                                                     6
#define SBPM_CONNECT_REQUEST_WAKEUP_F_OFFSET_MOD16                                                    14
#define SBPM_CONNECT_REQUEST_TASK_NUM_F_OFFSET                                                        24
#define SBPM_CONNECT_REQUEST_TASK_NUM_F_WIDTH                                                         4
#define SBPM_CONNECT_REQUEST_TASK_NUM_OFFSET                                                          0
#define SBPM_CONNECT_REQUEST_TASK_NUM_WORD_OFFSET                                                     0
#define SBPM_CONNECT_REQUEST_TASK_NUM_F_OFFSET_MOD8                                                   0
#define SBPM_CONNECT_REQUEST_TASK_NUM_F_OFFSET_MOD16                                                  8
#define SBPM_CONNECT_REQUEST_TARGET_ADDRESS_F_OFFSET                                                  8
#define SBPM_CONNECT_REQUEST_TARGET_ADDRESS_F_WIDTH                                                   11
#define SBPM_CONNECT_REQUEST_TARGET_ADDRESS_OFFSET                                                    0
#define SBPM_CONNECT_REQUEST_TARGET_ADDRESS_WORD_OFFSET                                               0
#define SBPM_CONNECT_REQUEST_TARGET_ADDRESS_F_OFFSET_MOD16                                            8
#define SBPM_CONNECT_REQUEST_WR_DATA_1_F_OFFSET                                                       0
#define SBPM_CONNECT_REQUEST_WR_DATA_1_F_WIDTH                                                        6
#define SBPM_CONNECT_REQUEST_WR_DATA_1_OFFSET                                                         3
#define SBPM_CONNECT_REQUEST_WR_DATA_1_WORD_OFFSET                                                    0
#define SBPM_CONNECT_REQUEST_WR_DATA_1_F_OFFSET_MOD8                                                  0
#define SBPM_CONNECT_REQUEST_WR_DATA_1_F_OFFSET_MOD16                                                 0
#define SBPM_CONNECT_REQUEST_WR_DATA_0_F_OFFSET                                                       30
#define SBPM_CONNECT_REQUEST_WR_DATA_0_F_WIDTH                                                        2
#define SBPM_CONNECT_REQUEST_WR_DATA_0_OFFSET                                                         4
#define SBPM_CONNECT_REQUEST_WR_DATA_0_WORD_OFFSET                                                    1
#define SBPM_CONNECT_REQUEST_WR_DATA_0_F_OFFSET_MOD8                                                  6
#define SBPM_CONNECT_REQUEST_WR_DATA_0_F_OFFSET_MOD16                                                 14
#define SBPM_CONNECT_REQUEST_POINTED_BUFFER_NUM_F_OFFSET                                              16
#define SBPM_CONNECT_REQUEST_POINTED_BUFFER_NUM_F_WIDTH                                               14
#define SBPM_CONNECT_REQUEST_POINTED_BUFFER_NUM_OFFSET                                                4
#define SBPM_CONNECT_REQUEST_POINTED_BUFFER_NUM_WORD_OFFSET                                           1
#define SBPM_CONNECT_REQUEST_POINTED_BUFFER_NUM_F_OFFSET_MOD16                                        0
#define SBPM_CONNECT_REQUEST_WRITE_REQUEST_F_OFFSET                                                   15
#define SBPM_CONNECT_REQUEST_WRITE_REQUEST_F_WIDTH                                                    1
#define SBPM_CONNECT_REQUEST_WRITE_REQUEST_OFFSET                                                     6
#define SBPM_CONNECT_REQUEST_WRITE_REQUEST_WORD_OFFSET                                                1
#define SBPM_CONNECT_REQUEST_WRITE_REQUEST_F_OFFSET_MOD8                                              7
#define SBPM_CONNECT_REQUEST_WRITE_REQUEST_F_OFFSET_MOD16                                             15
#define SBPM_CONNECT_REQUEST_ACK_REQUEST_F_OFFSET                                                     14
#define SBPM_CONNECT_REQUEST_ACK_REQUEST_F_WIDTH                                                      1
#define SBPM_CONNECT_REQUEST_ACK_REQUEST_OFFSET                                                       6
#define SBPM_CONNECT_REQUEST_ACK_REQUEST_WORD_OFFSET                                                  1
#define SBPM_CONNECT_REQUEST_ACK_REQUEST_F_OFFSET_MOD8                                                6
#define SBPM_CONNECT_REQUEST_ACK_REQUEST_F_OFFSET_MOD16                                               14
#define SBPM_CONNECT_REQUEST_BUFFER_NUMBER_F_OFFSET                                                   0
#define SBPM_CONNECT_REQUEST_BUFFER_NUMBER_F_WIDTH                                                    14
#define SBPM_CONNECT_REQUEST_BUFFER_NUMBER_OFFSET                                                     6
#define SBPM_CONNECT_REQUEST_BUFFER_NUMBER_WORD_OFFSET                                                1
#define SBPM_CONNECT_REQUEST_BUFFER_NUMBER_F_OFFSET_MOD16                                             0

/* >>>SBPM_CONNECT_REQUEST_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	synch             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_address    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wr_data_1         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wr_data_0         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pointed_buffer_num	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	write_request     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ack_request       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_number     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	wr_data_1         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_address    	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num          	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved          	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	synch             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_number     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ack_request       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	write_request     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pointed_buffer_num	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wr_data_0         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_CONNECT_REQUEST_STRUCT;

#define RDD_SBPM_CONNECT_REQUEST_SYNCH_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT), 7, 1, (r))
#define RDD_SBPM_CONNECT_REQUEST_SYNCH_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT), 7, 1, (v))
#define RDD_SBPM_CONNECT_REQUEST_SYNCH_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_SBPM_CONNECT_REQUEST_SYNCH_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_SBPM_CONNECT_REQUEST_WAKEUP_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT), 6, 1, (r))
#define RDD_SBPM_CONNECT_REQUEST_WAKEUP_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT), 6, 1, (v))
#define RDD_SBPM_CONNECT_REQUEST_WAKEUP_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_SBPM_CONNECT_REQUEST_WAKEUP_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_SBPM_CONNECT_REQUEST_TASK_NUM_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT), 0, 4, (r))
#define RDD_SBPM_CONNECT_REQUEST_TASK_NUM_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT), 0, 4, (v))
#define RDD_SBPM_CONNECT_REQUEST_TASK_NUM_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p), 0, 4, (r))
#define RDD_SBPM_CONNECT_REQUEST_TASK_NUM_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p), 0, 4, (v))
#define RDD_SBPM_CONNECT_REQUEST_TARGET_ADDRESS_READ_G(r, g, idx)              GROUP_FIELD_MREAD_32((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 0, 8, 11, (r))
#define RDD_SBPM_CONNECT_REQUEST_TARGET_ADDRESS_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 0, 8, 11, (v))
#define RDD_SBPM_CONNECT_REQUEST_TARGET_ADDRESS_READ(r, p)                     FIELD_MREAD_32((uint8_t *)(p) + 0, 8, 11, (r))
#define RDD_SBPM_CONNECT_REQUEST_TARGET_ADDRESS_WRITE(v, p)                    FIELD_MWRITE_32((uint8_t *)(p) + 0, 8, 11, (v))
#define RDD_SBPM_CONNECT_REQUEST_WR_DATA_1_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 3, 0, 6, (r))
#define RDD_SBPM_CONNECT_REQUEST_WR_DATA_1_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 3, 0, 6, (v))
#define RDD_SBPM_CONNECT_REQUEST_WR_DATA_1_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 6, (r))
#define RDD_SBPM_CONNECT_REQUEST_WR_DATA_1_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 6, (v))
#define RDD_SBPM_CONNECT_REQUEST_WR_DATA_0_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 4, 6, 2, (r))
#define RDD_SBPM_CONNECT_REQUEST_WR_DATA_0_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 4, 6, 2, (v))
#define RDD_SBPM_CONNECT_REQUEST_WR_DATA_0_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 4, 6, 2, (r))
#define RDD_SBPM_CONNECT_REQUEST_WR_DATA_0_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 4, 6, 2, (v))
#define RDD_SBPM_CONNECT_REQUEST_POINTED_BUFFER_NUM_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 4, 0, 14, (r))
#define RDD_SBPM_CONNECT_REQUEST_POINTED_BUFFER_NUM_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 4, 0, 14, (v))
#define RDD_SBPM_CONNECT_REQUEST_POINTED_BUFFER_NUM_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 4, 0, 14, (r))
#define RDD_SBPM_CONNECT_REQUEST_POINTED_BUFFER_NUM_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 4, 0, 14, (v))
#define RDD_SBPM_CONNECT_REQUEST_WRITE_REQUEST_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 6, 7, 1, (r))
#define RDD_SBPM_CONNECT_REQUEST_WRITE_REQUEST_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 6, 7, 1, (v))
#define RDD_SBPM_CONNECT_REQUEST_WRITE_REQUEST_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 6, 7, 1, (r))
#define RDD_SBPM_CONNECT_REQUEST_WRITE_REQUEST_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 6, 7, 1, (v))
#define RDD_SBPM_CONNECT_REQUEST_ACK_REQUEST_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 6, 6, 1, (r))
#define RDD_SBPM_CONNECT_REQUEST_ACK_REQUEST_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 6, 6, 1, (v))
#define RDD_SBPM_CONNECT_REQUEST_ACK_REQUEST_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 6, 6, 1, (r))
#define RDD_SBPM_CONNECT_REQUEST_ACK_REQUEST_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 6, 6, 1, (v))
#define RDD_SBPM_CONNECT_REQUEST_BUFFER_NUMBER_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 6, 0, 14, (r))
#define RDD_SBPM_CONNECT_REQUEST_BUFFER_NUMBER_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_CONNECT_REQUEST_STRUCT) + 6, 0, 14, (v))
#define RDD_SBPM_CONNECT_REQUEST_BUFFER_NUMBER_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_SBPM_CONNECT_REQUEST_BUFFER_NUMBER_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
/* <<<SBPM_CONNECT_REQUEST_STRUCT */

/* <<<RDD_SBPM_CONNECT_REQUEST */


/* >>>RDD_SBPM_GET_NEXT_REQUEST */
#define SBPM_GET_NEXT_REQUEST_SYNCH_F_OFFSET                                                           31
#define SBPM_GET_NEXT_REQUEST_SYNCH_F_WIDTH                                                            1
#define SBPM_GET_NEXT_REQUEST_SBPM_GET_NEXT_REQUEST_OFFSET                                             0
#define SBPM_GET_NEXT_REQUEST_SYNCH_OFFSET                                                             0
#define SBPM_GET_NEXT_REQUEST_SYNCH_WORD_OFFSET                                                        0
#define SBPM_GET_NEXT_REQUEST_SYNCH_F_OFFSET_MOD8                                                      7
#define SBPM_GET_NEXT_REQUEST_SYNCH_F_OFFSET_MOD16                                                     15
#define SBPM_GET_NEXT_REQUEST_WAKEUP_F_OFFSET                                                          30
#define SBPM_GET_NEXT_REQUEST_WAKEUP_F_WIDTH                                                           1
#define SBPM_GET_NEXT_REQUEST_WAKEUP_OFFSET                                                            0
#define SBPM_GET_NEXT_REQUEST_WAKEUP_WORD_OFFSET                                                       0
#define SBPM_GET_NEXT_REQUEST_WAKEUP_F_OFFSET_MOD8                                                     6
#define SBPM_GET_NEXT_REQUEST_WAKEUP_F_OFFSET_MOD16                                                    14
#define SBPM_GET_NEXT_REQUEST_TASK_NUM_F_OFFSET                                                        24
#define SBPM_GET_NEXT_REQUEST_TASK_NUM_F_WIDTH                                                         4
#define SBPM_GET_NEXT_REQUEST_TASK_NUM_OFFSET                                                          0
#define SBPM_GET_NEXT_REQUEST_TASK_NUM_WORD_OFFSET                                                     0
#define SBPM_GET_NEXT_REQUEST_TASK_NUM_F_OFFSET_MOD8                                                   0
#define SBPM_GET_NEXT_REQUEST_TASK_NUM_F_OFFSET_MOD16                                                  8
#define SBPM_GET_NEXT_REQUEST_ZERO_F_OFFSET                                                            19
#define SBPM_GET_NEXT_REQUEST_ZERO_F_WIDTH                                                             1
#define SBPM_GET_NEXT_REQUEST_ZERO_OFFSET                                                              1
#define SBPM_GET_NEXT_REQUEST_ZERO_WORD_OFFSET                                                         0
#define SBPM_GET_NEXT_REQUEST_ZERO_F_OFFSET_MOD8                                                       3
#define SBPM_GET_NEXT_REQUEST_ZERO_F_OFFSET_MOD16                                                      3
#define SBPM_GET_NEXT_REQUEST_TARGET_ADDRESS_F_OFFSET                                                  8
#define SBPM_GET_NEXT_REQUEST_TARGET_ADDRESS_F_WIDTH                                                   11
#define SBPM_GET_NEXT_REQUEST_TARGET_ADDRESS_OFFSET                                                    0
#define SBPM_GET_NEXT_REQUEST_TARGET_ADDRESS_WORD_OFFSET                                               0
#define SBPM_GET_NEXT_REQUEST_TARGET_ADDRESS_F_OFFSET_MOD16                                            8
#define SBPM_GET_NEXT_REQUEST_BUFFER_NUMBER_F_OFFSET                                                   0
#define SBPM_GET_NEXT_REQUEST_BUFFER_NUMBER_F_WIDTH                                                    14
#define SBPM_GET_NEXT_REQUEST_BUFFER_NUMBER_OFFSET                                                     6
#define SBPM_GET_NEXT_REQUEST_BUFFER_NUMBER_WORD_OFFSET                                                1
#define SBPM_GET_NEXT_REQUEST_BUFFER_NUMBER_F_OFFSET_MOD16                                             0

/* >>>SBPM_GET_NEXT_REQUEST_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	zero          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_address	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved3     	;
        uint32_t	reserved4     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_number 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	reserved3     	;
        uint32_t	target_address	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	zero          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_number 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4     	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_GET_NEXT_REQUEST_STRUCT;

#define RDD_SBPM_GET_NEXT_REQUEST_SYNCH_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT), 7, 1, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_SYNCH_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT), 7, 1, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_SYNCH_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_SYNCH_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_WAKEUP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT), 6, 1, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_WAKEUP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT), 6, 1, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_WAKEUP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_WAKEUP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_TASK_NUM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT), 0, 4, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_TASK_NUM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT), 0, 4, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_TASK_NUM_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 0, 4, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_TASK_NUM_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 0, 4, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_ZERO_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT) + 1, 3, 1, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_ZERO_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT) + 1, 3, 1, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_ZERO_READ(r, p)                           FIELD_MREAD_8((uint8_t *)(p) + 1, 3, 1, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_ZERO_WRITE(v, p)                          FIELD_MWRITE_8((uint8_t *)(p) + 1, 3, 1, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_TARGET_ADDRESS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT) + 0, 8, 11, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_TARGET_ADDRESS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT) + 0, 8, 11, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_TARGET_ADDRESS_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 0, 8, 11, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_TARGET_ADDRESS_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 0, 8, 11, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_BUFFER_NUMBER_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT) + 6, 0, 14, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_BUFFER_NUMBER_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_GET_NEXT_REQUEST_STRUCT) + 6, 0, 14, (v))
#define RDD_SBPM_GET_NEXT_REQUEST_BUFFER_NUMBER_READ(r, p)                  FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_SBPM_GET_NEXT_REQUEST_BUFFER_NUMBER_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
/* <<<SBPM_GET_NEXT_REQUEST_STRUCT */

/* <<<RDD_SBPM_GET_NEXT_REQUEST */


/* >>>RDD_SBPM_MULTI_GET_NEXT_REQUEST */
#define SBPM_MULTI_GET_NEXT_REQUEST_SYNCH_F_OFFSET                                                           31
#define SBPM_MULTI_GET_NEXT_REQUEST_SYNCH_F_WIDTH                                                            1
#define SBPM_MULTI_GET_NEXT_REQUEST_SBPM_MULTI_GET_NEXT_REQUEST_OFFSET                                       0
#define SBPM_MULTI_GET_NEXT_REQUEST_SYNCH_OFFSET                                                             0
#define SBPM_MULTI_GET_NEXT_REQUEST_SYNCH_WORD_OFFSET                                                        0
#define SBPM_MULTI_GET_NEXT_REQUEST_SYNCH_F_OFFSET_MOD8                                                      7
#define SBPM_MULTI_GET_NEXT_REQUEST_SYNCH_F_OFFSET_MOD16                                                     15
#define SBPM_MULTI_GET_NEXT_REQUEST_WAKEUP_F_OFFSET                                                          30
#define SBPM_MULTI_GET_NEXT_REQUEST_WAKEUP_F_WIDTH                                                           1
#define SBPM_MULTI_GET_NEXT_REQUEST_WAKEUP_OFFSET                                                            0
#define SBPM_MULTI_GET_NEXT_REQUEST_WAKEUP_WORD_OFFSET                                                       0
#define SBPM_MULTI_GET_NEXT_REQUEST_WAKEUP_F_OFFSET_MOD8                                                     6
#define SBPM_MULTI_GET_NEXT_REQUEST_WAKEUP_F_OFFSET_MOD16                                                    14
#define SBPM_MULTI_GET_NEXT_REQUEST_TASK_NUM_F_OFFSET                                                        24
#define SBPM_MULTI_GET_NEXT_REQUEST_TASK_NUM_F_WIDTH                                                         4
#define SBPM_MULTI_GET_NEXT_REQUEST_TASK_NUM_OFFSET                                                          0
#define SBPM_MULTI_GET_NEXT_REQUEST_TASK_NUM_WORD_OFFSET                                                     0
#define SBPM_MULTI_GET_NEXT_REQUEST_TASK_NUM_F_OFFSET_MOD8                                                   0
#define SBPM_MULTI_GET_NEXT_REQUEST_TASK_NUM_F_OFFSET_MOD16                                                  8
#define SBPM_MULTI_GET_NEXT_REQUEST_TARGET_ADDRESS_F_OFFSET                                                  8
#define SBPM_MULTI_GET_NEXT_REQUEST_TARGET_ADDRESS_F_WIDTH                                                   12
#define SBPM_MULTI_GET_NEXT_REQUEST_TARGET_ADDRESS_OFFSET                                                    0
#define SBPM_MULTI_GET_NEXT_REQUEST_TARGET_ADDRESS_WORD_OFFSET                                               0
#define SBPM_MULTI_GET_NEXT_REQUEST_TARGET_ADDRESS_F_OFFSET_MOD16                                            8
#define SBPM_MULTI_GET_NEXT_REQUEST_NUM_OF_BUFFERS_F_OFFSET                                                  16
#define SBPM_MULTI_GET_NEXT_REQUEST_NUM_OF_BUFFERS_F_WIDTH                                                   3
#define SBPM_MULTI_GET_NEXT_REQUEST_NUM_OF_BUFFERS_OFFSET                                                    5
#define SBPM_MULTI_GET_NEXT_REQUEST_NUM_OF_BUFFERS_WORD_OFFSET                                               1
#define SBPM_MULTI_GET_NEXT_REQUEST_NUM_OF_BUFFERS_F_OFFSET_MOD8                                             0
#define SBPM_MULTI_GET_NEXT_REQUEST_NUM_OF_BUFFERS_F_OFFSET_MOD16                                            0
#define SBPM_MULTI_GET_NEXT_REQUEST_BUFFER_NUMBER_F_OFFSET                                                   0
#define SBPM_MULTI_GET_NEXT_REQUEST_BUFFER_NUMBER_F_WIDTH                                                    14
#define SBPM_MULTI_GET_NEXT_REQUEST_BUFFER_NUMBER_OFFSET                                                     6
#define SBPM_MULTI_GET_NEXT_REQUEST_BUFFER_NUMBER_WORD_OFFSET                                                1
#define SBPM_MULTI_GET_NEXT_REQUEST_BUFFER_NUMBER_F_OFFSET_MOD16                                             0

/* >>>SBPM_MULTI_GET_NEXT_REQUEST_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_address	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved3     	;
        uint32_t	reserved4     	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_of_buffers	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved5     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_number 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint8_t	reserved3     	;
        uint32_t	target_address	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_num      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	synch         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_number 	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved5     	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_of_buffers	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4     	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_MULTI_GET_NEXT_REQUEST_STRUCT;

#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_SYNCH_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT), 7, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_SYNCH_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT), 7, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_SYNCH_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_SYNCH_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_WAKEUP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT), 6, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_WAKEUP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT), 6, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_WAKEUP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_WAKEUP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_TASK_NUM_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT), 0, 4, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_TASK_NUM_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT), 0, 4, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_TASK_NUM_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 0, 4, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_TASK_NUM_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 0, 4, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_TARGET_ADDRESS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT) + 0, 8, 12, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_TARGET_ADDRESS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT) + 0, 8, 12, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_TARGET_ADDRESS_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 0, 8, 12, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_TARGET_ADDRESS_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 0, 8, 12, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_NUM_OF_BUFFERS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT) + 5, 0, 3, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_NUM_OF_BUFFERS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT) + 5, 0, 3, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_NUM_OF_BUFFERS_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 5, 0, 3, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_NUM_OF_BUFFERS_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 5, 0, 3, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_BUFFER_NUMBER_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT) + 6, 0, 14, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_BUFFER_NUMBER_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REQUEST_STRUCT) + 6, 0, 14, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_BUFFER_NUMBER_READ(r, p)                  FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 14, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REQUEST_BUFFER_NUMBER_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 14, (v))
/* <<<SBPM_MULTI_GET_NEXT_REQUEST_STRUCT */

/* <<<RDD_SBPM_MULTI_GET_NEXT_REQUEST */


/* >>>RDD_SBPM_INGRESS_TO_EGRESS */
#define SBPM_INGRESS_TO_EGRESS_SBN_BUFS_F_OFFSET                                                        0
#define SBPM_INGRESS_TO_EGRESS_SBN_BUFS_F_WIDTH                                                         7
#define SBPM_INGRESS_TO_EGRESS_SBN_BUFS_OFFSET                                                          7
#define SBPM_INGRESS_TO_EGRESS_SBN_BUFS_WORD_OFFSET                                                     1
#define SBPM_INGRESS_TO_EGRESS_SBN_BUFS_F_OFFSET_MOD8                                                   0
#define SBPM_INGRESS_TO_EGRESS_SBN_BUFS_F_OFFSET_MOD16                                                  0

/* >>>SBPM_INGRESS_TO_EGRESS_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved  	;
        uint32_t	reserved2 	:25	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sbn_bufs  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved  	;
        uint32_t	sbn_bufs  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2 	:25	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_INGRESS_TO_EGRESS_STRUCT;

#define RDD_SBPM_INGRESS_TO_EGRESS_SBN_BUFS_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_INGRESS_TO_EGRESS_STRUCT) + 7, 0, 7, (r))
#define RDD_SBPM_INGRESS_TO_EGRESS_SBN_BUFS_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_INGRESS_TO_EGRESS_STRUCT) + 7, 0, 7, (v))
#define RDD_SBPM_INGRESS_TO_EGRESS_SBN_BUFS_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 7, 0, 7, (r))
#define RDD_SBPM_INGRESS_TO_EGRESS_SBN_BUFS_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 7, 0, 7, (v))
/* <<<SBPM_INGRESS_TO_EGRESS_STRUCT */

/* <<<RDD_SBPM_INGRESS_TO_EGRESS */


/* >>>RDD_SBPM_ALLOC_REPLY */
#define SBPM_ALLOC_REPLY_ALLOC_BN_F_OFFSET                                                        1
#define SBPM_ALLOC_REPLY_ALLOC_BN_F_WIDTH                                                         14
#define SBPM_ALLOC_REPLY_ALLOC_BN_OFFSET                                                          6
#define SBPM_ALLOC_REPLY_ALLOC_BN_WORD_OFFSET                                                     1
#define SBPM_ALLOC_REPLY_ALLOC_BN_F_OFFSET_MOD16                                                  1
#define SBPM_ALLOC_REPLY_BN_VALID_F_OFFSET                                                        0
#define SBPM_ALLOC_REPLY_BN_VALID_F_WIDTH                                                         1
#define SBPM_ALLOC_REPLY_BN_VALID_OFFSET                                                          7
#define SBPM_ALLOC_REPLY_BN_VALID_WORD_OFFSET                                                     1
#define SBPM_ALLOC_REPLY_BN_VALID_F_OFFSET_MOD8                                                   0
#define SBPM_ALLOC_REPLY_BN_VALID_F_OFFSET_MOD16                                                  0

/* >>>SBPM_ALLOC_REPLY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved  	;
        uint32_t	reserved2 	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	alloc_bn  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn_valid  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved  	;
        uint32_t	bn_valid  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	alloc_bn  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2 	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_ALLOC_REPLY_STRUCT;

#define RDD_SBPM_ALLOC_REPLY_ALLOC_BN_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_ALLOC_REPLY_STRUCT) + 6, 1, 14, (r))
#define RDD_SBPM_ALLOC_REPLY_ALLOC_BN_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_ALLOC_REPLY_STRUCT) + 6, 1, 14, (v))
#define RDD_SBPM_ALLOC_REPLY_ALLOC_BN_READ(r, p)                  FIELD_MREAD_16((uint8_t *)(p) + 6, 1, 14, (r))
#define RDD_SBPM_ALLOC_REPLY_ALLOC_BN_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)(p) + 6, 1, 14, (v))
#define RDD_SBPM_ALLOC_REPLY_BN_VALID_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_ALLOC_REPLY_STRUCT) + 7, 0, 1, (r))
#define RDD_SBPM_ALLOC_REPLY_BN_VALID_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_ALLOC_REPLY_STRUCT) + 7, 0, 1, (v))
#define RDD_SBPM_ALLOC_REPLY_BN_VALID_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 7, 0, 1, (r))
#define RDD_SBPM_ALLOC_REPLY_BN_VALID_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 7, 0, 1, (v))
/* <<<SBPM_ALLOC_REPLY_STRUCT */

/* <<<RDD_SBPM_ALLOC_REPLY */


/* >>>RDD_SBPM_MULTICAST_REPLY */
#define SBPM_MULTICAST_REPLY_ACK_F_OFFSET                                                             0
#define SBPM_MULTICAST_REPLY_ACK_F_WIDTH                                                              1
#define SBPM_MULTICAST_REPLY_ACK_OFFSET                                                               7
#define SBPM_MULTICAST_REPLY_ACK_WORD_OFFSET                                                          1
#define SBPM_MULTICAST_REPLY_ACK_F_OFFSET_MOD8                                                        0
#define SBPM_MULTICAST_REPLY_ACK_F_OFFSET_MOD16                                                       0

/* >>>SBPM_MULTICAST_REPLY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved  	;
        uint32_t	reserved2 	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ack       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved  	;
        uint32_t	ack       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2 	:31	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_MULTICAST_REPLY_STRUCT;

#define RDD_SBPM_MULTICAST_REPLY_ACK_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTICAST_REPLY_STRUCT) + 7, 0, 1, (r))
#define RDD_SBPM_MULTICAST_REPLY_ACK_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTICAST_REPLY_STRUCT) + 7, 0, 1, (v))
#define RDD_SBPM_MULTICAST_REPLY_ACK_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 7, 0, 1, (r))
#define RDD_SBPM_MULTICAST_REPLY_ACK_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 7, 0, 1, (v))
/* <<<SBPM_MULTICAST_REPLY_STRUCT */

/* <<<RDD_SBPM_MULTICAST_REPLY */


/* >>>RDD_SBPM_GET_NEXT_REPLY */
#define SBPM_GET_NEXT_REPLY_MCAST_OF_NEXT_F_OFFSET                                                   16
#define SBPM_GET_NEXT_REPLY_MCAST_OF_NEXT_F_WIDTH                                                    8
#define SBPM_GET_NEXT_REPLY_MCAST_OF_NEXT_OFFSET                                                     5
#define SBPM_GET_NEXT_REPLY_MCAST_OF_NEXT_WORD_OFFSET                                                1
#define SBPM_GET_NEXT_REPLY_MCAST_OF_NEXT_F_OFFSET_MOD16                                             0
#define SBPM_GET_NEXT_REPLY_NEXT_IS_NULL_F_OFFSET                                                    15
#define SBPM_GET_NEXT_REPLY_NEXT_IS_NULL_F_WIDTH                                                     1
#define SBPM_GET_NEXT_REPLY_NEXT_IS_NULL_OFFSET                                                      6
#define SBPM_GET_NEXT_REPLY_NEXT_IS_NULL_WORD_OFFSET                                                 1
#define SBPM_GET_NEXT_REPLY_NEXT_IS_NULL_F_OFFSET_MOD8                                               7
#define SBPM_GET_NEXT_REPLY_NEXT_IS_NULL_F_OFFSET_MOD16                                              15
#define SBPM_GET_NEXT_REPLY_NEXT_BN_F_OFFSET                                                         1
#define SBPM_GET_NEXT_REPLY_NEXT_BN_F_WIDTH                                                          14
#define SBPM_GET_NEXT_REPLY_NEXT_BN_OFFSET                                                           6
#define SBPM_GET_NEXT_REPLY_NEXT_BN_WORD_OFFSET                                                      1
#define SBPM_GET_NEXT_REPLY_NEXT_BN_F_OFFSET_MOD16                                                   1
#define SBPM_GET_NEXT_REPLY_VALID_F_OFFSET                                                           0
#define SBPM_GET_NEXT_REPLY_VALID_F_WIDTH                                                            1
#define SBPM_GET_NEXT_REPLY_VALID_OFFSET                                                             7
#define SBPM_GET_NEXT_REPLY_VALID_WORD_OFFSET                                                        1
#define SBPM_GET_NEXT_REPLY_VALID_F_OFFSET_MOD8                                                      0
#define SBPM_GET_NEXT_REPLY_VALID_F_OFFSET_MOD16                                                     0

/* >>>SBPM_GET_NEXT_REPLY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved     	;
        uint8_t	reserved2    	;
        uint8_t	mcast_of_next	;
        uint32_t	next_is_null 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	next_bn      	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved     	;
        uint32_t	valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	next_bn      	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	next_is_null 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	mcast_of_next	;
        uint8_t	reserved2    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_GET_NEXT_REPLY_STRUCT;

#define RDD_SBPM_GET_NEXT_REPLY_MCAST_OF_NEXT_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(SBPM_GET_NEXT_REPLY_STRUCT) + 5, (r))
#define RDD_SBPM_GET_NEXT_REPLY_MCAST_OF_NEXT_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(SBPM_GET_NEXT_REPLY_STRUCT) + 5, (v))
#define RDD_SBPM_GET_NEXT_REPLY_MCAST_OF_NEXT_READ(r, p)                 MREAD_8((uint8_t *)(p) + 5, (r))
#define RDD_SBPM_GET_NEXT_REPLY_MCAST_OF_NEXT_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 5, (v))
#define RDD_SBPM_GET_NEXT_REPLY_NEXT_IS_NULL_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_GET_NEXT_REPLY_STRUCT) + 6, 7, 1, (r))
#define RDD_SBPM_GET_NEXT_REPLY_NEXT_IS_NULL_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_GET_NEXT_REPLY_STRUCT) + 6, 7, 1, (v))
#define RDD_SBPM_GET_NEXT_REPLY_NEXT_IS_NULL_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 6, 7, 1, (r))
#define RDD_SBPM_GET_NEXT_REPLY_NEXT_IS_NULL_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 6, 7, 1, (v))
#define RDD_SBPM_GET_NEXT_REPLY_NEXT_BN_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_GET_NEXT_REPLY_STRUCT) + 6, 1, 14, (r))
#define RDD_SBPM_GET_NEXT_REPLY_NEXT_BN_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_GET_NEXT_REPLY_STRUCT) + 6, 1, 14, (v))
#define RDD_SBPM_GET_NEXT_REPLY_NEXT_BN_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p) + 6, 1, 14, (r))
#define RDD_SBPM_GET_NEXT_REPLY_NEXT_BN_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p) + 6, 1, 14, (v))
#define RDD_SBPM_GET_NEXT_REPLY_VALID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_GET_NEXT_REPLY_STRUCT) + 7, 0, 1, (r))
#define RDD_SBPM_GET_NEXT_REPLY_VALID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_GET_NEXT_REPLY_STRUCT) + 7, 0, 1, (v))
#define RDD_SBPM_GET_NEXT_REPLY_VALID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 7, 0, 1, (r))
#define RDD_SBPM_GET_NEXT_REPLY_VALID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 7, 0, 1, (v))
/* <<<SBPM_GET_NEXT_REPLY_STRUCT */

/* <<<RDD_SBPM_GET_NEXT_REPLY */


/* >>>RDD_SBPM_MULTI_GET_NEXT_REPLY */
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_F_OFFSET                                                             17
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_F_WIDTH                                                              14
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_OFFSET                                                               0
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_WORD_OFFSET                                                          0
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_F_OFFSET_MOD16                                                       1
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_VALID_F_OFFSET                                                       16
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_VALID_F_WIDTH                                                        1
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_VALID_OFFSET                                                         1
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_VALID_WORD_OFFSET                                                    0
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_VALID_F_OFFSET_MOD8                                                  0
#define SBPM_MULTI_GET_NEXT_REPLY_BN4_VALID_F_OFFSET_MOD16                                                 0
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_F_OFFSET                                                             1
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_F_WIDTH                                                              14
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_OFFSET                                                               2
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_WORD_OFFSET                                                          0
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_F_OFFSET_MOD16                                                       1
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_VALID_F_OFFSET                                                       0
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_VALID_F_WIDTH                                                        1
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_VALID_OFFSET                                                         3
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_VALID_WORD_OFFSET                                                    0
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_VALID_F_OFFSET_MOD8                                                  0
#define SBPM_MULTI_GET_NEXT_REPLY_BN3_VALID_F_OFFSET_MOD16                                                 0
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_F_OFFSET                                                             17
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_F_WIDTH                                                              14
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_OFFSET                                                               4
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_WORD_OFFSET                                                          1
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_F_OFFSET_MOD16                                                       1
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_VALID_F_OFFSET                                                       16
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_VALID_F_WIDTH                                                        1
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_VALID_OFFSET                                                         5
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_VALID_WORD_OFFSET                                                    1
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_VALID_F_OFFSET_MOD8                                                  0
#define SBPM_MULTI_GET_NEXT_REPLY_BN2_VALID_F_OFFSET_MOD16                                                 0
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_F_OFFSET                                                             1
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_F_WIDTH                                                              14
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_OFFSET                                                               6
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_WORD_OFFSET                                                          1
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_F_OFFSET_MOD16                                                       1
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_VALID_F_OFFSET                                                       0
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_VALID_F_WIDTH                                                        1
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_VALID_OFFSET                                                         7
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_VALID_WORD_OFFSET                                                    1
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_VALID_F_OFFSET_MOD8                                                  0
#define SBPM_MULTI_GET_NEXT_REPLY_BN1_VALID_F_OFFSET_MOD16                                                 0

/* >>>SBPM_MULTI_GET_NEXT_REPLY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn4       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn4_valid 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn3       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn3_valid 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn2       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn2_valid 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn1       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn1_valid 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	bn3_valid 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn3       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn4_valid 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn4       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn1_valid 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn1       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn2_valid 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bn2       	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) SBPM_MULTI_GET_NEXT_REPLY_STRUCT;

#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN4_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT), 1, 14, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN4_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT), 1, 14, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN4_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p), 1, 14, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN4_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p), 1, 14, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN4_VALID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 1, 0, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN4_VALID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 1, 0, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN4_VALID_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN4_VALID_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN3_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 2, 1, 14, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN3_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 2, 1, 14, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN3_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p) + 2, 1, 14, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN3_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p) + 2, 1, 14, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN3_VALID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 3, 0, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN3_VALID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 3, 0, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN3_VALID_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN3_VALID_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN2_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 4, 1, 14, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN2_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 4, 1, 14, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN2_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p) + 4, 1, 14, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN2_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p) + 4, 1, 14, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN2_VALID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 5, 0, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN2_VALID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 5, 0, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN2_VALID_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 5, 0, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN2_VALID_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 5, 0, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN1_READ_G(r, g, idx)                GROUP_FIELD_MREAD_16((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 6, 1, 14, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN1_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 6, 1, 14, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN1_READ(r, p)                       FIELD_MREAD_16((uint8_t *)(p) + 6, 1, 14, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN1_WRITE(v, p)                      FIELD_MWRITE_16((uint8_t *)(p) + 6, 1, 14, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN1_VALID_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 7, 0, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN1_VALID_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(SBPM_MULTI_GET_NEXT_REPLY_STRUCT) + 7, 0, 1, (v))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN1_VALID_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 7, 0, 1, (r))
#define RDD_SBPM_MULTI_GET_NEXT_REPLY_BN1_VALID_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 7, 0, 1, (v))
/* <<<SBPM_MULTI_GET_NEXT_REPLY_STRUCT */

/* <<<RDD_SBPM_MULTI_GET_NEXT_REPLY */


/* >>>RDD_BB_MSG_DEST */
#define BB_MSG_DEST_ADDRESS_F_OFFSET                                                         6
#define BB_MSG_DEST_ADDRESS_F_WIDTH                                                          11
#define BB_MSG_DEST_ADDRESS_OFFSET                                                           0
#define BB_MSG_DEST_ADDRESS_WORD_OFFSET                                                      0
#define BB_MSG_DEST_ADDRESS_F_OFFSET_MOD16                                                   6
#define BB_MSG_DEST_BB_ID_F_OFFSET                                                           0
#define BB_MSG_DEST_BB_ID_F_WIDTH                                                            6
#define BB_MSG_DEST_BB_ID_OFFSET                                                             3
#define BB_MSG_DEST_BB_ID_WORD_OFFSET                                                        0
#define BB_MSG_DEST_BB_ID_F_OFFSET_MOD8                                                      0
#define BB_MSG_DEST_BB_ID_F_OFFSET_MOD16                                                     0

/* >>>BB_MSG_DEST_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved4    	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	address      	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	bb_id        	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_reserved4  	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0              	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	disp_queue             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reservedSU1_bb_id      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_reserved4  	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	task                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reservedSU2_bb_id      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_reserved4  	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2              	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reor_queue             	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reservedSU3_bb_id      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reservedSU4_reserved4  	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	serial_number          	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reservedSU4_bb_id      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	bb_id        	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	address      	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	reserved4    	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_bb_id      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	disp_queue             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reserved0              	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reservedSU1_reserved4  	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_bb_id      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task                   	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reserved1              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reservedSU2_reserved4  	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_bb_id      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reor_queue             	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reserved2              	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reservedSU3_reserved4  	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 4 */
		struct{
        uint32_t	reservedSU4_bb_id      	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	serial_number          	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reserved3              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of address union */
        uint32_t	reservedSU4_reserved4  	:15	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) BB_MSG_DEST_STRUCT;

#define RDD_BB_MSG_DEST_ADDRESS_READ_G(r, g, idx)                GROUP_FIELD_MREAD_32((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 0, 6, 11, (r))
#define RDD_BB_MSG_DEST_ADDRESS_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 0, 6, 11, (v))
#define RDD_BB_MSG_DEST_ADDRESS_READ(r, p)                       FIELD_MREAD_32((uint8_t *)(p) + 0, 6, 11, (r))
#define RDD_BB_MSG_DEST_ADDRESS_WRITE(v, p)                      FIELD_MWRITE_32((uint8_t *)(p) + 0, 6, 11, (v))
#define RDD_BB_MSG_DEST_DISP_QUEUE_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 2, 6, 5, (r))
#define RDD_BB_MSG_DEST_DISP_QUEUE_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 2, 6, 5, (v))
#define RDD_BB_MSG_DEST_DISP_QUEUE_READ(r, p)                    FIELD_MREAD_16((uint8_t *)(p) + 2, 6, 5, (r))
#define RDD_BB_MSG_DEST_DISP_QUEUE_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)(p) + 2, 6, 5, (v))
#define RDD_BB_MSG_DEST_TASK_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 2, 6, 8, (r))
#define RDD_BB_MSG_DEST_TASK_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 2, 6, 8, (v))
#define RDD_BB_MSG_DEST_TASK_READ(r, p)                          FIELD_MREAD_16((uint8_t *)(p) + 2, 6, 8, (r))
#define RDD_BB_MSG_DEST_TASK_WRITE(v, p)                         FIELD_MWRITE_16((uint8_t *)(p) + 2, 6, 8, (v))
#define RDD_BB_MSG_DEST_REOR_QUEUE_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 2, 6, 6, (r))
#define RDD_BB_MSG_DEST_REOR_QUEUE_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 2, 6, 6, (v))
#define RDD_BB_MSG_DEST_REOR_QUEUE_READ(r, p)                    FIELD_MREAD_16((uint8_t *)(p) + 2, 6, 6, (r))
#define RDD_BB_MSG_DEST_REOR_QUEUE_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)(p) + 2, 6, 6, (v))
#define RDD_BB_MSG_DEST_SERIAL_NUMBER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 2, 6, 10, (r))
#define RDD_BB_MSG_DEST_SERIAL_NUMBER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 2, 6, 10, (v))
#define RDD_BB_MSG_DEST_SERIAL_NUMBER_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 2, 6, 10, (r))
#define RDD_BB_MSG_DEST_SERIAL_NUMBER_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 2, 6, 10, (v))
#define RDD_BB_MSG_DEST_BB_ID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 3, 0, 6, (r))
#define RDD_BB_MSG_DEST_BB_ID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BB_MSG_DEST_STRUCT) + 3, 0, 6, (v))
#define RDD_BB_MSG_DEST_BB_ID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 6, (r))
#define RDD_BB_MSG_DEST_BB_ID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 6, (v))
/* <<<BB_MSG_DEST_STRUCT */

/* <<<RDD_BB_MSG_DEST */


/* >>>RDD_DISP_REOR_BB_MSG_TOKEN_REQ */
#define DISP_REOR_BB_MSG_TOKEN_REQ_SYNC_ASYNC_F_OFFSET                                                      17
#define DISP_REOR_BB_MSG_TOKEN_REQ_SYNC_ASYNC_F_WIDTH                                                       1
#define DISP_REOR_BB_MSG_TOKEN_REQ_SYNC_ASYNC_OFFSET                                                        1
#define DISP_REOR_BB_MSG_TOKEN_REQ_SYNC_ASYNC_WORD_OFFSET                                                   0
#define DISP_REOR_BB_MSG_TOKEN_REQ_SYNC_ASYNC_F_OFFSET_MOD8                                                 1
#define DISP_REOR_BB_MSG_TOKEN_REQ_SYNC_ASYNC_F_OFFSET_MOD16                                                1
#define DISP_REOR_BB_MSG_TOKEN_REQ_WAKEUP_F_OFFSET                                                          16
#define DISP_REOR_BB_MSG_TOKEN_REQ_WAKEUP_F_WIDTH                                                           1
#define DISP_REOR_BB_MSG_TOKEN_REQ_WAKEUP_OFFSET                                                            1
#define DISP_REOR_BB_MSG_TOKEN_REQ_WAKEUP_WORD_OFFSET                                                       0
#define DISP_REOR_BB_MSG_TOKEN_REQ_WAKEUP_F_OFFSET_MOD8                                                     0
#define DISP_REOR_BB_MSG_TOKEN_REQ_WAKEUP_F_OFFSET_MOD16                                                    0
#define DISP_REOR_BB_MSG_TOKEN_REQ_TASK_ID_F_OFFSET                                                         12
#define DISP_REOR_BB_MSG_TOKEN_REQ_TASK_ID_F_WIDTH                                                          4
#define DISP_REOR_BB_MSG_TOKEN_REQ_TASK_ID_OFFSET                                                           2
#define DISP_REOR_BB_MSG_TOKEN_REQ_TASK_ID_WORD_OFFSET                                                      0
#define DISP_REOR_BB_MSG_TOKEN_REQ_TASK_ID_F_OFFSET_MOD8                                                    4
#define DISP_REOR_BB_MSG_TOKEN_REQ_TASK_ID_F_OFFSET_MOD16                                                   12
#define DISP_REOR_BB_MSG_TOKEN_REQ_RETURN_ADDR_F_OFFSET                                                     0
#define DISP_REOR_BB_MSG_TOKEN_REQ_RETURN_ADDR_F_WIDTH                                                      11
#define DISP_REOR_BB_MSG_TOKEN_REQ_RETURN_ADDR_OFFSET                                                       2
#define DISP_REOR_BB_MSG_TOKEN_REQ_RETURN_ADDR_WORD_OFFSET                                                  0
#define DISP_REOR_BB_MSG_TOKEN_REQ_RETURN_ADDR_F_OFFSET_MOD16                                               0

/* >>>DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved1  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sync_async 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	return_addr	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	return_addr	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sync_async 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1  	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT;

#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_SYNC_ASYNC_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT) + 1, 1, 1, (r))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_SYNC_ASYNC_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT) + 1, 1, 1, (v))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_SYNC_ASYNC_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 1, 1, 1, (r))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_SYNC_ASYNC_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 1, 1, 1, (v))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_WAKEUP_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT) + 1, 0, 1, (r))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_WAKEUP_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT) + 1, 0, 1, (v))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_WAKEUP_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 1, (r))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_WAKEUP_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 1, (v))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_TASK_ID_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT) + 2, 4, 4, (r))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_TASK_ID_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT) + 2, 4, 4, (v))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_TASK_ID_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 2, 4, 4, (r))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_TASK_ID_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 2, 4, 4, (v))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_RETURN_ADDR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT) + 2, 0, 11, (r))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_RETURN_ADDR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT) + 2, 0, 11, (v))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_RETURN_ADDR_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 11, (r))
#define RDD_DISP_REOR_BB_MSG_TOKEN_REQ_RETURN_ADDR_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 11, (v))
/* <<<DISP_REOR_BB_MSG_TOKEN_REQ_STRUCT */

/* <<<RDD_DISP_REOR_BB_MSG_TOKEN_REQ */


/* >>>RDD_DISP_REOR_BB_MSG_CONNECT_REQ */
#define DISP_REOR_BB_MSG_CONNECT_REQ_NEW_BUFFER_F_OFFSET                                                      0
#define DISP_REOR_BB_MSG_CONNECT_REQ_NEW_BUFFER_F_WIDTH                                                       10
#define DISP_REOR_BB_MSG_CONNECT_REQ_NEW_BUFFER_OFFSET                                                        2
#define DISP_REOR_BB_MSG_CONNECT_REQ_NEW_BUFFER_WORD_OFFSET                                                   0
#define DISP_REOR_BB_MSG_CONNECT_REQ_NEW_BUFFER_F_OFFSET_MOD16                                                0
#define DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_NEXT_BUFFER_F_OFFSET                                              16
#define DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_NEXT_BUFFER_F_WIDTH                                               10
#define DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_NEXT_BUFFER_OFFSET                                                4
#define DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_NEXT_BUFFER_WORD_OFFSET                                           1
#define DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_NEXT_BUFFER_F_OFFSET_MOD16                                        0
#define DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_BUFFER_F_OFFSET                                                   0
#define DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_BUFFER_F_WIDTH                                                    10
#define DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_BUFFER_OFFSET                                                     6
#define DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_BUFFER_WORD_OFFSET                                                1
#define DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_BUFFER_F_OFFSET_MOD16                                             0

/* >>>DISP_REOR_BB_MSG_CONNECT_REQ_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0         	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	new_buffer        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	golden_next_buffer	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	golden_buffer     	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	new_buffer        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0         	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	golden_buffer     	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	golden_next_buffer	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1         	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DISP_REOR_BB_MSG_CONNECT_REQ_STRUCT;

#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_NEW_BUFFER_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECT_REQ_STRUCT) + 2, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_NEW_BUFFER_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECT_REQ_STRUCT) + 2, 0, 10, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_NEW_BUFFER_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_NEW_BUFFER_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 10, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_NEXT_BUFFER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECT_REQ_STRUCT) + 4, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_NEXT_BUFFER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECT_REQ_STRUCT) + 4, 0, 10, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_NEXT_BUFFER_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 4, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_NEXT_BUFFER_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 4, 0, 10, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_BUFFER_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECT_REQ_STRUCT) + 6, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_BUFFER_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECT_REQ_STRUCT) + 6, 0, 10, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_BUFFER_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECT_REQ_GOLDEN_BUFFER_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 10, (v))
/* <<<DISP_REOR_BB_MSG_CONNECT_REQ_STRUCT */

/* <<<RDD_DISP_REOR_BB_MSG_CONNECT_REQ */


/* >>>RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ */
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_USE_VIQ_F_OFFSET                                                         21
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_USE_VIQ_F_WIDTH                                                          1
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_USE_VIQ_OFFSET                                                           1
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_USE_VIQ_WORD_OFFSET                                                      0
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_USE_VIQ_F_OFFSET_MOD8                                                    5
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_USE_VIQ_F_OFFSET_MOD16                                                   5
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_ASSOCIATED_VIQ_F_OFFSET                                                  16
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_ASSOCIATED_VIQ_F_WIDTH                                                   5
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_ASSOCIATED_VIQ_OFFSET                                                    1
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_ASSOCIATED_VIQ_WORD_OFFSET                                               0
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_ASSOCIATED_VIQ_F_OFFSET_MOD8                                             0
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_ASSOCIATED_VIQ_F_OFFSET_MOD16                                            0
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_GOLDEN_BUFFER_F_OFFSET                                                   0
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_GOLDEN_BUFFER_F_WIDTH                                                    10
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_GOLDEN_BUFFER_OFFSET                                                     6
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_GOLDEN_BUFFER_WORD_OFFSET                                                1
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_GOLDEN_BUFFER_F_OFFSET_MOD16                                             0
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_SYNC_ASYNC_F_OFFSET                                                      17
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_SYNC_ASYNC_F_WIDTH                                                       1
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_SYNC_ASYNC_OFFSET                                                        13
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_SYNC_ASYNC_WORD_OFFSET                                                   3
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_SYNC_ASYNC_F_OFFSET_MOD8                                                 1
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_SYNC_ASYNC_F_OFFSET_MOD16                                                1
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_WAKEUP_F_OFFSET                                                          16
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_WAKEUP_F_WIDTH                                                           1
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_WAKEUP_OFFSET                                                            13
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_WAKEUP_WORD_OFFSET                                                       3
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_WAKEUP_F_OFFSET_MOD8                                                     0
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_WAKEUP_F_OFFSET_MOD16                                                    0
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_TASK_ID_F_OFFSET                                                         12
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_TASK_ID_F_WIDTH                                                          4
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_TASK_ID_OFFSET                                                           14
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_TASK_ID_WORD_OFFSET                                                      3
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_TASK_ID_F_OFFSET_MOD8                                                    4
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_TASK_ID_F_OFFSET_MOD16                                                   12
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_RETURN_ADDR_F_OFFSET                                                     0
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_RETURN_ADDR_F_WIDTH                                                      11
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_RETURN_ADDR_OFFSET                                                       14
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_RETURN_ADDR_WORD_OFFSET                                                  3
#define DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_RETURN_ADDR_F_OFFSET_MOD16                                               0

/* >>>DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0     	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	use_viq       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	associated_viq	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved1     	;
        uint32_t	reserved2     	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	golden_buffer 	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3     	;
        uint32_t	reserved4     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sync_async    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved5     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	return_addr   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	reserved1     	;
        uint32_t	associated_viq	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	use_viq       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0     	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	golden_buffer 	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2     	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3     	;
        uint32_t	return_addr   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved5     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sync_async    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT;

#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_USE_VIQ_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 1, 5, 1, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_USE_VIQ_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 1, 5, 1, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_USE_VIQ_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 1, 5, 1, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_USE_VIQ_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 1, 5, 1, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_ASSOCIATED_VIQ_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 1, 0, 5, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_ASSOCIATED_VIQ_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 1, 0, 5, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_ASSOCIATED_VIQ_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 5, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_ASSOCIATED_VIQ_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 5, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_GOLDEN_BUFFER_READ_G(r, g, idx)           GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 6, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_GOLDEN_BUFFER_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 6, 0, 10, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_GOLDEN_BUFFER_READ(r, p)                  FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_GOLDEN_BUFFER_WRITE(v, p)                 FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 10, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_SYNC_ASYNC_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 13, 1, 1, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_SYNC_ASYNC_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 13, 1, 1, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_SYNC_ASYNC_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 13, 1, 1, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_SYNC_ASYNC_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 13, 1, 1, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_WAKEUP_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 13, 0, 1, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_WAKEUP_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 13, 0, 1, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_WAKEUP_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 13, 0, 1, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_WAKEUP_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 13, 0, 1, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_TASK_ID_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 14, 4, 4, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_TASK_ID_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 14, 4, 4, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_TASK_ID_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 14, 4, 4, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_TASK_ID_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 14, 4, 4, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_RETURN_ADDR_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 14, 0, 11, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_RETURN_ADDR_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT) + 14, 0, 11, (v))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_RETURN_ADDR_READ(r, p)                    FIELD_MREAD_16((uint8_t *)(p) + 14, 0, 11, (r))
#define RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_RETURN_ADDR_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)(p) + 14, 0, 11, (v))
/* <<<DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ_STRUCT */

/* <<<RDD_DISP_REOR_BB_MSG_BUFFER_MULTICAST_CONNECT_REQ */


/* >>>RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ */
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_TASK_ID_F_OFFSET                                                         28
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_TASK_ID_F_WIDTH                                                          4
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_OFFSET                             0
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_TASK_ID_OFFSET                                                           0
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_TASK_ID_WORD_OFFSET                                                      0
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_TASK_ID_F_OFFSET_MOD8                                                    4
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_TASK_ID_F_OFFSET_MOD16                                                   12
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_RETURN_ADDR_F_OFFSET                                                     16
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_RETURN_ADDR_F_WIDTH                                                      11
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_RETURN_ADDR_OFFSET                                                       0
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_RETURN_ADDR_WORD_OFFSET                                                  0
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_RETURN_ADDR_F_OFFSET_MOD16                                               0
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_SYNC_ASYNC_F_OFFSET                                                      11
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_SYNC_ASYNC_F_WIDTH                                                       1
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_SYNC_ASYNC_OFFSET                                                        2
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_SYNC_ASYNC_WORD_OFFSET                                                   0
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_SYNC_ASYNC_F_OFFSET_MOD8                                                 3
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_SYNC_ASYNC_F_OFFSET_MOD16                                                11
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_WAKEUP_F_OFFSET                                                          10
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_WAKEUP_F_WIDTH                                                           1
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_WAKEUP_OFFSET                                                            2
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_WAKEUP_WORD_OFFSET                                                       0
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_WAKEUP_F_OFFSET_MOD8                                                     2
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_WAKEUP_F_OFFSET_MOD16                                                    10
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_GOLDEN_BUFFER_F_OFFSET                                                   0
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_GOLDEN_BUFFER_F_WIDTH                                                    10
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_GOLDEN_BUFFER_OFFSET                                                     2
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_GOLDEN_BUFFER_WORD_OFFSET                                                0
#define DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_GOLDEN_BUFFER_F_OFFSET_MOD16                                             0

/* >>>DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	task_id      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	return_addr  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sync_async   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	golden_buffer	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	golden_buffer	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sync_async   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	return_addr  	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT;

#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_TASK_ID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT), 4, 4, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_TASK_ID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT), 4, 4, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_TASK_ID_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 4, 4, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_TASK_ID_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 4, 4, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_RETURN_ADDR_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT), 0, 11, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_RETURN_ADDR_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT), 0, 11, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_RETURN_ADDR_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p), 0, 11, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_RETURN_ADDR_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p), 0, 11, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_SYNC_ASYNC_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT) + 2, 3, 1, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_SYNC_ASYNC_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT) + 2, 3, 1, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_SYNC_ASYNC_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 1, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_SYNC_ASYNC_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 1, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_WAKEUP_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT) + 2, 2, 1, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_WAKEUP_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT) + 2, 2, 1, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_WAKEUP_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 2, 2, 1, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_WAKEUP_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 2, 2, 1, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_GOLDEN_BUFFER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT) + 2, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_GOLDEN_BUFFER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT) + 2, 0, 10, (v))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_GOLDEN_BUFFER_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_GOLDEN_BUFFER_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 10, (v))
/* <<<DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ_STRUCT */

/* <<<RDD_DISP_REOR_BB_MSG_CONNECTED_BUFFER_REQ */


/* >>>RDD_DISP_REOR_BB_MSG_REPLY */
#define DISP_REOR_BB_MSG_REPLY_SBPM_CONGESTION_F_OFFSET                                                 20
#define DISP_REOR_BB_MSG_REPLY_SBPM_CONGESTION_F_WIDTH                                                  2
#define DISP_REOR_BB_MSG_REPLY_SBPM_CONGESTION_OFFSET                                                   5
#define DISP_REOR_BB_MSG_REPLY_SBPM_CONGESTION_WORD_OFFSET                                              1
#define DISP_REOR_BB_MSG_REPLY_SBPM_CONGESTION_F_OFFSET_MOD8                                            4
#define DISP_REOR_BB_MSG_REPLY_SBPM_CONGESTION_F_OFFSET_MOD16                                           4
#define DISP_REOR_BB_MSG_REPLY_EGRESS_CONGESTION_F_OFFSET                                               18
#define DISP_REOR_BB_MSG_REPLY_EGRESS_CONGESTION_F_WIDTH                                                2
#define DISP_REOR_BB_MSG_REPLY_EGRESS_CONGESTION_OFFSET                                                 5
#define DISP_REOR_BB_MSG_REPLY_EGRESS_CONGESTION_WORD_OFFSET                                            1
#define DISP_REOR_BB_MSG_REPLY_EGRESS_CONGESTION_F_OFFSET_MOD8                                          2
#define DISP_REOR_BB_MSG_REPLY_EGRESS_CONGESTION_F_OFFSET_MOD16                                         2
#define DISP_REOR_BB_MSG_REPLY_GLOBAL_CONGESTION_F_OFFSET                                               16
#define DISP_REOR_BB_MSG_REPLY_GLOBAL_CONGESTION_F_WIDTH                                                2
#define DISP_REOR_BB_MSG_REPLY_GLOBAL_CONGESTION_OFFSET                                                 5
#define DISP_REOR_BB_MSG_REPLY_GLOBAL_CONGESTION_WORD_OFFSET                                            1
#define DISP_REOR_BB_MSG_REPLY_GLOBAL_CONGESTION_F_OFFSET_MOD8                                          0
#define DISP_REOR_BB_MSG_REPLY_GLOBAL_CONGESTION_F_OFFSET_MOD16                                         0
#define DISP_REOR_BB_MSG_REPLY_ALLOC_ACK_F_OFFSET                                                       10
#define DISP_REOR_BB_MSG_REPLY_ALLOC_ACK_F_WIDTH                                                        1
#define DISP_REOR_BB_MSG_REPLY_ALLOC_ACK_OFFSET                                                         6
#define DISP_REOR_BB_MSG_REPLY_ALLOC_ACK_WORD_OFFSET                                                    1
#define DISP_REOR_BB_MSG_REPLY_ALLOC_ACK_F_OFFSET_MOD8                                                  2
#define DISP_REOR_BB_MSG_REPLY_ALLOC_ACK_F_OFFSET_MOD16                                                 10
#define DISP_REOR_BB_MSG_REPLY_BUFFER_NUM_F_OFFSET                                                      0
#define DISP_REOR_BB_MSG_REPLY_BUFFER_NUM_F_WIDTH                                                       10
#define DISP_REOR_BB_MSG_REPLY_BUFFER_NUM_OFFSET                                                        6
#define DISP_REOR_BB_MSG_REPLY_BUFFER_NUM_WORD_OFFSET                                                   1
#define DISP_REOR_BB_MSG_REPLY_BUFFER_NUM_F_OFFSET_MOD16                                                0

/* >>>DISP_REOR_BB_MSG_REPLY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved3        	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved2        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sbpm_congestion  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	global_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	alloc_ack        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	buffer_num       	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_reserved2      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_sbpm_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_egress_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_global_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved1      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of alloc_ack union */
        uint32_t	reservedSU1_buffer_num     	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_reserved2      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_sbpm_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_egress_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_global_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved1      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ack                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of alloc_ack union */
        uint32_t	reservedSU2_buffer_num     	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved3        	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	buffer_num       	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	alloc_ack        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	reserved1        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	global_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	egress_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sbpm_congestion  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2        	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_buffer_num     	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of alloc_ack union */
        uint32_t	reservedSU1_reserved1      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_global_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_egress_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_sbpm_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved2      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_buffer_num     	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ack                        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of alloc_ack union */
        uint32_t	reservedSU2_reserved1      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_global_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_egress_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_sbpm_congestion	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved2      	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DISP_REOR_BB_MSG_REPLY_STRUCT;

#define RDD_DISP_REOR_BB_MSG_REPLY_SBPM_CONGESTION_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 5, 4, 2, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_SBPM_CONGESTION_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 5, 4, 2, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_SBPM_CONGESTION_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 5, 4, 2, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_SBPM_CONGESTION_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 5, 4, 2, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_EGRESS_CONGESTION_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 5, 2, 2, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_EGRESS_CONGESTION_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 5, 2, 2, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_EGRESS_CONGESTION_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 5, 2, 2, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_EGRESS_CONGESTION_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 5, 2, 2, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_GLOBAL_CONGESTION_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 5, 0, 2, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_GLOBAL_CONGESTION_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 5, 0, 2, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_GLOBAL_CONGESTION_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 5, 0, 2, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_GLOBAL_CONGESTION_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 5, 0, 2, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_ALLOC_ACK_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 6, 2, 1, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_ALLOC_ACK_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 6, 2, 1, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_ALLOC_ACK_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 6, 2, 1, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_ALLOC_ACK_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 6, 2, 1, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_ACK_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 6, 2, 1, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_ACK_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 6, 2, 1, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_ACK_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 6, 2, 1, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_ACK_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 6, 2, 1, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_BUFFER_NUM_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 6, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_BUFFER_NUM_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DISP_REOR_BB_MSG_REPLY_STRUCT) + 6, 0, 10, (v))
#define RDD_DISP_REOR_BB_MSG_REPLY_BUFFER_NUM_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 10, (r))
#define RDD_DISP_REOR_BB_MSG_REPLY_BUFFER_NUM_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 10, (v))
/* <<<DISP_REOR_BB_MSG_REPLY_STRUCT */

/* <<<RDD_DISP_REOR_BB_MSG_REPLY */


/* >>>RDD_NATC_CONTROL_ENTRY */
#define NATC_CONTROL_ENTRY_DONE_F_OFFSET                                                            31
#define NATC_CONTROL_ENTRY_DONE_F_WIDTH                                                             1
#define NATC_CONTROL_ENTRY_NATC_CONTROL_ENTRY_OFFSET                                                0
#define NATC_CONTROL_ENTRY_DONE_OFFSET                                                              0
#define NATC_CONTROL_ENTRY_DONE_WORD_OFFSET                                                         0
#define NATC_CONTROL_ENTRY_DONE_F_OFFSET_MOD8                                                       7
#define NATC_CONTROL_ENTRY_DONE_F_OFFSET_MOD16                                                      15
#define NATC_CONTROL_ENTRY_NATC_HIT_F_OFFSET                                                        30
#define NATC_CONTROL_ENTRY_NATC_HIT_F_WIDTH                                                         1
#define NATC_CONTROL_ENTRY_NATC_HIT_OFFSET                                                          0
#define NATC_CONTROL_ENTRY_NATC_HIT_WORD_OFFSET                                                     0
#define NATC_CONTROL_ENTRY_NATC_HIT_F_OFFSET_MOD8                                                   6
#define NATC_CONTROL_ENTRY_NATC_HIT_F_OFFSET_MOD16                                                  14
#define NATC_CONTROL_ENTRY_CACHE_HIT_F_OFFSET                                                       29
#define NATC_CONTROL_ENTRY_CACHE_HIT_F_WIDTH                                                        1
#define NATC_CONTROL_ENTRY_CACHE_HIT_OFFSET                                                         0
#define NATC_CONTROL_ENTRY_CACHE_HIT_WORD_OFFSET                                                    0
#define NATC_CONTROL_ENTRY_CACHE_HIT_F_OFFSET_MOD8                                                  5
#define NATC_CONTROL_ENTRY_CACHE_HIT_F_OFFSET_MOD16                                                 13
#define NATC_CONTROL_ENTRY_HW_RESERVED0_F_OFFSET                                                    24
#define NATC_CONTROL_ENTRY_HW_RESERVED0_F_WIDTH                                                     5
#define NATC_CONTROL_ENTRY_HW_RESERVED0_OFFSET                                                      0
#define NATC_CONTROL_ENTRY_HW_RESERVED0_WORD_OFFSET                                                 0
#define NATC_CONTROL_ENTRY_HW_RESERVED0_F_OFFSET_MOD8                                               0
#define NATC_CONTROL_ENTRY_HW_RESERVED0_F_OFFSET_MOD16                                              8
#define NATC_CONTROL_ENTRY_HAS_ITER_F_OFFSET                                                        20
#define NATC_CONTROL_ENTRY_HAS_ITER_F_WIDTH                                                         4
#define NATC_CONTROL_ENTRY_HAS_ITER_OFFSET                                                          1
#define NATC_CONTROL_ENTRY_HAS_ITER_WORD_OFFSET                                                     0
#define NATC_CONTROL_ENTRY_HAS_ITER_F_OFFSET_MOD8                                                   4
#define NATC_CONTROL_ENTRY_HAS_ITER_F_OFFSET_MOD16                                                  4
#define NATC_CONTROL_ENTRY_HW_RESERVED1_F_OFFSET                                                    18
#define NATC_CONTROL_ENTRY_HW_RESERVED1_F_WIDTH                                                     2
#define NATC_CONTROL_ENTRY_HW_RESERVED1_OFFSET                                                      1
#define NATC_CONTROL_ENTRY_HW_RESERVED1_WORD_OFFSET                                                 0
#define NATC_CONTROL_ENTRY_HW_RESERVED1_F_OFFSET_MOD8                                               2
#define NATC_CONTROL_ENTRY_HW_RESERVED1_F_OFFSET_MOD16                                              2
#define NATC_CONTROL_ENTRY_HASH_VAL_F_OFFSET                                                        0
#define NATC_CONTROL_ENTRY_HASH_VAL_F_WIDTH                                                         18
#define NATC_CONTROL_ENTRY_HASH_VAL_OFFSET                                                          0
#define NATC_CONTROL_ENTRY_HASH_VAL_WORD_OFFSET                                                     0
#define NATC_CONTROL_ENTRY_HW_RESERVED2_F_OFFSET                                                    0
#define NATC_CONTROL_ENTRY_HW_RESERVED2_F_WIDTH                                                     32
#define NATC_CONTROL_ENTRY_HW_RESERVED2_OFFSET                                                      4
#define NATC_CONTROL_ENTRY_HW_RESERVED2_WORD_OFFSET                                                 1

/* >>>NATC_CONTROL_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	done        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	natc_hit    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cache_hit   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hw_reserved0	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	has_iter    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hw_reserved1	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hash_val    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hw_reserved2	;
#else
        uint32_t	hash_val    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hw_reserved1	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	has_iter    	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hw_reserved0	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cache_hit   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	natc_hit    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	done        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hw_reserved2	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) NATC_CONTROL_ENTRY_STRUCT;

#define RDD_NATC_CONTROL_ENTRY_DONE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT), 7, 1, (r))
#define RDD_NATC_CONTROL_ENTRY_DONE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT), 7, 1, (v))
#define RDD_NATC_CONTROL_ENTRY_DONE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_NATC_CONTROL_ENTRY_DONE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_NATC_CONTROL_ENTRY_NATC_HIT_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT), 6, 1, (r))
#define RDD_NATC_CONTROL_ENTRY_NATC_HIT_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT), 6, 1, (v))
#define RDD_NATC_CONTROL_ENTRY_NATC_HIT_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_NATC_CONTROL_ENTRY_NATC_HIT_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_NATC_CONTROL_ENTRY_CACHE_HIT_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT), 5, 1, (r))
#define RDD_NATC_CONTROL_ENTRY_CACHE_HIT_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT), 5, 1, (v))
#define RDD_NATC_CONTROL_ENTRY_CACHE_HIT_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p), 5, 1, (r))
#define RDD_NATC_CONTROL_ENTRY_CACHE_HIT_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p), 5, 1, (v))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED0_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT), 0, 5, (r))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED0_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT), 0, 5, (v))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED0_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 0, 5, (r))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED0_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 0, 5, (v))
#define RDD_NATC_CONTROL_ENTRY_HAS_ITER_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT) + 1, 4, 4, (r))
#define RDD_NATC_CONTROL_ENTRY_HAS_ITER_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT) + 1, 4, 4, (v))
#define RDD_NATC_CONTROL_ENTRY_HAS_ITER_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 1, 4, 4, (r))
#define RDD_NATC_CONTROL_ENTRY_HAS_ITER_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 1, 4, 4, (v))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED1_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT) + 1, 2, 2, (r))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED1_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT) + 1, 2, 2, (v))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED1_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 2, 2, (r))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED1_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 2, 2, (v))
#define RDD_NATC_CONTROL_ENTRY_HASH_VAL_READ_G(r, g, idx)              GROUP_FIELD_MREAD_32((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT) + 0, 0, 18, (r))
#define RDD_NATC_CONTROL_ENTRY_HASH_VAL_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT) + 0, 0, 18, (v))
#define RDD_NATC_CONTROL_ENTRY_HASH_VAL_READ(r, p)                     FIELD_MREAD_32((uint8_t *)(p) + 0, 0, 18, (r))
#define RDD_NATC_CONTROL_ENTRY_HASH_VAL_WRITE(v, p)                    FIELD_MWRITE_32((uint8_t *)(p) + 0, 0, 18, (v))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED2_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT) + 4, (r))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED2_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(NATC_CONTROL_ENTRY_STRUCT) + 4, (v))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED2_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_NATC_CONTROL_ENTRY_HW_RESERVED2_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<NATC_CONTROL_ENTRY_STRUCT */

/* <<<RDD_NATC_CONTROL_ENTRY */


/* >>>RDD_NATC_COUNTERS_ENTRY */
#define NATC_COUNTERS_ENTRY_HIT_COUNTER_F_OFFSET                                                     0
#define NATC_COUNTERS_ENTRY_HIT_COUNTER_F_WIDTH                                                      32
#define NATC_COUNTERS_ENTRY_NATC_COUNTERS_ENTRY_OFFSET                                               0
#define NATC_COUNTERS_ENTRY_HIT_COUNTER_OFFSET                                                       0
#define NATC_COUNTERS_ENTRY_HIT_COUNTER_WORD_OFFSET                                                  0
#define NATC_COUNTERS_ENTRY_BYTES_COUNTER_F_OFFSET                                                   0
#define NATC_COUNTERS_ENTRY_BYTES_COUNTER_F_WIDTH                                                    32
#define NATC_COUNTERS_ENTRY_BYTES_COUNTER_OFFSET                                                     4
#define NATC_COUNTERS_ENTRY_BYTES_COUNTER_WORD_OFFSET                                                1

/* >>>NATC_COUNTERS_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	hit_counter  	;
        uint32_t	bytes_counter	;
#else
        uint32_t	hit_counter  	;
        uint32_t	bytes_counter	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) NATC_COUNTERS_ENTRY_STRUCT;

#define RDD_NATC_COUNTERS_ENTRY_HIT_COUNTER_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(NATC_COUNTERS_ENTRY_STRUCT), (r))
#define RDD_NATC_COUNTERS_ENTRY_HIT_COUNTER_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(NATC_COUNTERS_ENTRY_STRUCT), (v))
#define RDD_NATC_COUNTERS_ENTRY_HIT_COUNTER_READ(r, p)                   MREAD_32((uint8_t *)(p), (r))
#define RDD_NATC_COUNTERS_ENTRY_HIT_COUNTER_WRITE(v, p)                  MWRITE_32((uint8_t *)(p), (v))
#define RDD_NATC_COUNTERS_ENTRY_BYTES_COUNTER_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(NATC_COUNTERS_ENTRY_STRUCT) + 4, (r))
#define RDD_NATC_COUNTERS_ENTRY_BYTES_COUNTER_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(NATC_COUNTERS_ENTRY_STRUCT) + 4, (v))
#define RDD_NATC_COUNTERS_ENTRY_BYTES_COUNTER_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_NATC_COUNTERS_ENTRY_BYTES_COUNTER_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<NATC_COUNTERS_ENTRY_STRUCT */

/* <<<RDD_NATC_COUNTERS_ENTRY */


/* >>>RDD_FPM_BBMSG_ALLOC */
#define FPM_BBMSG_ALLOC_POOL_NUM_F_OFFSET                                                        17
#define FPM_BBMSG_ALLOC_POOL_NUM_F_WIDTH                                                         2
#define FPM_BBMSG_ALLOC_POOL_NUM_OFFSET                                                          1
#define FPM_BBMSG_ALLOC_POOL_NUM_WORD_OFFSET                                                     0
#define FPM_BBMSG_ALLOC_POOL_NUM_F_OFFSET_MOD8                                                   1
#define FPM_BBMSG_ALLOC_POOL_NUM_F_OFFSET_MOD16                                                  1
#define FPM_BBMSG_ALLOC_WAKEUP_F_OFFSET                                                          15
#define FPM_BBMSG_ALLOC_WAKEUP_F_WIDTH                                                           1
#define FPM_BBMSG_ALLOC_WAKEUP_OFFSET                                                            2
#define FPM_BBMSG_ALLOC_WAKEUP_WORD_OFFSET                                                       0
#define FPM_BBMSG_ALLOC_WAKEUP_F_OFFSET_MOD8                                                     7
#define FPM_BBMSG_ALLOC_WAKEUP_F_OFFSET_MOD16                                                    15
#define FPM_BBMSG_ALLOC_TASK_ID_F_OFFSET                                                         11
#define FPM_BBMSG_ALLOC_TASK_ID_F_WIDTH                                                          4
#define FPM_BBMSG_ALLOC_TASK_ID_OFFSET                                                           2
#define FPM_BBMSG_ALLOC_TASK_ID_WORD_OFFSET                                                      0
#define FPM_BBMSG_ALLOC_TASK_ID_F_OFFSET_MOD8                                                    3
#define FPM_BBMSG_ALLOC_TASK_ID_F_OFFSET_MOD16                                                   11
#define FPM_BBMSG_ALLOC_REPLY_ADDR_F_OFFSET                                                      0
#define FPM_BBMSG_ALLOC_REPLY_ADDR_F_WIDTH                                                       11
#define FPM_BBMSG_ALLOC_REPLY_ADDR_OFFSET                                                        2
#define FPM_BBMSG_ALLOC_REPLY_ADDR_WORD_OFFSET                                                   0
#define FPM_BBMSG_ALLOC_REPLY_ADDR_F_OFFSET_MOD16                                                0

/* >>>FPM_BBMSG_ALLOC_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0 	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pool_num  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reply_addr	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reply_addr	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id   	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pool_num  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0 	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) FPM_BBMSG_ALLOC_STRUCT;

#define RDD_FPM_BBMSG_ALLOC_POOL_NUM_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_ALLOC_STRUCT) + 1, 1, 2, (r))
#define RDD_FPM_BBMSG_ALLOC_POOL_NUM_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_ALLOC_STRUCT) + 1, 1, 2, (v))
#define RDD_FPM_BBMSG_ALLOC_POOL_NUM_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 1, 1, 2, (r))
#define RDD_FPM_BBMSG_ALLOC_POOL_NUM_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 1, 1, 2, (v))
#define RDD_FPM_BBMSG_ALLOC_WAKEUP_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_ALLOC_STRUCT) + 2, 7, 1, (r))
#define RDD_FPM_BBMSG_ALLOC_WAKEUP_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_ALLOC_STRUCT) + 2, 7, 1, (v))
#define RDD_FPM_BBMSG_ALLOC_WAKEUP_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 2, 7, 1, (r))
#define RDD_FPM_BBMSG_ALLOC_WAKEUP_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 2, 7, 1, (v))
#define RDD_FPM_BBMSG_ALLOC_TASK_ID_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_ALLOC_STRUCT) + 2, 3, 4, (r))
#define RDD_FPM_BBMSG_ALLOC_TASK_ID_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_ALLOC_STRUCT) + 2, 3, 4, (v))
#define RDD_FPM_BBMSG_ALLOC_TASK_ID_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 4, (r))
#define RDD_FPM_BBMSG_ALLOC_TASK_ID_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 4, (v))
#define RDD_FPM_BBMSG_ALLOC_REPLY_ADDR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(FPM_BBMSG_ALLOC_STRUCT) + 2, 0, 11, (r))
#define RDD_FPM_BBMSG_ALLOC_REPLY_ADDR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(FPM_BBMSG_ALLOC_STRUCT) + 2, 0, 11, (v))
#define RDD_FPM_BBMSG_ALLOC_REPLY_ADDR_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 11, (r))
#define RDD_FPM_BBMSG_ALLOC_REPLY_ADDR_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 11, (v))
/* <<<FPM_BBMSG_ALLOC_STRUCT */

/* <<<RDD_FPM_BBMSG_ALLOC */


/* >>>RDD_FPM_BBMSG_MCAST */
#define FPM_BBMSG_MCAST_WAKEUP_F_OFFSET                                                          31
#define FPM_BBMSG_MCAST_WAKEUP_F_WIDTH                                                           1
#define FPM_BBMSG_MCAST_FPM_BBMSG_MCAST_OFFSET                                                   0
#define FPM_BBMSG_MCAST_WAKEUP_OFFSET                                                            0
#define FPM_BBMSG_MCAST_WAKEUP_WORD_OFFSET                                                       0
#define FPM_BBMSG_MCAST_WAKEUP_F_OFFSET_MOD8                                                     7
#define FPM_BBMSG_MCAST_WAKEUP_F_OFFSET_MOD16                                                    15
#define FPM_BBMSG_MCAST_TASK_ID_F_OFFSET                                                         27
#define FPM_BBMSG_MCAST_TASK_ID_F_WIDTH                                                          4
#define FPM_BBMSG_MCAST_TASK_ID_OFFSET                                                           0
#define FPM_BBMSG_MCAST_TASK_ID_WORD_OFFSET                                                      0
#define FPM_BBMSG_MCAST_TASK_ID_F_OFFSET_MOD8                                                    3
#define FPM_BBMSG_MCAST_TASK_ID_F_OFFSET_MOD16                                                   11
#define FPM_BBMSG_MCAST_MCAST_VALUE_F_OFFSET                                                     20
#define FPM_BBMSG_MCAST_MCAST_VALUE_F_WIDTH                                                      7
#define FPM_BBMSG_MCAST_MCAST_VALUE_OFFSET                                                       0
#define FPM_BBMSG_MCAST_MCAST_VALUE_WORD_OFFSET                                                  0
#define FPM_BBMSG_MCAST_MCAST_VALUE_F_OFFSET_MOD8                                                4
#define FPM_BBMSG_MCAST_MCAST_VALUE_F_OFFSET_MOD16                                               4
#define FPM_BBMSG_MCAST_INCREMENT_CTR_F_OFFSET                                                   19
#define FPM_BBMSG_MCAST_INCREMENT_CTR_F_WIDTH                                                    1
#define FPM_BBMSG_MCAST_INCREMENT_CTR_OFFSET                                                     1
#define FPM_BBMSG_MCAST_INCREMENT_CTR_WORD_OFFSET                                                0
#define FPM_BBMSG_MCAST_INCREMENT_CTR_F_OFFSET_MOD8                                              3
#define FPM_BBMSG_MCAST_INCREMENT_CTR_F_OFFSET_MOD16                                             3
#define FPM_BBMSG_MCAST_ZERO_F_OFFSET                                                            17
#define FPM_BBMSG_MCAST_ZERO_F_WIDTH                                                             2
#define FPM_BBMSG_MCAST_ZERO_OFFSET                                                              1
#define FPM_BBMSG_MCAST_ZERO_WORD_OFFSET                                                         0
#define FPM_BBMSG_MCAST_ZERO_F_OFFSET_MOD8                                                       1
#define FPM_BBMSG_MCAST_ZERO_F_OFFSET_MOD16                                                      1
#define FPM_BBMSG_MCAST_BUFFER_NUM_F_OFFSET                                                      0
#define FPM_BBMSG_MCAST_BUFFER_NUM_F_WIDTH                                                       17
#define FPM_BBMSG_MCAST_BUFFER_NUM_OFFSET                                                        0
#define FPM_BBMSG_MCAST_BUFFER_NUM_WORD_OFFSET                                                   0

/* >>>FPM_BBMSG_MCAST_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	wakeup       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mcast_value  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	increment_ctr	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	zero         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_num   	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	buffer_num   	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	zero         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	increment_ctr	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mcast_value  	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	task_id      	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) FPM_BBMSG_MCAST_STRUCT;

#define RDD_FPM_BBMSG_MCAST_WAKEUP_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT), 7, 1, (r))
#define RDD_FPM_BBMSG_MCAST_WAKEUP_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT), 7, 1, (v))
#define RDD_FPM_BBMSG_MCAST_WAKEUP_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_FPM_BBMSG_MCAST_WAKEUP_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_FPM_BBMSG_MCAST_TASK_ID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT), 3, 4, (r))
#define RDD_FPM_BBMSG_MCAST_TASK_ID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT), 3, 4, (v))
#define RDD_FPM_BBMSG_MCAST_TASK_ID_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 3, 4, (r))
#define RDD_FPM_BBMSG_MCAST_TASK_ID_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 3, 4, (v))
#define RDD_FPM_BBMSG_MCAST_MCAST_VALUE_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT), 4, 7, (r))
#define RDD_FPM_BBMSG_MCAST_MCAST_VALUE_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT), 4, 7, (v))
#define RDD_FPM_BBMSG_MCAST_MCAST_VALUE_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p), 4, 7, (r))
#define RDD_FPM_BBMSG_MCAST_MCAST_VALUE_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p), 4, 7, (v))
#define RDD_FPM_BBMSG_MCAST_INCREMENT_CTR_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT) + 1, 3, 1, (r))
#define RDD_FPM_BBMSG_MCAST_INCREMENT_CTR_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT) + 1, 3, 1, (v))
#define RDD_FPM_BBMSG_MCAST_INCREMENT_CTR_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 3, 1, (r))
#define RDD_FPM_BBMSG_MCAST_INCREMENT_CTR_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 3, 1, (v))
#define RDD_FPM_BBMSG_MCAST_ZERO_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT) + 1, 1, 2, (r))
#define RDD_FPM_BBMSG_MCAST_ZERO_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT) + 1, 1, 2, (v))
#define RDD_FPM_BBMSG_MCAST_ZERO_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 1, 1, 2, (r))
#define RDD_FPM_BBMSG_MCAST_ZERO_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 1, 1, 2, (v))
#define RDD_FPM_BBMSG_MCAST_BUFFER_NUM_READ_G(r, g, idx)             GROUP_FIELD_MREAD_32((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT) + 0, 0, 17, (r))
#define RDD_FPM_BBMSG_MCAST_BUFFER_NUM_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(FPM_BBMSG_MCAST_STRUCT) + 0, 0, 17, (v))
#define RDD_FPM_BBMSG_MCAST_BUFFER_NUM_READ(r, p)                    FIELD_MREAD_32((uint8_t *)(p) + 0, 0, 17, (r))
#define RDD_FPM_BBMSG_MCAST_BUFFER_NUM_WRITE(v, p)                   FIELD_MWRITE_32((uint8_t *)(p) + 0, 0, 17, (v))
/* <<<FPM_BBMSG_MCAST_STRUCT */

/* <<<RDD_FPM_BBMSG_MCAST */


/* >>>RDD_FPM_BBMSG_FREE */
#define FPM_BBMSG_FREE_ZERO_F_OFFSET                                                            17
#define FPM_BBMSG_FREE_ZERO_F_WIDTH                                                             2
#define FPM_BBMSG_FREE_ZERO_OFFSET                                                              1
#define FPM_BBMSG_FREE_ZERO_WORD_OFFSET                                                         0
#define FPM_BBMSG_FREE_ZERO_F_OFFSET_MOD8                                                       1
#define FPM_BBMSG_FREE_ZERO_F_OFFSET_MOD16                                                      1
#define FPM_BBMSG_FREE_BUFFER_NUM_F_OFFSET                                                      0
#define FPM_BBMSG_FREE_BUFFER_NUM_F_WIDTH                                                       17
#define FPM_BBMSG_FREE_BUFFER_NUM_OFFSET                                                        0
#define FPM_BBMSG_FREE_BUFFER_NUM_WORD_OFFSET                                                   0

/* >>>FPM_BBMSG_FREE_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved1 	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	zero      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_num	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	buffer_num	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	zero      	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1 	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) FPM_BBMSG_FREE_STRUCT;

#define RDD_FPM_BBMSG_FREE_ZERO_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_FREE_STRUCT) + 1, 1, 2, (r))
#define RDD_FPM_BBMSG_FREE_ZERO_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_FREE_STRUCT) + 1, 1, 2, (v))
#define RDD_FPM_BBMSG_FREE_ZERO_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 1, 1, 2, (r))
#define RDD_FPM_BBMSG_FREE_ZERO_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 1, 1, 2, (v))
#define RDD_FPM_BBMSG_FREE_BUFFER_NUM_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(FPM_BBMSG_FREE_STRUCT) + 0, 0, 17, (r))
#define RDD_FPM_BBMSG_FREE_BUFFER_NUM_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(FPM_BBMSG_FREE_STRUCT) + 0, 0, 17, (v))
#define RDD_FPM_BBMSG_FREE_BUFFER_NUM_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 0, 0, 17, (r))
#define RDD_FPM_BBMSG_FREE_BUFFER_NUM_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 0, 0, 17, (v))
/* <<<FPM_BBMSG_FREE_STRUCT */

/* <<<RDD_FPM_BBMSG_FREE */


/* >>>RDD_FPM_BBMSG_REPLY */
#define FPM_BBMSG_REPLY_EXCLUSIVE_F_OFFSET                                                       22
#define FPM_BBMSG_REPLY_EXCLUSIVE_F_WIDTH                                                        1
#define FPM_BBMSG_REPLY_EXCLUSIVE_OFFSET                                                         5
#define FPM_BBMSG_REPLY_EXCLUSIVE_WORD_OFFSET                                                    1
#define FPM_BBMSG_REPLY_EXCLUSIVE_F_OFFSET_MOD8                                                  6
#define FPM_BBMSG_REPLY_EXCLUSIVE_F_OFFSET_MOD16                                                 6
#define FPM_BBMSG_REPLY_NACK_F_OFFSET                                                            21
#define FPM_BBMSG_REPLY_NACK_F_WIDTH                                                             1
#define FPM_BBMSG_REPLY_NACK_OFFSET                                                              5
#define FPM_BBMSG_REPLY_NACK_WORD_OFFSET                                                         1
#define FPM_BBMSG_REPLY_NACK_F_OFFSET_MOD8                                                       5
#define FPM_BBMSG_REPLY_NACK_F_OFFSET_MOD16                                                      5
#define FPM_BBMSG_REPLY_ACK_F_OFFSET                                                             20
#define FPM_BBMSG_REPLY_ACK_F_WIDTH                                                              1
#define FPM_BBMSG_REPLY_ACK_OFFSET                                                               5
#define FPM_BBMSG_REPLY_ACK_WORD_OFFSET                                                          1
#define FPM_BBMSG_REPLY_ACK_F_OFFSET_MOD8                                                        4
#define FPM_BBMSG_REPLY_ACK_F_OFFSET_MOD16                                                       4
#define FPM_BBMSG_REPLY_POOL_NUM_F_OFFSET                                                        18
#define FPM_BBMSG_REPLY_POOL_NUM_F_WIDTH                                                         2
#define FPM_BBMSG_REPLY_POOL_NUM_OFFSET                                                          5
#define FPM_BBMSG_REPLY_POOL_NUM_WORD_OFFSET                                                     1
#define FPM_BBMSG_REPLY_POOL_NUM_F_OFFSET_MOD8                                                   2
#define FPM_BBMSG_REPLY_POOL_NUM_F_OFFSET_MOD16                                                  2
#define FPM_BBMSG_REPLY_BUFFER_NUM_F_OFFSET                                                      1
#define FPM_BBMSG_REPLY_BUFFER_NUM_F_WIDTH                                                       17
#define FPM_BBMSG_REPLY_BUFFER_NUM_OFFSET                                                        4
#define FPM_BBMSG_REPLY_BUFFER_NUM_WORD_OFFSET                                                   1
#define FPM_BBMSG_REPLY_VALID_F_OFFSET                                                           0
#define FPM_BBMSG_REPLY_VALID_F_WIDTH                                                            1
#define FPM_BBMSG_REPLY_VALID_OFFSET                                                             7
#define FPM_BBMSG_REPLY_VALID_WORD_OFFSET                                                        1
#define FPM_BBMSG_REPLY_VALID_F_OFFSET_MOD8                                                      0
#define FPM_BBMSG_REPLY_VALID_F_OFFSET_MOD16                                                     0

/* >>>FPM_BBMSG_REPLY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0 	;
        uint32_t	reserved1 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	exclusive 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	nack      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ack       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pool_num  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_num	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	reserved0 	;
        uint32_t	valid     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_num	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pool_num  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ack       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	nack      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	exclusive 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1 	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) FPM_BBMSG_REPLY_STRUCT;

#define RDD_FPM_BBMSG_REPLY_EXCLUSIVE_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 5, 6, 1, (r))
#define RDD_FPM_BBMSG_REPLY_EXCLUSIVE_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 5, 6, 1, (v))
#define RDD_FPM_BBMSG_REPLY_EXCLUSIVE_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 5, 6, 1, (r))
#define RDD_FPM_BBMSG_REPLY_EXCLUSIVE_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 5, 6, 1, (v))
#define RDD_FPM_BBMSG_REPLY_NACK_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 5, 5, 1, (r))
#define RDD_FPM_BBMSG_REPLY_NACK_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 5, 5, 1, (v))
#define RDD_FPM_BBMSG_REPLY_NACK_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 5, 5, 1, (r))
#define RDD_FPM_BBMSG_REPLY_NACK_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 5, 5, 1, (v))
#define RDD_FPM_BBMSG_REPLY_ACK_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 5, 4, 1, (r))
#define RDD_FPM_BBMSG_REPLY_ACK_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 5, 4, 1, (v))
#define RDD_FPM_BBMSG_REPLY_ACK_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 5, 4, 1, (r))
#define RDD_FPM_BBMSG_REPLY_ACK_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 5, 4, 1, (v))
#define RDD_FPM_BBMSG_REPLY_POOL_NUM_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 5, 2, 2, (r))
#define RDD_FPM_BBMSG_REPLY_POOL_NUM_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 5, 2, 2, (v))
#define RDD_FPM_BBMSG_REPLY_POOL_NUM_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 5, 2, 2, (r))
#define RDD_FPM_BBMSG_REPLY_POOL_NUM_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 5, 2, 2, (v))
#define RDD_FPM_BBMSG_REPLY_BUFFER_NUM_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 4, 1, 17, (r))
#define RDD_FPM_BBMSG_REPLY_BUFFER_NUM_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 4, 1, 17, (v))
#define RDD_FPM_BBMSG_REPLY_BUFFER_NUM_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 4, 1, 17, (r))
#define RDD_FPM_BBMSG_REPLY_BUFFER_NUM_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 4, 1, 17, (v))
#define RDD_FPM_BBMSG_REPLY_VALID_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 7, 0, 1, (r))
#define RDD_FPM_BBMSG_REPLY_VALID_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(FPM_BBMSG_REPLY_STRUCT) + 7, 0, 1, (v))
#define RDD_FPM_BBMSG_REPLY_VALID_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 7, 0, 1, (r))
#define RDD_FPM_BBMSG_REPLY_VALID_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 7, 0, 1, (v))
/* <<<FPM_BBMSG_REPLY_STRUCT */

/* <<<RDD_FPM_BBMSG_REPLY */


/* >>>RDD_MCAST_FPM_HEADER_SLOT */
#define MCAST_FPM_HEADER_SLOT_MCAST_FPM_HEADER_SLOT_OFFSET                                             0
#define MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_OFFSET                                                   0
#define MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_WORD_OFFSET                                              0
#define MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_F_OFFSET_MOD16                                           0

/* >>>MCAST_FPM_HEADER_SLOT_STRUCT */
#define RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_NUMBER	64
typedef union
{
    uint32_t word_32[16];
    uint64_t dword_64[8];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	header_max_size[RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_NUMBER];
#else
        uint8_t	header_max_size[RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) MCAST_FPM_HEADER_SLOT_STRUCT;

#define RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_READ_G(r, g, idx, i)       GROUP_MREAD_I_8((g), (idx)*sizeof(MCAST_FPM_HEADER_SLOT_STRUCT), i, (r))
#define RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8((g), (idx)*sizeof(MCAST_FPM_HEADER_SLOT_STRUCT), i, (v))
#define RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_READ(r, p, i)              MREAD_I_8((uint8_t *)(p), i, (r))
#define RDD_MCAST_FPM_HEADER_SLOT_HEADER_MAX_SIZE_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)(p), i, (v))
/* <<<MCAST_FPM_HEADER_SLOT_STRUCT */

/* <<<RDD_MCAST_FPM_HEADER_SLOT */


/* >>>RDD_DMA_COMMAND_DATA */
#define DMA_COMMAND_DATA_PAYLOAD_OFFSET_SOP_F_OFFSET                                              0
#define DMA_COMMAND_DATA_PAYLOAD_OFFSET_SOP_F_WIDTH                                               30
#define DMA_COMMAND_DATA_PAYLOAD_OFFSET_SOP_OFFSET                                                0
#define DMA_COMMAND_DATA_PAYLOAD_OFFSET_SOP_WORD_OFFSET                                           0

/* >>>DMA_COMMAND_DATA_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved0 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	payload_offset_sop	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_reserved0	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint16_t	bn                  	; /* Member of payload_offset_sop union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_reserved0	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sop_fpm             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved2           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	bn_fpm              	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	payload_offset_sop	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	reserved0 	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint16_t	bn                  	; /* Member of payload_offset_sop union */
        uint32_t	sop                 	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved1           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU1_reserved0	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	bn_fpm              	:17	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reserved2           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	sop_fpm             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of payload_offset_sop union */
        uint32_t	reservedSU2_reserved0	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) DMA_COMMAND_DATA_STRUCT;

#define RDD_DMA_COMMAND_DATA_PAYLOAD_OFFSET_SOP_READ_G(r, g, idx) GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DMA_COMMAND_DATA_STRUCT), 0, 30, (r))
#define RDD_DMA_COMMAND_DATA_PAYLOAD_OFFSET_SOP_WRITE_G(v, g, idx)GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DMA_COMMAND_DATA_STRUCT), 0, 30, (v))
#define RDD_DMA_COMMAND_DATA_PAYLOAD_OFFSET_SOP_READ(r, p)        FIELD_MREAD_32((uint8_t *)(p), 0, 30, (r))
#define RDD_DMA_COMMAND_DATA_PAYLOAD_OFFSET_SOP_WRITE(v, p)       FIELD_MWRITE_32((uint8_t *)(p), 0, 30, (v))
#define RDD_DMA_COMMAND_DATA_SOP_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DMA_COMMAND_DATA_STRUCT) + 1, 0, 7, (r))
#define RDD_DMA_COMMAND_DATA_SOP_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DMA_COMMAND_DATA_STRUCT) + 1, 0, 7, (v))
#define RDD_DMA_COMMAND_DATA_SOP_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 7, (r))
#define RDD_DMA_COMMAND_DATA_SOP_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 7, (v))
#define RDD_DMA_COMMAND_DATA_BN_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(DMA_COMMAND_DATA_STRUCT) + 2, (r))
#define RDD_DMA_COMMAND_DATA_BN_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(DMA_COMMAND_DATA_STRUCT) + 2, (v))
#define RDD_DMA_COMMAND_DATA_BN_READ(r, p)                        MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_DMA_COMMAND_DATA_BN_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_DMA_COMMAND_DATA_SOP_FPM_READ_G(r, g, idx)            GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DMA_COMMAND_DATA_STRUCT), 3, 11, (r))
#define RDD_DMA_COMMAND_DATA_SOP_FPM_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DMA_COMMAND_DATA_STRUCT), 3, 11, (v))
#define RDD_DMA_COMMAND_DATA_SOP_FPM_READ(r, p)                   FIELD_MREAD_16((uint8_t *)(p), 3, 11, (r))
#define RDD_DMA_COMMAND_DATA_SOP_FPM_WRITE(v, p)                  FIELD_MWRITE_16((uint8_t *)(p), 3, 11, (v))
#define RDD_DMA_COMMAND_DATA_BN_FPM_READ_G(r, g, idx)             GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DMA_COMMAND_DATA_STRUCT) + 0, 0, 17, (r))
#define RDD_DMA_COMMAND_DATA_BN_FPM_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DMA_COMMAND_DATA_STRUCT) + 0, 0, 17, (v))
#define RDD_DMA_COMMAND_DATA_BN_FPM_READ(r, p)                    FIELD_MREAD_32((uint8_t *)(p) + 0, 0, 17, (r))
#define RDD_DMA_COMMAND_DATA_BN_FPM_WRITE(v, p)                   FIELD_MWRITE_32((uint8_t *)(p) + 0, 0, 17, (v))
/* <<<DMA_COMMAND_DATA_STRUCT */

/* <<<RDD_DMA_COMMAND_DATA */


/* >>>RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE */
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_F_OFFSET                                                       0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_F_WIDTH                                                        2
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_OFFSET                                                         3
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_WORD_OFFSET                                                    0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_F_OFFSET_MOD8                                                  0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_F_OFFSET_MOD16                                                 0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_F_OFFSET                                                       30
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_F_WIDTH                                                        2
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_OFFSET                                                         4
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_WORD_OFFSET                                                    1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_F_OFFSET_MOD8                                                  6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_F_OFFSET_MOD16                                                 14
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_F_OFFSET                                                    16
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_F_WIDTH                                                     14
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_OFFSET                                                      4
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_WORD_OFFSET                                                 1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_F_OFFSET_MOD16                                              0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_F_OFFSET                                                             15
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_F_WIDTH                                                              1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_OFFSET                                                               6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_WORD_OFFSET                                                          1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_F_OFFSET_MOD8                                                        7
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_F_OFFSET_MOD16                                                       15
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_F_OFFSET                                                     14
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_F_WIDTH                                                      1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_OFFSET                                                       6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_WORD_OFFSET                                                  1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_F_OFFSET_MOD8                                                6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_F_OFFSET_MOD16                                               14
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_F_OFFSET                                                             13
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_F_WIDTH                                                              1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_OFFSET                                                               6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_WORD_OFFSET                                                          1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_F_OFFSET_MOD8                                                        5
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_F_OFFSET_MOD16                                                       13
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_F_OFFSET                                                     12
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_F_WIDTH                                                      1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_OFFSET                                                       6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_WORD_OFFSET                                                  1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_F_OFFSET_MOD8                                                4
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_F_OFFSET_MOD16                                               12
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_F_OFFSET                                                    0
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_F_WIDTH                                                     9
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_OFFSET                                                      6
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_WORD_OFFSET                                                 1
#define BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_F_OFFSET_MOD16                                              0

/* >>>BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved0   	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fpm_pool0   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fpm_pool1   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bytes_popped	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	queue_number	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	fpm_pool0   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0   	:30	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	queue_number	:9	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1   	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem1 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	target_mem0 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	agg         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bytes_popped	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	fpm_pool1   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT;

#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 3, 0, 2, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 3, 0, 2, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 2, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL0_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 2, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 4, 6, 2, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 4, 6, 2, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 4, 6, 2, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_FPM_POOL1_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 4, 6, 2, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 4, 0, 14, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 4, 0, 14, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 4, 0, 14, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_BYTES_POPPED_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 4, 0, 14, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 6, 7, 1, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 6, 7, 1, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 6, 7, 1, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_AGG_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 6, 7, 1, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 6, 6, 1, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 6, 6, 1, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 6, 6, 1, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM0_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 6, 6, 1, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 6, 5, 1, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 6, 5, 1, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 6, 5, 1, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_ABS_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 6, 5, 1, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 6, 4, 1, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 6, 4, 1, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 6, 4, 1, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_TARGET_MEM1_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 6, 4, 1, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 6, 0, 9, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT) + 6, 0, 9, (v))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 6, 0, 9, (r))
#define RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_QUEUE_NUMBER_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 6, 0, 9, (v))
/* <<<BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE_STRUCT */

/* <<<RDD_BBMSG_RNR_TO_QM_PD_FIFO_CREDIT_FREE */


/* >>>RDD_BBMSG_RNR_TO_BBH_TX */
#define BBMSG_RNR_TO_BBH_TX_QUEUE_F_OFFSET                                                           6
#define BBMSG_RNR_TO_BBH_TX_QUEUE_F_WIDTH                                                            6
#define BBMSG_RNR_TO_BBH_TX_QUEUE_OFFSET                                                             0
#define BBMSG_RNR_TO_BBH_TX_QUEUE_WORD_OFFSET                                                        0
#define BBMSG_RNR_TO_BBH_TX_QUEUE_F_OFFSET_MOD8                                                      6
#define BBMSG_RNR_TO_BBH_TX_QUEUE_F_OFFSET_MOD16                                                     6
#define BBMSG_RNR_TO_BBH_TX_BB_ID_F_OFFSET                                                           0
#define BBMSG_RNR_TO_BBH_TX_BB_ID_F_WIDTH                                                            6
#define BBMSG_RNR_TO_BBH_TX_BB_ID_OFFSET                                                             1
#define BBMSG_RNR_TO_BBH_TX_BB_ID_WORD_OFFSET                                                        0
#define BBMSG_RNR_TO_BBH_TX_BB_ID_F_OFFSET_MOD8                                                      0
#define BBMSG_RNR_TO_BBH_TX_BB_ID_F_OFFSET_MOD16                                                     0

/* >>>BBMSG_RNR_TO_BBH_TX_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	reserved  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	queue     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	bb_id     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	bb_id     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	queue     	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved  	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) BBMSG_RNR_TO_BBH_TX_STRUCT;

#define RDD_BBMSG_RNR_TO_BBH_TX_QUEUE_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BBMSG_RNR_TO_BBH_TX_STRUCT), 6, 6, (r))
#define RDD_BBMSG_RNR_TO_BBH_TX_QUEUE_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BBMSG_RNR_TO_BBH_TX_STRUCT), 6, 6, (v))
#define RDD_BBMSG_RNR_TO_BBH_TX_QUEUE_READ(r, p)                    FIELD_MREAD_16((uint8_t *)(p), 6, 6, (r))
#define RDD_BBMSG_RNR_TO_BBH_TX_QUEUE_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)(p), 6, 6, (v))
#define RDD_BBMSG_RNR_TO_BBH_TX_BB_ID_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_RNR_TO_BBH_TX_STRUCT) + 1, 0, 6, (r))
#define RDD_BBMSG_RNR_TO_BBH_TX_BB_ID_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_RNR_TO_BBH_TX_STRUCT) + 1, 0, 6, (v))
#define RDD_BBMSG_RNR_TO_BBH_TX_BB_ID_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 6, (r))
#define RDD_BBMSG_RNR_TO_BBH_TX_BB_ID_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 6, (v))
/* <<<BBMSG_RNR_TO_BBH_TX_STRUCT */

/* <<<RDD_BBMSG_RNR_TO_BBH_TX */


/* >>>RDD_BBMSG_CNTR_REQUEST */
#define BBMSG_CNTR_REQUEST_COUNTER0_F_OFFSET                                                        0
#define BBMSG_CNTR_REQUEST_COUNTER0_F_WIDTH                                                         32
#define BBMSG_CNTR_REQUEST_BBMSG_CNTR_REQUEST_OFFSET                                                0
#define BBMSG_CNTR_REQUEST_COUNTER0_OFFSET                                                          0
#define BBMSG_CNTR_REQUEST_COUNTER0_WORD_OFFSET                                                     0
#define BBMSG_CNTR_REQUEST_COUNTER1_F_OFFSET                                                        0
#define BBMSG_CNTR_REQUEST_COUNTER1_F_WIDTH                                                         32
#define BBMSG_CNTR_REQUEST_COUNTER1_OFFSET                                                          4
#define BBMSG_CNTR_REQUEST_COUNTER1_WORD_OFFSET                                                     1

/* >>>BBMSG_CNTR_REQUEST_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	counter0  	;
        uint32_t	counter1  	;
#else
        uint32_t	counter0  	;
        uint32_t	counter1  	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BBMSG_CNTR_REQUEST_STRUCT;

#define RDD_BBMSG_CNTR_REQUEST_COUNTER0_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(BBMSG_CNTR_REQUEST_STRUCT), (r))
#define RDD_BBMSG_CNTR_REQUEST_COUNTER0_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(BBMSG_CNTR_REQUEST_STRUCT), (v))
#define RDD_BBMSG_CNTR_REQUEST_COUNTER0_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_BBMSG_CNTR_REQUEST_COUNTER0_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_BBMSG_CNTR_REQUEST_COUNTER1_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(BBMSG_CNTR_REQUEST_STRUCT) + 4, (r))
#define RDD_BBMSG_CNTR_REQUEST_COUNTER1_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(BBMSG_CNTR_REQUEST_STRUCT) + 4, (v))
#define RDD_BBMSG_CNTR_REQUEST_COUNTER1_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_BBMSG_CNTR_REQUEST_COUNTER1_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<BBMSG_CNTR_REQUEST_STRUCT */

/* <<<RDD_BBMSG_CNTR_REQUEST */


/* >>>RDD_BBMSG_CNTR_REPLY */
#define BBMSG_CNTR_REPLY_COUNTER0_F_OFFSET                                                        0
#define BBMSG_CNTR_REPLY_COUNTER0_F_WIDTH                                                         32
#define BBMSG_CNTR_REPLY_BBMSG_CNTR_REPLY_OFFSET                                                  0
#define BBMSG_CNTR_REPLY_COUNTER0_OFFSET                                                          0
#define BBMSG_CNTR_REPLY_COUNTER0_WORD_OFFSET                                                     0
#define BBMSG_CNTR_REPLY_COUNTER1_F_OFFSET                                                        0
#define BBMSG_CNTR_REPLY_COUNTER1_F_WIDTH                                                         32
#define BBMSG_CNTR_REPLY_COUNTER1_OFFSET                                                          4
#define BBMSG_CNTR_REPLY_COUNTER1_WORD_OFFSET                                                     1

/* >>>BBMSG_CNTR_REPLY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	counter0  	;
        uint32_t	counter1  	;
#else
        uint32_t	counter0  	;
        uint32_t	counter1  	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BBMSG_CNTR_REPLY_STRUCT;

#define RDD_BBMSG_CNTR_REPLY_COUNTER0_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(BBMSG_CNTR_REPLY_STRUCT), (r))
#define RDD_BBMSG_CNTR_REPLY_COUNTER0_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(BBMSG_CNTR_REPLY_STRUCT), (v))
#define RDD_BBMSG_CNTR_REPLY_COUNTER0_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_BBMSG_CNTR_REPLY_COUNTER0_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_BBMSG_CNTR_REPLY_COUNTER1_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(BBMSG_CNTR_REPLY_STRUCT) + 4, (r))
#define RDD_BBMSG_CNTR_REPLY_COUNTER1_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(BBMSG_CNTR_REPLY_STRUCT) + 4, (v))
#define RDD_BBMSG_CNTR_REPLY_COUNTER1_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_BBMSG_CNTR_REPLY_COUNTER1_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<BBMSG_CNTR_REPLY_STRUCT */

/* <<<RDD_BBMSG_CNTR_REPLY */


/* >>>RDD_BBMSG_BUFMNG_REPLY */
#define BBMSG_BUFMNG_REPLY_RESULT_F_OFFSET                                                          31
#define BBMSG_BUFMNG_REPLY_RESULT_F_WIDTH                                                           1
#define BBMSG_BUFMNG_REPLY_BBMSG_BUFMNG_REPLY_OFFSET                                                0
#define BBMSG_BUFMNG_REPLY_RESULT_OFFSET                                                            0
#define BBMSG_BUFMNG_REPLY_RESULT_WORD_OFFSET                                                       0
#define BBMSG_BUFMNG_REPLY_RESULT_F_OFFSET_MOD8                                                     7
#define BBMSG_BUFMNG_REPLY_RESULT_F_OFFSET_MOD16                                                    15
#define BBMSG_BUFMNG_REPLY_VALID0_F_OFFSET                                                          30
#define BBMSG_BUFMNG_REPLY_VALID0_F_WIDTH                                                           1
#define BBMSG_BUFMNG_REPLY_VALID0_OFFSET                                                            0
#define BBMSG_BUFMNG_REPLY_VALID0_WORD_OFFSET                                                       0
#define BBMSG_BUFMNG_REPLY_VALID0_F_OFFSET_MOD8                                                     6
#define BBMSG_BUFMNG_REPLY_VALID0_F_OFFSET_MOD16                                                    14
#define BBMSG_BUFMNG_REPLY_COUNTER0_F_OFFSET                                                        12
#define BBMSG_BUFMNG_REPLY_COUNTER0_F_WIDTH                                                         18
#define BBMSG_BUFMNG_REPLY_COUNTER0_OFFSET                                                          0
#define BBMSG_BUFMNG_REPLY_COUNTER0_WORD_OFFSET                                                     0
#define BBMSG_BUFMNG_REPLY_VALID1_F_OFFSET                                                          11
#define BBMSG_BUFMNG_REPLY_VALID1_F_WIDTH                                                           1
#define BBMSG_BUFMNG_REPLY_VALID1_OFFSET                                                            2
#define BBMSG_BUFMNG_REPLY_VALID1_WORD_OFFSET                                                       0
#define BBMSG_BUFMNG_REPLY_VALID1_F_OFFSET_MOD8                                                     3
#define BBMSG_BUFMNG_REPLY_VALID1_F_OFFSET_MOD16                                                    11
#define BBMSG_BUFMNG_REPLY_COUNTER1_1_F_OFFSET                                                      0
#define BBMSG_BUFMNG_REPLY_COUNTER1_1_F_WIDTH                                                       11
#define BBMSG_BUFMNG_REPLY_COUNTER1_1_OFFSET                                                        2
#define BBMSG_BUFMNG_REPLY_COUNTER1_1_WORD_OFFSET                                                   0
#define BBMSG_BUFMNG_REPLY_COUNTER1_1_F_OFFSET_MOD16                                                0
#define BBMSG_BUFMNG_REPLY_COUNTER1_0_F_OFFSET                                                      25
#define BBMSG_BUFMNG_REPLY_COUNTER1_0_F_WIDTH                                                       7
#define BBMSG_BUFMNG_REPLY_COUNTER1_0_OFFSET                                                        4
#define BBMSG_BUFMNG_REPLY_COUNTER1_0_WORD_OFFSET                                                   1
#define BBMSG_BUFMNG_REPLY_COUNTER1_0_F_OFFSET_MOD8                                                 1
#define BBMSG_BUFMNG_REPLY_COUNTER1_0_F_OFFSET_MOD16                                                9
#define BBMSG_BUFMNG_REPLY_VALID2_F_OFFSET                                                          24
#define BBMSG_BUFMNG_REPLY_VALID2_F_WIDTH                                                           1
#define BBMSG_BUFMNG_REPLY_VALID2_OFFSET                                                            4
#define BBMSG_BUFMNG_REPLY_VALID2_WORD_OFFSET                                                       1
#define BBMSG_BUFMNG_REPLY_VALID2_F_OFFSET_MOD8                                                     0
#define BBMSG_BUFMNG_REPLY_VALID2_F_OFFSET_MOD16                                                    8
#define BBMSG_BUFMNG_REPLY_COUNTER2_F_OFFSET                                                        6
#define BBMSG_BUFMNG_REPLY_COUNTER2_F_WIDTH                                                         18
#define BBMSG_BUFMNG_REPLY_COUNTER2_OFFSET                                                          4
#define BBMSG_BUFMNG_REPLY_COUNTER2_WORD_OFFSET                                                     1

/* >>>BBMSG_BUFMNG_REPLY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	result    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	counter0  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	counter1_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	counter1_0	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid2    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	counter2  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	counter1_1	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid1    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	counter0  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	result    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	counter2  	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	valid2    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	counter1_0	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) BBMSG_BUFMNG_REPLY_STRUCT;

#define RDD_BBMSG_BUFMNG_REPLY_RESULT_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT), 7, 1, (r))
#define RDD_BBMSG_BUFMNG_REPLY_RESULT_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT), 7, 1, (v))
#define RDD_BBMSG_BUFMNG_REPLY_RESULT_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_BBMSG_BUFMNG_REPLY_RESULT_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_BBMSG_BUFMNG_REPLY_VALID0_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT), 6, 1, (r))
#define RDD_BBMSG_BUFMNG_REPLY_VALID0_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT), 6, 1, (v))
#define RDD_BBMSG_BUFMNG_REPLY_VALID0_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_BBMSG_BUFMNG_REPLY_VALID0_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER0_READ_G(r, g, idx)            GROUP_FIELD_MREAD_32((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT), 12, 18, (r))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER0_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT), 12, 18, (v))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER0_READ(r, p)                   FIELD_MREAD_32((uint8_t *)(p), 12, 18, (r))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER0_WRITE(v, p)                  FIELD_MWRITE_32((uint8_t *)(p), 12, 18, (v))
#define RDD_BBMSG_BUFMNG_REPLY_VALID1_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT) + 2, 3, 1, (r))
#define RDD_BBMSG_BUFMNG_REPLY_VALID1_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT) + 2, 3, 1, (v))
#define RDD_BBMSG_BUFMNG_REPLY_VALID1_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 1, (r))
#define RDD_BBMSG_BUFMNG_REPLY_VALID1_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 1, (v))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER1_1_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT) + 2, 0, 11, (r))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER1_1_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT) + 2, 0, 11, (v))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER1_1_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 11, (r))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER1_1_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 11, (v))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER1_0_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT) + 4, 1, 7, (r))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER1_0_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT) + 4, 1, 7, (v))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER1_0_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 4, 1, 7, (r))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER1_0_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 4, 1, 7, (v))
#define RDD_BBMSG_BUFMNG_REPLY_VALID2_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT) + 4, 0, 1, (r))
#define RDD_BBMSG_BUFMNG_REPLY_VALID2_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT) + 4, 0, 1, (v))
#define RDD_BBMSG_BUFMNG_REPLY_VALID2_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 4, 0, 1, (r))
#define RDD_BBMSG_BUFMNG_REPLY_VALID2_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 4, 0, 1, (v))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER2_READ_G(r, g, idx)            GROUP_FIELD_MREAD_32((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT) + 4, 6, 18, (r))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER2_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(BBMSG_BUFMNG_REPLY_STRUCT) + 4, 6, 18, (v))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER2_READ(r, p)                   FIELD_MREAD_32((uint8_t *)(p) + 4, 6, 18, (r))
#define RDD_BBMSG_BUFMNG_REPLY_COUNTER2_WRITE(v, p)                  FIELD_MWRITE_32((uint8_t *)(p) + 4, 6, 18, (v))
/* <<<BBMSG_BUFMNG_REPLY_STRUCT */

/* <<<RDD_BBMSG_BUFMNG_REPLY */


/* >>>RDD_HASH_RESULT */
#define HASH_RESULT_MATCH_F_OFFSET                                                           30
#define HASH_RESULT_MATCH_F_WIDTH                                                            2
#define HASH_RESULT_HASH_RESULT_OFFSET                                                       0
#define HASH_RESULT_MATCH_OFFSET                                                             0
#define HASH_RESULT_MATCH_WORD_OFFSET                                                        0
#define HASH_RESULT_MATCH_F_OFFSET_MOD8                                                      6
#define HASH_RESULT_MATCH_F_OFFSET_MOD16                                                     14
#define HASH_RESULT_MATCH_INDEX_F_OFFSET                                                     19
#define HASH_RESULT_MATCH_INDEX_F_WIDTH                                                      11
#define HASH_RESULT_MATCH_INDEX_OFFSET                                                       0
#define HASH_RESULT_MATCH_INDEX_WORD_OFFSET                                                  0
#define HASH_RESULT_MATCH_INDEX_F_OFFSET_MOD16                                               3
#define HASH_RESULT_MATCH_ENGINE_F_OFFSET                                                    17
#define HASH_RESULT_MATCH_ENGINE_F_WIDTH                                                     2
#define HASH_RESULT_MATCH_ENGINE_OFFSET                                                      1
#define HASH_RESULT_MATCH_ENGINE_WORD_OFFSET                                                 0
#define HASH_RESULT_MATCH_ENGINE_F_OFFSET_MOD8                                               1
#define HASH_RESULT_MATCH_ENGINE_F_OFFSET_MOD16                                              1
#define HASH_RESULT_CONTEXT0_32_47_F_OFFSET                                                  0
#define HASH_RESULT_CONTEXT0_32_47_F_WIDTH                                                   16
#define HASH_RESULT_CONTEXT0_32_47_OFFSET                                                    2
#define HASH_RESULT_CONTEXT0_32_47_WORD_OFFSET                                               0
#define HASH_RESULT_CONTEXT0_0_31_F_OFFSET                                                   0
#define HASH_RESULT_CONTEXT0_0_31_F_WIDTH                                                    32
#define HASH_RESULT_CONTEXT0_0_31_OFFSET                                                     4
#define HASH_RESULT_CONTEXT0_0_31_WORD_OFFSET                                                1
#define HASH_RESULT_CONTEXT1_16_47_F_OFFSET                                                  0
#define HASH_RESULT_CONTEXT1_16_47_F_WIDTH                                                   32
#define HASH_RESULT_CONTEXT1_16_47_OFFSET                                                    8
#define HASH_RESULT_CONTEXT1_16_47_WORD_OFFSET                                               2
#define HASH_RESULT_CONTEXT1_0_15_F_OFFSET                                                   16
#define HASH_RESULT_CONTEXT1_0_15_F_WIDTH                                                    16
#define HASH_RESULT_CONTEXT1_0_15_OFFSET                                                     12
#define HASH_RESULT_CONTEXT1_0_15_WORD_OFFSET                                                3
#define HASH_RESULT_CONTEXT2_32_47_F_OFFSET                                                  0
#define HASH_RESULT_CONTEXT2_32_47_F_WIDTH                                                   16
#define HASH_RESULT_CONTEXT2_32_47_OFFSET                                                    14
#define HASH_RESULT_CONTEXT2_32_47_WORD_OFFSET                                               3
#define HASH_RESULT_CONTEXT2_0_31_F_OFFSET                                                   0
#define HASH_RESULT_CONTEXT2_0_31_F_WIDTH                                                    32
#define HASH_RESULT_CONTEXT2_0_31_OFFSET                                                     16
#define HASH_RESULT_CONTEXT2_0_31_WORD_OFFSET                                                4

/* >>>HASH_RESULT_STRUCT */
typedef union
{
    uint32_t word_32[6];
    uint64_t dword_64[3];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	match         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	match_index   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	match_engine  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	context0_32_47	;
        uint32_t	context0_0_31 	;
        uint32_t	context1_16_47	;
        uint16_t	context1_0_15 	;
        uint16_t	context2_32_47	;
        uint32_t	context2_0_31 	;
        uint32_t	reserved_1    	;
#else
        uint16_t	context0_32_47	;
        uint32_t	reserved_0    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	match_engine  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	match_index   	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	match         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	context0_0_31 	;
        uint32_t	context1_16_47	;
        uint16_t	context2_32_47	;
        uint16_t	context1_0_15 	;
        uint32_t	context2_0_31 	;
        uint32_t	reserved_1    	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) HASH_RESULT_STRUCT;

#define RDD_HASH_RESULT_MATCH_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(HASH_RESULT_STRUCT), 6, 2, (r))
#define RDD_HASH_RESULT_MATCH_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(HASH_RESULT_STRUCT), 6, 2, (v))
#define RDD_HASH_RESULT_MATCH_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p), 6, 2, (r))
#define RDD_HASH_RESULT_MATCH_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p), 6, 2, (v))
#define RDD_HASH_RESULT_MATCH_INDEX_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16((g), (idx)*sizeof(HASH_RESULT_STRUCT), 3, 11, (r))
#define RDD_HASH_RESULT_MATCH_INDEX_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(HASH_RESULT_STRUCT), 3, 11, (v))
#define RDD_HASH_RESULT_MATCH_INDEX_READ(r, p)                    FIELD_MREAD_16((uint8_t *)(p), 3, 11, (r))
#define RDD_HASH_RESULT_MATCH_INDEX_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)(p), 3, 11, (v))
#define RDD_HASH_RESULT_MATCH_ENGINE_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 1, 1, 2, (r))
#define RDD_HASH_RESULT_MATCH_ENGINE_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 1, 1, 2, (v))
#define RDD_HASH_RESULT_MATCH_ENGINE_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 1, 1, 2, (r))
#define RDD_HASH_RESULT_MATCH_ENGINE_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 1, 1, 2, (v))
#define RDD_HASH_RESULT_CONTEXT0_32_47_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 2, (r))
#define RDD_HASH_RESULT_CONTEXT0_32_47_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 2, (v))
#define RDD_HASH_RESULT_CONTEXT0_32_47_READ(r, p)                 MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_HASH_RESULT_CONTEXT0_32_47_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_HASH_RESULT_CONTEXT0_0_31_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 4, (r))
#define RDD_HASH_RESULT_CONTEXT0_0_31_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 4, (v))
#define RDD_HASH_RESULT_CONTEXT0_0_31_READ(r, p)                  MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_HASH_RESULT_CONTEXT0_0_31_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_HASH_RESULT_CONTEXT1_16_47_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 8, (r))
#define RDD_HASH_RESULT_CONTEXT1_16_47_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 8, (v))
#define RDD_HASH_RESULT_CONTEXT1_16_47_READ(r, p)                 MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_HASH_RESULT_CONTEXT1_16_47_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_HASH_RESULT_CONTEXT1_0_15_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 12, (r))
#define RDD_HASH_RESULT_CONTEXT1_0_15_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 12, (v))
#define RDD_HASH_RESULT_CONTEXT1_0_15_READ(r, p)                  MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_HASH_RESULT_CONTEXT1_0_15_WRITE(v, p)                 MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_HASH_RESULT_CONTEXT2_32_47_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 14, (r))
#define RDD_HASH_RESULT_CONTEXT2_32_47_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 14, (v))
#define RDD_HASH_RESULT_CONTEXT2_32_47_READ(r, p)                 MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_HASH_RESULT_CONTEXT2_32_47_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_HASH_RESULT_CONTEXT2_0_31_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 16, (r))
#define RDD_HASH_RESULT_CONTEXT2_0_31_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(HASH_RESULT_STRUCT) + 16, (v))
#define RDD_HASH_RESULT_CONTEXT2_0_31_READ(r, p)                  MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_HASH_RESULT_CONTEXT2_0_31_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 16, (v))
/* <<<HASH_RESULT_STRUCT */

/* <<<RDD_HASH_RESULT */


/* >>>RDD_TCAM_COMMAND */
#define TCAM_COMMAND_TCAM_COMMAND_OFFSET                                                      0
#define TCAM_COMMAND_KEY_OFFSET                                                               0
#define TCAM_COMMAND_KEY_WORD_OFFSET                                                          0
#define TCAM_COMMAND_KEY_F_OFFSET_MOD16                                                       0

/* >>>TCAM_COMMAND_STRUCT */
#define RDD_TCAM_COMMAND_KEY_NUMBER	64
typedef union
{
    uint32_t word_32[16];
    uint64_t dword_64[8];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	key[RDD_TCAM_COMMAND_KEY_NUMBER];
#else
        uint8_t	key[RDD_TCAM_COMMAND_KEY_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) TCAM_COMMAND_STRUCT;

#define RDD_TCAM_COMMAND_KEY_READ_G(r, g, idx, i)       GROUP_MREAD_I_8((g), (idx)*sizeof(TCAM_COMMAND_STRUCT), i, (r))
#define RDD_TCAM_COMMAND_KEY_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_8((g), (idx)*sizeof(TCAM_COMMAND_STRUCT), i, (v))
#define RDD_TCAM_COMMAND_KEY_READ(r, p, i)              MREAD_I_8((uint8_t *)(p), i, (r))
#define RDD_TCAM_COMMAND_KEY_WRITE(v, p, i)             MWRITE_I_8((uint8_t *)(p), i, (v))
/* <<<TCAM_COMMAND_STRUCT */

/* <<<RDD_TCAM_COMMAND */


/* >>>RDD_TCAM_RESULT */
#define TCAM_RESULT_TCAM_RESULT_OFFSET                                                       0
#define TCAM_RESULT_CONTEXT_OFFSET                                                           0
#define TCAM_RESULT_CONTEXT_WORD_OFFSET                                                      0
#define TCAM_RESULT_CONTEXT_F_OFFSET_MOD16                                                   0
#define TCAM_RESULT_MATCH_F_OFFSET                                                           31
#define TCAM_RESULT_MATCH_F_WIDTH                                                            1
#define TCAM_RESULT_MATCH_OFFSET                                                             16
#define TCAM_RESULT_MATCH_WORD_OFFSET                                                        4
#define TCAM_RESULT_MATCH_F_OFFSET_MOD8                                                      7
#define TCAM_RESULT_MATCH_F_OFFSET_MOD16                                                     15
#define TCAM_RESULT_MATCH_INDEX_F_OFFSET                                                     21
#define TCAM_RESULT_MATCH_INDEX_F_WIDTH                                                      10
#define TCAM_RESULT_MATCH_INDEX_OFFSET                                                       16
#define TCAM_RESULT_MATCH_INDEX_WORD_OFFSET                                                  4
#define TCAM_RESULT_MATCH_INDEX_F_OFFSET_MOD16                                               5

/* >>>TCAM_RESULT_STRUCT */
#define RDD_TCAM_RESULT_CONTEXT_NUMBER	16
typedef union
{
    uint32_t word_32[5];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	context[RDD_TCAM_RESULT_CONTEXT_NUMBER];
        uint32_t	match                                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	match_index                                	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved                                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	reserved1                                  	;
#else
        uint8_t	context[RDD_TCAM_RESULT_CONTEXT_NUMBER];
        uint16_t	reserved1                                  	;
        uint32_t	reserved                                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	match_index                                	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	match                                      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) TCAM_RESULT_STRUCT;

#define RDD_TCAM_RESULT_CONTEXT_READ_G(r, g, idx, i)           GROUP_MREAD_I_8((g), (idx)*sizeof(TCAM_RESULT_STRUCT), i, (r))
#define RDD_TCAM_RESULT_CONTEXT_WRITE_G(v, g, idx, i)          GROUP_MWRITE_I_8((g), (idx)*sizeof(TCAM_RESULT_STRUCT), i, (v))
#define RDD_TCAM_RESULT_CONTEXT_READ(r, p, i)                  MREAD_I_8((uint8_t *)(p), i, (r))
#define RDD_TCAM_RESULT_CONTEXT_WRITE(v, p, i)                 MWRITE_I_8((uint8_t *)(p), i, (v))
#define RDD_TCAM_RESULT_MATCH_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(TCAM_RESULT_STRUCT) + 16, 7, 1, (r))
#define RDD_TCAM_RESULT_MATCH_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(TCAM_RESULT_STRUCT) + 16, 7, 1, (v))
#define RDD_TCAM_RESULT_MATCH_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 16, 7, 1, (r))
#define RDD_TCAM_RESULT_MATCH_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 16, 7, 1, (v))
#define RDD_TCAM_RESULT_MATCH_INDEX_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(TCAM_RESULT_STRUCT) + 16, 5, 10, (r))
#define RDD_TCAM_RESULT_MATCH_INDEX_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(TCAM_RESULT_STRUCT) + 16, 5, 10, (v))
#define RDD_TCAM_RESULT_MATCH_INDEX_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 16, 5, 10, (r))
#define RDD_TCAM_RESULT_MATCH_INDEX_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 16, 5, 10, (v))
/* <<<TCAM_RESULT_STRUCT */

/* <<<RDD_TCAM_RESULT */


/* >>>RDD_CAM_RESULT */
#define CAM_RESULT_HIT_F_OFFSET                                                             8
#define CAM_RESULT_HIT_F_WIDTH                                                              1
#define CAM_RESULT_HIT_OFFSET                                                               2
#define CAM_RESULT_HIT_WORD_OFFSET                                                          0
#define CAM_RESULT_HIT_F_OFFSET_MOD8                                                        0
#define CAM_RESULT_HIT_F_OFFSET_MOD16                                                       8
#define CAM_RESULT_MATCH_INDEX_F_OFFSET                                                     0
#define CAM_RESULT_MATCH_INDEX_F_WIDTH                                                      8
#define CAM_RESULT_MATCH_INDEX_OFFSET                                                       3
#define CAM_RESULT_MATCH_INDEX_WORD_OFFSET                                                  0
#define CAM_RESULT_MATCH_INDEX_F_OFFSET_MOD16                                               0

/* >>>CAM_RESULT_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	reserved   	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	hit        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	match_index	;
#else
        uint8_t	match_index	;
        uint32_t	hit        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved   	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) CAM_RESULT_STRUCT;

#define RDD_CAM_RESULT_HIT_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CAM_RESULT_STRUCT) + 2, 0, 1, (r))
#define RDD_CAM_RESULT_HIT_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CAM_RESULT_STRUCT) + 2, 0, 1, (v))
#define RDD_CAM_RESULT_HIT_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 1, (r))
#define RDD_CAM_RESULT_HIT_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 1, (v))
#define RDD_CAM_RESULT_MATCH_INDEX_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(CAM_RESULT_STRUCT) + 3, (r))
#define RDD_CAM_RESULT_MATCH_INDEX_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(CAM_RESULT_STRUCT) + 3, (v))
#define RDD_CAM_RESULT_MATCH_INDEX_READ(r, p)                 MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_CAM_RESULT_MATCH_INDEX_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 3, (v))
/* <<<CAM_RESULT_STRUCT */

/* <<<RDD_CAM_RESULT */


/* >>>RDD_TRACE_EVENT */
#define TRACE_EVENT_TIMESTAMP_F_OFFSET                                                       20
#define TRACE_EVENT_TIMESTAMP_F_WIDTH                                                        12
#define TRACE_EVENT_TRACE_EVENT_OFFSET                                                       0
#define TRACE_EVENT_TIMESTAMP_OFFSET                                                         0
#define TRACE_EVENT_TIMESTAMP_WORD_OFFSET                                                    0
#define TRACE_EVENT_TIMESTAMP_F_OFFSET_MOD16                                                 4
#define TRACE_EVENT_EVENT_ID_F_OFFSET                                                        18
#define TRACE_EVENT_EVENT_ID_F_WIDTH                                                         2
#define TRACE_EVENT_EVENT_ID_OFFSET                                                          1
#define TRACE_EVENT_EVENT_ID_WORD_OFFSET                                                     0
#define TRACE_EVENT_EVENT_ID_F_OFFSET_MOD8                                                   2
#define TRACE_EVENT_EVENT_ID_F_OFFSET_MOD16                                                  2
#define TRACE_EVENT_TRACE_EVENT_INFO_F_OFFSET                                                0
#define TRACE_EVENT_TRACE_EVENT_INFO_F_WIDTH                                                 18
#define TRACE_EVENT_TRACE_EVENT_INFO_OFFSET                                                  0
#define TRACE_EVENT_TRACE_EVENT_INFO_WORD_OFFSET                                             0
/* <<<RDD_TRACE_EVENT */


/* >>>RDD_CPU_RX_DESCRIPTOR */
#define CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_F_OFFSET                                          0
#define CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_F_WIDTH                                           32
#define CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_OFFSET                                            0
#define CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_WORD_OFFSET                                       0
#define CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_F_OFFSET                                         24
#define CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_F_WIDTH                                          8
#define CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_OFFSET                                           4
#define CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_WORD_OFFSET                                      1
#define CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_F_OFFSET_MOD16                                   8
#define CPU_RX_DESCRIPTOR_ABS_F_OFFSET                                                             16
#define CPU_RX_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define CPU_RX_DESCRIPTOR_ABS_OFFSET                                                               5
#define CPU_RX_DESCRIPTOR_ABS_WORD_OFFSET                                                          1
#define CPU_RX_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        0
#define CPU_RX_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       0
#define CPU_RX_DESCRIPTOR_PLEN_F_OFFSET                                                            2
#define CPU_RX_DESCRIPTOR_PLEN_F_WIDTH                                                             14
#define CPU_RX_DESCRIPTOR_PLEN_OFFSET                                                              6
#define CPU_RX_DESCRIPTOR_PLEN_WORD_OFFSET                                                         1
#define CPU_RX_DESCRIPTOR_PLEN_F_OFFSET_MOD16                                                      2
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_F_OFFSET                                              1
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_F_WIDTH                                               1
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_OFFSET                                                7
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_WORD_OFFSET                                           1
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_F_OFFSET_MOD8                                         1
#define CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_F_OFFSET_MOD16                                        1
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_F_OFFSET                                                      31
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_F_WIDTH                                                       1
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_OFFSET                                                        8
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_WORD_OFFSET                                                   2
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_F_OFFSET_MOD8                                                 7
#define CPU_RX_DESCRIPTOR_IS_SRC_LAN_F_OFFSET_MOD16                                                15
#define CPU_RX_DESCRIPTOR_COLOR_F_OFFSET                                                           30
#define CPU_RX_DESCRIPTOR_COLOR_F_WIDTH                                                            1
#define CPU_RX_DESCRIPTOR_COLOR_OFFSET                                                             8
#define CPU_RX_DESCRIPTOR_COLOR_WORD_OFFSET                                                        2
#define CPU_RX_DESCRIPTOR_COLOR_F_OFFSET_MOD8                                                      6
#define CPU_RX_DESCRIPTOR_COLOR_F_OFFSET_MOD16                                                     14
#define CPU_RX_DESCRIPTOR_VPORT_F_OFFSET                                                           25
#define CPU_RX_DESCRIPTOR_VPORT_F_WIDTH                                                            5
#define CPU_RX_DESCRIPTOR_VPORT_OFFSET                                                             8
#define CPU_RX_DESCRIPTOR_VPORT_WORD_OFFSET                                                        2
#define CPU_RX_DESCRIPTOR_VPORT_F_OFFSET_MOD8                                                      1
#define CPU_RX_DESCRIPTOR_VPORT_F_OFFSET_MOD16                                                     9
#define CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_F_OFFSET                                                13
#define CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_F_WIDTH                                                 12
#define CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_OFFSET                                                  8
#define CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_WORD_OFFSET                                             2
#define CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_F_OFFSET_MOD16                                          13
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_F_OFFSET                                                     6
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_F_WIDTH                                                      7
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_OFFSET                                                       10
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_WORD_OFFSET                                                  2
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_F_OFFSET_MOD8                                                6
#define CPU_RX_DESCRIPTOR_DATA_OFFSET_F_OFFSET_MOD16                                               6
#define CPU_RX_DESCRIPTOR_REASON_F_OFFSET                                                          0
#define CPU_RX_DESCRIPTOR_REASON_F_WIDTH                                                           6
#define CPU_RX_DESCRIPTOR_REASON_OFFSET                                                            11
#define CPU_RX_DESCRIPTOR_REASON_WORD_OFFSET                                                       2
#define CPU_RX_DESCRIPTOR_REASON_F_OFFSET_MOD8                                                     0
#define CPU_RX_DESCRIPTOR_REASON_F_OFFSET_MOD16                                                    0
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_F_OFFSET                                                    31
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_F_WIDTH                                                     1
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_OFFSET                                                      12
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_WORD_OFFSET                                                 3
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_F_OFFSET_MOD8                                               7
#define CPU_RX_DESCRIPTOR_IS_EXCEPTION_F_OFFSET_MOD16                                              15
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_F_OFFSET                                                   30
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_F_WIDTH                                                    1
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_OFFSET                                                     12
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_WORD_OFFSET                                                3
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_F_OFFSET_MOD8                                              6
#define CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_F_OFFSET_MOD16                                             14
#define CPU_RX_DESCRIPTOR_IS_UCAST_F_OFFSET                                                        29
#define CPU_RX_DESCRIPTOR_IS_UCAST_F_WIDTH                                                         1
#define CPU_RX_DESCRIPTOR_IS_UCAST_OFFSET                                                          12
#define CPU_RX_DESCRIPTOR_IS_UCAST_WORD_OFFSET                                                     3
#define CPU_RX_DESCRIPTOR_IS_UCAST_F_OFFSET_MOD8                                                   5
#define CPU_RX_DESCRIPTOR_IS_UCAST_F_OFFSET_MOD16                                                  13
#define CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_F_OFFSET                                             16
#define CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_F_WIDTH                                              13
#define CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_OFFSET                                               12
#define CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_WORD_OFFSET                                          3
#define CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_F_OFFSET_MOD16                                       0
#define CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_F_OFFSET                                           0
#define CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_F_WIDTH                                            16
#define CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_OFFSET                                             14
#define CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_WORD_OFFSET                                        3

/* >>>CPU_RX_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	cpu_rx_data_ptr0_union  	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	host_buffer_data_ptr_low          	; /* Member of cpu_rx_data_ptr0_union union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	fpm_idx                           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_data_ptr0_union union */
        uint32_t	reserved0                         	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_data_ptr0_union union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	host_buffer_data_ptr_hi 	;
        uint32_t	reserved1               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	plen                    	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_chksum_verified      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	is_src_lan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	vport                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_rx_src_union        	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	data_offset             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reason                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_is_src_lan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_vport                 	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_flow_id                       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
        uint32_t	reservedSU1_data_offset           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reason                	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_is_src_lan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_vport                 	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3                         	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
        uint32_t	reservedSU2_data_offset           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reason                	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_is_src_lan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_color                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_vport                 	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ssid                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
        uint32_t	reserved4                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
        uint32_t	reservedSU3_data_offset           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_reason                	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	is_exception            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_rx_offload           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_ucast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mcast_tx_prio_union     	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint16_t	cpu_rx_metadata_union   	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_is_exception          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_is_rx_offload         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_is_ucast              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	mcast_tx_prio                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	reserved5                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint16_t	dst_ssid_vector                   	; /* Member of cpu_rx_metadata_union union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_is_exception          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_is_rx_offload         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_is_ucast              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved6                         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	metadata_0                        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	reserved7                         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint16_t	metadata_1                        	; /* Member of cpu_rx_metadata_union union */
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_is_exception          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_is_rx_offload         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_is_ucast              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	omci_enc_key_index                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	reserved8                         	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint8_t	egress_queue                      	; /* Member of cpu_rx_metadata_union union */
        uint8_t	wan_flow                          	; /* Member of cpu_rx_metadata_union union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	cpu_rx_data_ptr0_union  	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	host_buffer_data_ptr_low          	; /* Member of cpu_rx_data_ptr0_union union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reserved0                         	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_data_ptr0_union union */
        uint32_t	fpm_idx                           	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_data_ptr0_union union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved2               	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_chksum_verified      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	plen                    	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1               	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	host_buffer_data_ptr_hi 	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reason                  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	data_offset             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	cpu_rx_src_union        	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	vport                   	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	color                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_src_lan              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_reason                	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_data_offset           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wan_flow_id                       	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
        uint32_t	reservedSU1_vport                 	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_color                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_is_src_lan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_reason                	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_data_offset           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3                         	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
        uint32_t	reservedSU2_vport                 	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_color                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_is_src_lan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint32_t	reservedSU3_reason                	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_data_offset           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved4                         	:8	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
        uint32_t	ssid                              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of cpu_rx_src_union union */
        uint32_t	reservedSU3_vport                 	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_color                 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_is_src_lan            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	cpu_rx_metadata_union   	; /* This is a field union */
        uint32_t	mcast_tx_prio_union     	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	is_ucast                	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_rx_offload           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	is_exception            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint16_t	dst_ssid_vector                   	; /* Member of cpu_rx_metadata_union union */
        uint32_t	reserved5                         	:10	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	mcast_tx_prio                     	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	reservedSU1_is_ucast              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_is_rx_offload         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_is_exception          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint16_t	metadata_1                        	; /* Member of cpu_rx_metadata_union union */
        uint32_t	reserved7                         	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	metadata_0                        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	reserved6                         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	reservedSU2_is_ucast              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_is_rx_offload         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_is_exception          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 3 */
		struct{
        uint8_t	wan_flow                          	; /* Member of cpu_rx_metadata_union union */
        uint8_t	egress_queue                      	; /* Member of cpu_rx_metadata_union union */
        uint32_t	reserved8                         	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	omci_enc_key_index                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of mcast_tx_prio_union union */
        uint32_t	reservedSU3_is_ucast              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_is_rx_offload         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU3_is_exception          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CPU_RX_DESCRIPTOR_STRUCT;

#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT), (r))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT), (v))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_READ(r, p)                   MREAD_32((uint8_t *)(p), (r))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_DATA_PTR0_UNION_WRITE(v, p)                  MWRITE_32((uint8_t *)(p), (v))
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_LOW_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT), (r))
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_LOW_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT), (v))
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_LOW_READ(r, p)                 MREAD_32((uint8_t *)(p), (r))
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_LOW_WRITE(v, p)                MWRITE_32((uint8_t *)(p), (v))
#define RDD_CPU_RX_DESCRIPTOR_FPM_IDX_READ_G(r, g, idx)                           GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT), 14, 18, (r))
#define RDD_CPU_RX_DESCRIPTOR_FPM_IDX_WRITE_G(v, g, idx)                          GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT), 14, 18, (v))
#define RDD_CPU_RX_DESCRIPTOR_FPM_IDX_READ(r, p)                                  FIELD_MREAD_32((uint8_t *)(p), 14, 18, (r))
#define RDD_CPU_RX_DESCRIPTOR_FPM_IDX_WRITE(v, p)                                 FIELD_MWRITE_32((uint8_t *)(p), 14, 18, (v))
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_READ_G(r, g, idx)           GROUP_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_WRITE_G(v, g, idx)          GROUP_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_READ(r, p)                  MREAD_8((uint8_t *)(p) + 4, (r))
#define RDD_CPU_RX_DESCRIPTOR_HOST_BUFFER_DATA_PTR_HI_WRITE(v, p)                 MWRITE_8((uint8_t *)(p) + 4, (v))
#define RDD_CPU_RX_DESCRIPTOR_ABS_READ_G(r, g, idx)                               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 5, 0, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 5, 0, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_ABS_READ(r, p)                                      FIELD_MREAD_8((uint8_t *)(p) + 5, 0, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_ABS_WRITE(v, p)                                     FIELD_MWRITE_8((uint8_t *)(p) + 5, 0, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_PLEN_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 6, 2, 14, (r))
#define RDD_CPU_RX_DESCRIPTOR_PLEN_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 6, 2, 14, (v))
#define RDD_CPU_RX_DESCRIPTOR_PLEN_READ(r, p)                                     FIELD_MREAD_16((uint8_t *)(p) + 6, 2, 14, (r))
#define RDD_CPU_RX_DESCRIPTOR_PLEN_WRITE(v, p)                                    FIELD_MWRITE_16((uint8_t *)(p) + 6, 2, 14, (v))
#define RDD_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 7, 1, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 7, 1, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 7, 1, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_IS_CHKSUM_VERIFIED_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 7, 1, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_IS_SRC_LAN_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 7, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_IS_SRC_LAN_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 7, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_IS_SRC_LAN_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_IS_SRC_LAN_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_COLOR_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 6, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_COLOR_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 6, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_COLOR_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_COLOR_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_VPORT_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 1, 5, (r))
#define RDD_CPU_RX_DESCRIPTOR_VPORT_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 1, 5, (v))
#define RDD_CPU_RX_DESCRIPTOR_VPORT_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 8, 1, 5, (r))
#define RDD_CPU_RX_DESCRIPTOR_VPORT_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 8, 1, 5, (v))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 13, 12, (r))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 13, 12, (v))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_READ(r, p)                         FIELD_MREAD_32((uint8_t *)(p) + 8, 13, 12, (r))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_SRC_UNION_WRITE(v, p)                        FIELD_MWRITE_32((uint8_t *)(p) + 8, 13, 12, (v))
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_ID_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_32((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 13, 12, (r))
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_ID_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 13, 12, (v))
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_ID_READ(r, p)                              FIELD_MREAD_32((uint8_t *)(p) + 8, 13, 12, (r))
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_ID_WRITE(v, p)                             FIELD_MWRITE_32((uint8_t *)(p) + 8, 13, 12, (v))
#define RDD_CPU_RX_DESCRIPTOR_SSID_READ_G(r, g, idx)                              GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 5, 4, (r))
#define RDD_CPU_RX_DESCRIPTOR_SSID_WRITE_G(v, g, idx)                             GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 8, 5, 4, (v))
#define RDD_CPU_RX_DESCRIPTOR_SSID_READ(r, p)                                     FIELD_MREAD_16((uint8_t *)(p) + 8, 5, 4, (r))
#define RDD_CPU_RX_DESCRIPTOR_SSID_WRITE(v, p)                                    FIELD_MWRITE_16((uint8_t *)(p) + 8, 5, 4, (v))
#define RDD_CPU_RX_DESCRIPTOR_DATA_OFFSET_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 10, 6, 7, (r))
#define RDD_CPU_RX_DESCRIPTOR_DATA_OFFSET_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 10, 6, 7, (v))
#define RDD_CPU_RX_DESCRIPTOR_DATA_OFFSET_READ(r, p)                              FIELD_MREAD_16((uint8_t *)(p) + 10, 6, 7, (r))
#define RDD_CPU_RX_DESCRIPTOR_DATA_OFFSET_WRITE(v, p)                             FIELD_MWRITE_16((uint8_t *)(p) + 10, 6, 7, (v))
#define RDD_CPU_RX_DESCRIPTOR_REASON_READ_G(r, g, idx)                            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 11, 0, 6, (r))
#define RDD_CPU_RX_DESCRIPTOR_REASON_WRITE_G(v, g, idx)                           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 11, 0, 6, (v))
#define RDD_CPU_RX_DESCRIPTOR_REASON_READ(r, p)                                   FIELD_MREAD_8((uint8_t *)(p) + 11, 0, 6, (r))
#define RDD_CPU_RX_DESCRIPTOR_REASON_WRITE(v, p)                                  FIELD_MWRITE_8((uint8_t *)(p) + 11, 0, 6, (v))
#define RDD_CPU_RX_DESCRIPTOR_IS_EXCEPTION_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 7, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_IS_EXCEPTION_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 7, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_IS_EXCEPTION_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 12, 7, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_IS_EXCEPTION_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 12, 7, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 6, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 6, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_IS_RX_OFFLOAD_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_IS_UCAST_READ_G(r, g, idx)                          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 5, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_IS_UCAST_WRITE_G(v, g, idx)                         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 5, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_IS_UCAST_READ(r, p)                                 FIELD_MREAD_8((uint8_t *)(p) + 12, 5, 1, (r))
#define RDD_CPU_RX_DESCRIPTOR_IS_UCAST_WRITE(v, p)                                FIELD_MWRITE_8((uint8_t *)(p) + 12, 5, 1, (v))
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 0, 13, (r))
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 0, 13, (v))
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 12, 0, 13, (r))
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_UNION_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 12, 0, 13, (v))
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 2, 3, (r))
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 2, 3, (v))
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 12, 2, 3, (r))
#define RDD_CPU_RX_DESCRIPTOR_MCAST_TX_PRIO_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 12, 2, 3, (v))
#define RDD_CPU_RX_DESCRIPTOR_METADATA_0_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 5, 5, (r))
#define RDD_CPU_RX_DESCRIPTOR_METADATA_0_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 5, 5, (v))
#define RDD_CPU_RX_DESCRIPTOR_METADATA_0_READ(r, p)                               FIELD_MREAD_16((uint8_t *)(p) + 12, 5, 5, (r))
#define RDD_CPU_RX_DESCRIPTOR_METADATA_0_WRITE(v, p)                              FIELD_MWRITE_16((uint8_t *)(p) + 12, 5, 5, (v))
#define RDD_CPU_RX_DESCRIPTOR_OMCI_ENC_KEY_INDEX_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 3, 2, (r))
#define RDD_CPU_RX_DESCRIPTOR_OMCI_ENC_KEY_INDEX_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 12, 3, 2, (v))
#define RDD_CPU_RX_DESCRIPTOR_OMCI_ENC_KEY_INDEX_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p) + 12, 3, 2, (r))
#define RDD_CPU_RX_DESCRIPTOR_OMCI_ENC_KEY_INDEX_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p) + 12, 3, 2, (v))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_READ_G(r, g, idx)             GROUP_MREAD_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_WRITE_G(v, g, idx)            GROUP_MWRITE_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_READ(r, p)                    MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_CPU_RX_DESCRIPTOR_CPU_RX_METADATA_UNION_WRITE(v, p)                   MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_CPU_RX_DESCRIPTOR_DST_SSID_VECTOR_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_CPU_RX_DESCRIPTOR_DST_SSID_VECTOR_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_CPU_RX_DESCRIPTOR_DST_SSID_VECTOR_READ(r, p)                          MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_CPU_RX_DESCRIPTOR_DST_SSID_VECTOR_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_CPU_RX_DESCRIPTOR_METADATA_1_READ_G(r, g, idx)                        GROUP_MREAD_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_CPU_RX_DESCRIPTOR_METADATA_1_WRITE_G(v, g, idx)                       GROUP_MWRITE_16((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_CPU_RX_DESCRIPTOR_METADATA_1_READ(r, p)                               MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_CPU_RX_DESCRIPTOR_METADATA_1_WRITE(v, p)                              MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_READ_G(r, g, idx)                      GROUP_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_WRITE_G(v, g, idx)                     GROUP_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_READ(r, p)                             MREAD_8((uint8_t *)(p) + 14, (r))
#define RDD_CPU_RX_DESCRIPTOR_EGRESS_QUEUE_WRITE(v, p)                            MWRITE_8((uint8_t *)(p) + 14, (v))
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_READ_G(r, g, idx)                          GROUP_MREAD_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 15, (r))
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_WRITE_G(v, g, idx)                         GROUP_MWRITE_8((g), (idx)*sizeof(CPU_RX_DESCRIPTOR_STRUCT) + 15, (v))
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_READ(r, p)                                 MREAD_8((uint8_t *)(p) + 15, (r))
#define RDD_CPU_RX_DESCRIPTOR_WAN_FLOW_WRITE(v, p)                                MWRITE_8((uint8_t *)(p) + 15, (v))
/* <<<CPU_RX_DESCRIPTOR_STRUCT */

/* <<<RDD_CPU_RX_DESCRIPTOR */


/* >>>RDD_CPU_RECYCLE_DESCRIPTOR */
#define CPU_RECYCLE_DESCRIPTOR_SKB_PTR_LOW_F_OFFSET                                                     0
#define CPU_RECYCLE_DESCRIPTOR_SKB_PTR_LOW_F_WIDTH                                                      32
#define CPU_RECYCLE_DESCRIPTOR_CPU_RECYCLE_DESCRIPTOR_OFFSET                                            0
#define CPU_RECYCLE_DESCRIPTOR_SKB_PTR_LOW_OFFSET                                                       0
#define CPU_RECYCLE_DESCRIPTOR_SKB_PTR_LOW_WORD_OFFSET                                                  0
#define CPU_RECYCLE_DESCRIPTOR_FROM_FEED_RING_F_OFFSET                                                  9
#define CPU_RECYCLE_DESCRIPTOR_FROM_FEED_RING_F_WIDTH                                                   1
#define CPU_RECYCLE_DESCRIPTOR_FROM_FEED_RING_OFFSET                                                    6
#define CPU_RECYCLE_DESCRIPTOR_FROM_FEED_RING_WORD_OFFSET                                               1
#define CPU_RECYCLE_DESCRIPTOR_FROM_FEED_RING_F_OFFSET_MOD8                                             1
#define CPU_RECYCLE_DESCRIPTOR_FROM_FEED_RING_F_OFFSET_MOD16                                            9
#define CPU_RECYCLE_DESCRIPTOR_ABS_F_OFFSET                                                             8
#define CPU_RECYCLE_DESCRIPTOR_ABS_F_WIDTH                                                              1
#define CPU_RECYCLE_DESCRIPTOR_ABS_OFFSET                                                               6
#define CPU_RECYCLE_DESCRIPTOR_ABS_WORD_OFFSET                                                          1
#define CPU_RECYCLE_DESCRIPTOR_ABS_F_OFFSET_MOD8                                                        0
#define CPU_RECYCLE_DESCRIPTOR_ABS_F_OFFSET_MOD16                                                       8
#define CPU_RECYCLE_DESCRIPTOR_SKB_PTR_HI_F_OFFSET                                                      0
#define CPU_RECYCLE_DESCRIPTOR_SKB_PTR_HI_F_WIDTH                                                       8
#define CPU_RECYCLE_DESCRIPTOR_SKB_PTR_HI_OFFSET                                                        7
#define CPU_RECYCLE_DESCRIPTOR_SKB_PTR_HI_WORD_OFFSET                                                   1
#define CPU_RECYCLE_DESCRIPTOR_SKB_PTR_HI_F_OFFSET_MOD16                                                0

/* >>>CPU_RECYCLE_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	skb_ptr_low   	;
        uint32_t	reserved0     	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	from_feed_ring	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	skb_ptr_hi    	;
#else
        uint32_t	skb_ptr_low   	;
        uint8_t	skb_ptr_hi    	;
        uint32_t	abs           	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	from_feed_ring	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0     	:22	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CPU_RECYCLE_DESCRIPTOR_STRUCT;

#define RDD_CPU_RECYCLE_DESCRIPTOR_SKB_PTR_LOW_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(CPU_RECYCLE_DESCRIPTOR_STRUCT), (r))
#define RDD_CPU_RECYCLE_DESCRIPTOR_SKB_PTR_LOW_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(CPU_RECYCLE_DESCRIPTOR_STRUCT), (v))
#define RDD_CPU_RECYCLE_DESCRIPTOR_SKB_PTR_LOW_READ(r, p)                    MREAD_32((uint8_t *)(p), (r))
#define RDD_CPU_RECYCLE_DESCRIPTOR_SKB_PTR_LOW_WRITE(v, p)                   MWRITE_32((uint8_t *)(p), (v))
#define RDD_CPU_RECYCLE_DESCRIPTOR_FROM_FEED_RING_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RECYCLE_DESCRIPTOR_STRUCT) + 6, 1, 1, (r))
#define RDD_CPU_RECYCLE_DESCRIPTOR_FROM_FEED_RING_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RECYCLE_DESCRIPTOR_STRUCT) + 6, 1, 1, (v))
#define RDD_CPU_RECYCLE_DESCRIPTOR_FROM_FEED_RING_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 6, 1, 1, (r))
#define RDD_CPU_RECYCLE_DESCRIPTOR_FROM_FEED_RING_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 6, 1, 1, (v))
#define RDD_CPU_RECYCLE_DESCRIPTOR_ABS_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_RECYCLE_DESCRIPTOR_STRUCT) + 6, 0, 1, (r))
#define RDD_CPU_RECYCLE_DESCRIPTOR_ABS_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_RECYCLE_DESCRIPTOR_STRUCT) + 6, 0, 1, (v))
#define RDD_CPU_RECYCLE_DESCRIPTOR_ABS_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p) + 6, 0, 1, (r))
#define RDD_CPU_RECYCLE_DESCRIPTOR_ABS_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p) + 6, 0, 1, (v))
#define RDD_CPU_RECYCLE_DESCRIPTOR_SKB_PTR_HI_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(CPU_RECYCLE_DESCRIPTOR_STRUCT) + 7, (r))
#define RDD_CPU_RECYCLE_DESCRIPTOR_SKB_PTR_HI_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(CPU_RECYCLE_DESCRIPTOR_STRUCT) + 7, (v))
#define RDD_CPU_RECYCLE_DESCRIPTOR_SKB_PTR_HI_READ(r, p)                     MREAD_8((uint8_t *)(p) + 7, (r))
#define RDD_CPU_RECYCLE_DESCRIPTOR_SKB_PTR_HI_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 7, (v))
/* <<<CPU_RECYCLE_DESCRIPTOR_STRUCT */

/* <<<RDD_CPU_RECYCLE_DESCRIPTOR */


/* >>>RDD_CPU_FEED_DESCRIPTOR */
#define CPU_FEED_DESCRIPTOR_PTR_LOW_F_OFFSET                                                         0
#define CPU_FEED_DESCRIPTOR_PTR_LOW_F_WIDTH                                                          32
#define CPU_FEED_DESCRIPTOR_CPU_FEED_DESCRIPTOR_OFFSET                                               0
#define CPU_FEED_DESCRIPTOR_PTR_LOW_OFFSET                                                           0
#define CPU_FEED_DESCRIPTOR_PTR_LOW_WORD_OFFSET                                                      0
#define CPU_FEED_DESCRIPTOR_TYPE_F_OFFSET                                                            8
#define CPU_FEED_DESCRIPTOR_TYPE_F_WIDTH                                                             1
#define CPU_FEED_DESCRIPTOR_TYPE_OFFSET                                                              6
#define CPU_FEED_DESCRIPTOR_TYPE_WORD_OFFSET                                                         1
#define CPU_FEED_DESCRIPTOR_TYPE_F_OFFSET_MOD8                                                       0
#define CPU_FEED_DESCRIPTOR_TYPE_F_OFFSET_MOD16                                                      8
#define CPU_FEED_DESCRIPTOR_PTR_HI_F_OFFSET                                                          0
#define CPU_FEED_DESCRIPTOR_PTR_HI_F_WIDTH                                                           8
#define CPU_FEED_DESCRIPTOR_PTR_HI_OFFSET                                                            7
#define CPU_FEED_DESCRIPTOR_PTR_HI_WORD_OFFSET                                                       1
#define CPU_FEED_DESCRIPTOR_PTR_HI_F_OFFSET_MOD16                                                    0

/* >>>CPU_FEED_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	ptr_low   	;
        uint32_t	reserved0 	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	type      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	ptr_hi    	;
#else
        uint32_t	ptr_low   	;
        uint8_t	ptr_hi    	;
        uint32_t	type      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0 	:23	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) CPU_FEED_DESCRIPTOR_STRUCT;

#define RDD_CPU_FEED_DESCRIPTOR_PTR_LOW_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(CPU_FEED_DESCRIPTOR_STRUCT), (r))
#define RDD_CPU_FEED_DESCRIPTOR_PTR_LOW_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(CPU_FEED_DESCRIPTOR_STRUCT), (v))
#define RDD_CPU_FEED_DESCRIPTOR_PTR_LOW_READ(r, p)                   MREAD_32((uint8_t *)(p), (r))
#define RDD_CPU_FEED_DESCRIPTOR_PTR_LOW_WRITE(v, p)                  MWRITE_32((uint8_t *)(p), (v))
#define RDD_CPU_FEED_DESCRIPTOR_TYPE_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(CPU_FEED_DESCRIPTOR_STRUCT) + 6, 0, 1, (r))
#define RDD_CPU_FEED_DESCRIPTOR_TYPE_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(CPU_FEED_DESCRIPTOR_STRUCT) + 6, 0, 1, (v))
#define RDD_CPU_FEED_DESCRIPTOR_TYPE_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 6, 0, 1, (r))
#define RDD_CPU_FEED_DESCRIPTOR_TYPE_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 6, 0, 1, (v))
#define RDD_CPU_FEED_DESCRIPTOR_PTR_HI_READ_G(r, g, idx)             GROUP_MREAD_8((g), (idx)*sizeof(CPU_FEED_DESCRIPTOR_STRUCT) + 7, (r))
#define RDD_CPU_FEED_DESCRIPTOR_PTR_HI_WRITE_G(v, g, idx)            GROUP_MWRITE_8((g), (idx)*sizeof(CPU_FEED_DESCRIPTOR_STRUCT) + 7, (v))
#define RDD_CPU_FEED_DESCRIPTOR_PTR_HI_READ(r, p)                    MREAD_8((uint8_t *)(p) + 7, (r))
#define RDD_CPU_FEED_DESCRIPTOR_PTR_HI_WRITE(v, p)                   MWRITE_8((uint8_t *)(p) + 7, (v))
/* <<<CPU_FEED_DESCRIPTOR_STRUCT */

/* <<<RDD_CPU_FEED_DESCRIPTOR */


/* >>>RDD_CPU_RING_DESCRIPTOR */
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_F_OFFSET                                                   27
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_F_WIDTH                                                    5
#define CPU_RING_DESCRIPTOR_CPU_RING_DESCRIPTOR_OFFSET                                               0
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_OFFSET                                                     0
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_WORD_OFFSET                                                0
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_F_OFFSET_MOD8                                              3
#define CPU_RING_DESCRIPTOR_SIZE_OF_ENTRY_F_OFFSET_MOD16                                             11
#define CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_F_OFFSET                                               16
#define CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_F_WIDTH                                                11
#define CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_OFFSET                                                 0
#define CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_WORD_OFFSET                                            0
#define CPU_RING_DESCRIPTOR_NUMBER_OF_ENTRIES_F_OFFSET_MOD16                                         0
#define CPU_RING_DESCRIPTOR_INTERRUPT_ID_F_OFFSET                                                    0
#define CPU_RING_DESCRIPTOR_INTERRUPT_ID_F_WIDTH                                                     16
#define CPU_RING_DESCRIPTOR_INTERRUPT_ID_OFFSET                                                      2
#define CPU_RING_DESCRIPTOR_INTERRUPT_ID_WORD_OFFSET                                                 0
#define CPU_RING_DESCRIPTOR_DROP_COUNTER_F_OFFSET                                                    16
#define CPU_RING_DESCRIPTOR_DROP_COUNTER_F_WIDTH                                                     16
#define CPU_RING_DESCRIPTOR_DROP_COUNTER_OFFSET                                                      4
#define CPU_RING_DESCRIPTOR_DROP_COUNTER_WORD_OFFSET                                                 1
#define CPU_RING_DESCRIPTOR_WRITE_IDX_F_OFFSET                                                       0
#define CPU_RING_DESCRIPTOR_WRITE_IDX_F_WIDTH                                                        16
#define CPU_RING_DESCRIPTOR_WRITE_IDX_OFFSET                                                         6
#define CPU_RING_DESCRIPTOR_WRITE_IDX_WORD_OFFSET                                                    1
#define CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_F_OFFSET                                                   0
#define CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_F_WIDTH                                                    32
#define CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_OFFSET                                                     8
#define CPU_RING_DESCRIPTOR_BASE_ADDR_LOW_WORD_OFFSET                                                2
#define CPU_RING_DESCRIPTOR_READ_IDX_F_OFFSET                                                        16
#define CPU_RING_DESCRIPTOR_READ_IDX_F_WIDTH                                                         16
#define CPU_RING_DESCRIPTOR_READ_IDX_OFFSET                                                          12
#define CPU_RING_DESCRIPTOR_READ_IDX_WORD_OFFSET                                                     3
#define CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_F_OFFSET                                                  0
#define CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_F_WIDTH                                                   8
#define CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_OFFSET                                                    15
#define CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_WORD_OFFSET                                               3
#define CPU_RING_DESCRIPTOR_BASE_ADDR_HIGH_F_OFFSET_MOD16                                            0
/* <<<RDD_CPU_RING_DESCRIPTOR */


/* >>>RDD_PERIPHERALS_STS */
#define PERIPHERALS_STS_SCHEDULER_DEBUG_F_OFFSET                                                 27
#define PERIPHERALS_STS_SCHEDULER_DEBUG_F_WIDTH                                                  5
#define PERIPHERALS_STS_PERIPHERALS_STS_OFFSET                                                   0
#define PERIPHERALS_STS_SCHEDULER_DEBUG_OFFSET                                                   0
#define PERIPHERALS_STS_SCHEDULER_DEBUG_WORD_OFFSET                                              0
#define PERIPHERALS_STS_SCHEDULER_DEBUG_F_OFFSET_MOD8                                            3
#define PERIPHERALS_STS_SCHEDULER_DEBUG_F_OFFSET_MOD16                                           11
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_F_OFFSET                                            26
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_F_WIDTH                                             1
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_OFFSET                                              0
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_WORD_OFFSET                                         0
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_F_OFFSET_MOD8                                       2
#define PERIPHERALS_STS_NEXT_THREAD_IS_READY_F_OFFSET_MOD16                                      10
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_F_OFFSET                                              21
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_F_WIDTH                                               5
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_OFFSET                                                0
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_WORD_OFFSET                                           0
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_F_OFFSET_MOD8                                         5
#define PERIPHERALS_STS_NEXT_THREAD_NUMBER_F_OFFSET_MOD16                                        5
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_F_OFFSET                                           16
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_F_WIDTH                                            5
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_OFFSET                                             1
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_WORD_OFFSET                                        0
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_F_OFFSET_MOD8                                      0
#define PERIPHERALS_STS_CURRENT_THREAD_NUMBER_F_OFFSET_MOD16                                     0
#define PERIPHERALS_STS_TIMER_1_STATUS_F_OFFSET                                                  12
#define PERIPHERALS_STS_TIMER_1_STATUS_F_WIDTH                                                   1
#define PERIPHERALS_STS_TIMER_1_STATUS_OFFSET                                                    2
#define PERIPHERALS_STS_TIMER_1_STATUS_WORD_OFFSET                                               0
#define PERIPHERALS_STS_TIMER_1_STATUS_F_OFFSET_MOD8                                             4
#define PERIPHERALS_STS_TIMER_1_STATUS_F_OFFSET_MOD16                                            12
#define PERIPHERALS_STS_TIMER_0_STATUS_F_OFFSET                                                  11
#define PERIPHERALS_STS_TIMER_0_STATUS_F_WIDTH                                                   1
#define PERIPHERALS_STS_TIMER_0_STATUS_OFFSET                                                    2
#define PERIPHERALS_STS_TIMER_0_STATUS_WORD_OFFSET                                               0
#define PERIPHERALS_STS_TIMER_0_STATUS_F_OFFSET_MOD8                                             3
#define PERIPHERALS_STS_TIMER_0_STATUS_F_OFFSET_MOD16                                            11
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_F_OFFSET                                      8
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_F_WIDTH                                       1
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_OFFSET                                        2
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_WORD_OFFSET                                   0
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_F_OFFSET_MOD8                                 0
#define PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_F_OFFSET_MOD16                                8
#define PERIPHERALS_STS_QUAD_ID_F_OFFSET                                                         6
#define PERIPHERALS_STS_QUAD_ID_F_WIDTH                                                          2
#define PERIPHERALS_STS_QUAD_ID_OFFSET                                                           3
#define PERIPHERALS_STS_QUAD_ID_WORD_OFFSET                                                      0
#define PERIPHERALS_STS_QUAD_ID_F_OFFSET_MOD8                                                    6
#define PERIPHERALS_STS_QUAD_ID_F_OFFSET_MOD16                                                   6
#define PERIPHERALS_STS_CORE_ID_F_OFFSET                                                         4
#define PERIPHERALS_STS_CORE_ID_F_WIDTH                                                          2
#define PERIPHERALS_STS_CORE_ID_OFFSET                                                           3
#define PERIPHERALS_STS_CORE_ID_WORD_OFFSET                                                      0
#define PERIPHERALS_STS_CORE_ID_F_OFFSET_MOD8                                                    4
#define PERIPHERALS_STS_CORE_ID_F_OFFSET_MOD16                                                   4
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_F_OFFSET                                              3
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_F_WIDTH                                               1
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_OFFSET                                                3
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_WORD_OFFSET                                           0
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_F_OFFSET_MOD8                                         3
#define PERIPHERALS_STS_BB_MESSAGE_PENDING_F_OFFSET_MOD16                                        3
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_F_OFFSET                                      2
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_F_WIDTH                                       1
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_OFFSET                                        3
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_WORD_OFFSET                                   0
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_F_OFFSET_MOD8                                 2
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_F_OFFSET_MOD16                                2
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_F_OFFSET                                          1
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_F_WIDTH                                           1
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_OFFSET                                            3
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_WORD_OFFSET                                       0
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_F_OFFSET_MOD8                                     1
#define PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_F_OFFSET_MOD16                                    1
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_F_OFFSET                                           0
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_F_WIDTH                                            1
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_OFFSET                                             3
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_WORD_OFFSET                                        0
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_F_OFFSET_MOD8                                      0
#define PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_F_OFFSET_MOD16                                     0

/* >>>PERIPHERALS_STS_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	scheduler_debug           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	next_thread_is_ready      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	next_thread_number        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	current_thread_number     	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved_1                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	timer_1_status            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	timer_0_status            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved_2                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ram_read_command_fifo_full	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	quad_id                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	core_id                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bb_message_pending        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bbtx_command_fifo_is_empty	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bbtx_command_fifo_full    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	dma_command_fifo_full     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	dma_command_fifo_full     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bbtx_command_fifo_full    	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bbtx_command_fifo_is_empty	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	bb_message_pending        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	core_id                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	quad_id                   	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	ram_read_command_fifo_full	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved_2                	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	timer_0_status            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	timer_1_status            	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved_1                	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	current_thread_number     	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	next_thread_number        	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	next_thread_is_ready      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	scheduler_debug           	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) PERIPHERALS_STS_STRUCT;

#define RDD_PERIPHERALS_STS_SCHEDULER_DEBUG_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT), 3, 5, (r))
#define RDD_PERIPHERALS_STS_SCHEDULER_DEBUG_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT), 3, 5, (v))
#define RDD_PERIPHERALS_STS_SCHEDULER_DEBUG_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 3, 5, (r))
#define RDD_PERIPHERALS_STS_SCHEDULER_DEBUG_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 3, 5, (v))
#define RDD_PERIPHERALS_STS_NEXT_THREAD_IS_READY_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT), 2, 1, (r))
#define RDD_PERIPHERALS_STS_NEXT_THREAD_IS_READY_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT), 2, 1, (v))
#define RDD_PERIPHERALS_STS_NEXT_THREAD_IS_READY_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 2, 1, (r))
#define RDD_PERIPHERALS_STS_NEXT_THREAD_IS_READY_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 2, 1, (v))
#define RDD_PERIPHERALS_STS_NEXT_THREAD_NUMBER_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_16((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT), 5, 5, (r))
#define RDD_PERIPHERALS_STS_NEXT_THREAD_NUMBER_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT), 5, 5, (v))
#define RDD_PERIPHERALS_STS_NEXT_THREAD_NUMBER_READ(r, p)                         FIELD_MREAD_16((uint8_t *)(p), 5, 5, (r))
#define RDD_PERIPHERALS_STS_NEXT_THREAD_NUMBER_WRITE(v, p)                        FIELD_MWRITE_16((uint8_t *)(p), 5, 5, (v))
#define RDD_PERIPHERALS_STS_CURRENT_THREAD_NUMBER_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 1, 0, 5, (r))
#define RDD_PERIPHERALS_STS_CURRENT_THREAD_NUMBER_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 1, 0, 5, (v))
#define RDD_PERIPHERALS_STS_CURRENT_THREAD_NUMBER_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 5, (r))
#define RDD_PERIPHERALS_STS_CURRENT_THREAD_NUMBER_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 5, (v))
#define RDD_PERIPHERALS_STS_TIMER_1_STATUS_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 2, 4, 1, (r))
#define RDD_PERIPHERALS_STS_TIMER_1_STATUS_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 2, 4, 1, (v))
#define RDD_PERIPHERALS_STS_TIMER_1_STATUS_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 2, 4, 1, (r))
#define RDD_PERIPHERALS_STS_TIMER_1_STATUS_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 2, 4, 1, (v))
#define RDD_PERIPHERALS_STS_TIMER_0_STATUS_READ_G(r, g, idx)                      GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 2, 3, 1, (r))
#define RDD_PERIPHERALS_STS_TIMER_0_STATUS_WRITE_G(v, g, idx)                     GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 2, 3, 1, (v))
#define RDD_PERIPHERALS_STS_TIMER_0_STATUS_READ(r, p)                             FIELD_MREAD_8((uint8_t *)(p) + 2, 3, 1, (r))
#define RDD_PERIPHERALS_STS_TIMER_0_STATUS_WRITE(v, p)                            FIELD_MWRITE_8((uint8_t *)(p) + 2, 3, 1, (v))
#define RDD_PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 2, 0, 1, (r))
#define RDD_PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 2, 0, 1, (v))
#define RDD_PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 1, (r))
#define RDD_PERIPHERALS_STS_RAM_READ_COMMAND_FIFO_FULL_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 1, (v))
#define RDD_PERIPHERALS_STS_QUAD_ID_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 6, 2, (r))
#define RDD_PERIPHERALS_STS_QUAD_ID_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 6, 2, (v))
#define RDD_PERIPHERALS_STS_QUAD_ID_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 3, 6, 2, (r))
#define RDD_PERIPHERALS_STS_QUAD_ID_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 3, 6, 2, (v))
#define RDD_PERIPHERALS_STS_CORE_ID_READ_G(r, g, idx)                             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 4, 2, (r))
#define RDD_PERIPHERALS_STS_CORE_ID_WRITE_G(v, g, idx)                            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 4, 2, (v))
#define RDD_PERIPHERALS_STS_CORE_ID_READ(r, p)                                    FIELD_MREAD_8((uint8_t *)(p) + 3, 4, 2, (r))
#define RDD_PERIPHERALS_STS_CORE_ID_WRITE(v, p)                                   FIELD_MWRITE_8((uint8_t *)(p) + 3, 4, 2, (v))
#define RDD_PERIPHERALS_STS_BB_MESSAGE_PENDING_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 3, 1, (r))
#define RDD_PERIPHERALS_STS_BB_MESSAGE_PENDING_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 3, 1, (v))
#define RDD_PERIPHERALS_STS_BB_MESSAGE_PENDING_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 3, 3, 1, (r))
#define RDD_PERIPHERALS_STS_BB_MESSAGE_PENDING_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 3, 3, 1, (v))
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 2, 1, (r))
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 2, 1, (v))
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 3, 2, 1, (r))
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_IS_EMPTY_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 3, 2, 1, (v))
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_READ_G(r, g, idx)              GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 1, 1, (r))
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_WRITE_G(v, g, idx)             GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 1, 1, (v))
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_READ(r, p)                     FIELD_MREAD_8((uint8_t *)(p) + 3, 1, 1, (r))
#define RDD_PERIPHERALS_STS_BBTX_COMMAND_FIFO_FULL_WRITE(v, p)                    FIELD_MWRITE_8((uint8_t *)(p) + 3, 1, 1, (v))
#define RDD_PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 0, 1, (r))
#define RDD_PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(PERIPHERALS_STS_STRUCT) + 3, 0, 1, (v))
#define RDD_PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 3, 0, 1, (r))
#define RDD_PERIPHERALS_STS_DMA_COMMAND_FIFO_FULL_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 3, 0, 1, (v))
/* <<<PERIPHERALS_STS_STRUCT */

/* <<<RDD_PERIPHERALS_STS */


/* >>>RDD_POLICER_RESULT_ENTRY */
#define POLICER_RESULT_ENTRY_COLOR_F_OFFSET                                                           24
#define POLICER_RESULT_ENTRY_COLOR_F_WIDTH                                                            8
#define POLICER_RESULT_ENTRY_POLICER_RESULT_ENTRY_OFFSET                                              0
#define POLICER_RESULT_ENTRY_COLOR_OFFSET                                                             0
#define POLICER_RESULT_ENTRY_COLOR_WORD_OFFSET                                                        0
#define POLICER_RESULT_ENTRY_COLOR_F_OFFSET_MOD16                                                     8

/* >>>POLICER_RESULT_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint8_t	color     	;
        uint32_t	reserved0 	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved1 	;
#else
        uint32_t	reserved0 	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	color     	;
        uint32_t	reserved1 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) POLICER_RESULT_ENTRY_STRUCT;

#define RDD_POLICER_RESULT_ENTRY_COLOR_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(POLICER_RESULT_ENTRY_STRUCT), (r))
#define RDD_POLICER_RESULT_ENTRY_COLOR_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(POLICER_RESULT_ENTRY_STRUCT), (v))
#define RDD_POLICER_RESULT_ENTRY_COLOR_READ(r, p)                     MREAD_8((uint8_t *)(p), (r))
#define RDD_POLICER_RESULT_ENTRY_COLOR_WRITE(v, p)                    MWRITE_8((uint8_t *)(p), (v))
/* <<<POLICER_RESULT_ENTRY_STRUCT */

/* <<<RDD_POLICER_RESULT_ENTRY */


/* >>>RDD_GPE_COMMAND */
#define GPE_COMMAND_OPCODE_F_OFFSET                                                          12
#define GPE_COMMAND_OPCODE_F_WIDTH                                                           4
#define GPE_COMMAND_GPE_COMMAND_OFFSET                                                       0
#define GPE_COMMAND_OPCODE_OFFSET                                                            0
#define GPE_COMMAND_OPCODE_WORD_OFFSET                                                       0
#define GPE_COMMAND_OPCODE_F_OFFSET_MOD8                                                     4
#define GPE_COMMAND_OPCODE_F_OFFSET_MOD16                                                    12
#define GPE_COMMAND_OFFSET_F_OFFSET                                                          6
#define GPE_COMMAND_OFFSET_F_WIDTH                                                           6
#define GPE_COMMAND_OFFSET_OFFSET                                                            0
#define GPE_COMMAND_OFFSET_WORD_OFFSET                                                       0
#define GPE_COMMAND_OFFSET_F_OFFSET_MOD8                                                     6
#define GPE_COMMAND_OFFSET_F_OFFSET_MOD16                                                    6
#define GPE_COMMAND_TARGET_MEMORY_F_OFFSET                                                   4
#define GPE_COMMAND_TARGET_MEMORY_F_WIDTH                                                    2
#define GPE_COMMAND_TARGET_MEMORY_OFFSET                                                     1
#define GPE_COMMAND_TARGET_MEMORY_WORD_OFFSET                                                0
#define GPE_COMMAND_TARGET_MEMORY_F_OFFSET_MOD8                                              4
#define GPE_COMMAND_TARGET_MEMORY_F_OFFSET_MOD16                                             4
#define GPE_COMMAND_LENGTH_F_OFFSET                                                          0
#define GPE_COMMAND_LENGTH_F_WIDTH                                                           4
#define GPE_COMMAND_LENGTH_OFFSET                                                            1
#define GPE_COMMAND_LENGTH_WORD_OFFSET                                                       0
#define GPE_COMMAND_LENGTH_F_OFFSET_MOD8                                                     0
#define GPE_COMMAND_LENGTH_F_OFFSET_MOD16                                                    0

/* >>>GPE_COMMAND_STRUCT */
typedef union
{
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	opcode       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	offset       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	target_memory	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	length       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint16_t	length       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	target_memory	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	offset       	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	opcode       	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(2))) GPE_COMMAND_STRUCT;

#define RDD_GPE_COMMAND_OPCODE_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(GPE_COMMAND_STRUCT), 4, 4, (r))
#define RDD_GPE_COMMAND_OPCODE_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(GPE_COMMAND_STRUCT), 4, 4, (v))
#define RDD_GPE_COMMAND_OPCODE_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p), 4, 4, (r))
#define RDD_GPE_COMMAND_OPCODE_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p), 4, 4, (v))
#define RDD_GPE_COMMAND_OFFSET_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_16((g), (idx)*sizeof(GPE_COMMAND_STRUCT), 6, 6, (r))
#define RDD_GPE_COMMAND_OFFSET_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(GPE_COMMAND_STRUCT), 6, 6, (v))
#define RDD_GPE_COMMAND_OFFSET_READ(r, p)                        FIELD_MREAD_16((uint8_t *)(p), 6, 6, (r))
#define RDD_GPE_COMMAND_OFFSET_WRITE(v, p)                       FIELD_MWRITE_16((uint8_t *)(p), 6, 6, (v))
#define RDD_GPE_COMMAND_TARGET_MEMORY_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(GPE_COMMAND_STRUCT) + 1, 4, 2, (r))
#define RDD_GPE_COMMAND_TARGET_MEMORY_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(GPE_COMMAND_STRUCT) + 1, 4, 2, (v))
#define RDD_GPE_COMMAND_TARGET_MEMORY_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 4, 2, (r))
#define RDD_GPE_COMMAND_TARGET_MEMORY_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 4, 2, (v))
#define RDD_GPE_COMMAND_LENGTH_READ_G(r, g, idx)                 GROUP_FIELD_MREAD_8((g), (idx)*sizeof(GPE_COMMAND_STRUCT) + 1, 0, 4, (r))
#define RDD_GPE_COMMAND_LENGTH_WRITE_G(v, g, idx)                GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(GPE_COMMAND_STRUCT) + 1, 0, 4, (v))
#define RDD_GPE_COMMAND_LENGTH_READ(r, p)                        FIELD_MREAD_8((uint8_t *)(p) + 1, 0, 4, (r))
#define RDD_GPE_COMMAND_LENGTH_WRITE(v, p)                       FIELD_MWRITE_8((uint8_t *)(p) + 1, 0, 4, (v))
/* <<<GPE_COMMAND_STRUCT */

/* <<<RDD_GPE_COMMAND */


/* >>>RDD_RULE_BASED_NATC_CONTEXT_ENTRY */
#define RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_F_OFFSET                                                    0
#define RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_F_WIDTH                                                     32
#define RULE_BASED_NATC_CONTEXT_ENTRY_RULE_BASED_NATC_CONTEXT_ENTRY_OFFSET                                     0
#define RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_OFFSET                                                      0
#define RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_WORD_OFFSET                                                 0
#define RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_F_OFFSET                                                    0
#define RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_F_WIDTH                                                     32
#define RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_OFFSET                                                      4
#define RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_WORD_OFFSET                                                 1
#define RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_F_OFFSET                                                 24
#define RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_F_WIDTH                                                  8
#define RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_OFFSET                                                   8
#define RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_WORD_OFFSET                                              2
#define RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_F_OFFSET_MOD16                                           8
#define RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_F_OFFSET                                                 16
#define RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_F_WIDTH                                                  8
#define RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_OFFSET                                                   9
#define RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_WORD_OFFSET                                              2
#define RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_F_OFFSET_MOD16                                           0
#define RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_F_OFFSET                                            8
#define RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_F_WIDTH                                             8
#define RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_OFFSET                                              10
#define RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_WORD_OFFSET                                         2
#define RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_F_OFFSET_MOD16                                      8
#define RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_F_OFFSET                                              0
#define RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_F_WIDTH                                               8
#define RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_OFFSET                                                11
#define RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_WORD_OFFSET                                           2
#define RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_F_OFFSET_MOD16                                        0
#define RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_OFFSET                                                          12
#define RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_WORD_OFFSET                                                     3
#define RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_F_OFFSET_MOD16                                                  8

/* >>>RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT */
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_NUMBER	52
typedef union
{
    uint32_t word_32[16];
    uint64_t dword_64[8];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	natc_control                                                   	;
        uint32_t	hw_reserved0                                                   	;
        uint8_t	untagged_offset                                                	;
        uint8_t	p_tag_cl_offset                                                	;
        uint8_t	single_tag_cl_offset                                           	;
        uint8_t	dual_tag_cl_offset                                             	;
        uint8_t	cmd_list[RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_NUMBER];
#else
        uint32_t	natc_control                                                   	;
        uint32_t	hw_reserved0                                                   	;
        uint8_t	dual_tag_cl_offset                                             	;
        uint8_t	single_tag_cl_offset                                           	;
        uint8_t	p_tag_cl_offset                                                	;
        uint8_t	untagged_offset                                                	;
        uint8_t	cmd_list[RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT;

#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT), (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT), (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_READ(r, p)                         MREAD_32((uint8_t *)(p), (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_NATC_CONTROL_WRITE(v, p)                        MWRITE_32((uint8_t *)(p), (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 4, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 4, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_READ(r, p)                         MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_HW_RESERVED0_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 8, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 8, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_READ(r, p)                      MREAD_8((uint8_t *)(p) + 8, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_UNTAGGED_OFFSET_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 8, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_READ_G(r, g, idx)               GROUP_MREAD_8((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 9, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_WRITE_G(v, g, idx)              GROUP_MWRITE_8((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 9, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_READ(r, p)                      MREAD_8((uint8_t *)(p) + 9, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_P_TAG_CL_OFFSET_WRITE(v, p)                     MWRITE_8((uint8_t *)(p) + 9, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 10, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 10, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_READ(r, p)                 MREAD_8((uint8_t *)(p) + 10, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_SINGLE_TAG_CL_OFFSET_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 10, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_READ_G(r, g, idx)            GROUP_MREAD_8((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 11, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_WRITE_G(v, g, idx)           GROUP_MWRITE_8((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 11, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_READ(r, p)                   MREAD_8((uint8_t *)(p) + 11, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_DUAL_TAG_CL_OFFSET_WRITE(v, p)                  MWRITE_8((uint8_t *)(p) + 11, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_READ_G(r, g, idx, i)                   GROUP_MREAD_I_8((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 12, i, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_WRITE_G(v, g, idx, i)                  GROUP_MWRITE_I_8((g), (idx)*sizeof(RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT) + 12, i, (v))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_READ(r, p, i)                          MREAD_I_8((uint8_t *)(p) + 12, i, (r))
#define RDD_RULE_BASED_NATC_CONTEXT_ENTRY_CMD_LIST_WRITE(v, p, i)                         MWRITE_I_8((uint8_t *)(p) + 12, i, (v))
/* <<<RULE_BASED_NATC_CONTEXT_ENTRY_STRUCT */

/* <<<RDD_RULE_BASED_NATC_CONTEXT_ENTRY */


/* >>>RDD_VLAN_ACTION_CONTEXT_ENTRY */
#define VLAN_ACTION_CONTEXT_ENTRY_VLAN_ACTION_CONTEXT_ENTRY_OFFSET                                         0
#define VLAN_ACTION_CONTEXT_ENTRY_CMD_OFFSET                                                               0
#define VLAN_ACTION_CONTEXT_ENTRY_CMD_WORD_OFFSET                                                          0

/* >>>VLAN_ACTION_CONTEXT_ENTRY_STRUCT */
#define RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_NUMBER	32
typedef union
{
    uint32_t word_32[16];
    uint64_t dword_64[8];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint16_t	cmd[RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_NUMBER];
#else
        uint16_t	cmd[RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) VLAN_ACTION_CONTEXT_ENTRY_STRUCT;

#define RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_READ_G(r, g, idx, i)       GROUP_MREAD_I_16((g), (idx)*sizeof(VLAN_ACTION_CONTEXT_ENTRY_STRUCT), i, (r))
#define RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_WRITE_G(v, g, idx, i)      GROUP_MWRITE_I_16((g), (idx)*sizeof(VLAN_ACTION_CONTEXT_ENTRY_STRUCT), i, (v))
#define RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_READ(r, p, i)              MREAD_I_16((uint8_t *)(p), i, (r))
#define RDD_VLAN_ACTION_CONTEXT_ENTRY_CMD_WRITE(v, p, i)             MWRITE_I_16((uint8_t *)(p), i, (v))
/* <<<VLAN_ACTION_CONTEXT_ENTRY_STRUCT */

/* <<<RDD_VLAN_ACTION_CONTEXT_ENTRY */


/* >>>RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR */
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_F_OFFSET                                                         31
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_F_WIDTH                                                          1
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_COMPLEX_RATE_LIMITER_DESCRIPTOR_OFFSET                                   0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_OFFSET                                                           0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_WORD_OFFSET                                                      0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_F_OFFSET_MOD8                                                    7
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_F_OFFSET_MOD16                                                   15
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_F_OFFSET                                                      8
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_F_WIDTH                                                       2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_OFFSET                                                        2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_WORD_OFFSET                                                   0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_F_OFFSET_MOD8                                                 0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_F_OFFSET_MOD16                                                8
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_F_OFFSET                                                     0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_F_WIDTH                                                      8
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_OFFSET                                                       3
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_WORD_OFFSET                                                  0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_F_OFFSET_MOD16                                               0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_F_OFFSET                                              0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_F_WIDTH                                               32
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_OFFSET                                                4
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_WORD_OFFSET                                           1
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_F_OFFSET                                              18
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_F_WIDTH                                               14
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_OFFSET                                                8
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_WORD_OFFSET                                           2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_F_OFFSET_MOD16                                        2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_F_OFFSET                                              16
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_F_WIDTH                                               2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_OFFSET                                                9
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_WORD_OFFSET                                           2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_F_OFFSET_MOD8                                         0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_F_OFFSET_MOD16                                        0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_F_OFFSET                                              2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_F_WIDTH                                               14
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_OFFSET                                                10
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_WORD_OFFSET                                           2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_F_OFFSET_MOD16                                        2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_F_OFFSET                                              0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_F_WIDTH                                               2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_OFFSET                                                11
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_WORD_OFFSET                                           2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_F_OFFSET_MOD8                                         0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_F_OFFSET_MOD16                                        0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_F_OFFSET                                              0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_F_WIDTH                                               32
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_OFFSET                                                12
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_WORD_OFFSET                                           3
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_F_OFFSET                                              18
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_F_WIDTH                                               14
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_OFFSET                                                16
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_WORD_OFFSET                                           4
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_F_OFFSET_MOD16                                        2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_F_OFFSET                                              16
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_F_WIDTH                                               2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_OFFSET                                                17
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_WORD_OFFSET                                           4
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_F_OFFSET_MOD8                                         0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_F_OFFSET_MOD16                                        0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_F_OFFSET                                              2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_F_WIDTH                                               14
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_OFFSET                                                18
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_WORD_OFFSET                                           4
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_F_OFFSET_MOD16                                        2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_F_OFFSET                                              0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_F_WIDTH                                               2
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_OFFSET                                                19
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_WORD_OFFSET                                           4
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_F_OFFSET_MOD8                                         0
#define COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_F_OFFSET_MOD16                                        0

/* >>>COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT */
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RESERVED_NUMBER	12
typedef union
{
    uint32_t word_32[8];
    uint64_t dword_64[4];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	rl_type                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                        	:21	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	block_type                                                       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	block_index                                                      	;
        uint32_t	sir_current_budget                                               	;
        uint32_t	sir_alloc_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sir_alloc_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sir_limit_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sir_limit_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pir_current_budget                                               	;
        uint32_t	pir_alloc_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pir_alloc_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pir_limit_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pir_limit_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved[RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RESERVED_NUMBER];
#else
        uint8_t	block_index                                                      	;
        uint32_t	block_type                                                       	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2                                                        	:21	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	rl_type                                                          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sir_current_budget                                               	;
        uint32_t	sir_limit_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sir_limit_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sir_alloc_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	sir_alloc_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pir_current_budget                                               	;
        uint32_t	pir_limit_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pir_limit_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pir_alloc_exponent                                               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	pir_alloc_mantissa                                               	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved[RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RESERVED_NUMBER];
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT;

#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_READ_G(r, g, idx)                     GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT), 7, 1, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_WRITE_G(v, g, idx)                    GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT), 7, 1, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_READ(r, p)                            FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_RL_TYPE_WRITE(v, p)                           FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 2, 0, 2, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 2, 0, 2, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 2, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_TYPE_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 2, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_READ_G(r, g, idx)                 GROUP_MREAD_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 3, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_WRITE_G(v, g, idx)                GROUP_MWRITE_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 3, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_READ(r, p)                        MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_BLOCK_INDEX_WRITE(v, p)                       MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_CURRENT_BUDGET_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 8, 2, 14, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 8, 2, 14, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 8, 2, 14, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 8, 2, 14, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 9, 0, 2, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 9, 0, 2, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 9, 0, 2, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_ALLOC_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 9, 0, 2, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 10, 2, 14, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 10, 2, 14, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 10, 2, 14, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 10, 2, 14, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 11, 0, 2, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 11, 0, 2, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 11, 0, 2, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_SIR_LIMIT_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 11, 0, 2, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_READ(r, p)                 MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_CURRENT_BUDGET_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 16, 2, 14, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 16, 2, 14, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 16, 2, 14, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 16, 2, 14, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 17, 0, 2, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 17, 0, 2, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 17, 0, 2, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_ALLOC_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 17, 0, 2, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_READ_G(r, g, idx)          GROUP_FIELD_MREAD_16((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 18, 2, 14, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 18, 2, 14, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_READ(r, p)                 FIELD_MREAD_16((uint8_t *)(p) + 18, 2, 14, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_MANTISSA_WRITE(v, p)                FIELD_MWRITE_16((uint8_t *)(p) + 18, 2, 14, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 19, 0, 2, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT) + 19, 0, 2, (v))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 19, 0, 2, (r))
#define RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR_PIR_LIMIT_EXPONENT_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 19, 0, 2, (v))
/* <<<COMPLEX_RATE_LIMITER_DESCRIPTOR_STRUCT */

/* <<<RDD_COMPLEX_RATE_LIMITER_DESCRIPTOR */


/* >>>RDD_DHD_TX_POST_DESCRIPTOR */
#define DHD_TX_POST_DESCRIPTOR_MSG_TYPE_F_OFFSET                                                        24
#define DHD_TX_POST_DESCRIPTOR_MSG_TYPE_F_WIDTH                                                         8
#define DHD_TX_POST_DESCRIPTOR_DHD_TX_POST_DESCRIPTOR_OFFSET                                            0
#define DHD_TX_POST_DESCRIPTOR_MSG_TYPE_OFFSET                                                          0
#define DHD_TX_POST_DESCRIPTOR_MSG_TYPE_WORD_OFFSET                                                     0
#define DHD_TX_POST_DESCRIPTOR_MSG_TYPE_F_OFFSET_MOD16                                                  8
#define DHD_TX_POST_DESCRIPTOR_IF_ID_F_OFFSET                                                           16
#define DHD_TX_POST_DESCRIPTOR_IF_ID_F_WIDTH                                                            8
#define DHD_TX_POST_DESCRIPTOR_IF_ID_OFFSET                                                             1
#define DHD_TX_POST_DESCRIPTOR_IF_ID_WORD_OFFSET                                                        0
#define DHD_TX_POST_DESCRIPTOR_IF_ID_F_OFFSET_MOD16                                                     0
#define DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET                                                8
#define DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_WIDTH                                                 8
#define DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_OFFSET                                                  2
#define DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WORD_OFFSET                                             0
#define DHD_TX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET_MOD16                                          8
#define DHD_TX_POST_DESCRIPTOR_EPOCH_F_OFFSET                                                           0
#define DHD_TX_POST_DESCRIPTOR_EPOCH_F_WIDTH                                                            8
#define DHD_TX_POST_DESCRIPTOR_EPOCH_OFFSET                                                             3
#define DHD_TX_POST_DESCRIPTOR_EPOCH_WORD_OFFSET                                                        0
#define DHD_TX_POST_DESCRIPTOR_EPOCH_F_OFFSET_MOD16                                                     0
#define DHD_TX_POST_DESCRIPTOR_REQUEST_ID_F_OFFSET                                                      0
#define DHD_TX_POST_DESCRIPTOR_REQUEST_ID_F_WIDTH                                                       32
#define DHD_TX_POST_DESCRIPTOR_REQUEST_ID_OFFSET                                                        4
#define DHD_TX_POST_DESCRIPTOR_REQUEST_ID_WORD_OFFSET                                                   1
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_OFFSET                                                      8
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_0_WORD_OFFSET                                                 2
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_OFFSET                                                      12
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_1_WORD_OFFSET                                                 3
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_OFFSET                                                      16
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_2_WORD_OFFSET                                                 4
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_F_OFFSET                                                    16
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_F_WIDTH                                                     16
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_OFFSET                                                      20
#define DHD_TX_POST_DESCRIPTOR_TX_ETH_HDR_3_WORD_OFFSET                                                 5
#define DHD_TX_POST_DESCRIPTOR_FLAGS_F_OFFSET                                                           8
#define DHD_TX_POST_DESCRIPTOR_FLAGS_F_WIDTH                                                            8
#define DHD_TX_POST_DESCRIPTOR_FLAGS_OFFSET                                                             22
#define DHD_TX_POST_DESCRIPTOR_FLAGS_WORD_OFFSET                                                        5
#define DHD_TX_POST_DESCRIPTOR_FLAGS_F_OFFSET_MOD16                                                     8
#define DHD_TX_POST_DESCRIPTOR_SEG_CNT_F_OFFSET                                                         0
#define DHD_TX_POST_DESCRIPTOR_SEG_CNT_F_WIDTH                                                          8
#define DHD_TX_POST_DESCRIPTOR_SEG_CNT_OFFSET                                                           23
#define DHD_TX_POST_DESCRIPTOR_SEG_CNT_WORD_OFFSET                                                      5
#define DHD_TX_POST_DESCRIPTOR_SEG_CNT_F_OFFSET_MOD16                                                   0
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_F_OFFSET                                           0
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_F_WIDTH                                            32
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_OFFSET                                             24
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WORD_OFFSET                                        6
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_F_OFFSET                                            0
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_F_WIDTH                                             32
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_OFFSET                                              28
#define DHD_TX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WORD_OFFSET                                         7
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_F_OFFSET                                               0
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_F_WIDTH                                                32
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_OFFSET                                                 32
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WORD_OFFSET                                            8
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_F_OFFSET                                                0
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_F_WIDTH                                                 32
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_OFFSET                                                  36
#define DHD_TX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WORD_OFFSET                                             9
#define DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_F_OFFSET                                                    16
#define DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_F_WIDTH                                                     16
#define DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_OFFSET                                                      40
#define DHD_TX_POST_DESCRIPTOR_META_BUF_LEN_WORD_OFFSET                                                 10
#define DHD_TX_POST_DESCRIPTOR_DATA_LEN_F_OFFSET                                                        0
#define DHD_TX_POST_DESCRIPTOR_DATA_LEN_F_WIDTH                                                         16
#define DHD_TX_POST_DESCRIPTOR_DATA_LEN_OFFSET                                                          42
#define DHD_TX_POST_DESCRIPTOR_DATA_LEN_WORD_OFFSET                                                     10
/* <<<RDD_DHD_TX_POST_DESCRIPTOR */


/* >>>RDD_DHD_TX_COMPLETE_DESCRIPTOR */
#define DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_OFFSET                                                        24
#define DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_WIDTH                                                         8
#define DHD_TX_COMPLETE_DESCRIPTOR_DHD_TX_COMPLETE_DESCRIPTOR_OFFSET                                        0
#define DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_OFFSET                                                          0
#define DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_WORD_OFFSET                                                     0
#define DHD_TX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_OFFSET_MOD16                                                  8
#define DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_F_OFFSET                                                           16
#define DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_F_WIDTH                                                            8
#define DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_OFFSET                                                             1
#define DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_WORD_OFFSET                                                        0
#define DHD_TX_COMPLETE_DESCRIPTOR_IF_ID_F_OFFSET_MOD16                                                     0
#define DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET                                                8
#define DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_WIDTH                                                 8
#define DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_OFFSET                                                  2
#define DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WORD_OFFSET                                             0
#define DHD_TX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET_MOD16                                          8
#define DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_F_OFFSET                                                           0
#define DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_F_WIDTH                                                            8
#define DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_OFFSET                                                             3
#define DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_WORD_OFFSET                                                        0
#define DHD_TX_COMPLETE_DESCRIPTOR_EPOCH_F_OFFSET_MOD16                                                     0
#define DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_F_OFFSET                                                      0
#define DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_F_WIDTH                                                       32
#define DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_OFFSET                                                        4
#define DHD_TX_COMPLETE_DESCRIPTOR_REQUEST_ID_WORD_OFFSET                                                   1
#define DHD_TX_COMPLETE_DESCRIPTOR_STATUS_F_OFFSET                                                          16
#define DHD_TX_COMPLETE_DESCRIPTOR_STATUS_F_WIDTH                                                           16
#define DHD_TX_COMPLETE_DESCRIPTOR_STATUS_OFFSET                                                            8
#define DHD_TX_COMPLETE_DESCRIPTOR_STATUS_WORD_OFFSET                                                       2
#define DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_F_OFFSET                                                    0
#define DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_F_WIDTH                                                     16
#define DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_OFFSET                                                      10
#define DHD_TX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WORD_OFFSET                                                 2
#define DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_F_OFFSET                                                   0
#define DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_F_WIDTH                                                    32
#define DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_OFFSET                                                     12
#define DHD_TX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WORD_OFFSET                                                3
/* <<<RDD_DHD_TX_COMPLETE_DESCRIPTOR */


/* >>>RDD_DHD_RX_COMPLETE_DESCRIPTOR */
#define DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_OFFSET                                                        24
#define DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_WIDTH                                                         8
#define DHD_RX_COMPLETE_DESCRIPTOR_DHD_RX_COMPLETE_DESCRIPTOR_OFFSET                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_OFFSET                                                          0
#define DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_WORD_OFFSET                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_MSG_TYPE_F_OFFSET_MOD16                                                  8
#define DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_F_OFFSET                                                           16
#define DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_F_WIDTH                                                            8
#define DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_OFFSET                                                             1
#define DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_WORD_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_IF_ID_F_OFFSET_MOD16                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET                                                8
#define DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_WIDTH                                                 8
#define DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_OFFSET                                                  2
#define DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_WORD_OFFSET                                             0
#define DHD_RX_COMPLETE_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET_MOD16                                          8
#define DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_F_OFFSET                                                           0
#define DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_F_WIDTH                                                            8
#define DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_OFFSET                                                             3
#define DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_WORD_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_EPOCH_F_OFFSET_MOD16                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_F_OFFSET                                                      0
#define DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_F_WIDTH                                                       32
#define DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_OFFSET                                                        4
#define DHD_RX_COMPLETE_DESCRIPTOR_REQUEST_ID_WORD_OFFSET                                                   1
#define DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_F_OFFSET                                            16
#define DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_F_WIDTH                                             16
#define DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_OFFSET                                              8
#define DHD_RX_COMPLETE_DESCRIPTOR_COMPL_MSG_HDR_STATUS_WORD_OFFSET                                         2
#define DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_F_OFFSET                                                    0
#define DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_F_WIDTH                                                     16
#define DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_OFFSET                                                      10
#define DHD_RX_COMPLETE_DESCRIPTOR_FLOW_RING_ID_WORD_OFFSET                                                 2
#define DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_F_OFFSET                                                    16
#define DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_F_WIDTH                                                     16
#define DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_OFFSET                                                      12
#define DHD_RX_COMPLETE_DESCRIPTOR_META_BUF_LEN_WORD_OFFSET                                                 3
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_F_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_F_WIDTH                                                         16
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_OFFSET                                                          14
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_LEN_WORD_OFFSET                                                     3
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_F_OFFSET                                                     16
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_F_WIDTH                                                      16
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_OFFSET                                                       16
#define DHD_RX_COMPLETE_DESCRIPTOR_DATA_OFFSET_WORD_OFFSET                                                  4
#define DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_F_OFFSET                                                           0
#define DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_F_WIDTH                                                            16
#define DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_OFFSET                                                             18
#define DHD_RX_COMPLETE_DESCRIPTOR_FLAGS_WORD_OFFSET                                                        4
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_F_OFFSET                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_F_WIDTH                                                      32
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_OFFSET                                                       20
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_0_WORD_OFFSET                                                  5
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_F_OFFSET                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_F_WIDTH                                                      32
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_OFFSET                                                       24
#define DHD_RX_COMPLETE_DESCRIPTOR_RX_STATUS_1_WORD_OFFSET                                                  6
#define DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_F_OFFSET                                                   0
#define DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_F_WIDTH                                                    32
#define DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_OFFSET                                                     28
#define DHD_RX_COMPLETE_DESCRIPTOR_DMA_DONE_MARK_WORD_OFFSET                                                7
/* <<<RDD_DHD_RX_COMPLETE_DESCRIPTOR */


/* >>>RDD_DHD_RX_POST_DESCRIPTOR */
#define DHD_RX_POST_DESCRIPTOR_MSG_TYPE_F_OFFSET                                                        24
#define DHD_RX_POST_DESCRIPTOR_MSG_TYPE_F_WIDTH                                                         8
#define DHD_RX_POST_DESCRIPTOR_DHD_RX_POST_DESCRIPTOR_OFFSET                                            0
#define DHD_RX_POST_DESCRIPTOR_MSG_TYPE_OFFSET                                                          0
#define DHD_RX_POST_DESCRIPTOR_MSG_TYPE_WORD_OFFSET                                                     0
#define DHD_RX_POST_DESCRIPTOR_MSG_TYPE_F_OFFSET_MOD16                                                  8
#define DHD_RX_POST_DESCRIPTOR_IF_ID_F_OFFSET                                                           16
#define DHD_RX_POST_DESCRIPTOR_IF_ID_F_WIDTH                                                            8
#define DHD_RX_POST_DESCRIPTOR_IF_ID_OFFSET                                                             1
#define DHD_RX_POST_DESCRIPTOR_IF_ID_WORD_OFFSET                                                        0
#define DHD_RX_POST_DESCRIPTOR_IF_ID_F_OFFSET_MOD16                                                     0
#define DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET                                                8
#define DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_WIDTH                                                 8
#define DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_OFFSET                                                  2
#define DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_WORD_OFFSET                                             0
#define DHD_RX_POST_DESCRIPTOR_COMMON_HDR_FLAGS_F_OFFSET_MOD16                                          8
#define DHD_RX_POST_DESCRIPTOR_EPOCH_F_OFFSET                                                           0
#define DHD_RX_POST_DESCRIPTOR_EPOCH_F_WIDTH                                                            8
#define DHD_RX_POST_DESCRIPTOR_EPOCH_OFFSET                                                             3
#define DHD_RX_POST_DESCRIPTOR_EPOCH_WORD_OFFSET                                                        0
#define DHD_RX_POST_DESCRIPTOR_EPOCH_F_OFFSET_MOD16                                                     0
#define DHD_RX_POST_DESCRIPTOR_REQUEST_ID_F_OFFSET                                                      0
#define DHD_RX_POST_DESCRIPTOR_REQUEST_ID_F_WIDTH                                                       32
#define DHD_RX_POST_DESCRIPTOR_REQUEST_ID_OFFSET                                                        4
#define DHD_RX_POST_DESCRIPTOR_REQUEST_ID_WORD_OFFSET                                                   1
#define DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_F_OFFSET                                                    16
#define DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_F_WIDTH                                                     16
#define DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_OFFSET                                                      8
#define DHD_RX_POST_DESCRIPTOR_META_BUF_LEN_WORD_OFFSET                                                 2
#define DHD_RX_POST_DESCRIPTOR_DATA_LEN_F_OFFSET                                                        0
#define DHD_RX_POST_DESCRIPTOR_DATA_LEN_F_WIDTH                                                         16
#define DHD_RX_POST_DESCRIPTOR_DATA_LEN_OFFSET                                                          10
#define DHD_RX_POST_DESCRIPTOR_DATA_LEN_WORD_OFFSET                                                     2
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_F_OFFSET                                           0
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_F_WIDTH                                            32
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_OFFSET                                             16
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_LOW_WORD_OFFSET                                        4
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_F_OFFSET                                            0
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_F_WIDTH                                             32
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_OFFSET                                              20
#define DHD_RX_POST_DESCRIPTOR_METADATA_BUF_ADDR_HI_WORD_OFFSET                                         5
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_F_OFFSET                                               0
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_F_WIDTH                                                32
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_OFFSET                                                 24
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_LOW_WORD_OFFSET                                            6
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_F_OFFSET                                                0
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_F_WIDTH                                                 32
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_OFFSET                                                  28
#define DHD_RX_POST_DESCRIPTOR_DATA_BUF_ADDR_HI_WORD_OFFSET                                             7
/* <<<RDD_DHD_RX_POST_DESCRIPTOR */


/* >>>RDD_DHD_TX_POST_DESCRIPTOR_CWI32 */
#define DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_F_OFFSET                                                      0
#define DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_F_WIDTH                                                       32
#define DHD_TX_POST_DESCRIPTOR_CWI32_DHD_TX_POST_DESCRIPTOR_CWI32_OFFSET                                      0
#define DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_OFFSET                                                        0
#define DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WORD_OFFSET                                                   0
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_F_OFFSET                                                            29
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_F_WIDTH                                                             3
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_OFFSET                                                              4
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_WORD_OFFSET                                                         1
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_F_OFFSET_MOD8                                                       5
#define DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_F_OFFSET_MOD16                                                      13
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_F_OFFSET                                                           24
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_F_WIDTH                                                            5
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_OFFSET                                                             4
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_WORD_OFFSET                                                        1
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_F_OFFSET_MOD8                                                      0
#define DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_F_OFFSET_MOD16                                                     8
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_F_OFFSET                                                           17
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_F_WIDTH                                                            7
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_OFFSET                                                             5
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_WORD_OFFSET                                                        1
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_F_OFFSET_MOD8                                                      1
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_F_OFFSET_MOD16                                                     1
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_F_OFFSET                                                            16
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_F_WIDTH                                                             1
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_OFFSET                                                              5
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_WORD_OFFSET                                                         1
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_F_OFFSET_MOD8                                                       0
#define DHD_TX_POST_DESCRIPTOR_CWI32_COPY_F_OFFSET_MOD16                                                      0
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_F_OFFSET                                                        0
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_F_WIDTH                                                         16
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_OFFSET                                                          6
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_WORD_OFFSET                                                     1
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_F_OFFSET                                               0
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_F_WIDTH                                                32
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_OFFSET                                                 8
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WORD_OFFSET                                            2
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_F_OFFSET                                              0
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_F_WIDTH                                               32
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_OFFSET                                                12
#define DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_WORD_OFFSET                                           3
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_OFFSET                                                      16
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_WORD_OFFSET                                                 4
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_OFFSET                                                      20
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_WORD_OFFSET                                                 5
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_F_OFFSET                                                    0
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_F_WIDTH                                                     32
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_OFFSET                                                      24
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_WORD_OFFSET                                                 6
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_F_OFFSET                                                    16
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_F_WIDTH                                                     16
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_OFFSET                                                      28
#define DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_WORD_OFFSET                                                 7
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_F_OFFSET                                                 4
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_F_WIDTH                                                  12
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_OFFSET                                                   30
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_WORD_OFFSET                                              7
#define DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_F_OFFSET_MOD16                                           4
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_F_OFFSET                                                            0
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_F_WIDTH                                                             4
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_OFFSET                                                              31
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_WORD_OFFSET                                                         7
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_F_OFFSET_MOD8                                                       0
#define DHD_TX_POST_DESCRIPTOR_CWI32_INFO_F_OFFSET_MOD16                                                      0

/* >>>DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT */
typedef union
{
    uint32_t word_32[8];
    uint64_t dword_64[4];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	request_id        	;
        uint32_t	prio              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	if_id             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flags             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	copy              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	data_len          	;
        uint32_t	data_buf_addr_low 	;
        uint32_t	data_buf_addr_high	;
        uint32_t	tx_eth_hdr_0      	;
        uint32_t	tx_eth_hdr_1      	;
        uint32_t	tx_eth_hdr_2      	;
        uint16_t	tx_eth_hdr_3      	;
        uint32_t	flowid_override   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	info              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
#else
        uint32_t	request_id        	;
        uint16_t	data_len          	;
        uint32_t	copy              	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flags             	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	if_id             	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	prio              	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	data_buf_addr_low 	;
        uint32_t	data_buf_addr_high	;
        uint32_t	tx_eth_hdr_0      	;
        uint32_t	tx_eth_hdr_1      	;
        uint32_t	tx_eth_hdr_2      	;
        uint32_t	info              	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flowid_override   	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint16_t	tx_eth_hdr_3      	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT;

#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT), (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT), (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_READ(r, p)                         MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WRITE(v, p)                        MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_L_READ( wv )                       FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_REQUEST_ID_L_WRITE( v, wv )                   FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 4, 5, 3, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 4, 5, 3, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 4, 5, 3, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 4, 5, 3, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_L_READ( wv )                             FIELD_GET( wv, 29, 3 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_PRIO_L_WRITE( v, wv )                         FIELD_SET( v, 29, 3, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 4, 0, 5, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 4, 0, 5, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 4, 0, 5, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 4, 0, 5, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_L_READ( wv )                            FIELD_GET( wv, 24, 5 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_IF_ID_L_WRITE( v, wv )                        FIELD_SET( v, 24, 5, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_READ_G(r, g, idx)                       GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 5, 1, 7, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_WRITE_G(v, g, idx)                      GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 5, 1, 7, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_READ(r, p)                              FIELD_MREAD_8((uint8_t *)(p) + 5, 1, 7, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_WRITE(v, p)                             FIELD_MWRITE_8((uint8_t *)(p) + 5, 1, 7, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_L_READ( wv )                            FIELD_GET( wv, 17, 7 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLAGS_L_WRITE( v, wv )                        FIELD_SET( v, 17, 7, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 5, 0, 1, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 5, 0, 1, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 5, 0, 1, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 5, 0, 1, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_L_READ( wv )                             FIELD_GET( wv, 16, 1 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_COPY_L_WRITE( v, wv )                         FIELD_SET( v, 16, 1, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_READ_G(r, g, idx)                    GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 6, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_WRITE_G(v, g, idx)                   GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 6, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_READ(r, p)                           MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_WRITE(v, p)                          MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_L_READ( wv )                         FIELD_GET( wv, 0, 16 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_LEN_L_WRITE( v, wv )                     FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 8, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 8, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 12, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 12, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_READ(r, p)                 MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_HIGH_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 16, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 16, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_READ(r, p)                       MREAD_32((uint8_t *)(p) + 16, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 16, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_L_READ( wv )                     FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_0_L_WRITE( v, wv )                 FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 20, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 20, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_READ(r, p)                       MREAD_32((uint8_t *)(p) + 20, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 20, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_L_READ( wv )                     FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_1_L_WRITE( v, wv )                 FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_READ_G(r, g, idx)                GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 24, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_WRITE_G(v, g, idx)               GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 24, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_READ(r, p)                       MREAD_32((uint8_t *)(p) + 24, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_WRITE(v, p)                      MWRITE_32((uint8_t *)(p) + 24, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_L_READ( wv )                     FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_2_L_WRITE( v, wv )                 FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_READ_G(r, g, idx)                GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 28, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_WRITE_G(v, g, idx)               GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 28, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_READ(r, p)                       MREAD_16((uint8_t *)(p) + 28, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_WRITE(v, p)                      MWRITE_16((uint8_t *)(p) + 28, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_L_READ( wv )                     FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_TX_ETH_HDR_3_L_WRITE( v, wv )                 FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 30, 4, 12, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 30, 4, 12, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_READ(r, p)                    FIELD_MREAD_16((uint8_t *)(p) + 30, 4, 12, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)(p) + 30, 4, 12, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_L_READ( wv )                  FIELD_GET( wv, 4, 12 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_FLOWID_OVERRIDE_L_WRITE( v, wv )              FIELD_SET( v, 4, 12, wv )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_READ_G(r, g, idx)                        GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 31, 0, 4, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_WRITE_G(v, g, idx)                       GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT) + 31, 0, 4, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_READ(r, p)                               FIELD_MREAD_8((uint8_t *)(p) + 31, 0, 4, (r))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_WRITE(v, p)                              FIELD_MWRITE_8((uint8_t *)(p) + 31, 0, 4, (v))
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_L_READ( wv )                             FIELD_GET( wv, 0, 4 )
#define RDD_DHD_TX_POST_DESCRIPTOR_CWI32_INFO_L_WRITE( v, wv )                         FIELD_SET( v, 0, 4, wv )
/* <<<DHD_TX_POST_DESCRIPTOR_CWI32_STRUCT */

/* <<<RDD_DHD_TX_POST_DESCRIPTOR_CWI32 */


/* >>>RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32 */
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_F_OFFSET                                                      0
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_F_WIDTH                                                       32
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_OFFSET                                  0
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_OFFSET                                                        0
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WORD_OFFSET                                                   0
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_F_OFFSET                                                    16
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_F_WIDTH                                                     16
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_OFFSET                                                      4
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_WORD_OFFSET                                                 1
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_OFFSET                                                           8
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_WIDTH                                                            8
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_OFFSET                                                             6
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WORD_OFFSET                                                        1
#define DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_OFFSET_MOD16                                                     8

/* >>>DHD_TX_COMPLETE_DESCRIPTOR_CWI32_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	request_id  	;
        uint16_t	flow_ring_id	;
        uint8_t	if_id       	;
        uint8_t	reserved    	;
#else
        uint32_t	request_id  	;
        uint8_t	reserved    	;
        uint8_t	if_id       	;
        uint16_t	flow_ring_id	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_TX_COMPLETE_DESCRIPTOR_CWI32_STRUCT;

#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_READ_G(r, g, idx)            GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_CWI32_STRUCT), (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WRITE_G(v, g, idx)           GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_CWI32_STRUCT), (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_READ(r, p)                   MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WRITE(v, p)                  MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_L_READ( wv )                 FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_L_WRITE( v, wv )             FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_READ_G(r, g, idx)          GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_CWI32_STRUCT) + 4, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_WRITE_G(v, g, idx)         GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_CWI32_STRUCT) + 4, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_READ(r, p)                 MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_WRITE(v, p)                MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_L_READ( wv )               FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_FLOW_RING_ID_L_WRITE( v, wv )           FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_READ_G(r, g, idx)                 GROUP_MREAD_8((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_CWI32_STRUCT) + 6, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WRITE_G(v, g, idx)                GROUP_MWRITE_8((g), (idx)*sizeof(DHD_TX_COMPLETE_DESCRIPTOR_CWI32_STRUCT) + 6, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_READ(r, p)                        MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WRITE(v, p)                       MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_L_READ( wv )                      FIELD_GET( wv, 8, 8 )
#define RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_L_WRITE( v, wv )                  FIELD_SET( v, 8, 8, wv )
/* <<<DHD_TX_COMPLETE_DESCRIPTOR_CWI32_STRUCT */

/* <<<RDD_DHD_TX_COMPLETE_DESCRIPTOR_CWI32 */


/* >>>RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32 */
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_F_OFFSET                                                           29
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_F_WIDTH                                                            3
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_OFFSET                                  0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_OFFSET                                                             0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_WORD_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_F_OFFSET_MOD8                                                      5
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_F_OFFSET_MOD16                                                     13
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_OFFSET                                                           24
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_WIDTH                                                            5
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_OFFSET                                                             0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WORD_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_OFFSET_MOD8                                                      0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_F_OFFSET_MOD16                                                     8
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_F_OFFSET                                                     16
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_F_WIDTH                                                      8
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_OFFSET                                                       1
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_WORD_OFFSET                                                  0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_F_OFFSET_MOD16                                               0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_F_OFFSET                                                        0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_F_WIDTH                                                         16
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_OFFSET                                                          2
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_WORD_OFFSET                                                     0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_F_OFFSET                                                      0
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_F_WIDTH                                                       32
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_OFFSET                                                        4
#define DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WORD_OFFSET                                                   1

/* >>>DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	flags      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	if_id      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	data_offset	;
        uint16_t	data_len   	;
        uint32_t	request_id 	;
#else
        uint16_t	data_len   	;
        uint8_t	data_offset	;
        uint32_t	if_id      	:5	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	flags      	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	request_id 	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT;

#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT), 5, 3, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT), 5, 3, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 5, 3, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 5, 3, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_L_READ( wv )                     FIELD_GET( wv, 29, 3 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_FLAGS_L_WRITE( v, wv )                 FIELD_SET( v, 29, 3, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_READ_G(r, g, idx)                GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT), 0, 5, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WRITE_G(v, g, idx)               GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT), 0, 5, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_READ(r, p)                       FIELD_MREAD_8((uint8_t *)(p), 0, 5, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_WRITE(v, p)                      FIELD_MWRITE_8((uint8_t *)(p), 0, 5, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_L_READ( wv )                     FIELD_GET( wv, 24, 5 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_IF_ID_L_WRITE( v, wv )                 FIELD_SET( v, 24, 5, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT) + 1, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT) + 1, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_READ(r, p)                 MREAD_8((uint8_t *)(p) + 1, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 1, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_L_READ( wv )               FIELD_GET( wv, 16, 8 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_OFFSET_L_WRITE( v, wv )           FIELD_SET( v, 16, 8, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_READ_G(r, g, idx)             GROUP_MREAD_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT) + 2, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_WRITE_G(v, g, idx)            GROUP_MWRITE_16((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT) + 2, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_READ(r, p)                    MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_WRITE(v, p)                   MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_L_READ( wv )                  FIELD_GET( wv, 0, 16 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_DATA_LEN_L_WRITE( v, wv )              FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT) + 4, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT) + 4, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_READ(r, p)                  MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32_REQUEST_ID_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
/* <<<DHD_RX_COMPLETE_DESCRIPTOR_CWI32_STRUCT */

/* <<<RDD_DHD_RX_COMPLETE_DESCRIPTOR_CWI32 */


/* >>>RDD_DHD_RX_POST_DESCRIPTOR_CWI32 */
#define DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_F_OFFSET                                                      0
#define DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_F_WIDTH                                                       32
#define DHD_RX_POST_DESCRIPTOR_CWI32_DHD_RX_POST_DESCRIPTOR_CWI32_OFFSET                                      0
#define DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_OFFSET                                                        0
#define DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WORD_OFFSET                                                   0
#define DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_F_OFFSET                                               0
#define DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_F_WIDTH                                                32
#define DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_OFFSET                                                 4
#define DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WORD_OFFSET                                            1

/* >>>DHD_RX_POST_DESCRIPTOR_CWI32_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
        uint32_t	request_id       	;
        uint32_t	data_buf_addr_low	;
#else
        uint32_t	request_id       	;
        uint32_t	data_buf_addr_low	;
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_RX_POST_DESCRIPTOR_CWI32_STRUCT;

#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_READ_G(r, g, idx)                 GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_CWI32_STRUCT), (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WRITE_G(v, g, idx)                GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_CWI32_STRUCT), (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_READ(r, p)                        MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_WRITE(v, p)                       MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_L_READ( wv )                      FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_REQUEST_ID_L_WRITE( v, wv )                  FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_READ_G(r, g, idx)          GROUP_MREAD_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_CWI32_STRUCT) + 4, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WRITE_G(v, g, idx)         GROUP_MWRITE_32((g), (idx)*sizeof(DHD_RX_POST_DESCRIPTOR_CWI32_STRUCT) + 4, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_READ(r, p)                 MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_WRITE(v, p)                MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_L_READ( wv )               FIELD_GET( wv, 0, 32 )
#define RDD_DHD_RX_POST_DESCRIPTOR_CWI32_DATA_BUF_ADDR_LOW_L_WRITE( v, wv )           FIELD_SET( v, 0, 32, wv )
/* <<<DHD_RX_POST_DESCRIPTOR_CWI32_STRUCT */

/* <<<RDD_DHD_RX_POST_DESCRIPTOR_CWI32 */


/* >>>RDD_DHD_REQUEST_ID */
#define DHD_REQUEST_ID_BUFFER_TYPE_F_OFFSET                                                     24
#define DHD_REQUEST_ID_BUFFER_TYPE_F_WIDTH                                                      2
#define DHD_REQUEST_ID_BUFFER_TYPE_OFFSET                                                       0
#define DHD_REQUEST_ID_BUFFER_TYPE_WORD_OFFSET                                                  0
#define DHD_REQUEST_ID_BUFFER_TYPE_F_OFFSET_MOD8                                                0
#define DHD_REQUEST_ID_BUFFER_TYPE_F_OFFSET_MOD16                                               8
#define DHD_REQUEST_ID_WAKEUP_REQ_F_OFFSET                                                      23
#define DHD_REQUEST_ID_WAKEUP_REQ_F_WIDTH                                                       1
#define DHD_REQUEST_ID_WAKEUP_REQ_OFFSET                                                        1
#define DHD_REQUEST_ID_WAKEUP_REQ_WORD_OFFSET                                                   0
#define DHD_REQUEST_ID_WAKEUP_REQ_F_OFFSET_MOD8                                                 7
#define DHD_REQUEST_ID_WAKEUP_REQ_F_OFFSET_MOD16                                                7
#define DHD_REQUEST_ID_BUFFER_PRIO_F_OFFSET                                                     22
#define DHD_REQUEST_ID_BUFFER_PRIO_F_WIDTH                                                      1
#define DHD_REQUEST_ID_BUFFER_PRIO_OFFSET                                                       1
#define DHD_REQUEST_ID_BUFFER_PRIO_WORD_OFFSET                                                  0
#define DHD_REQUEST_ID_BUFFER_PRIO_F_OFFSET_MOD8                                                6
#define DHD_REQUEST_ID_BUFFER_PRIO_F_OFFSET_MOD16                                               6
#define DHD_REQUEST_ID_NUM_OF_TOKENS_F_OFFSET                                                   18
#define DHD_REQUEST_ID_NUM_OF_TOKENS_F_WIDTH                                                    4
#define DHD_REQUEST_ID_NUM_OF_TOKENS_OFFSET                                                     1
#define DHD_REQUEST_ID_NUM_OF_TOKENS_WORD_OFFSET                                                0
#define DHD_REQUEST_ID_NUM_OF_TOKENS_F_OFFSET_MOD8                                              2
#define DHD_REQUEST_ID_NUM_OF_TOKENS_F_OFFSET_MOD16                                             2
#define DHD_REQUEST_ID_PACKET_BN0_OR_SKB_F_OFFSET                                               0
#define DHD_REQUEST_ID_PACKET_BN0_OR_SKB_F_WIDTH                                                18
#define DHD_REQUEST_ID_PACKET_BN0_OR_SKB_OFFSET                                                 0
#define DHD_REQUEST_ID_PACKET_BN0_OR_SKB_WORD_OFFSET                                            0

/* >>>DHD_REQUEST_ID_STRUCT */
typedef union
{
    uint32_t word_32[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	reserved0    	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_type  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup_req   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_prio  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	num_of_tokens	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_bn0_or_skb	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_reserved0  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_buffer_type	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_wakeup_req 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_buffer_prio	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_num_of_tokens	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_bn0             	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of packet_bn0_or_skb union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_reserved0  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_buffer_type	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_wakeup_req 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_buffer_prio	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_num_of_tokens	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3              	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of packet_bn0_or_skb union */
        uint32_t	skb                    	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of packet_bn0_or_skb union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_bn0_or_skb	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* This is a field union */
        uint32_t	num_of_tokens	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_prio  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	wakeup_req   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_type  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved0    	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	packet_bn0             	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of packet_bn0_or_skb union */
        uint32_t	reservedSU1_num_of_tokens	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_buffer_prio	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_wakeup_req 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_buffer_type	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved0  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	skb                    	:12	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of packet_bn0_or_skb union */
        uint32_t	reserved3              	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of packet_bn0_or_skb union */
        uint32_t	reservedSU2_num_of_tokens	:4	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_buffer_prio	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_wakeup_req 	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_buffer_type	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved0  	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) DHD_REQUEST_ID_STRUCT;

#define RDD_DHD_REQUEST_ID_BUFFER_TYPE_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT), 0, 2, (r))
#define RDD_DHD_REQUEST_ID_BUFFER_TYPE_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT), 0, 2, (v))
#define RDD_DHD_REQUEST_ID_BUFFER_TYPE_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p), 0, 2, (r))
#define RDD_DHD_REQUEST_ID_BUFFER_TYPE_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p), 0, 2, (v))
#define RDD_DHD_REQUEST_ID_WAKEUP_REQ_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 1, 7, 1, (r))
#define RDD_DHD_REQUEST_ID_WAKEUP_REQ_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 1, 7, 1, (v))
#define RDD_DHD_REQUEST_ID_WAKEUP_REQ_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 1, 7, 1, (r))
#define RDD_DHD_REQUEST_ID_WAKEUP_REQ_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 1, 7, 1, (v))
#define RDD_DHD_REQUEST_ID_BUFFER_PRIO_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 1, 6, 1, (r))
#define RDD_DHD_REQUEST_ID_BUFFER_PRIO_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 1, 6, 1, (v))
#define RDD_DHD_REQUEST_ID_BUFFER_PRIO_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 1, 6, 1, (r))
#define RDD_DHD_REQUEST_ID_BUFFER_PRIO_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 1, 6, 1, (v))
#define RDD_DHD_REQUEST_ID_NUM_OF_TOKENS_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 1, 2, 4, (r))
#define RDD_DHD_REQUEST_ID_NUM_OF_TOKENS_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 1, 2, 4, (v))
#define RDD_DHD_REQUEST_ID_NUM_OF_TOKENS_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 1, 2, 4, (r))
#define RDD_DHD_REQUEST_ID_NUM_OF_TOKENS_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 1, 2, 4, (v))
#define RDD_DHD_REQUEST_ID_PACKET_BN0_OR_SKB_READ_G(r, g, idx)      GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 0, 0, 18, (r))
#define RDD_DHD_REQUEST_ID_PACKET_BN0_OR_SKB_WRITE_G(v, g, idx)     GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 0, 0, 18, (v))
#define RDD_DHD_REQUEST_ID_PACKET_BN0_OR_SKB_READ(r, p)             FIELD_MREAD_32((uint8_t *)(p) + 0, 0, 18, (r))
#define RDD_DHD_REQUEST_ID_PACKET_BN0_OR_SKB_WRITE(v, p)            FIELD_MWRITE_32((uint8_t *)(p) + 0, 0, 18, (v))
#define RDD_DHD_REQUEST_ID_PACKET_BN0_READ_G(r, g, idx)             GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 0, 0, 18, (r))
#define RDD_DHD_REQUEST_ID_PACKET_BN0_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 0, 0, 18, (v))
#define RDD_DHD_REQUEST_ID_PACKET_BN0_READ(r, p)                    FIELD_MREAD_32((uint8_t *)(p) + 0, 0, 18, (r))
#define RDD_DHD_REQUEST_ID_PACKET_BN0_WRITE(v, p)                   FIELD_MWRITE_32((uint8_t *)(p) + 0, 0, 18, (v))
#define RDD_DHD_REQUEST_ID_SKB_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 2, 0, 12, (r))
#define RDD_DHD_REQUEST_ID_SKB_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_REQUEST_ID_STRUCT) + 2, 0, 12, (v))
#define RDD_DHD_REQUEST_ID_SKB_READ(r, p)                           FIELD_MREAD_16((uint8_t *)(p) + 2, 0, 12, (r))
#define RDD_DHD_REQUEST_ID_SKB_WRITE(v, p)                          FIELD_MWRITE_16((uint8_t *)(p) + 2, 0, 12, (v))
/* <<<DHD_REQUEST_ID_STRUCT */

/* <<<RDD_DHD_REQUEST_ID */


/* >>>RDD_DHD_PD_INFO */
#define DHD_PD_INFO_PACKET_VALID_F_OFFSET                                                    31
#define DHD_PD_INFO_PACKET_VALID_F_WIDTH                                                     1
#define DHD_PD_INFO_DHD_PD_INFO_OFFSET                                                       0
#define DHD_PD_INFO_PACKET_VALID_OFFSET                                                      0
#define DHD_PD_INFO_PACKET_VALID_WORD_OFFSET                                                 0
#define DHD_PD_INFO_PACKET_VALID_F_OFFSET_MOD8                                               7
#define DHD_PD_INFO_PACKET_VALID_F_OFFSET_MOD16                                              15
#define DHD_PD_INFO_PACKET_ABS_ADDR_F_OFFSET                                                 30
#define DHD_PD_INFO_PACKET_ABS_ADDR_F_WIDTH                                                  1
#define DHD_PD_INFO_PACKET_ABS_ADDR_OFFSET                                                   0
#define DHD_PD_INFO_PACKET_ABS_ADDR_WORD_OFFSET                                              0
#define DHD_PD_INFO_PACKET_ABS_ADDR_F_OFFSET_MOD8                                            6
#define DHD_PD_INFO_PACKET_ABS_ADDR_F_OFFSET_MOD16                                           14
#define DHD_PD_INFO_PACKET_DATA_LEN_F_OFFSET                                                 16
#define DHD_PD_INFO_PACKET_DATA_LEN_F_WIDTH                                                  14
#define DHD_PD_INFO_PACKET_DATA_LEN_OFFSET                                                   0
#define DHD_PD_INFO_PACKET_DATA_LEN_WORD_OFFSET                                              0
#define DHD_PD_INFO_PACKET_DATA_LEN_F_OFFSET_MOD16                                           0
#define DHD_PD_INFO_PACKET_PRIO_F_OFFSET                                                     13
#define DHD_PD_INFO_PACKET_PRIO_F_WIDTH                                                      3
#define DHD_PD_INFO_PACKET_PRIO_OFFSET                                                       2
#define DHD_PD_INFO_PACKET_PRIO_WORD_OFFSET                                                  0
#define DHD_PD_INFO_PACKET_PRIO_F_OFFSET_MOD8                                                5
#define DHD_PD_INFO_PACKET_PRIO_F_OFFSET_MOD16                                               13
#define DHD_PD_INFO_BUFFER_PRIO_F_OFFSET                                                     12
#define DHD_PD_INFO_BUFFER_PRIO_F_WIDTH                                                      1
#define DHD_PD_INFO_BUFFER_PRIO_OFFSET                                                       2
#define DHD_PD_INFO_BUFFER_PRIO_WORD_OFFSET                                                  0
#define DHD_PD_INFO_BUFFER_PRIO_F_OFFSET_MOD8                                                4
#define DHD_PD_INFO_BUFFER_PRIO_F_OFFSET_MOD16                                               12
#define DHD_PD_INFO_PACKET_L4_PROTOCOL_F_OFFSET                                              8
#define DHD_PD_INFO_PACKET_L4_PROTOCOL_F_WIDTH                                               2
#define DHD_PD_INFO_PACKET_L4_PROTOCOL_OFFSET                                                2
#define DHD_PD_INFO_PACKET_L4_PROTOCOL_WORD_OFFSET                                           0
#define DHD_PD_INFO_PACKET_L4_PROTOCOL_F_OFFSET_MOD8                                         0
#define DHD_PD_INFO_PACKET_L4_PROTOCOL_F_OFFSET_MOD16                                        8
#define DHD_PD_INFO_RSV_ADDRESS_HIGH_F_OFFSET                                                0
#define DHD_PD_INFO_RSV_ADDRESS_HIGH_F_WIDTH                                                 8
#define DHD_PD_INFO_RSV_ADDRESS_HIGH_OFFSET                                                  3
#define DHD_PD_INFO_RSV_ADDRESS_HIGH_WORD_OFFSET                                             0
#define DHD_PD_INFO_RSV_ADDRESS_HIGH_F_OFFSET_MOD16                                          0
#define DHD_PD_INFO_FPM_ADDRESS_LOW_F_OFFSET                                                 0
#define DHD_PD_INFO_FPM_ADDRESS_LOW_F_WIDTH                                                  32
#define DHD_PD_INFO_FPM_ADDRESS_LOW_OFFSET                                                   4
#define DHD_PD_INFO_FPM_ADDRESS_LOW_WORD_OFFSET                                              1

/* >>>DHD_PD_INFO_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_abs_addr     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_data_len     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_prio         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_prio         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_l4_protocol  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	rsv_address_high    	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_packet_valid      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_abs_addr   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_data_len   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_prio       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_buffer_prio       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved2         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_l4_protocol	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved3                     	; /* Member of rsv_address_high union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_packet_valid      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_abs_addr   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_data_len   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_prio       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_buffer_prio       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved2         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_l4_protocol	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	packet_data_ptr_high          	; /* Member of rsv_address_high union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	fpm_address_low     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	packet_fpm_pool               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_packet_sop             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	reserved4                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_bn0                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	packet_data_ptr_low           	; /* Member of fpm_address_low union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	rsv_address_high    	; /* This is a field union */
        uint32_t	packet_l4_protocol  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved2           	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	buffer_prio         	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_prio         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_data_len     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_abs_addr     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reserved3                     	; /* Member of rsv_address_high union */
        uint32_t	reservedSU1_packet_l4_protocol	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved2         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_buffer_prio       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_prio       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_data_len   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_abs_addr   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_valid      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint8_t	packet_data_ptr_high          	; /* Member of rsv_address_high union */
        uint32_t	reservedSU2_packet_l4_protocol	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved2         	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_buffer_prio       	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_prio       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_data_len   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_abs_addr   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_valid      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	fpm_address_low     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	packet_bn0                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	reserved4                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_packet_sop             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_fpm_pool               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	packet_data_ptr_low           	; /* Member of fpm_address_low union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_PD_INFO_STRUCT;

#define RDD_DHD_PD_INFO_PACKET_VALID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT), 7, 1, (r))
#define RDD_DHD_PD_INFO_PACKET_VALID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT), 7, 1, (v))
#define RDD_DHD_PD_INFO_PACKET_VALID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p), 7, 1, (r))
#define RDD_DHD_PD_INFO_PACKET_VALID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p), 7, 1, (v))
#define RDD_DHD_PD_INFO_PACKET_ABS_ADDR_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT), 6, 1, (r))
#define RDD_DHD_PD_INFO_PACKET_ABS_ADDR_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT), 6, 1, (v))
#define RDD_DHD_PD_INFO_PACKET_ABS_ADDR_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p), 6, 1, (r))
#define RDD_DHD_PD_INFO_PACKET_ABS_ADDR_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p), 6, 1, (v))
#define RDD_DHD_PD_INFO_PACKET_DATA_LEN_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PD_INFO_STRUCT), 0, 14, (r))
#define RDD_DHD_PD_INFO_PACKET_DATA_LEN_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PD_INFO_STRUCT), 0, 14, (v))
#define RDD_DHD_PD_INFO_PACKET_DATA_LEN_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p), 0, 14, (r))
#define RDD_DHD_PD_INFO_PACKET_DATA_LEN_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p), 0, 14, (v))
#define RDD_DHD_PD_INFO_PACKET_PRIO_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 2, 5, 3, (r))
#define RDD_DHD_PD_INFO_PACKET_PRIO_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 2, 5, 3, (v))
#define RDD_DHD_PD_INFO_PACKET_PRIO_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 2, 5, 3, (r))
#define RDD_DHD_PD_INFO_PACKET_PRIO_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 2, 5, 3, (v))
#define RDD_DHD_PD_INFO_BUFFER_PRIO_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 2, 4, 1, (r))
#define RDD_DHD_PD_INFO_BUFFER_PRIO_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 2, 4, 1, (v))
#define RDD_DHD_PD_INFO_BUFFER_PRIO_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 2, 4, 1, (r))
#define RDD_DHD_PD_INFO_BUFFER_PRIO_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 2, 4, 1, (v))
#define RDD_DHD_PD_INFO_PACKET_L4_PROTOCOL_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 2, 0, 2, (r))
#define RDD_DHD_PD_INFO_PACKET_L4_PROTOCOL_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 2, 0, 2, (v))
#define RDD_DHD_PD_INFO_PACKET_L4_PROTOCOL_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 2, 0, 2, (r))
#define RDD_DHD_PD_INFO_PACKET_L4_PROTOCOL_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 2, 0, 2, (v))
#define RDD_DHD_PD_INFO_RSV_ADDRESS_HIGH_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 3, (r))
#define RDD_DHD_PD_INFO_RSV_ADDRESS_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 3, (v))
#define RDD_DHD_PD_INFO_RSV_ADDRESS_HIGH_READ(r, p)                     MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_DHD_PD_INFO_RSV_ADDRESS_HIGH_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_DHD_PD_INFO_PACKET_DATA_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 3, (r))
#define RDD_DHD_PD_INFO_PACKET_DATA_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 3, (v))
#define RDD_DHD_PD_INFO_PACKET_DATA_PTR_HIGH_READ(r, p)                 MREAD_8((uint8_t *)(p) + 3, (r))
#define RDD_DHD_PD_INFO_PACKET_DATA_PTR_HIGH_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 3, (v))
#define RDD_DHD_PD_INFO_FPM_ADDRESS_LOW_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 4, (r))
#define RDD_DHD_PD_INFO_FPM_ADDRESS_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 4, (v))
#define RDD_DHD_PD_INFO_FPM_ADDRESS_LOW_READ(r, p)                      MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_PD_INFO_FPM_ADDRESS_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_PD_INFO_PACKET_FPM_POOL_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 4, 6, 2, (r))
#define RDD_DHD_PD_INFO_PACKET_FPM_POOL_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 4, 6, 2, (v))
#define RDD_DHD_PD_INFO_PACKET_FPM_POOL_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 4, 6, 2, (r))
#define RDD_DHD_PD_INFO_PACKET_FPM_POOL_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 4, 6, 2, (v))
#define RDD_DHD_PD_INFO_PACKET_PACKET_SOP_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 4, 3, 11, (r))
#define RDD_DHD_PD_INFO_PACKET_PACKET_SOP_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 4, 3, 11, (v))
#define RDD_DHD_PD_INFO_PACKET_PACKET_SOP_READ(r, p)                    FIELD_MREAD_16((uint8_t *)(p) + 4, 3, 11, (r))
#define RDD_DHD_PD_INFO_PACKET_PACKET_SOP_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)(p) + 4, 3, 11, (v))
#define RDD_DHD_PD_INFO_PACKET_BN0_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 4, 0, 18, (r))
#define RDD_DHD_PD_INFO_PACKET_BN0_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 4, 0, 18, (v))
#define RDD_DHD_PD_INFO_PACKET_BN0_READ(r, p)                           FIELD_MREAD_32((uint8_t *)(p) + 4, 0, 18, (r))
#define RDD_DHD_PD_INFO_PACKET_BN0_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)(p) + 4, 0, 18, (v))
#define RDD_DHD_PD_INFO_PACKET_DATA_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 4, (r))
#define RDD_DHD_PD_INFO_PACKET_DATA_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_PD_INFO_STRUCT) + 4, (v))
#define RDD_DHD_PD_INFO_PACKET_DATA_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_PD_INFO_PACKET_DATA_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 4, (v))
/* <<<DHD_PD_INFO_STRUCT */

/* <<<RDD_DHD_PD_INFO */


/* >>>RDD_DHD_POST_COMMON_RADIO_ENTRY */
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_F_OFFSET                                    0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_F_WIDTH                                     32
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_POST_COMMON_RADIO_ENTRY_OFFSET                                       0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_OFFSET                                      0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_LOW_WORD_OFFSET                                 0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_F_OFFSET                                   0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_F_WIDTH                                    32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_OFFSET                                     4
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_MGMT_FR_BASE_PTR_HIGH_WORD_OFFSET                                1
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_F_OFFSET                                  0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_F_WIDTH                                   32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_OFFSET                                    8
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_LOW_WORD_OFFSET                               2
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_F_OFFSET                                 0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_F_WIDTH                                  32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_OFFSET                                   12
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_WR_IDX_BASE_PTR_HIGH_WORD_OFFSET                              3
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_F_OFFSET                                  0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_F_WIDTH                                   32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_OFFSET                                    16
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_LOW_WORD_OFFSET                               4
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_F_OFFSET                                 0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_F_WIDTH                                  32
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_OFFSET                                   20
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_FR_RD_IDX_BASE_PTR_HIGH_WORD_OFFSET                              5
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_F_OFFSET                                      0
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_F_WIDTH                                       32
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_OFFSET                                        24
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_LOW_WORD_OFFSET                                   6
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_F_OFFSET                                     0
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_F_WIDTH                                      32
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_OFFSET                                       28
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_INDEX_FIFO_BASE_HIGH_WORD_OFFSET                                  7
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_F_OFFSET                                                0
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_F_WIDTH                                                 32
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_OFFSET                                                  32
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WORD_OFFSET                                             8
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_F_OFFSET                                               0
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_F_WIDTH                                                32
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_OFFSET                                                 36
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WORD_OFFSET                                            9
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_F_OFFSET                                                  16
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_F_WIDTH                                                   16
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_OFFSET                                                    40
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_WR_IDX_WORD_OFFSET                                               10
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_QD_F_OFFSET                                                      0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_QD_F_WIDTH                                                       16
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_QD_OFFSET                                                        42
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_QD_WORD_OFFSET                                                   10
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_F_OFFSET                                                  16
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_F_WIDTH                                                   16
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_OFFSET                                                    44
#define DHD_POST_COMMON_RADIO_ENTRY_TX_POST_RD_IDX_WORD_OFFSET                                               11
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_F_OFFSET                                              0
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_F_WIDTH                                               16
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_OFFSET                                                46
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_WORD_OFFSET                                           11
#define DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_F_OFFSET                                                        0
#define DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_F_WIDTH                                                         32
#define DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_OFFSET                                                          48
#define DHD_POST_COMMON_RADIO_ENTRY_CAM_RSLT_WORD_OFFSET                                                     12
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_F_OFFSET                                              31
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_F_WIDTH                                               1
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_OFFSET                                                52
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_WORD_OFFSET                                           13
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_F_OFFSET_MOD8                                         7
#define DHD_POST_COMMON_RADIO_ENTRY_ADD_LLCSNAP_HEADER_F_OFFSET_MOD16                                        15
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_F_OFFSET                                       30
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_F_WIDTH                                        1
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_OFFSET                                         52
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_WORD_OFFSET                                    13
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_F_OFFSET_MOD8                                  6
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_CPU_TX_F_OFFSET_MOD16                                 14
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_F_OFFSET                                  29
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_F_WIDTH                                   1
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_OFFSET                                    52
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_WORD_OFFSET                               13
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_F_OFFSET_MOD8                             5
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_NON_UDP_TCP_F_OFFSET_MOD16                            13
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET                                                26
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_WIDTH                                                 3
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_OFFSET                                                  52
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WORD_OFFSET                                             13
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET_MOD8                                           2
#define DHD_POST_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET_MOD16                                          10
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET                                                     25
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_WIDTH                                                      1
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_OFFSET                                                       52
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WORD_OFFSET                                                  13
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET_MOD8                                                1
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET_MOD16                                               9
#define DHD_POST_COMMON_RADIO_ENTRY_CODEL_ACTIVE_F_OFFSET                                                    24
#define DHD_POST_COMMON_RADIO_ENTRY_CODEL_ACTIVE_F_WIDTH                                                     1
#define DHD_POST_COMMON_RADIO_ENTRY_CODEL_ACTIVE_OFFSET                                                      52
#define DHD_POST_COMMON_RADIO_ENTRY_CODEL_ACTIVE_WORD_OFFSET                                                 13
#define DHD_POST_COMMON_RADIO_ENTRY_CODEL_ACTIVE_F_OFFSET_MOD8                                               0
#define DHD_POST_COMMON_RADIO_ENTRY_CODEL_ACTIVE_F_OFFSET_MOD16                                              8
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_F_OFFSET                                   16
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_F_WIDTH                                    8
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_OFFSET                                     53
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_WORD_OFFSET                                13
#define DHD_POST_COMMON_RADIO_ENTRY_AGGREGATION_BYPASS_TCP_PKTLEN_F_OFFSET_MOD16                             0
#define DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_F_OFFSET                                        8
#define DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_F_WIDTH                                         8
#define DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_OFFSET                                          54
#define DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_WORD_OFFSET                                     13
#define DHD_POST_COMMON_RADIO_ENTRY_CACHE_CTX_NEXT_WRITE_IDX_F_OFFSET_MOD16                                  8
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_F_OFFSET                                                0
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_F_WIDTH                                                 8
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_OFFSET                                                  55
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_WORD_OFFSET                                             13
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_CACHE_IDX_F_OFFSET_MOD16                                          0
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_OFFSET                                     56
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_WORD_OFFSET                                14
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_THRESHOLDS_F_OFFSET_MOD16                             8
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_OFFSET                                       60
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_WORD_OFFSET                                  15
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUTS_F_OFFSET_MOD16                               8
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_OFFSET                                  64
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_WORD_OFFSET                             16
#define DHD_POST_COMMON_RADIO_ENTRY_PER_AC_AGGREGATION_TIMEOUT_CNTRS_F_OFFSET_MOD16                          8
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_F_OFFSET                                          0
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_F_WIDTH                                           32
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_OFFSET                                            68
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_VALUE_ADDRESS_WORD_OFFSET                                       17
#define DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_OFFSET                                                        72
#define DHD_POST_COMMON_RADIO_ENTRY_SCRATCHPAD_WORD_OFFSET                                                   18
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_F_OFFSET                                                   16
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_F_WIDTH                                                    16
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_OFFSET                                                     100
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_RD_IDX_WORD_OFFSET                                                25
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_F_OFFSET                                                   0
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_F_WIDTH                                                    16
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_OFFSET                                                     102
#define DHD_POST_COMMON_RADIO_ENTRY_BACKUP_WR_IDX_WORD_OFFSET                                                25
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_F_OFFSET                                                    31
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_F_WIDTH                                                     1
#define DHD_POST_COMMON_RADIO_ENTRY_DHD_PD_INFO_OFFSET                                                       104
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_OFFSET                                                      104
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_WORD_OFFSET                                                 26
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_F_OFFSET_MOD8                                               7
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_VALID_F_OFFSET_MOD16                                              15
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_F_OFFSET                                                 30
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_F_WIDTH                                                  1
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_OFFSET                                                   104
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_WORD_OFFSET                                              26
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_F_OFFSET_MOD8                                            6
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_ABS_ADDR_F_OFFSET_MOD16                                           14
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_F_OFFSET                                                 16
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_F_WIDTH                                                  14
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_OFFSET                                                   104
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_WORD_OFFSET                                              26
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_DATA_LEN_F_OFFSET_MOD16                                           0
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_F_OFFSET                                                     13
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_F_WIDTH                                                      3
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_OFFSET                                                       106
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_WORD_OFFSET                                                  26
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_F_OFFSET_MOD8                                                5
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_PRIO_F_OFFSET_MOD16                                               13
#define DHD_POST_COMMON_RADIO_ENTRY_BUFFER_PRIO_F_OFFSET                                                     12
#define DHD_POST_COMMON_RADIO_ENTRY_BUFFER_PRIO_F_WIDTH                                                      1
#define DHD_POST_COMMON_RADIO_ENTRY_BUFFER_PRIO_OFFSET                                                       106
#define DHD_POST_COMMON_RADIO_ENTRY_BUFFER_PRIO_WORD_OFFSET                                                  26
#define DHD_POST_COMMON_RADIO_ENTRY_BUFFER_PRIO_F_OFFSET_MOD8                                                4
#define DHD_POST_COMMON_RADIO_ENTRY_BUFFER_PRIO_F_OFFSET_MOD16                                               12
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET                                              8
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_F_WIDTH                                               2
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_OFFSET                                                106
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_WORD_OFFSET                                           26
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET_MOD8                                         0
#define DHD_POST_COMMON_RADIO_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET_MOD16                                        8
#define DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_F_OFFSET                                                0
#define DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_F_WIDTH                                                 8
#define DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_OFFSET                                                  107
#define DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_WORD_OFFSET                                             26
#define DHD_POST_COMMON_RADIO_ENTRY_RSV_ADDRESS_HIGH_F_OFFSET_MOD16                                          0
#define DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_F_OFFSET                                                 0
#define DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_F_WIDTH                                                  32
#define DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_OFFSET                                                   108
#define DHD_POST_COMMON_RADIO_ENTRY_FPM_ADDRESS_LOW_WORD_OFFSET                                              27
#define DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_F_OFFSET                                                      0
#define DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_F_WIDTH                                                       32
#define DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_OFFSET                                                        112
#define DHD_POST_COMMON_RADIO_ENTRY_REQUEST_ID_WORD_OFFSET                                                   28
#define DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_F_OFFSET                                           16
#define DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_F_WIDTH                                            16
#define DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_OFFSET                                             116
#define DHD_POST_COMMON_RADIO_ENTRY_AGGR_TIMER_SCRATCHPAD_WORD_OFFSET                                        29
#define DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_F_OFFSET                                                    8
#define DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_F_WIDTH                                                     8
#define DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_OFFSET                                                      118
#define DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_WORD_OFFSET                                                 29
#define DHD_POST_COMMON_RADIO_ENTRY_CPU_MSG_DONE_F_OFFSET_MOD16                                              8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_F_OFFSET                                            0
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_F_WIDTH                                             8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_OFFSET                                              119
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_WORD_OFFSET                                         29
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_MAX_COUNT_F_OFFSET_MOD16                                      0
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_OFFSET                                                 120
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_WORD_OFFSET                                            30
#define DHD_POST_COMMON_RADIO_ENTRY_DOORBELL_COUNTERS_F_OFFSET_MOD16                                         8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_F_OFFSET                                              16
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_F_WIDTH                                               8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_OFFSET                                                137
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_WORD_OFFSET                                           34
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_F_OFFSET_MOD16                                        0
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_F_OFFSET                                         8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_F_WIDTH                                          8
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_OFFSET                                           138
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_WORD_OFFSET                                      34
#define DHD_POST_COMMON_RADIO_ENTRY_COALESCING_TIMEOUT_CNTR_F_OFFSET_MOD16                                   8
#define DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_F_OFFSET                                                      0
#define DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_F_WIDTH                                                       8
#define DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_OFFSET                                                        139
#define DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_WORD_OFFSET                                                   34
#define DHD_POST_COMMON_RADIO_ENTRY_CUR_FRG_ID_F_OFFSET_MOD16                                                0
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_F_OFFSET                                                 31
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_F_WIDTH                                                  1
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_OFFSET                                                   140
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_WORD_OFFSET                                              35
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_F_OFFSET_MOD8                                            7
#define DHD_POST_COMMON_RADIO_ENTRY_TX_MIRRORING_EN_F_OFFSET_MOD16                                           15
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_F_OFFSET                                                       25
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_F_WIDTH                                                        6
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_OFFSET                                                         140
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_WORD_OFFSET                                                    35
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_F_OFFSET_MOD8                                                  1
#define DHD_POST_COMMON_RADIO_ENTRY_DST_VPORT_F_OFFSET_MOD16                                                 9
#define DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_F_OFFSET                                                       16
#define DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_F_WIDTH                                                        9
#define DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_OFFSET                                                         140
#define DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_WORD_OFFSET                                                    35
#define DHD_POST_COMMON_RADIO_ENTRY_DST_QUEUE_F_OFFSET_MOD16                                                 0
#define DHD_POST_COMMON_RADIO_ENTRY_CODEL_MAX_SEQ_DROPS_F_OFFSET                                             0
#define DHD_POST_COMMON_RADIO_ENTRY_CODEL_MAX_SEQ_DROPS_F_WIDTH                                              16
#define DHD_POST_COMMON_RADIO_ENTRY_CODEL_MAX_SEQ_DROPS_OFFSET                                               142
#define DHD_POST_COMMON_RADIO_ENTRY_CODEL_MAX_SEQ_DROPS_WORD_OFFSET                                          35
#define DHD_POST_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_F_OFFSET                                              24
#define DHD_POST_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_F_WIDTH                                               8
#define DHD_POST_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_OFFSET                                                144
#define DHD_POST_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_WORD_OFFSET                                           36
#define DHD_POST_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_F_OFFSET_MOD16                                        8
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_F_OFFSET                                                16
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_F_WIDTH                                                 8
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_OFFSET                                                  145
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_WORD_OFFSET                                             36
#define DHD_POST_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_F_OFFSET_MOD16                                          0
/* <<<RDD_DHD_POST_COMMON_RADIO_ENTRY */


/* >>>RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY */
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_F_OFFSET                                     0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_F_WIDTH                                      32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_COMPLETE_COMMON_RADIO_ENTRY_OFFSET                                   0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_OFFSET                                       0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_LOW_WORD_OFFSET                                  0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_F_OFFSET                                    0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_F_WIDTH                                     32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_OFFSET                                      4
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_BASE_PTR_HIGH_WORD_OFFSET                                 1
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_F_OFFSET                                   0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_F_WIDTH                                    32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_OFFSET                                     8
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_LOW_WORD_OFFSET                                2
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_F_OFFSET                                  0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_F_WIDTH                                   32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_OFFSET                                    12
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_RD_IDX_PTR_HIGH_WORD_OFFSET                               3
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_F_OFFSET                                   0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_F_WIDTH                                    32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_OFFSET                                     16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_LOW_WORD_OFFSET                                4
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_F_OFFSET                                  0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_F_WIDTH                                   32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_OFFSET                                    20
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_FR_WR_IDX_PTR_HIGH_WORD_OFFSET                               5
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_F_OFFSET                                     0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_F_WIDTH                                      32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_OFFSET                                       24
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_LOW_WORD_OFFSET                                  6
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_F_OFFSET                                    0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_F_WIDTH                                     32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_OFFSET                                      28
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_BASE_PTR_HIGH_WORD_OFFSET                                 7
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_F_OFFSET                                   0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_F_WIDTH                                    32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_OFFSET                                     32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_LOW_WORD_OFFSET                                8
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_F_OFFSET                                  0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_F_WIDTH                                   32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_OFFSET                                    36
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_RD_IDX_PTR_HIGH_WORD_OFFSET                               9
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_F_OFFSET                                   0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_F_WIDTH                                    32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_OFFSET                                     40
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_LOW_WORD_OFFSET                                10
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_F_OFFSET                                  0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_F_WIDTH                                   32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_OFFSET                                    44
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_FR_WR_IDX_PTR_HIGH_WORD_OFFSET                               11
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_F_OFFSET                                         0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_F_WIDTH                                          32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_OFFSET                                           48
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_LOW_WORD_OFFSET                                      12
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_F_OFFSET                                        0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_F_WIDTH                                         32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_OFFSET                                          52
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_BASE_PTR_HIGH_WORD_OFFSET                                     13
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_F_OFFSET                                       0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_F_WIDTH                                        32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_OFFSET                                         56
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_LOW_WORD_OFFSET                                    14
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_F_OFFSET                                      0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_F_WIDTH                                       32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_OFFSET                                        60
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_RD_IDX_PTR_HIGH_WORD_OFFSET                                   15
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_F_OFFSET                                       0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_F_WIDTH                                        32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_OFFSET                                         64
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_LOW_WORD_OFFSET                                    16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_F_OFFSET                                      0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_F_WIDTH                                       32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_OFFSET                                        68
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_FR_WR_IDX_PTR_HIGH_WORD_OFFSET                                   17
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_F_OFFSET                                                0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_F_WIDTH                                                 32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_OFFSET                                                  72
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_LOW_WORD_OFFSET                                             18
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_F_OFFSET                                               0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_F_WIDTH                                                32
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_OFFSET                                                 76
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_DHD_DOORBELL_HIGH_WORD_OFFSET                                            19
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_F_OFFSET                                              16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_F_WIDTH                                               16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_OFFSET                                                80
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_RD_IDX_WORD_OFFSET                                           20
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_F_OFFSET                                              0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_F_WIDTH                                               16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_OFFSET                                                82
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_WORD_OFFSET                                           20
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_RSRV_F_OFFSET                                         16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_RSRV_F_WIDTH                                          16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_RSRV_OFFSET                                           84
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_COMPLETE_WR_IDX_RSRV_WORD_OFFSET                                      21
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_F_OFFSET                                              0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_F_WIDTH                                               16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_OFFSET                                                86
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_RD_IDX_WORD_OFFSET                                           21
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_F_OFFSET                                              16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_F_WIDTH                                               16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_OFFSET                                                88
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_WORD_OFFSET                                           22
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_RSRV_F_OFFSET                                         0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_RSRV_F_WIDTH                                          16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_RSRV_OFFSET                                           90
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_TX_COMPLETE_WR_IDX_RSRV_WORD_OFFSET                                      22
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_F_OFFSET                                                  16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_F_WIDTH                                                   16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_OFFSET                                                    92
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_WORD_OFFSET                                               23
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_RSRV_F_OFFSET                                             0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_RSRV_F_WIDTH                                              16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_RSRV_OFFSET                                               94
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_RX_POST_WR_IDX_RSRV_WORD_OFFSET                                          23
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET                                                29
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_WIDTH                                                 3
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_OFFSET                                                  96
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_WORD_OFFSET                                             24
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET_MOD8                                           5
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FLOW_RING_FORMAT_F_OFFSET_MOD16                                          13
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET                                                     28
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_WIDTH                                                      1
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_OFFSET                                                       96
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_WORD_OFFSET                                                  24
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET_MOD8                                                4
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_ACTIVE_F_OFFSET_MOD16                                               12
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_F_OFFSET                                                16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_F_WIDTH                                                 8
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_OFFSET                                                  97
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_WORD_OFFSET                                             24
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_GROUP_SHIFT_F_OFFSET_MOD16                                          0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_F_OFFSET                                              0
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_F_WIDTH                                               16
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_OFFSET                                                98
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_IDMA_LAST_GROUP_FR_WORD_OFFSET                                           24
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_F_OFFSET                                              24
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_F_WIDTH                                               8
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_OFFSET                                                100
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_WORD_OFFSET                                           25
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_FR_PTRS_SIZE_SHIFT_F_OFFSET_MOD16                                        8
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_OFFSET                                                        104
#define DHD_COMPLETE_COMMON_RADIO_ENTRY_SCRATCHPAD_WORD_OFFSET                                                   26
/* <<<RDD_DHD_COMPLETE_COMMON_RADIO_ENTRY */


/* >>>RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR */
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_LOW_F_OFFSET                                              0
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_LOW_F_WIDTH                                               32
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_OFFSET                             0
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_LOW_OFFSET                                                0
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_LOW_WORD_OFFSET                                           0
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_HIGH_F_OFFSET                                             0
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_HIGH_F_WIDTH                                              32
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_HIGH_OFFSET                                               4
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_HIGH_WORD_OFFSET                                          1
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_SIZE_AND_FLAGS_F_OFFSET                                                  0
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_SIZE_AND_FLAGS_F_WIDTH                                                   32
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_SIZE_AND_FLAGS_OFFSET                                                    8
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_SIZE_AND_FLAGS_WORD_OFFSET                                               2
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_FIRST_INDEX_F_OFFSET                                              16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_FIRST_INDEX_F_WIDTH                                               16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_FIRST_INDEX_OFFSET                                                12
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_FIRST_INDEX_WORD_OFFSET                                           3
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_LAST_INDEX_F_OFFSET                                               0
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_LAST_INDEX_F_WIDTH                                                16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_LAST_INDEX_OFFSET                                                 14
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_LAST_INDEX_WORD_OFFSET                                            3
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_NUM_ENTRIES_F_OFFSET                                              16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_NUM_ENTRIES_F_WIDTH                                               16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_NUM_ENTRIES_OFFSET                                                16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_NUM_ENTRIES_WORD_OFFSET                                           4
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_PHY_SIZE_F_OFFSET                                                        0
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_PHY_SIZE_F_WIDTH                                                         16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_PHY_SIZE_OFFSET                                                          18
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_PHY_SIZE_WORD_OFFSET                                                     4
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_WINDOW_TS_F_OFFSET                                                       16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_WINDOW_TS_F_WIDTH                                                        16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_WINDOW_TS_OFFSET                                                         20
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_WINDOW_TS_WORD_OFFSET                                                    5
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DROP_INTERVAL_F_OFFSET                                                   0
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DROP_INTERVAL_F_WIDTH                                                    16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DROP_INTERVAL_OFFSET                                                     22
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DROP_INTERVAL_WORD_OFFSET                                                5
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_FLAGS_F_OFFSET                                             16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_FLAGS_F_WIDTH                                              16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_FLAGS_OFFSET                                               24
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_FLAGS_WORD_OFFSET                                          6
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROP_COUNTER_F_OFFSET                                              0
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROP_COUNTER_F_WIDTH                                               16
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROP_COUNTER_OFFSET                                                26
#define DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROP_COUNTER_WORD_OFFSET                                           6

/* >>>DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT */
typedef union
{
    uint32_t word_32[7];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	flow_ring_base_low    	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	flow_ring_base_high   	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	size_and_flags        	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	backup_first_index    	;
        uint16_t	backup_last_index     	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	backup_num_entries    	;
        uint16_t	phy_size              	;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	window_ts             	;
        uint16_t	drop_interval         	;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	codel_control_flags   	; /* This is a field union */
        uint16_t	codel_drop_counter    	;
		};
		/* Sub Union 1 */
		struct{
        uint32_t	codel_dropped_recently          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_flags union */
        uint32_t	codel_dropping                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_flags union */
        uint32_t	codel_constant_drop             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_flags union */
        uint32_t	reserved                        	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_flags union */
        uint16_t	reservedSU1_codel_drop_counter  	;
		};
		/* Sub Union 2 */
		struct{
        uint16_t	codel_control                   	; /* Member of codel_control_flags union */
        uint16_t	reservedSU2_codel_drop_counter  	;
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	flow_ring_base_low    	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	flow_ring_base_high   	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	size_and_flags        	;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	backup_last_index     	;
        uint16_t	backup_first_index    	;
		};
	};
	/* Union WORD 4 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	phy_size              	;
        uint16_t	backup_num_entries    	;
		};
	};
	/* Union WORD 5 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	drop_interval         	;
        uint16_t	window_ts             	;
		};
	};
	/* Union WORD 6 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	codel_drop_counter    	;
        uint16_t	codel_control_flags   	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint16_t	reservedSU1_codel_drop_counter  	;
        uint32_t	reserved                        	:13	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_flags union */
        uint32_t	codel_constant_drop             	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_flags union */
        uint32_t	codel_dropping                  	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_flags union */
        uint32_t	codel_dropped_recently          	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of codel_control_flags union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	reservedSU2_codel_drop_counter  	;
        uint16_t	codel_control                   	; /* Member of codel_control_flags union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(4))) DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT;

#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_LOW_READ_G(r, g, idx)              GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT), (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_LOW_WRITE_G(v, g, idx)             GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT), (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_LOW_READ(r, p)                     MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_LOW_WRITE(v, p)                    MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_LOW_L_READ( wv )                   FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_LOW_L_WRITE( v, wv )               FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_HIGH_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 4, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_HIGH_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 4, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_HIGH_READ(r, p)                    MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_HIGH_WRITE(v, p)                   MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_HIGH_L_READ( wv )                  FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_FLOW_RING_BASE_HIGH_L_WRITE( v, wv )              FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_SIZE_AND_FLAGS_READ_G(r, g, idx)                  GROUP_MREAD_32((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 8, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_SIZE_AND_FLAGS_WRITE_G(v, g, idx)                 GROUP_MWRITE_32((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 8, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_SIZE_AND_FLAGS_READ(r, p)                         MREAD_32((uint8_t *)(p) + 8, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_SIZE_AND_FLAGS_WRITE(v, p)                        MWRITE_32((uint8_t *)(p) + 8, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_SIZE_AND_FLAGS_L_READ( wv )                       FIELD_GET( wv, 0, 32 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_SIZE_AND_FLAGS_L_WRITE( v, wv )                   FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_FIRST_INDEX_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 12, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_FIRST_INDEX_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 12, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_FIRST_INDEX_READ(r, p)                     MREAD_16((uint8_t *)(p) + 12, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_FIRST_INDEX_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 12, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_FIRST_INDEX_L_READ( wv )                   FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_FIRST_INDEX_L_WRITE( v, wv )               FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_LAST_INDEX_READ_G(r, g, idx)               GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 14, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_LAST_INDEX_WRITE_G(v, g, idx)              GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 14, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_LAST_INDEX_READ(r, p)                      MREAD_16((uint8_t *)(p) + 14, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_LAST_INDEX_WRITE(v, p)                     MWRITE_16((uint8_t *)(p) + 14, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_LAST_INDEX_L_READ( wv )                    FIELD_GET( wv, 0, 16 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_LAST_INDEX_L_WRITE( v, wv )                FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_NUM_ENTRIES_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 16, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_NUM_ENTRIES_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 16, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_NUM_ENTRIES_READ(r, p)                     MREAD_16((uint8_t *)(p) + 16, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_NUM_ENTRIES_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 16, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_NUM_ENTRIES_L_READ( wv )                   FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_BACKUP_NUM_ENTRIES_L_WRITE( v, wv )               FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_PHY_SIZE_READ_G(r, g, idx)                        GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 18, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_PHY_SIZE_WRITE_G(v, g, idx)                       GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 18, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_PHY_SIZE_READ(r, p)                               MREAD_16((uint8_t *)(p) + 18, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_PHY_SIZE_WRITE(v, p)                              MWRITE_16((uint8_t *)(p) + 18, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_PHY_SIZE_L_READ( wv )                             FIELD_GET( wv, 0, 16 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_PHY_SIZE_L_WRITE( v, wv )                         FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_WINDOW_TS_READ_G(r, g, idx)                       GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 20, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_WINDOW_TS_WRITE_G(v, g, idx)                      GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 20, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_WINDOW_TS_READ(r, p)                              MREAD_16((uint8_t *)(p) + 20, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_WINDOW_TS_WRITE(v, p)                             MWRITE_16((uint8_t *)(p) + 20, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_WINDOW_TS_L_READ( wv )                            FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_WINDOW_TS_L_WRITE( v, wv )                        FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DROP_INTERVAL_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 22, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DROP_INTERVAL_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 22, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DROP_INTERVAL_READ(r, p)                          MREAD_16((uint8_t *)(p) + 22, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DROP_INTERVAL_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 22, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DROP_INTERVAL_L_READ( wv )                        FIELD_GET( wv, 0, 16 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_DROP_INTERVAL_L_WRITE( v, wv )                    FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_FLAGS_READ_G(r, g, idx)             GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 24, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_FLAGS_WRITE_G(v, g, idx)            GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 24, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_FLAGS_READ(r, p)                    MREAD_16((uint8_t *)(p) + 24, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_FLAGS_WRITE(v, p)                   MWRITE_16((uint8_t *)(p) + 24, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_FLAGS_L_READ( wv )                  FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_FLAGS_L_WRITE( v, wv )              FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPED_RECENTLY_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 24, 7, 1, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPED_RECENTLY_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 24, 7, 1, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPED_RECENTLY_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p) + 24, 7, 1, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPED_RECENTLY_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p) + 24, 7, 1, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPED_RECENTLY_L_READ( wv )               FIELD_GET( wv, 31, 1 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPED_RECENTLY_L_WRITE( v, wv )           FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPING_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 24, 6, 1, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPING_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 24, 6, 1, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPING_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 24, 6, 1, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPING_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 24, 6, 1, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPING_L_READ( wv )                       FIELD_GET( wv, 30, 1 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROPPING_L_WRITE( v, wv )                   FIELD_SET( v, 30, 1, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONSTANT_DROP_READ_G(r, g, idx)             GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 24, 5, 1, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONSTANT_DROP_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 24, 5, 1, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONSTANT_DROP_READ(r, p)                    FIELD_MREAD_8((uint8_t *)(p) + 24, 5, 1, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONSTANT_DROP_WRITE(v, p)                   FIELD_MWRITE_8((uint8_t *)(p) + 24, 5, 1, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONSTANT_DROP_L_READ( wv )                  FIELD_GET( wv, 29, 1 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONSTANT_DROP_L_WRITE( v, wv )              FIELD_SET( v, 29, 1, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_READ_G(r, g, idx)                   GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 24, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_WRITE_G(v, g, idx)                  GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 24, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_READ(r, p)                          MREAD_16((uint8_t *)(p) + 24, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_WRITE(v, p)                         MWRITE_16((uint8_t *)(p) + 24, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_L_READ( wv )                        FIELD_GET( wv, 16, 16 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_CONTROL_L_WRITE( v, wv )                    FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROP_COUNTER_READ_G(r, g, idx)              GROUP_MREAD_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 26, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROP_COUNTER_WRITE_G(v, g, idx)             GROUP_MWRITE_16((g), (idx)*sizeof(DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT) + 26, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROP_COUNTER_READ(r, p)                     MREAD_16((uint8_t *)(p) + 26, (r))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROP_COUNTER_WRITE(v, p)                    MWRITE_16((uint8_t *)(p) + 26, (v))
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROP_COUNTER_L_READ( wv )                   FIELD_GET( wv, 0, 16 )
#define RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_CODEL_DROP_COUNTER_L_WRITE( v, wv )               FIELD_SET( v, 0, 16, wv )
/* <<<DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR_STRUCT */

/* <<<RDD_DHD_TX_POST_FLOW_RING_MGMT_DESCRIPTOR */


/* >>>RDD_DHD_COMPLETE_RING_ENTRY */
#define DHD_COMPLETE_RING_ENTRY_RING_VALUE_F_OFFSET                                                      0
#define DHD_COMPLETE_RING_ENTRY_RING_VALUE_F_WIDTH                                                       32
#define DHD_COMPLETE_RING_ENTRY_RING_VALUE_OFFSET                                                        0
#define DHD_COMPLETE_RING_ENTRY_RING_VALUE_WORD_OFFSET                                                   0
#define DHD_COMPLETE_RING_ENTRY_STATUS_F_OFFSET                                                          16
#define DHD_COMPLETE_RING_ENTRY_STATUS_F_WIDTH                                                           16
#define DHD_COMPLETE_RING_ENTRY_STATUS_OFFSET                                                            4
#define DHD_COMPLETE_RING_ENTRY_STATUS_WORD_OFFSET                                                       1
#define DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_F_OFFSET                                                0
#define DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_F_WIDTH                                                 16
#define DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_OFFSET                                                  6
#define DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_WORD_OFFSET                                             1

/* >>>DHD_COMPLETE_RING_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[2];
    uint64_t dword_64[1];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ring_value   	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	request_id             	; /* Member of ring_value union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	req_reserved0          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
        uint32_t	buffer_type            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
        uint32_t	req_reserved1          	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	status       	;
        uint16_t	fr_id_drop_value	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint16_t	reservedSU1_status     	;
        uint16_t	flow_ring_id           	; /* Member of fr_id_drop_value union */
		};
		/* Sub Union 2 */
		struct{
        uint16_t	reservedSU2_status     	;
        uint8_t	fr_reserved0           	; /* Member of fr_id_drop_value union */
        uint32_t	drop                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
        uint32_t	fr_reserved1           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	ring_value   	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	request_id             	; /* Member of ring_value union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	req_reserved1          	:24	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
        uint32_t	buffer_type            	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
        uint32_t	req_reserved0          	:6	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of ring_value union */
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	fr_id_drop_value	; /* This is a field union */
        uint16_t	status       	;
		};
		/* Sub Union 1 */
		struct{
        uint16_t	flow_ring_id           	; /* Member of fr_id_drop_value union */
        uint16_t	reservedSU1_status     	;
		};
		/* Sub Union 2 */
		struct{
        uint32_t	fr_reserved1           	:7	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
        uint32_t	drop                   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fr_id_drop_value union */
        uint8_t	fr_reserved0           	; /* Member of fr_id_drop_value union */
        uint16_t	reservedSU2_status     	;
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_COMPLETE_RING_ENTRY_STRUCT;

#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT), (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT), (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_READ(r, p)                    MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_WRITE(v, p)                   MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_L_READ( wv )                  FIELD_GET( wv, 0, 32 )
#define RDD_DHD_COMPLETE_RING_ENTRY_RING_VALUE_L_WRITE( v, wv )              FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_READ_G(r, g, idx)             GROUP_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT), (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_WRITE_G(v, g, idx)            GROUP_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT), (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_READ(r, p)                    MREAD_32((uint8_t *)(p), (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_WRITE(v, p)                   MWRITE_32((uint8_t *)(p), (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_L_READ( wv )                  FIELD_GET( wv, 0, 32 )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQUEST_ID_L_WRITE( v, wv )              FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_READ_G(r, g, idx)          GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT), 2, 6, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT), 2, 6, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_READ(r, p)                 FIELD_MREAD_8((uint8_t *)(p), 2, 6, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_WRITE(v, p)                FIELD_MWRITE_8((uint8_t *)(p), 2, 6, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_L_READ( wv )               FIELD_GET( wv, 26, 6 )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED0_L_WRITE( v, wv )           FIELD_SET( v, 26, 6, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT), 0, 2, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT), 0, 2, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p), 0, 2, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p), 0, 2, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_L_READ( wv )                 FIELD_GET( wv, 24, 2 )
#define RDD_DHD_COMPLETE_RING_ENTRY_BUFFER_TYPE_L_WRITE( v, wv )             FIELD_SET( v, 24, 2, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_READ_G(r, g, idx)          GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 0, 0, 24, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_WRITE_G(v, g, idx)         GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 0, 0, 24, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_READ(r, p)                 FIELD_MREAD_32((uint8_t *)(p) + 0, 0, 24, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_WRITE(v, p)                FIELD_MWRITE_32((uint8_t *)(p) + 0, 0, 24, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_L_READ( wv )               FIELD_GET( wv, 0, 24 )
#define RDD_DHD_COMPLETE_RING_ENTRY_REQ_RESERVED1_L_WRITE( v, wv )           FIELD_SET( v, 0, 24, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_READ_G(r, g, idx)                 GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 4, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_WRITE_G(v, g, idx)                GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 4, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_READ(r, p)                        MREAD_16((uint8_t *)(p) + 4, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_WRITE(v, p)                       MWRITE_16((uint8_t *)(p) + 4, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_L_READ( wv )                      FIELD_GET( wv, 16, 16 )
#define RDD_DHD_COMPLETE_RING_ENTRY_STATUS_L_WRITE( v, wv )                  FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_READ_G(r, g, idx)       GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 6, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_WRITE_G(v, g, idx)      GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 6, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_READ(r, p)              MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_WRITE(v, p)             MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_L_READ( wv )            FIELD_GET( wv, 0, 16 )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_ID_DROP_VALUE_L_WRITE( v, wv )        FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_READ_G(r, g, idx)           GROUP_MREAD_16((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 6, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_WRITE_G(v, g, idx)          GROUP_MWRITE_16((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 6, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_READ(r, p)                  MREAD_16((uint8_t *)(p) + 6, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_WRITE(v, p)                 MWRITE_16((uint8_t *)(p) + 6, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_L_READ( wv )                FIELD_GET( wv, 0, 16 )
#define RDD_DHD_COMPLETE_RING_ENTRY_FLOW_RING_ID_L_WRITE( v, wv )            FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_READ_G(r, g, idx)           GROUP_MREAD_8((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 6, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_WRITE_G(v, g, idx)          GROUP_MWRITE_8((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 6, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_READ(r, p)                  MREAD_8((uint8_t *)(p) + 6, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_WRITE(v, p)                 MWRITE_8((uint8_t *)(p) + 6, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_L_READ( wv )                FIELD_GET( wv, 8, 8 )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED0_L_WRITE( v, wv )            FIELD_SET( v, 8, 8, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 7, 7, 1, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 7, 7, 1, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 7, 7, 1, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 7, 7, 1, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_L_READ( wv )                        FIELD_GET( wv, 7, 1 )
#define RDD_DHD_COMPLETE_RING_ENTRY_DROP_L_WRITE( v, wv )                    FIELD_SET( v, 7, 1, wv )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_READ_G(r, g, idx)           GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 7, 0, 7, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_WRITE_G(v, g, idx)          GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_COMPLETE_RING_ENTRY_STRUCT) + 7, 0, 7, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_READ(r, p)                  FIELD_MREAD_8((uint8_t *)(p) + 7, 0, 7, (r))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_WRITE(v, p)                 FIELD_MWRITE_8((uint8_t *)(p) + 7, 0, 7, (v))
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_L_READ( wv )                FIELD_GET( wv, 0, 7 )
#define RDD_DHD_COMPLETE_RING_ENTRY_FR_RESERVED1_L_WRITE( v, wv )            FIELD_SET( v, 0, 7, wv )
/* <<<DHD_COMPLETE_RING_ENTRY_STRUCT */

/* <<<RDD_DHD_COMPLETE_RING_ENTRY */


/* >>>RDD_DHD_BACKUP_ENTRY */
#define DHD_BACKUP_ENTRY_NEXT_IDX_F_OFFSET                                                        16
#define DHD_BACKUP_ENTRY_NEXT_IDX_F_WIDTH                                                         16
#define DHD_BACKUP_ENTRY_DHD_BACKUP_ENTRY_OFFSET                                                  0
#define DHD_BACKUP_ENTRY_NEXT_IDX_OFFSET                                                          0
#define DHD_BACKUP_ENTRY_NEXT_IDX_WORD_OFFSET                                                     0
#define DHD_BACKUP_ENTRY_PACKET_TS_F_OFFSET                                                       0
#define DHD_BACKUP_ENTRY_PACKET_TS_F_WIDTH                                                        16
#define DHD_BACKUP_ENTRY_PACKET_TS_OFFSET                                                         2
#define DHD_BACKUP_ENTRY_PACKET_TS_WORD_OFFSET                                                    0
#define DHD_BACKUP_ENTRY_REQUEST_ID_F_OFFSET                                                      0
#define DHD_BACKUP_ENTRY_REQUEST_ID_F_WIDTH                                                       32
#define DHD_BACKUP_ENTRY_REQUEST_ID_OFFSET                                                        4
#define DHD_BACKUP_ENTRY_REQUEST_ID_WORD_OFFSET                                                   1
#define DHD_BACKUP_ENTRY_PACKET_VALID_F_OFFSET                                                    31
#define DHD_BACKUP_ENTRY_PACKET_VALID_F_WIDTH                                                     1
#define DHD_BACKUP_ENTRY_PACKET_VALID_OFFSET                                                      8
#define DHD_BACKUP_ENTRY_PACKET_VALID_WORD_OFFSET                                                 2
#define DHD_BACKUP_ENTRY_PACKET_VALID_F_OFFSET_MOD8                                               7
#define DHD_BACKUP_ENTRY_PACKET_VALID_F_OFFSET_MOD16                                              15
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_F_OFFSET                                                 30
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_F_WIDTH                                                  1
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_OFFSET                                                   8
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_WORD_OFFSET                                              2
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_F_OFFSET_MOD8                                            6
#define DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_F_OFFSET_MOD16                                           14
#define DHD_BACKUP_ENTRY_PACKET_DATA_LEN_F_OFFSET                                                 16
#define DHD_BACKUP_ENTRY_PACKET_DATA_LEN_F_WIDTH                                                  14
#define DHD_BACKUP_ENTRY_PACKET_DATA_LEN_OFFSET                                                   8
#define DHD_BACKUP_ENTRY_PACKET_DATA_LEN_WORD_OFFSET                                              2
#define DHD_BACKUP_ENTRY_PACKET_DATA_LEN_F_OFFSET_MOD16                                           0
#define DHD_BACKUP_ENTRY_PACKET_PRIO_F_OFFSET                                                     13
#define DHD_BACKUP_ENTRY_PACKET_PRIO_F_WIDTH                                                      3
#define DHD_BACKUP_ENTRY_PACKET_PRIO_OFFSET                                                       10
#define DHD_BACKUP_ENTRY_PACKET_PRIO_WORD_OFFSET                                                  2
#define DHD_BACKUP_ENTRY_PACKET_PRIO_F_OFFSET_MOD8                                                5
#define DHD_BACKUP_ENTRY_PACKET_PRIO_F_OFFSET_MOD16                                               13
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET                                              8
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_F_WIDTH                                               2
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_OFFSET                                                10
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_WORD_OFFSET                                           2
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET_MOD8                                         0
#define DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_F_OFFSET_MOD16                                        8
#define DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_F_OFFSET                                                0
#define DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_F_WIDTH                                                 8
#define DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_OFFSET                                                  11
#define DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_WORD_OFFSET                                             2
#define DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_F_OFFSET_MOD16                                          0
#define DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_F_OFFSET                                                 0
#define DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_F_WIDTH                                                  32
#define DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_OFFSET                                                   12
#define DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_WORD_OFFSET                                              3

/* >>>DHD_BACKUP_ENTRY_STRUCT */
typedef union
{
    uint32_t word_32[4];
    uint64_t dword_64[2];
    struct {
#ifndef FIRMWARE_LITTLE_ENDIAN
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	next_idx            	;
        uint16_t	packet_ts           	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	request_id          	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	packet_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_abs_addr     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_data_len     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_prio         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_l4_protocol  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	rsv_address_high    	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	reservedSU1_packet_valid      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_abs_addr   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_data_len   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_prio       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved3         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_l4_protocol	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	reserved4                     	; /* Member of rsv_address_high union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	reservedSU2_packet_valid      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_abs_addr   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_data_len   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_prio       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved3         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_l4_protocol	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint8_t	packet_data_ptr_high          	; /* Member of rsv_address_high union */
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	fpm_address_low     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	packet_fpm_pool               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_packet_sop             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	reserved5                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_bn0                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	packet_data_ptr_low           	; /* Member of fpm_address_low union */
		};
	};
#else
	/* Union WORD 0 */
	union{
		/* Sub Union 0 */
		struct{
        uint16_t	packet_ts           	;
        uint16_t	next_idx            	;
		};
	};
	/* Union WORD 1 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	request_id          	;
		};
	};
	/* Union WORD 2 */
	union{
		/* Sub Union 0 */
		struct{
        uint8_t	rsv_address_high    	; /* This is a field union */
        uint32_t	packet_l4_protocol  	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reserved3           	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_prio         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_data_len     	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_abs_addr     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	packet_valid        	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 1 */
		struct{
        uint8_t	reserved4                     	; /* Member of rsv_address_high union */
        uint32_t	reservedSU1_packet_l4_protocol	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_reserved3         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_prio       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_data_len   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_abs_addr   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU1_packet_valid      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
		/* Sub Union 2 */
		struct{
        uint8_t	packet_data_ptr_high          	; /* Member of rsv_address_high union */
        uint32_t	reservedSU2_packet_l4_protocol	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_reserved3         	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_prio       	:3	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_data_len   	:14	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_abs_addr   	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
        uint32_t	reservedSU2_packet_valid      	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__;
		};
	};
	/* Union WORD 3 */
	union{
		/* Sub Union 0 */
		struct{
        uint32_t	fpm_address_low     	; /* This is a field union */
		};
		/* Sub Union 1 */
		struct{
        uint32_t	packet_bn0                    	:18	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	reserved5                     	:1	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_packet_sop             	:11	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
        uint32_t	packet_fpm_pool               	:2	__PACKING_ATTRIBUTE_FIELD_LEVEL__; /* Member of fpm_address_low union */
		};
		/* Sub Union 2 */
		struct{
        uint32_t	packet_data_ptr_low           	; /* Member of fpm_address_low union */
		};
	};
#endif
    } __PACKING_ATTRIBUTE_STRUCT_END__ ;
} __attribute__((aligned(8))) DHD_BACKUP_ENTRY_STRUCT;

#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_READ_G(r, g, idx)                      GROUP_MREAD_16((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT), (r))
#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_WRITE_G(v, g, idx)                     GROUP_MWRITE_16((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT), (v))
#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_READ(r, p)                             MREAD_16((uint8_t *)(p), (r))
#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_WRITE(v, p)                            MWRITE_16((uint8_t *)(p), (v))
#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_L_READ( wv )                           FIELD_GET( wv, 16, 16 )
#define RDD_DHD_BACKUP_ENTRY_NEXT_IDX_L_WRITE( v, wv )                       FIELD_SET( v, 16, 16, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_TS_READ_G(r, g, idx)                     GROUP_MREAD_16((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 2, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_TS_WRITE_G(v, g, idx)                    GROUP_MWRITE_16((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 2, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_TS_READ(r, p)                            MREAD_16((uint8_t *)(p) + 2, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_TS_WRITE(v, p)                           MWRITE_16((uint8_t *)(p) + 2, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_TS_L_READ( wv )                          FIELD_GET( wv, 0, 16 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_TS_L_WRITE( v, wv )                      FIELD_SET( v, 0, 16, wv )
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_READ_G(r, g, idx)                    GROUP_MREAD_32((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 4, (r))
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_WRITE_G(v, g, idx)                   GROUP_MWRITE_32((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 4, (v))
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_READ(r, p)                           MREAD_32((uint8_t *)(p) + 4, (r))
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_WRITE(v, p)                          MWRITE_32((uint8_t *)(p) + 4, (v))
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_L_READ( wv )                         FIELD_GET( wv, 0, 32 )
#define RDD_DHD_BACKUP_ENTRY_REQUEST_ID_L_WRITE( v, wv )                     FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_READ_G(r, g, idx)                  GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 8, 7, 1, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_WRITE_G(v, g, idx)                 GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 8, 7, 1, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_READ(r, p)                         FIELD_MREAD_8((uint8_t *)(p) + 8, 7, 1, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_WRITE(v, p)                        FIELD_MWRITE_8((uint8_t *)(p) + 8, 7, 1, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_L_READ( wv )                       FIELD_GET( wv, 31, 1 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_VALID_L_WRITE( v, wv )                   FIELD_SET( v, 31, 1, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 8, 6, 1, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 8, 6, 1, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 8, 6, 1, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 8, 6, 1, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_L_READ( wv )                    FIELD_GET( wv, 30, 1 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_ABS_ADDR_L_WRITE( v, wv )                FIELD_SET( v, 30, 1, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_READ_G(r, g, idx)               GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 8, 0, 14, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 8, 0, 14, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_READ(r, p)                      FIELD_MREAD_16((uint8_t *)(p) + 8, 0, 14, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_WRITE(v, p)                     FIELD_MWRITE_16((uint8_t *)(p) + 8, 0, 14, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_L_READ( wv )                    FIELD_GET( wv, 16, 14 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_LEN_L_WRITE( v, wv )                FIELD_SET( v, 16, 14, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_READ_G(r, g, idx)                   GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 10, 5, 3, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_WRITE_G(v, g, idx)                  GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 10, 5, 3, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_READ(r, p)                          FIELD_MREAD_8((uint8_t *)(p) + 10, 5, 3, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_WRITE(v, p)                         FIELD_MWRITE_8((uint8_t *)(p) + 10, 5, 3, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_L_READ( wv )                        FIELD_GET( wv, 13, 3 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_PRIO_L_WRITE( v, wv )                    FIELD_SET( v, 13, 3, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_READ_G(r, g, idx)            GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 10, 0, 2, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_WRITE_G(v, g, idx)           GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 10, 0, 2, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_READ(r, p)                   FIELD_MREAD_8((uint8_t *)(p) + 10, 0, 2, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_WRITE(v, p)                  FIELD_MWRITE_8((uint8_t *)(p) + 10, 0, 2, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_L_READ( wv )                 FIELD_GET( wv, 8, 2 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_L4_PROTOCOL_L_WRITE( v, wv )             FIELD_SET( v, 8, 2, wv )
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_READ_G(r, g, idx)              GROUP_MREAD_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 11, (r))
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_WRITE_G(v, g, idx)             GROUP_MWRITE_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 11, (v))
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_READ(r, p)                     MREAD_8((uint8_t *)(p) + 11, (r))
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_WRITE(v, p)                    MWRITE_8((uint8_t *)(p) + 11, (v))
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_L_READ( wv )                   FIELD_GET( wv, 0, 8 )
#define RDD_DHD_BACKUP_ENTRY_RSV_ADDRESS_HIGH_L_WRITE( v, wv )               FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_READ_G(r, g, idx)          GROUP_MREAD_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 11, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_WRITE_G(v, g, idx)         GROUP_MWRITE_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 11, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_READ(r, p)                 MREAD_8((uint8_t *)(p) + 11, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_WRITE(v, p)                MWRITE_8((uint8_t *)(p) + 11, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_L_READ( wv )               FIELD_GET( wv, 0, 8 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_HIGH_L_WRITE( v, wv )           FIELD_SET( v, 0, 8, wv )
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_READ_G(r, g, idx)               GROUP_MREAD_32((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 12, (r))
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_WRITE_G(v, g, idx)              GROUP_MWRITE_32((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 12, (v))
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_READ(r, p)                      MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_WRITE(v, p)                     MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_L_READ( wv )                    FIELD_GET( wv, 0, 32 )
#define RDD_DHD_BACKUP_ENTRY_FPM_ADDRESS_LOW_L_WRITE( v, wv )                FIELD_SET( v, 0, 32, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_READ_G(r, g, idx)               GROUP_FIELD_MREAD_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 12, 6, 2, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_WRITE_G(v, g, idx)              GROUP_FIELD_MWRITE_8((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 12, 6, 2, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_READ(r, p)                      FIELD_MREAD_8((uint8_t *)(p) + 12, 6, 2, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_WRITE(v, p)                     FIELD_MWRITE_8((uint8_t *)(p) + 12, 6, 2, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_L_READ( wv )                    FIELD_GET( wv, 30, 2 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_FPM_POOL_L_WRITE( v, wv )                FIELD_SET( v, 30, 2, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_READ_G(r, g, idx)             GROUP_FIELD_MREAD_16((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 12, 3, 11, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_WRITE_G(v, g, idx)            GROUP_FIELD_MWRITE_16((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 12, 3, 11, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_READ(r, p)                    FIELD_MREAD_16((uint8_t *)(p) + 12, 3, 11, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_WRITE(v, p)                   FIELD_MWRITE_16((uint8_t *)(p) + 12, 3, 11, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_L_READ( wv )                  FIELD_GET( wv, 19, 11 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_PACKET_SOP_L_WRITE( v, wv )              FIELD_SET( v, 19, 11, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_READ_G(r, g, idx)                    GROUP_FIELD_MREAD_32((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 12, 0, 18, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_WRITE_G(v, g, idx)                   GROUP_FIELD_MWRITE_32((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 12, 0, 18, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_READ(r, p)                           FIELD_MREAD_32((uint8_t *)(p) + 12, 0, 18, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_WRITE(v, p)                          FIELD_MWRITE_32((uint8_t *)(p) + 12, 0, 18, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_L_READ( wv )                         FIELD_GET( wv, 0, 18 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_BN0_L_WRITE( v, wv )                     FIELD_SET( v, 0, 18, wv )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_READ_G(r, g, idx)           GROUP_MREAD_32((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 12, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_WRITE_G(v, g, idx)          GROUP_MWRITE_32((g), (idx)*sizeof(DHD_BACKUP_ENTRY_STRUCT) + 12, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_READ(r, p)                  MREAD_32((uint8_t *)(p) + 12, (r))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_WRITE(v, p)                 MWRITE_32((uint8_t *)(p) + 12, (v))
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_L_READ( wv )                FIELD_GET( wv, 0, 32 )
#define RDD_DHD_BACKUP_ENTRY_PACKET_DATA_PTR_LOW_L_WRITE( v, wv )            FIELD_SET( v, 0, 32, wv )
/* <<<DHD_BACKUP_ENTRY_STRUCT */

/* <<<RDD_DHD_BACKUP_ENTRY */


/* >>>RDD_DHD_BACKUP_IDX_CACHE_TABLE */
#define DHD_BACKUP_IDX_CACHE_TABLE_DHD_BACKUP_IDX_CACHE_TABLE_OFFSET                                        0
#define DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_OFFSET                                                           0
#define DHD_BACKUP_IDX_CACHE_TABLE_INDEXES_WORD_OFFSET                                                      0
/* <<<RDD_DHD_BACKUP_IDX_CACHE_TABLE */

#endif /* _RDD_DATA_STRUCTURES_AUTO_H_ */
